 thanks everyone for joining today to take a quick look at the agenda first we're going to talk a little bit about fraud the topic of today's presentation and who are today's fraudsters and we'll take a look at fraud detection from a data modelling perspective and then we'll discuss how to fight fraud rings with graphs and why graphs are such a useful tool for approaching fraud in today's day and age will specifically look a little bit more at credit card fraud one specific type of fraud we'll talk about how neo4j would fit into a typical architecture as part of a fraud detection system and then we'll run a quick demo before hopping over to some time for Q&A so who are today's fraudsters today's fraudsters don't just operate as as single individuals more and more we see that they're working together as part of a group often they'll use synthetic identities so they'll make up individual bits of identities to use you know as part of applications for loans or to use online when they're creating accounts they may also use stolen identities of course you know identity theft is a big issue that many people suffer from every year and we also now given how many different devices people have tablets phones laptops at work laptops at home and so forth you see a lot more hijacked hijacked devices right maybe someone's phone has been hacked or someone's computer has been hacked and then that can be used to commit fraud to to impersonate someone else so these are the types of activities that organizations are having to face when it comes to modern fraud when we say fraud we mean all sorts of different frauds right across the different industries so it can be it can be credit card fraud it could be a rogue merchant so you could end up with a merchant who who is placing fraudulent charges bringing up fraudulent transactions again we mentioned fraud rings so you know we're not just looking for individual anomalies or individual actors but but networks of people operating as a fraud ring there's there could be insurance fraud so this could be fraudulent claims in in terms of vehicle insurance you might get crashed for cash schemes where you have groups of individuals who are faking accidents or faking injuries as a way of [Music] committing fraud and and receiving funds ecommerce fraud of course so people defrauding online shops either with fraudulent accounts or fraudulent payments information things like that's and then of course there could be fraud that we don't even know about yet right fraud is a constantly evolving landscape new ways of committing fraud are being invented all the time and so you know it's it's a constant cat-and-mouse game between organizations and people looking to defraud them sometimes fraud can be simple or look simple sometimes it's very very complex it is a cat-and-mouse game and you always need to stay or try to stay one step ahead of the fraudsters who are also trying to stay one step ahead of you there may be few or many players and it could take place you know over digital channels or it could take place over traditional analog channels you know people using fraudulent credit cards and in shops or something like that so in terms of fraud detection from a data modeling perspective you know when you have a large collection of data may be in your relational database or your data warehouse you know just just the raw data that's coming in from your different channels often traditionally in in terms of fraud detection what you're looking for are anomalies so this is you know pretty straightforward transactional event based fraud detection you know you might say well I know that Joe lives in London he just uses his credit card down Tesco so why is there a charge from his credit card a minute later from Russia right that that would look very suspicious and you would flag that as an anomaly but what that doesn't really catch are patterns in your data right so groups working together you know shared identities you know patterns of behavior amongst individual data elements that might on their own look normal but as a pattern actually raised alarms right so what you want to be able to do is react to these patterns to be able to find them in your data and react and respond to them as quickly as possible right so real time being ideal and actually being able to move yourself from a position where you've detected fraud after the fact to being able to prevent fraud because you can do it in real time and you can stop fraudulent behavior or fraudulent transactions from even taking place and choosing the right underlying technology to enable you to do this is really important a traditional relational database or data warehouse or very siloed sort of data architecture with your data living all over the place isn't really going to give you the ability to make those connections and find patterns in your data what you really want is to be able to model your data as a graph so that you can find these patterns amongst your data and react to them in real-time and this is where I'd neo4j comes in so if we look at what a fraud ring might actually look like in terms of modeling if you have a few different accounts each of those accounts have some attributes so if we look at account holder one we know they have a credit card we know they have a bank account we know they have an unsecured loan account holder two we can see that they have a social security number another credit card and other bank accounts all of these things look normal in and of themselves right it's only when you can make additional connections between them we you can see that account holder one an account holder three share a social security number which really shouldn't be happening like you can't have two people with the same social security number in the u.s. you can start seeing patterns of shared information that will raise red flags that will give cause for concern and may indicate that you're seeing a fraud ring so how can you act on that how can you fight being fight these fraud rings using graphs so we'll start with a quote from Gartner so they said in the market guide for online fraud detection in 2015 don't consider traditional technology adequate to keep up with criminal trends so what they mean is they've got this five layered model for fraud prevention the first three elements of that model our traditional fraud detection methods what we mentioned before in terms of event based transactional type fraud detection so endpoint centric identifying users by the devices they use the PCs and the mobile phones and looking for odd behavior you know for those accounts among their endpoints the second is navigation centric so analysis of navigational behavior and Sussex act patterns so looking at I P addresses user IDs the steps that those user IDs take and what a typical path would be for navigation for for that type of user and number three is account centric so analysis of anomalies and behavior for user accounts or within a channel and and these are quite traditional they won't be going away they have stopped certain types of fraud but the fraudsters have had to evolve that to move past this they know this is what's happening now and they need more clever ways of executing fraud and what these traditional methods are largely unable to do is identify fraud fraud rings deal with fake IP addresses deal with hijack devices identify synthetic on stolen identities it's really the type of stuff that involves looking for patterns within your behavior within your your records and your data so this is a visual of that right you've got a range of normal behavior and and traditionally you would investigate these outliers these these things that look odd because they're so far outside of the normal pattern of behavior modern fraudsters hide their fraudulent behavior amongst normal behavior and if you're looking for outliers you won't find it in this sort of a scenario what you really need to be able to do or find patterns that represent fraudulent behavior hidden amongst what would otherwise be considered your normal behavior patterns and this is where layer four and five come in so layer four in the Gartner model is cross channel and that's correlating anomalies in behavior across channels and number five is entity linking so looking for relationships that might allow you to detect organized crime ring of fraudsters and collusion amongst different different entities different actors as part of fraud and this is where neo4j comes in so neo4j is the number one database for connected data it's an enterprise-grade native graph database that's designed from the ground up and completely architected around the relationships in your data allowing you to store and access your data and the relationships amongst your data at scale in in real time and this allows you to move from kind of a more traditional approach to data where everything is isolated and you're looking for anomalies you know up the value chain to generate real insights in real time based on the connections that you can find in your data so looking a little bit more closely specifically at credit card fraud as a way of getting a little bit deeper into a specific example that there's three broad types of credit card fraud that we can discuss so we already mentioned rogue merchants you know these could be merchants who are placing fraudulent charges there's ATM skimming or you could get this in a merchant as well where someone steals your credit card information and then either uses that themselves to make purchases or sells it on the internet to other criminals and then there are more sophisticated data breaches where you know someone maybe hacks into an e-commerce site or another organization that holds credit card information and then uses that credit card information fraudulently as well so if we look at the top of this diagram here we have a card holder you know they use a credit card that's issued by a particular card issuer they use that card to make a number of transactions a number of different merchants and everything is fine that's that's all normal behavior right but if there's been a data breach there's been you know the card has been skimmed now a fraudster can use that credit card and often what a fraudster will do will be make a few small transactions to sort of test the credit card so nothing that might raise any red flags but just some small charges two five ten dollars in order to verify that the card works before they do anything large with it right and then they could make a larger purchase you know that may or may not be picked up by by traditional fraud detection event based fraud detection and what we can do if we model this in the graph if we look at it from a neo4j perspective as we start finding you know incidences of a fraudulent purchases or alarm start being raised so we see on the top Karen has a $1,500 purchase that has been identified as potentially fraudulent Sheila has a $3,000 won John has a $2,000 won what we can do is work back from that through the series of transactions quite easily in the graph to see perhaps where these different tests have taken place so here Karen has a few tests Sheila has has the one test John has a few tests and we can actually work back from that in the graph to look for the shared the shared merchant between all of them so this might identify perhaps a rogue merchant in this gas station where they all at some points in the past use this gas station it's where these there you know tests originated from and so then that gives the card issuer or other organizations the ability to address the situation you know maybe look and see whether or not there's some skimming or rogue behavior happening at that gas station so how can we fit neo4j into a typical architecture for fraud detection so as we mentioned earlier most organizations will have at least one relational database if not several where transactional information will come in so we might have purchased information money transfers other banking services being restored in those relationship being stored in those relational databases these are good for discreet analysis not as good for a holistic view of data relationships especially not at the scale that many financial organizations might might see and for Trent for making all those hops between different connections the query speed slows down quite a bit so it's not really suited for real-time fraud detection based on connected data we can then introduce the concept of a data Lake you know big data store so maybe a relational databases move all of that data into your data Lake which would traditionally be used by data science team these are really good for Map Reduce type approaches and heavy analytical workloads so perhaps you would use your data Lake for defining models that would identify fraud looking for patterns that might identify fraud but again getting that holistic view is difficult it's not so good for operational workloads so querying against an entire data Lake in real time with the types of subsequent responses that you would expect from from an operational system it is difficult if not impossible to achieve for many organizations which means that it's it's you know it's not not even within it des often it can be you know weeks to months to complete the sort of a process looking for these fraudulent patterns and being able to look leverage the data that comes out that data leak and this is really where neo4j comes in so neo4j can take data from the data late can take data from you know relational databases and your data warehouses and other other relational stores and even take in the transactional streams from the different systems that manage purchases and money transfers and so forth and that lets you really create a data set to explore these you know the connected data that you have to start looking for these fraudulent patterns in real time and then surface those either through visualizations or or through a fraud investigation application or back out to other systems so that you can react to what you're finding in real time okay so we'll have a look now at a demo so I have a dental set loaded up in neo4j desktop first we'll take a look at the schema which is in this is the neo4j browser and this is what ships with every with every instance of me or for today it's really geared towards developers and people who are more comfortable using the cipher query language so we take a look at the the way that we've set up the data here in the database we've got sort of two separate sub graphs that we'll be taking a look at first if we look at the bottom this is more more to show ecommerce fraud and it all hinges are on purchases which we see here in the middle purchases can be made from a particular IP address and then we also show what state that IP address is located in so this data set is is really modeled around the US and US states and IP addresses purchases are made with a particular login and that login is valid for a particular shop online and then we also have information about the bank card that was used for that purchase as well as the delivery address that that purchase was sent to and all these things together can be can be looked at holistically to start making it this is a decision about whether or not something could be fraudulent then looking at the subgraph at the top here this is more about bank accounts and identities used to set up bank accounts and money transfers between those bank accounts so the bank account is pretty central to this this part of the graph you have an account holder who has a bank account and that account holder has a series of different data points around them so they could have a social security number which is a unique government-issued identifier in the United States that account could have a credit card they could have a piece of identification so you know when you register for a bank account maybe you need to show your passport or your driver's license that account holder has an address where they live and they may also have you know as well as a credit card perhaps alone an unsecured loan account holders can have a phone number that phone number can be used to make money transfers and money transfers send to a bank accounts and from bank accounts and then of course bank accounts are from a particular financial institutions we can model you know the bank or other financial institution that accounts with so now we're going to switch over to neo4j Blum so Blum is a new visualization tool that neo4j recently released this bloom is much more geared towards business and users and and people who are not as comfortable with the query language with Seifer so this allows the discovery of information in the graph either by by searching and the search bar or by using you know pre-canned templatized queries that perhaps an IT user or a more advanced user setup and that's really what we're gonna be looking at today I have a bunch of queries that I've set up in advance that will look would allow an end user to be able to execute some pretty complicated queries and get back some pretty rich datasets without having to do anything really complicated in cipher so first some some basic examples we're gonna be looking for money transfers above a particular amounts and this is really kind of analogous to more traditional fraud detection activities where you might say anything you know money transfers over a particular amount raise a red flag and someone needs to take a look at them so what we've done here is created a search phrase money transfers above and then dollar sign amount that amounts is a variable that I can type into the search bar that variable then gets plugged into the cipher that we have here in the cipher query and that will allow me to execute the query like this so I can type money transfers above and we'll say anything over $10,000 to take a look at and see here there's quite a few nodes have come back eighty different nodes returned from the search and what it brings back are account holders their bank account details the amount of the money transfer between them if we double click on any one of these we can get some more detail so if anybody's not seen bloom you'll see we can double click here we can see and the panel on the left here the amount of the transfer and the transaction date we can do the same with the individual account holders so here we can see geraldine jodean was born on the 20th of august 1976 we can view the relationships that go out from this node so there are a couple different relationship types jodean has a bank account has a social security number has a phone number and has an address we can also see all of those neighbors all of those entities that are one-half away here in the graph and if I want to I could highlight those and reveal them to start bringing more information into the results of the graph that I have here so if I clear that out something more more advanced and certainly more exciting I think would be if we would find a fraud ring so the query that I have here find fraud rings if we take a look at it what it's doing in cipher is basically looking for account holders who share identifying information amongst themselves so shared social security numbers shared identification information and so just being able to type find fraud rings execute that query for me without having to do any of the complicated site for myself and if we take a look at some of the fraud rings you can start to see you know here are two to account holders on Guadalupe Beto's and docked callused adds they share and address which in and of itself probably isn't that big a warning lots of people share addresses and might have separate accounts they share phone number again if they're living in the same house and maybe their roommates wouldn't be such a red flag what is a very red flag here is that they share the same social security number in their account details so the fact that they share social security number and and a phone number could lead us to believe that this is a fraud ring that they've been sharing either synthetic identities or or or stolen identities and then that would raise a red flag there is a much bigger potential fraud ring let's come back here so we can see part of this is people who share again a social security number we've got some folks that share a passport number so they both got the same passport issued on the same day and expiring on the same day so another red flag shared shared addresses between them as well as shared social security numbers so all of these things together would probably raise a red flag and would then give the organization the financial organization here the ability either to you know to reject the setup of this account or to take some sort of other action right maybe involve the authorities you know if the accounts have already been set up then maybe you can close them but this would definitely indicates collusion fraud you know fraud ring amongst a number of different individuals okay so we'll now clear this and we'll take a look at some more ecommerce sort of scenarios so again we can do you know using the graph we can do some more traditional type fraud detection as well so we might want to take a look at IP addresses so if one IP address is making a lot of purchases there's been a lot of activity from particular IP address across the number of sites with different accounts that might be something that could indicate fraud although there there are situations where that might be okay you know an airport or something like that might be the sort of situation where lots of people are logging in you know in some sort of a an added network where they're all hiding behind an IP address and making purchases together but that would be something that may be you know a fraud investigator investigator might need to take a look at so here we've got a few different IP addresses these are the top IP addresses by purchase activity that exists in the graph as you can see some of them are fairly busy so this IP address here has a number of purchases made with different cards and we can see the times here so 956 using this card 1012 in the morning using another card 1011 1013 and 959 using a third card so within a very short time frame there are a number of purchases being made from this IP address using a range of different cards and so again that might be something that would be worth investigating although in and of itself might not be a clear indicator of fraud especially if it's an IP address in a public place or that's heavily used or even you know perhaps in a home where a number of people could be making purchases at the same time so we can do a similar thing looking for bank cards that are used by a number of accounts right so you know I joke I might have a number of accounts and use the same bank card across them so again might not in and of itself be an indicator of fraud but might be something worth looking into especially alongside a number of other indicators or a number of other different patterns that we take a look at okay so here's the the graph that comes back what we're taking a look at here are accounts and really what we would be looking for would be something like one one bank card being used by multiple accounts for the same site I'm so here we can see different in purple kind of the the bluey purple here is the login we can see that this particular card was used to make two purchases using this login for this one site right so in and of itself probably not too terribly suspicious but if you could find somewhere where there were multiple accounts for the same sites using the same card that would probably raise more now we have another more complicated query where we're looking specifically for things that might be ecommerce fraud so what we're looking for are purchases from the same card that are being made within a certain time frame and from that is probably more unlikely where you have purchases from you know different places in the u.s. happening roughly at the same time within a minute of each other from different IPS in different states that would be more of a red flag so here we have a couple examples in yellow we have this particular Bank card this pink card was used to make two purchases one was at nine fifty five and thirteen seconds one was at nine fifty five and nine seconds so within four seconds of each other one was made from an IP address in assume that was Rhode Island and then we have another that was made from Idaho so that could be a pretty clear indication of potential either card skimming or stolen card information right and and that's what each one of these represents and then we have a slightly more complex version of that query so basically what we're doing is the same thing but then we're looking for purchases that took place after the purchases that we've originally identified so those could be purchases that might also be fraud so if we know or we think that two purchases that have taken place in different states within a minute of each other are fraud then we can take a look at the purchases that have taken place after them in time and perhaps also highlight those as risky right and that might help us get a better idea of you know of the potential exposure from that fraud and that will flesh out the graph a little bit more so those nodes are added to our original visualization looking at our first example we can see that the first two purchases that were made that there's an another two one was made at 956 and one was made at 958 there's also it's a chance that those could be fraud because we know we think that that credit card has already been compromised somehow and again we can use bluem to investigate the different relationships that that that each one of these nodes has and take a look at more of the details individual neighbors and we can see this purchase was for almost three thousand dollars and we can see this purchase was for almost four thousand dollars so that could be potentially nearly seven thousand dollars that that this cardholder or that this financial institution could be exposed to in terms of losses from potential fraud in this case so hopefully that has given you a good feel for how fraud to be modeled using the graph and using neo4j and how you might be able to query and explore cases of potential fraud using bloom okay that is the end of the demo and I'll hand over now to Angelica for questions oh yeah thank you so much Joe so we do have a couple minutes now for questions if you want to go ahead and enter those into the questions box of your GoToWebinar control panel and I'll go ahead and just read a few aloud right now um so there are a couple questions here about artificial intelligence so can you elaborate a bit on how you could use a fraud detection solution like this combined with artificial intelligence sure I think that's a great question I think it would be very exciting you know to combine artificial tell allegiance and machine learning techniques against this sort of a graph you could probably use it in a few ways you you know you you might point your AI tooling or your machine learning tooling at the graph and use that as a training data set especially if you've already identified fraud and use that as a way of training your machine learning and artificial intelligence algorithms against real data to find you know to be able to find those patterns of behavior and you can also use the graph it's sometimes used almost as a caching layer or persistence layer for the outcome of your artificial intelligence so if you're using AI or machine learning techniques against your data Lake or you know against massive sets of data and then you want to be able to distill that down into the graph and put it into a more operational type scenario where you can use those algorithms and those you know pattern detection techniques in real time the graph is a great way to do that right so you could take that the output of your machine learning and AI routines apply those algorithms within the graph and then you can find those patterns as they appear in real time awesome and speaking of real time so is there a way to kind of do your data import so that you could be doing for our detection in real time or have a continuous streaming of data happening absolutely so you know neo4j can can take the data in as fast as you can get it in so you know you probably would want to be pulling data into neo4j from your operational systems right pulling in transactional data engineer for j in real time and then that will allow you to you know to leverage the graph in real time against up-to-date data and there's any number of ways that you could do that then you can apply triggers and neo4j so that as new patterns are entered into the database and created that alerts are flagged or that some action is taken and then of course any any fraud detection visualizations or tools that sit on the back of the graph could also consume that data in real time as fast as it's coming into neo4j okay and a couple questions about blooms so you down with that I'm just now can you elaborate on how we can get blue on u4j desktop and then does bloom come with any predefined schemas and queries sure so neo4j bloom is now generally available it's part of our Enterprise Edition it works alongside the Enterprise Edition so you know my suggestion would be you know to reach out Angelica can share with you you know contact email addresses I would reach out you know either to a general email address or your local sales team to have a conversation about how you could get access to bloom we do you know for existing customers or people who are interested in and playing around with bloom a little bit more themselves there's a possibility to get trial licensing so my advice would be to contact your your local sales representatives your sales team within neo4j and and start that conversation it doesn't in and of itself bloom does not come with any preset schemas you know it would be something either you would have to load a sample data set or load your own data into it but bloom does a really good job of identifying your schema you know when you first start bloom it will query your database look at the different types of nodes and relationships that you have in there and create a default perspective and perspective it's kind of like a skin so that's what gives all the different nodes their color that's what gives them their icons I'm so bloom does a really good job of querying and figuring out what your database looks like and giving you a default presentation and then from there it's up to you you know you can start working with the search bar and doing full-text search against your graph straight out of the box but for the sorts of queries that we were looking at the more advanced queries that would be something you would have to end in yourself based on how you wanted to use it okay and I really like how this one is worded so finding fraud in a large data set is like finding a needle in a haystack so using neo4j is there any kind of AI built-in I know you touched on that earlier or is there a way to kind of find related data even if it's split between many nodes with some certainty that it's a fraud so there's definitely some algorithms that could be used so neo4j we developed published and maintained 15 and growing different graph algorithms that might be abuse we didn't use any of them today because the data set we're looking at is quite small but in large real datasets some of these algorithms might be useful for identifying fraud because particular users are quite highly connected or again because they share you know a number of different attributes amongst themselves but you know I think it would be the identification of fraud across industries can varies so heavily right so insurance fraud looks very different from ecommerce fraud that's very different from you know from wire wire transfer fraud or banking fraud so I think you know the specifics of implementation for any particular industry would probably bury and there would be anything out of the box you know by by industry it would be something you would want to either apply your own understanding of fraud detection and fraud patterns or work with us we do have Fresno services team the teams who who can help you implement something specific for your own particular business okay and how can automate and be used with neo4j so data can be seen only using graph interface or can you sorry can you see data basically across different system so what you only need to use the graph data interface so the interface we looked at today that the two interface is browser and bloom are really geared towards you know and user human use and graph visualization and navigation but neo4j integrates really well with with any number of different systems and so if you know what you want to do is use neo4j as part of your data processing pipeline or you know as an as a system that sits underneath one of your applications you could do that as well so you can definitely hook neo4j into a different front-end a different application for processing information you definitely would not have to use bluem or the browser operationally you could connect me or gate to another tool or two to another system if that was appropriate for your particular needs okay is there a particular tool that you would use to kind of import the data it's neo4j or is that a custom builds thing that would need to happen so there's quite a few different ways you can get data into neo4j we provide a lot of tooling out of the box for ingesting data from CSV files and Excel files for example we have some visual tooling for helping to pull data out of relational databases and do that mapping between your relational data structure and the graph deciding you know what becomes a node what becomes a relationship what become properties on nodes and relationships so you know every every data ingest is specific to you and what your data looks like in your particular environment but there's a lot of tooling available either from us or from third parties you know ETL tool developers things like that that will help you do your data ingest ok and how would you handle a data that changes over time is there a way to see kind of a change log in you for J or so often there'll be a temporal aspect to data modeling in neo4j so you would attach a timestamp to to everything right so maybe if someone's phone number changes or someone's address changes you know these sorts of things would have a timestamp attached to them and then you can you can view the graph as a snapshot in time using you know using those temporal data types and generating you know a view of the graph depending on what time you wanted to view it at okay and I guess the simple one so what operating system sis neo4j operate on sure so neo4j runs in a JVM so anyway you can have a JVM you can run neo4j so pretty much anywhere certainly I mean I gave today's demo on my macbook pro it runs on Windows it runs on Linux and other variants of UNIX so so pretty much anywhere anywhere that a JVM can run you can run neo4j okay and just to finish this off if you're looking to get starting with neo4j where could somebody go to obtain some sample code and data for practice it's a very nice segue so we have Angelica we'll share the slides afterwards we have the neo4j sandboxes which you can see the URL here on your screen you know forge a sandbox comm and these are virtualized neo4j environments that you can start for free I think by default they run for three days and you can extend that to something like seven or ten days and they can come preloaded with different data sets as well as tutorials for you to step through so as someone who's just learning neo4j wants to learn cipher wants to play with different data sets the sand boxes are a really great tool and that would be something I would recommend you know you can go and spin one up for free you know you can connect to it with your browser over the web step through the tutorials work with the data a little bit get used to the cipher language really really great resource for students and learners there's also a link here for the fraud detection use case specific part of our site where there's white papers and some more information about neo4j and graph databases as part of fraud detection and then there's more general information of course on our site about neo4j the database and the different products that we offer 