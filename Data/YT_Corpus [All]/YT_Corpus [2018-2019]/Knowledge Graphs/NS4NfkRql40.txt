 hi everyone welcome to the neo4j online Meetup we do suggest that you set your resolution to 720 megapixels you can do it on the bottom right of the video if you have any questions while you're watching live you can ask them here on the live chat um if you have any questions after the live stream ends you can ask them directly to the presenter on the neo4j community site there's a link to the discussion thread in the youtube description and if you enjoyed the presentation please give it a thumbs up on youtube also just a reminder for future talks next week we will be having will lion and Mark Needham developer relations engineers at neo4j doing a talk on graph algorithms on the Yelp data set so to introduce myself I am Corrine Wallach I am the community manager for the developer relations team at neo4j and I am also here with my colleague Mark you can wave mark if you'd like to know who is a developer relations engineer for neo4j and then our presenter Craig I will let you introduce yourself hi welcome yeah my name is Craig Taverna and I've been working as a user of neo4j since 2009 and I got involved in the community back then and also got involved in spatial development with new Fuji I work mostly with telecom engineering apps at the time and I enjoyed it so much that in 2014 I I asked if I could join the company full-time and was like you have to join and since then I've been working mostly on in cypher and I'm currently the team lead for the cypher team as well as the product lead for spatial features in the air for Jay awesome okay so I mean if you want to get started you can kind of walk us through your project and you know I think we're ready to see what you have let me just share my screen Oh looks like it's working excellent great you can see it then right perfect yeah well good so I'd like to start by outlining the agenda and that's slightly challenging because green sent me two goals which are both setting the bar very high as well as somewhat orthogonal to each other so I'm going to try to work through what the agenda is based on these two goals the first one is this title here all about near the geospatial this is quite challenging because I'm pretty sure I could talk for three or seven hours about neeraj especially if I really try to do this and I did in fact try this once recently anyone who was at Roth connect in New York in September and attended the hackathon I did what I perceived to be a high-level summary of all about neo geo spatial and it took an hour and a half so that's obviously not an option for today so we're going to trim this down and I'm going to look for ways in which I can focus on a few specific elements to give you an idea why option if I put near the geospatial in quotes there is to talk about the library that's actually called here for geospatial unfortunately that's very old this we built in 2010 and 11 and it's very feature-rich but it's not really suitable for the high volume enterprise high concurrency production environments we have today so I think it's not what we want to talk about instead I will say a bit about it just so that you know the landscape in context only a bit about near for geospatial instead what I'd like to move on to after that is something that will and I did Green mentioned William Lyon earlier a graph connect Inn in New York will and I decided to talk about near the geospatial apps in particular about building apps and the reason for this is we felt that this really helped highlight a few use cases and it was a little bit less boring than just giving a comprehensive overview of all of the things you could do much more hands-on much more interactive and so I'd like to keep that same thing but change it somewhat there were many things that we presented in growth Connect that are relevant to what I want to talk about today but I think you can go back and watch the video from Groff connect in New York instead and there's a few places in this presentation where where I'll mention something that you should look at the video for and I won't go into any detail this gets to the second requirement that Karine had for me and that was to try to do some live coding so that's the final step of this presentation the last part of the agenda I'd like to see if it's possible to change yeah live here in the presentation to add or improve the feature and use that as a case study for understanding some of the capabilities of spatial right let's start with the first point they're a bit about near for generated near for a special on the game this is what the quotes the library but just for slides hopefully the stakes are very look about this presentation time this first slide is a bit detailed I I've kept it here mostly for reference and I'm not going to explain everything yet I'd like to only point out a few key points on the slide the first one I've highlighted in blue at the top there this is not a spatial database it is a data modelling library it is external to near forge a it helps you model your data and perform spatial analysis on your data but it doesn't provide any spatial capabilities to the database itself one of the key points that really emphasized this is the fact that the index you see in them in the middle of the left day is an artery the artery is actually in the graph it's part of your data model so really an index as you would expect it's log gives you performance advantages but you have to explicitly call that index or traverse that tree structure in your graph another thing that's important to point out here is this library I mentioned already is a very very feature-rich that it was developed by a student under my supervision as part of the google Summer of Code project so the resources on us were quite them how did we achieve such a rich library with so little resources well standing on the shoulders of giants it's based on the jts and geo tools libraries which are very very extensive and another important point is the coordinate reference systems are the full suite and then the last thing I would like to say on the slide is that we only support 2d the only reason I mentioned that here is actually today in the video itself we support 3d and that's quite an interesting differentiating factor general things about this library it supports OpenStreetMap in my demo I'm going to show you a big street map in year 4j itself without the library but this library was our first attempt to model Open Street Map data and I'm going to say just one thing about Open Street Map at this point because I think I have a lot more to say in the demo and that is that it is the single largest connected graph of special data in the world that doesn't mean it's the largest special data set that it's the largest single connected graph and that's really an important point most spatial data sets have got all of their spatial data separated out and if you want to know if two geometries are intersecting or touching you have to perform a complex and analysis on it in OpenStreetMap everything is connected and so it's actually a graph question whether things intersect or touch and that's much much more efficient and scalable moving on the very last thing about that library here's we added quite a few geoprocessing special functions and so it's quite rich in terms of its capable the subset of that capabilities was added to procedures in 2016 because the original library was made for embedded neo4j so if you want the full feature set you can only use it within a java application but if you use it from within cipher in the typical near future deployment what we added in 2016 gives you some exposure this was a way to keep the library alive long past I guess it's due date so moving on current now now we're talking about neo4j as of 2018 you know let's bring up 2018 we released the foj 3.4 this was the first version of me ever j to actually expand the type space the number of types that you can actually have in cipher and the number of types you can store to the property store up until that point had been a fixed set of types back from the newer j0 point next phase in 2008/2009 so this was quite a big change and the two types we added the two classes of types were spatial types in this case only the point type and temporal types where we added a full suite so in terms of the temporal stuff we'd we basically did a complete feature here you get all the types you would expect that you might be familiar with from us from a relational database including something quite advanced like durations they're all index packed and a large boatload of psycho functions for creating manipulating and interacting with those types on the spatial side it's only two functions point to create a point and distance for calculating the distance but the key point here is that the distance is backed by a spatial index that you can get fast results one thing that you can see here is that the spatial side is nowhere near as which you completed the library it is a very small subset however it turns out this subset does satisfy 90% of our customers what will and I decided to do in the graph Connect presentation was try to step outside the bounds of what is possible and I'm going to talk about that as well today before getting on to that I'd like to talk a little bit more about that key use case that we released in three point four because originally we wanted to satisfy two versions of the use case and these are the two diagrams you can see below there on the left it is a pointing polygon search that is quite a common search you want to know give me everything in this county or in this region or in this country whatever your polygon might represent orest perhaps the other one is a distance search it's basically a point in a circle but what we're looking for is things within say twenty kilometers of my current location in terms of the underlying implementation deep inside these two are remarkably similar and I will demonstrate that with this I will explain it with this query here and in the demo I've got different queries that are somewhat similar to this so this particular query says starting with some central point let's say that's my location that's the first line of the query I'm going to try to find something in the graph and I've used deliberately there a a graph pattern or just very very neo4j and very vague Rafi we're looking for businesses that are at a certain location and/or within the certain category I want the category to be coffee I'm looking for coffee shops and I want the distance of that coffee shop to be within 10 kilometers of my current location then I return the distance and the coffee shop name ordered by the distance descendants and I get the closest coffee shops first so the way this would work inside near the J is the cipher engine will recognize that distance function and realize that if they is a special index it can use it and it will build a rectangle around that circle that's the left bottom diagram there that rectangle is known as a bounding box for a minimum bounding rectangle it's typically this is what is done in all spatial databases with spatial indexes because the index can only work with rectangles su+ the index and the index has got a fine resolution of a certain tile size in the case of our index I think we cover the entire planet down to about two inches squared or so so we have quite good resolution for almost all data sets it will return all of the tiles intersecting that search rectangle and that'll give us our candidate set of points and then we filtered using the circle at basically a distance function this works very efficiently that's a two phase search but it works very effectively and is quite feasible to back with an efficient index in the case of neova JOA Dix is also the new native index that we released in three point three and three point four which has very very high import speeds so in benchmarks we competing very well with other special databases in terms of input performance which is very good the last thing to say here about what we did in 4j three point four is we supported two types of coordinate system Geographic and Cartesian and for each of them we supported both 2d and 3d this is not the same range of thousands of coordinate systems at the library supports but it actually is very good it covers almost all cases cause Geographic and Cartesian a very general purpose cover a wide range of scenarios the only reason we differentiate between Geographic contusion by the way it is because the distance function is different in Geographic you were more interested in distances around the curvature of the earth great circle distances and that is mathematically different from the Cartesian straight line distances though those of what we support in the app I'm going to show you today will be you're working with Geographic 2d so I have a demo to show that is based on the demo that will and I showed in New York so this is an animated gif that we'll put together for for New York and what I'm going to do is show it live but we're going to make a few changes to it the demo is demonstrating two things one is routing between points of interest those black things and I will explain what they are in the demo and the other one is pointing polygons so I'd like to start before going into the demo I'd like to just summarize what is meant by routing and what is meant by pointing polygons because once we in the demo I think I'm a lot less interested in coming back to the presentation so let's get the paperwork out the way first routing first so here is one way to do routing in psycho cipher has since many years back at a function unit called shortest path and if you look at the query on the left there we're looking for two restaurants the view restaurant and lounge and Gregory coffee is to help you to both be in Manhattan which is why they be presented us there and the shortest path function will search between those two very efficiently it does this using a bi-directional breadth-first search which is very very efficient however it considers shortest to mean the shortest the the fewest number of hops and there are some issues with that which I will show you soon so this is an efficient way of doing things and it's built into cipher we go to the kind of results you get when we'll ran this when you first tried it this is what his face looked like this looks almost like now it's not well obviously that's not what wills got a beard but he didn't have that expression he definitely didn't like the results and his explanation for that very strange route was that we are not using way too arts it was what I said before we only count hops and I will show you this on the demo it has a it has a very big difference a very big effect on the kinds of roots that you're going to get so to do weighted pass the first thing you need is to have some kind of cost on the root and so we calculate the distance of each step on your routing graph and these distances are in meters we can calculate the total cost and find out that if we do the shortest path it's going to take such-and-such number of meters what we want to do is actually optimize for the minimum total distance that's different to the number of hops but if you have many short hops that could be a shorter distance then a few long hops so what we are going to use instead are these two algorithms Dijkstra and a star and both of them do weighted shortest paths a straw is basically an optimized version of Dijkstra that prefers to head in a particular direction that's not always possible depending on your graph model in the case of Geographic graphs usually it is very possible because Direction is very natural concept in in geography but we will show you both of these implemented in inside of our application the other thing I wanted to talk about before we get on to the demo the other feature is the point in polygon feature and that one we demonstrated in New York with Manhattan we have to first when we define this polygon and I mentioned at the beginning of this talk that there's quite a few parts of the presentation that we made in New York that I'm not going to cover here and I welcome questions on that but I would also think of be with you while watching those videos or watching the presentation from New York if you want to know more about a few important points in particular how did we get the data into neo4j and how did we calculate these routes the written graph today I will show you how we calculate the polygon this is the kind of query that you would then use once you've got the polygon in so in this particular query I have said that on my relation this is a an object in the graph that represents all of Manhattan I have a property called polygon and then in addition I'm going to find points of interest within a certain distance of my center point and within the polygon this is the query that we actually used in our app for the demo and I'll show to you again in the demo and this is indexed back because of that distance function that distance function and I mentioned before is backed by an index so this will be fast then what happens if we don't have a center point if we only have the polygon then we are actually hurt by the fact that the FJ three-point-four does not natively understand what a polygon is so these polygons that you see on the screen here at least the word end or polygon it's not a real polygon I'll show you soon exactly where it actually is but it's not a real polygon and if we want to do a real polygon searches it gets a little bit harder to stretch here for J to be able to do it but we can on their previous slide there was only one additional function added to near for J that was the within polygon function which we see here at the bottom in this slide there is a second one bounding box so in order to CH II this feature we needed to add two simple functions marco de t is one weekend just for the hell of it in the springtime it was very easy so it's not hard to do that you don't need an incredibly powerful or rich library like the old spatial library to achieve this so how do you code something like within polygon well it turns out to be very very simple I'll give you a 30-second overview of the algorithm it's very straightforward no matter how complex your polygon if you want to know if a point is inside it or outside it so the green is inside the Raiders outside what we do is take a ray from that point in any direction that and you can't calculate the number of times that Ray intersects the polygon so my implementation sent the Rays art along the x-axis like that along the horizontal axis because that makes it very very easy to find all edges in the polygon that intersect the x axis very very simple and count their methods odd you are inside the polygon if it's even you're outside very straightforward so the algorithm is actually pretty easy to code I'm going to give you a link at the end to the library that I wrote for this and you'll see if you review it will fly how simple the code is for that so I've talked about the demo but I haven't actually done the demo and now I'm on the section about extending the demo so what I'm going to do now is do the demo and show you how to make changes to the demo together let's get out of that tab and go find our demo which should be this one right so if you start this application and you you may have seen this if you watched the presentation from Groff connect it's actually based on a demo that world made earlier this year so he's had he's made several different versions of this and this version that we've got here I've made a few changes to now in the last few days just to make it applicable to what I'd like to show you today and the demo focuses on the routing of the routine use case so I'm going to demonstrate that first and then we'll move on to polygons I've added some help over here says drag me to search for places of interest so I'm going to do exactly as it says and it says I should select two places to route between them and so let's pick something on the top left and you pick something down here let's say I want to go to that's Starbucks so there is a route that it's suggesting that I take it's looks reasonable actually and there's a little squiggle over here there's probably it includes walking areas it's a walking route that we calculate but is it the best fruit we can find that out by going to the left here and clicking on takes truck oh it got rid of the squiggle shortest path puts it back a straw gets rid of it so we can see a slight improvement there let's try something different that's add extra if I go just to the other side of this block for the starting position when I get given a totally different route because that was slightly shorter if this one I think shortest part is going to give us a better answer and it's Emma look yeah shortest path is giving a totally different answer so what's nice about this demo as you can see there are giving logical roots but dextra is giving you a better route in terms of the total distance that you'd need to travel what we can't see here of course is the performance difference between dates drawn a star they're both pretty quick so let's try see if we can test that by searching over a much larger area so I'm going to zoom out somewhat I need to expand my query radius to include more data all right there's a lot more data now what you might notice already I'll Center this a little bit is that there's no data outside in Richmond or Berkeley Oakland Alameda down in San Mateo the database that we've loaded is an export from from OpenStreetMap itself note who speak map always exports a rectangle so you can almost see the rectangle top-left is around larks bird top right submit in Richmond then down into the water here and then down to just above San Mateo so there's the rectangle of the original data and you will see that not importing more data has an effect when we start building our polygons I'll show you that in a second let's first try something long we're waiting to see how that works it's right from up here well it's pretty quick when you do these ones is it still the equivalent of walking you know what we did in the routing graph is we just said build a routing graph that includes walking ways streets highways anything that we consider a route of transportation and so we're not in this particular route about differentiating between the different types yeah I was gonna say I wouldn't fancy walking that long to me yeah let's say better to say it's a psychopath if you're not a cycle on the highways I'm not differentiating between highways and walking paths in in this particular I'll show you the model soon and you'll see how we built it and I'm but they work pretty quickly for dextra let's a star or we can't deceive this guy shortest path gives us a bad route a star it took one quote from a second let's go back to shortest part in fried eggs track all right maybe to court three-quarters of a second okay it was slightly slower but I think we need more data to really appreciate the difference we saw a much bigger difference in Manhattan and that's because the data is so much more dense and there's so many different possible routes in San Francisco things are not so bad it's only dense in the downtown area over here anyway before going on to polygons I think I can say something more based on what Mark was asking and as doomed our need to be dense downtown area what does our routing graph look like I'll show you soon OpenStreetMaps complete growth model but you need to know that up front every single detail on this map every single Street Park building one way walking area absolutely everything you can see is represented by graph structure in Ufa J's graph model and in the original OpenStreetMap graph model if you want to route on that that's going to be a disaster that's going to in fact I let me show you a construed map just to give you heart this is OpenStreetMaps view of the same area let's just find someplace that's not too intense like this island over here zoom in on this and I want to see the actual data go to layers and click map data and OpenStreetMap shows you all the data and you can see you've got all of the polygons all the buildings if I click on that I can see that building it's part of the of the route of the graph obviously I don't want to consider that in routing I don't want to reach around the outside edge of a building so I need to be able to differentiate between streets and other things if I click on that Street over there you will see it has tags whether the thing called highway now in OpenStreetMap the name highway is used even for walking paths so it will be highway of type walking path and this is a highway of type residential and you will have a highway of type highway so this is the way OpenStreetMap works it's a crowd-sourced data model so people can tag things however they want and it converged over time to a set of defector standards it's but it turned out to be extremely accurate getting back to our demo I've added a feature here called debug routing and if i refresh the page we're gonna see something interesting mmm I'm showing quite a bit here so give it a few seconds it's going to load the entire routing graph there you go so what this routing graph represents is the black points are still the points of interest that we showed in our cup the light green are any points where a decision can be taken in other words where we in our routing algorithm need to decide are we going to you go straight or to a left or turn right and we have connected using the light and they zoom in a little bit here to conceive it better so we've connected using these light connections we've created new relationships that were not existing in the OpenStreetMap model between three floating nodes that represent points of interest like this node represents perhaps a coffee shop or something and what's perceived to be the closest street or intersection you can see all of them have been connected to streets all over the place and if there was already a node on that street we connect to it if it's close if there isn't we've actually created using interpolation nodes part way along the streets in order to allow the user to walk out the coffee straw shop to the street and then turn and then we've routed between all intersection points the important point about this is that some of these routes don't follow the street of the street is curved there it is not curved and that's because the curvature is irrelevant to reaching it's just going to cost us more time if we have to up all the way along those tiny little curved segments all we need to know is the total distance and that we put on to the east relationships so in the graph connect talk I gave about four or five slides of details with these giant psychic queries wherever we showed how we imported this data and manipulated and added the routing graph and I'm not going to go through that here I instead want to move on to the polygon site let's get out of this and zoom out a little bit so for polygons list app or is modified by will to present in San Francisco in November but he did not modify it for polygons so if you look at the top left here there is a Fulton borough feature Marin Craig I think your volume cut out can you just repeat that last part yeah what I said was this app was mighty fine I will in November to work with San Francisco but he didn't demonstrate the feature at the top left here the filter bar feature he left us alone and as you can see in the top left it's cool says Barra and Manhattan Brooklyn Queens the Bronx if you filter on any one of these if of course he raises the data there is nothing in Brooklyn or Manhattan so this is the part I wanted to show you with some live coding I want to show you how to update this app to work for San Francisco and this is going to involve working with me other J's data model changing the data model and working in the code of this app itself and I'm hoping that that example will help give people ideas about how all these apps are booked well one possible way that these apps can be built we obviously don't have enough time to show you the whole app and every single piece of it so I chose the slice as something exemplary that can be done so let's go to the app coded or not actually that's the echo let's go too near for Jade first and in near 4j I started with a query like this that is going to defined counties how did I decide that this query should find counties so I'm going to explain that in OpenStreetMap first and then come back and run this query we look at openstreetmap over here if you go into a zoomed out too much it's going to go into the waterway areas I can pick maybe this one over here zoom in on something like this line and click on it this line is the border it's even labeled their border between San Francisco and County and whatever County is a perk here when you click on their line you get in the lift information about what OpenStreetMap perceives this to be key information like this number at the top that is the way ID and in OpenStreetMap away is a line second it's a piece of something and it has tags and I noticed yet as administrative level six and that means County even says that you're on border type is world county the more interesting part is that it's a part of three of things says it's a part of San Francisco San Francisco City and Marin County if we look at San Francisco I'm going to open this in new tabs and compared to San Francisco City and see what the difference between those jeans let's go to those tabs there's a San Francisco and this is San Francisco City they basically look identical it just happens to be that San Francisco County is the same thing as San Francisco city but there was a difference in the left here San Francisco City as Edmund level 8 what I did try in this demo was to use counties like her done in New York but because the data section that we've imported is only around San Francisco itself we've got bits and pieces of Richmond Oakland and things like that well we don't have enough information to draw the entire polygon so I've decided instead now that let's go down to a finer grain resolution and look at city or town level which is M and F of 8 and that's in the tax right so what does this look like in the foj Big E maybe if a better one can read that so this is the graph model that we're looking at there is a node called another simulation this matches what OpenStreetMap call the relation that has tags which we call our syntax and we've already decided that we want tags of level 6 then I want to return that ID that we saw going back to that view by the way you can already see the ideas 1 1 1 2 9 6 8 let's see what we get if I look for all admin level 6 let's run this query I find that there are 5 counties Marin County Contra Costa County San Francisco San Mateo Alameda if instead I look for towns with headman level 8 I get 19 towns and we already know from that view that the San Francisco town this number over here just really the same thing as a San Francisco County but the others are all different the other counties are broken up into smaller towns so for our rap let's go for the towns because they are smaller so I want to show you how do I pull out a polygon for the San Francisco town first of all I'm going to show you what San Francisco itself looks like if I just find that one relation the 1 1 1 9 6 8 and view it in the graph view I can double click this mode and get a bit of structure now we can see what San Francisco thinks it is it seems to have a whole bunch of these by the same ways these as you as I mentioned before are line segments that this actually is the polygon then these two other things down here one is the tags that we've use just to some key tag things and that contains things like that admin level and a whole bunch of information another one is this curious guy over here this is a point so how can a large County contain one single point differentiate it well turns out this is the point that the map uses to label San Francisco when you see the word San Francisco printed on the map that position of that word was this guy so I double click on it it says it's also a member of the County so it's a member of the county and the towns are the same they was used for both and it has tags well that is not surprising looking at these ways what do we get we can see that this way is shared with Marin County net we already saw in the map and this is the really important feature about Open Street Map the fact that the geometries are shared by other geometries edges are shared it's not like most joyous as where Marin County would be a turn polygon and San Francisco will be its own polygon and that even though in the real world they do share an edge that would not be represented in the data in this case it is let's have a look at what that edge looks like if I keep clicking on these yellow nodes you'll find that they make a chain and that just goes on and on a month this is the chain that represents that line string and at each point on the chain we have a location so the gray ones are the actual geographic locations over here that the chain is made of and you can also see importantly that the distance is recorded along these relationships and this is true for the street map art as well so where's how we did our routine as well if we have all of these distance calculations in place we can read along those distances now there's a lot more I could show you in this graph model but I think I've shown you enough you can see that we need to find the members that are ways and then traverse along these yellow nodes and find their points in order to build a polygon let's do that that query is a little bit more complicated so I'll show you the query but I don't want to go into it in too much detail the reason for the complexity is because we're having to assemble polygons out of all these sub pieces we start of course by finding that 1 1 1 9 6 8 that we wanted and we're only interested in the ways we need to reverse the ways collection because it turns out that in order to get deep last note to align with the first note of the next way the ways are in the wrong order so we just reverse it and then we do this this is the key part this was me picking on those yellow nodes I started the way and I find its first word node and then I do var length expand all the way through to the very last one collect them and join them together and then finally connect the full set into one single polygon which I'm going to store on the actual original San Francisco node so let's run that oops wrong button we run that it runs and it was quite quick if I click on this mode and expand its properties you may see down here scrolling that there are a lot of points now stored in an array on the San Francisco node this may be hard to see sovereign a different query that could make things easier I'm going to return all relations that I have already previously stored polygons on there you go San Francisco had 806 points in its polygon that's reasonably cook it it turns out that you actually asked for missing points I'll show you that soon but for most of these polygons that are in the center of San Francisco area we've got pretty complete polygons however if you look down at ones that we really know I'm not going to be complete look at Berkeley 12 that's because only a tiny corner of Berkey is in the area of the data that we've actually exported so let's see how we can go and change the app to use this carries the app with this filter on the left but to burn a Manhattan whatever we know this is wrong so I'm going to open up the source code and show you by searching for happen a search for Manhattan in the search code in the source code I find this thing called regions I guess you're not aware and we mentioned this before hopefully that this app is booked in JavaScript using the react platform so the some of the things that I will show you here are probably only relevant to react anyway this javascript collection that I've put into my app class contains five boroughs of Manhattan the keys or the internal names that we're going to use inside our check boxes on the user interface the name field over here will be what we'll print for the user to see the reason I made these different is actually because of I don't want the Bronx and the keys and things like that and then the most important part this idea over here so let's add San Francisco San Francisco that's not very well let's try it try again I'm going to put a name there when we first got anything wrong get it right for the line put it right San Francisco nine six feet let's try that maybe the app reloads itself which is nice and there we have San Francisco so let me zoom out so we can actually see the filtering effect of that right so if I focus San Francisco Ernie I get this top piece if I choose anything else that's gone if I take away the filter I get a lot more well that's good news so it's actually working now I would like to show you adding all of the others very quickly and then we can go through the code and show you how that actually works previously I had already calculated all of these IDs this is based on that query I showed you before we searched for all with Edmund levels 608 Edmund level heat and then we export the name and make a internal name that's quicker if I just copy this in here right you know I have a better one one other thing we want to change you'll see it if I go back and let it reload there's four - Barbara is obviously in order to take a look so let's find that here it says ok let's just use a general term like region all right well - region that sounds a lot better okay that's a lot better so we have a much longer list than we had for New York because we're using these towns let's have a look at those regions make a big circle over here so we can focus stuff okay I'm going to start at the top I've ordered these geographical so that the one that's farthest north is at the top look at that only one point there it's good on Mill Valley there's a few more to bartenders just a little bit there's nothing in Madeira so Seletar there's a bunch by the way I may not have mentioned it but these points that were looking at we went into some detail in the graph Nick talked about what they were about and we searched for things that look like coffee shops restaurants bars and similar and that this app was supposed to be focused on finding a coffee shop or a bar or something close to you so if you don't see a point you know it's not because the data is missing necessarily it's because that region is lacking in those kinds of facilities if we search for something else like intersections or houses or something we would do differently get 30 different results San Francisco will give us a lot Daly City so I could keep going down here but I showed you before this debug routing feature I'm going to show you something that you really need to have in your apps not for final presentation debug features are what you don't want to show customers but while I was building this I asked myself the question all my polygons right how can I have a polygon of Berkeley the 12 points in it what's going on there now I already knew from that to the polygons were wrong and I really reduced and as I've explained to you part of the problem is that they're outside the region got the data imported but there are more problems than that how do we know click debug polygons and choose a different area San Francisco this looks pretty good it's almost right unfortunately the real polygon sticks out into the Pacific a little bit more and a little bit more into the bay as well and you can see that if you look here and the reason for that is that of course these points that we that are on the outside of this polygon on the left and the right are not included in the data set let's go back to the app and see some of the others like this one right on the North will definitely start from that yes do that we'll check that you definitely go much further north that's because it's been cut off by the data so you need to when you build your apps be very aware of your data quality and whether you need to adjust to improve that I'm going to show you one other area here where data quality is an issue I think it was Daly City all right so now they're Lee City is entirely within the area of interest but look at how strange this polygon is it's working fine for our search but it doesn't draw very nicely so in the case of this app this doesn't matter this drawing is not really a but if you wanted to have a more advanced app that really required polygons to correct be correct you need to take this into account what happened here well the answer is very simple this polygon is actually got internal sub polygons three of them they probably holes in the polygon and we've not taken that into account our data model assumes that a polygon can be defined as a array of the points and not in a more complex way so there's quite a lot I could say about that and ways that you can solve that without going to the spatial library but I think I'd like to leave that for a question and answer session so the last thing I wanted to show you was just quick untrue of the path that it takes to do some of this work and the real thing is in the map jeaious for example to Jason for Regions J where this comes in we have a function that set polygons for regions which is called whenever there is an update and it gets its data from the properties of the application converts it to geo Jason and then connects it into the map most important thing here is not the conversion to Judaism which I can show you if you have questions about it but actually where did it get it from and that's back in the apps so if we find the tie between the app and the map is this object over here here we construct a map and we say regions is based on the app state region polygons businesses were those black points the points of interest so these are dynamically updated by react where needed and all of these are quite interesting as all my debug stuff as well which is very interesting I'm going to show you only the polygons I'm working kind of back with you that you find where it comes from there it is find select the fetch selected region has a particular psychic query that should look familiar find because I executed very much similar query for you in near vision find the relation with the particular ID that has a polygon and return the polygon has region then what we do is we get the result we extract the region and we store that inside the state as region polygons so this is going to pass it down to the map you know reactive away and then the last thing is where was this guy called from the top of the stack handle region filter change and that's the callback that happens when you click on the selection event so I think that's enough of a demo otherwise we have no time for any questions so I'd like to hand it back to the audience if there are any questions then I'm happy to answer them ok mark are you aware yep so we've got good I mean there's been a few but you kind of like answered them as you've gone along but for some of them but we've got one which I don't think we've covered yet which is you mentioned importing ESRI data ok info can you import data from map info I guess using this little chain map info we never did support we're basically not talking about the old library again because that if I go back to the list over here we wrote importers for Open Street Map and where was the other one yeah I haven't written on this list we also have is reshape file importer we didn't write a map info importer that's not particularly hard but you do need a library that can interpret the map info formats and we interpret the shape file import format by using cue tools capabilities in that area there is a library called I think OTR - a gr continent the answer name but the actual app inside it is that which I believe understands map input so it would be one option is to just put a wrapper around that okay cool and then writes that I forgot to mention that question was from Gary and then we had another one which is kind of more a suggestion I guess their question which was Michael McCann asking are you going to create some some training to get everybody trained up in this sort of thing which I don't expect you to be able to ask but suddenly maybe something interesting for us to look at yeah yeah I would like to hear mark say that he's going to create some training material that I accidently volunteered yeah but Mike you know you can contact me directly I remember we met at groveling so I'm sure you have my LinkedIn details if you want to be trained on any small specific thing but if we talking about general training in this area I think that's more Marc's area than mine well then then there were a couple of questions about the application so so we've shared the the blog post and the github repository that we'll wrote up a couple of months ago so you can you can have a look at those so that there were a couple of people who had asked about that's there was a med that's probably about 20 minutes ago and then a couple of other people up a bit further back got one more question I just this says can you write multiple spatial / tabular data to near 4j through the JDBC driver guessing that means can you write cipher queries that you that create spatial points I'm going to interpret that as meaning yeah and one thing that I didn't mention in this in this presentation is that we are using a few external libraries here and one of them is epic and of course epic has facilities to make it easier to connect to you JD be through JDBC to other data sources so it would be a cipher query that starts with an epoch called through JDBC to stream the data and then in cipher you would construct your spatial points and put them into the database so this would work fine if the data you were getting from your remote source was a point like who had latitude longitude if you were dealing with complex geometries that may not work so well and then you're going to need to have additional functions that you might may need to write yourself Oh enter a Karina's actually put a link to the epoch library about halfway up the live chat so you can know I've got another question which I think might also be about the original library which you talked about which was about have you made any improvements to the OS m importer the machine that's talking about the Java yes and the original library had a nursing imported but there is a new one that I wrote earlier this year I will go to the paid you know I think it would be a good school so the spatial library the old virtual libraries near future contrib slash spatial this one slash osm is a complete rewrite of only the OpenStreetMap part and there if you look at the description here there's two parts to this one is a high-performance important and in fact that is the important that we use is for this demo it's much much faster than the importer in the old library and it can import very very much larger amounts of data so if you've ever tried to use the old spatial library for reporting OpenStreetMap you probably found that you can't import very much this model of San Francisco would be possible but it would be slow whereas the the new OpenStreetMap importing here is is very very fast this OpenStreetMap importer library also includes a couple of procedures that we use to help us with the routing graph so that's another thing that this library provides so if you're interested in OpenStreetMap in particular then I recommend taking a look at this guy and so does that the the way that data gets imported presumably can then be used with the other tools that you've mentioned in the in the talk yeah the the way this important structure the data in new PJ is very similar to but not identical to the way the old spatial library did it and my intention was and still is to release new versions of the old spatial library that users of this model and actually take away the old importer so that there is only one way of importing OpenStreetMap and only one model but what did what the import it does by the way it just gives you a roll opens treatment model and quite likely their models missing a lot of what gear what you need and in the case of this data I should have triggered up here might have seen that I very briefly copied stuff from an area over here I have a huge number of cipher queries that I used for massaging and him enhancing the OpenStreetMap model to make it usable for routing and polygon searches there are many many many functions here this was described in quite a bit of detail in the graph Connect presentation so again I think if you want to see how to import OpenStreetMap and then enhance the model for some particular application I recommend that you go back and watch the graph Connect presentation because we do cover that in some detail there cool and we've linked that on the life Chancellor and and black Korean just said on the live chat will summarize all the links to different things that Craig's mentioned they will put that along the community page so you can find that either from the live chat or you can see it in the YouTube description so you can get everything in one place yeah we can update it shortly so in a few minutes after the call you guys don't have all that links updated on that that's red so I think that about wraps it up right mark yeah I think we've run out of questions we've gotta do a shameless shameless plugging so if you like to Craig's talk don't forget to forget to like it on YouTube so other people can can find it mm-hmm also if you are interested in presenting in one of the online meetups you can post like start a thread on under projects or content in the neo4j community site there is we can consider it for one of the future online meetups and you can also vote for other projects or content if you liked it and you want to see it by hearting other projects in content in the community site and you know you can chat with Craig he's on the community site you can chat with him on the thread you can write on private messages if you heard and I think that about rats but wraps it up thank you so much Craig thank you very much I appreciate you taking the time and showing us this is very cool it was a pleasure also I said I will see you guys all soon join us next week for the Yelp dataset graph algorithms talk it's next Thursday you can find another Meetup all right we'll see you guys soon bye 