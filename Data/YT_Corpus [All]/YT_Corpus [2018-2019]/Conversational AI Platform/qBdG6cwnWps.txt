 my name is Mike Sevilla I'm a product manager on the hangouts chat bot framework I'm here today with Wesley one of our G suite developer advocates and Chauhan the technical lead for the hangouts chat bot framework so today we're gonna talk about how you can transform your workplace with a hangouts chat bot framework and just a quick agenda I'm gonna give some background about the new hangouts chat and the bots user experience in case you guys have never tried the product before I'm going to pass it off to Weston Chauhan to talk about the bot framework and API and show you a ton of code samples and demos before I wrap it up so quick show of hands how many people in the room use hangouts today in Gmail or on mobile awesome so what you might not know is that millions of businesses use hangouts today for direct messaging or lightweight group messaging with their company and what we've heard from these companies that that they're looking for more persistent place for their teams to collaborate and communicate so this past February we launched the new hangouts chat it's currently available for G Suite customers at no additional charge that's a brand new tech stack with apps on Mac OS Windows Android iOS and web its global out of the gate so it works in 28 languages and is accessible on all major screen readers on all major platforms and really the backbone of the new hangouts chat are rooms a way to Center the conversation around a team a project and event basically anything you want and it's obvious when you're working on a project you're going to be talking about a bunch of different things I'm sure everyone in the room has experienced this if you've used group messaging before you maybe you're talking about something important something at work about work and then all of a sudden someone in the message is like hey guys what do you want for lunch today and then the met the work keeps going on and that's great but then all of a sudden someone else who's probably hungry says I want Mexican so when this happens it's really hard to just figure out what's happening what's the converse we should be focused on so conversations and rooms are threaded to prevent this exact problem burning helps you separate the everyday chitchat from all of the important stuff and not only that you can segment the important stuff by different threads to keep context around those conversations if you use Google Groups for email lists or identity management at your company you can add a Google Group to a room and then anyone in the room can also join the room over time these rooms are going to contain all the things you've talked about all the files you shared so everything's fully indexed and searchable and you can look for file type keyword person look in one room many rooms basically however you remember what you're looking for hangouts chat has deep integrations into G suite so you can pick any Docs or drive file from the drive file picker and anytime you paste a drive file or a Doc's file a link to it we will render a thumbnail and help you even have access to everybody in the room and if you find yourself going back and forth too much with someone or writing blocks and blocks of text we help you with one click up the bandwidth of the conversation by creating a video meeting with our sister product hangouts meet so anyone in the room can jump in the meeting and you could resolve what you wanted to resolve faster so your owner stranger to conversational interfaces we saw some pretty amazing things from the assistant team yesterday at the keynote and BOTS at the workplace what they're really meant to do is help you blend conversation and tools to accelerate your work and reduce all that context switching that happens when you're working with a bunch of different tools at work you can talk to about privately and a one-on-one direct message or you can add about to a room and then anyone in the room can add mention it to do something and while you can take anything and make it a conversational interface you can literally take a 12 page form and make it a conversational interface we really think conversational interfaces shine for three main use cases at the workplace one is asynchronous notifications so in this use case something happens in a third-party app and a notification gets plumbed into the room where everyone can start a conversation about it another is one-off actions so in this case maybe you're talking about someone about what you need to do and then you say hey project management bought create a task about this item and it does that and the third is querying for information so with this use case there's data obviously in the third party app and you just want to find it so you say project management but what are Mandy Taylor's tasks and it shows you what the tests are one of our big mantras on the hangouts chat team is that bots are people - they live alongside people and there's no heavy installation flow nothing more to learn if you know how to start a direct message with someone add someone to Arun at mentioned someone you know how to get started with a bot Google launched a few BOTS of their own one is the meet bot that lets you that uses natural language processing and machine learning to schedule meeting and book a room for everybody in the room another is the Google Drive bot that notifies you when new files are shared with you new comments are made or when people request access to your files and not only can you see when people request access but you can actually grant access from the bot itself in fact in the two months since launching what we've seen is that people typically grant access to files with the Google Drive bot eight times faster than they do with email so think about that you can actually speed up a common workflow for any app that you build by eight times we have a number of third-party BOTS like like Trello to stay informed about your project's progress without leaving the chat room ring central to make calls or start video conferences with your room and your team JIRA so you can get notified about changes to issues tasks bugs and then talk about those changes as they happen and we're excited to announce today that box is launching a bot on hangouts chat to help you find recent files or favorite files to open or share without switching context we have a number of bots and many different business functions like developer tools tasks CRM HR support and more so now I'm gonna pass this over to Wes and Chauhan to talk a bit about the bot framework and API great thanks Mike all right we're here to guide you on this comprehensive tour for the bot framework for hangouts chat so what we just saw from Mike are a bunch of public BOTS written by others well the end of available for everyone but what I want you guys to think about is writing BOTS on your own whether it be for your organization for your customers or the world you know write a public bot like the others that you've seen but maybe you're new to BOTS and you're kind of like hesitating going you know how hard is it but you know put simply it's it's not that bad just think of BOTS as like micro-services they're simpler there's less code and you don't have to write it a complete web app or mobile app you know have that complexity so less code means you can build your apps quicker but how quick well the Motorola CIO got a demo bot up in less than an hour then of course spent a bit more time to do one for real work what does it do it talks to multiple systems and it gathers customer order and device warranty information to present to perhaps the customer service agent who needs this information when they're on a call the main idea is that humans used to have to log into each of these systems separately by hand collate all that information before they could tell their customer but now with the bots you could summarize all these results from all these different systems together in a single room so that all the CSRs could see this at the same time so more on the blog post but we're here to help get you started all right well building quickly isn't the only standout feature of hangouts chat we want to emphasize that the platform has a lot of flexibility there's many different ways to implement and host your BOTS so we're gonna go over some of the basics and then walk you through each option that you see here all right so a quick review talking to AP is and then comparing that with BOTS so in this diagram we have an application we need to try and reach an API it's the data is protected behind Oh off and so it typically has to happen is the user has to grant access to your application through OAuth you guys have seen that little dialog window right and once that happens then the app is able to reach the API access that user secure data on there do all the work that it needs to and then responds back to the user right everybody familiar with this okay great so with bots it's a little bit different all right it's kind of a three-tier architecture here and what happens is instead of a mess you know requests coming from an application the requests really comes from a user in a chat room all right they enter you know I want to talk to this bot I'm going to send it this payload so that message gets entered into hangouts chat that hangouts chat contacts your bot your bot does all the work it needs to do collate the information and that returns out information back to hangouts chat which then renders that result in the chat room okay so it's a little bit different the key takeaway here is that for your regular apps you call api's but with BOTS hangouts chat calls you alright so noodle on this for a moment and once you kind of rock this then the implementation path that you were going to take is going to be more clear and you can build your BOTS faster all right now the most efficient BOTS are you know return plain text because it's short it's fast it gets a job done but for a better user experience hangouts chat supports richer you eyes called cards that allow you to structure your response data for example if you look at the the card sample here you can see that you know your BOTS could have returned five lines of plain text and did it done its job but this UI card is more pleasing visually in fact it can communicate more than just plain text for example you can see that there's a visual cue to show that two of the five tasks have been completed okay from this project management Bob that's managing like you know one of your reports right so that visual cue is really helpful and if you were to do that in plain text you'd have to add some extra symbols which may not you know which may get in the way of the data that's coming back right so cards are great well look at them a little bit more later now if you already have an app with data that's kept secure behind ooofff you can still expose some of your app functionality within hangouts chat are often config flow lets your users log into your app directly from hangouts chat now it's similar to this example where you see the task tracker which stores information a Google sheet well you know the sheet is protected data right so the user has to allow your bot access to that spreadsheet and then once the Oslo is complete then users can now access your app and their secure data directly from hangouts chat rooms and direct messages all right before showing you the code I want to give you a quick rundown of the event types that hangouts chat sends to your bot so your bot can take action when it is for example add it to a space this is a great place to send a welcome message like hey thanks for adding me to this room here's how to use me it's also can take action when it's removed from a space like logging things or doing some kind of cleanup business logic the most common event type is message which is just when a bot receives a normal message entered by a user in a room or DM and then the last one is card clicked which is when a user clicks on one of the UI card elements that we just looked at earlier so to keep things simple we're going to focus on the latter pair all right let's start with standard BOTS that are running over HTTP as mentioned before the development environment is quite flexible bots can be created and hosted on any platform in other words your language your stack your clout or ours right so I presented at the top here you know some Google cloud platform or GCP products and firebase products that you could use but you don't have to all right so hangouts chat also works with BOTS related environments like dialogue flow and Hugh bot will demo some BOTS in some languages that you see here but it really doesn't matter as long as the hangouts chat service can HTTP POST to your bot that's all that's really necessary all right you guys ready for your hello world we're gonna start with the echo bot and happy to pass it off to Tuan who's the engineering lead for the hangouts chat bot framework right thank you all right let's switch the demo please all right can anybody see my screen great cool so for those of you haven't used hangouts chat before what you're seeing right now on my screen is the Mac OS desktop app for our hangouts chat so on the left you'll see a list of rooms and direct messages that I'm a member and on the right you'll see a message stream so I can scroll up a little bit I can see the group conversations and so on all right and of course I can create a new conversation here all right so let's take a look at a very basic bot I'm going to call it the echo bot which simply writes back whatever the user send sense to it so I'm gonna talk to it here go pop hi and it's going to say hi back to me all right cool so you see you saw that the way I talk to a bot is by mentioning it in a message so in rooms only messages that directly mention a bot gets sent the corresponding bot so the rest of our conversation with your vector team is private this is not the only way you can talk to a pot you can also have a direct message one-on-one direct message with the pod so here you can see I already have a direct message with the echo bot as well and here you can see I don't have to mention the echo bot at all every message I say in this direct message is going to be sent to this spot because that's the only other person in this direct message cool so now that we've seen how you could interact with the echo bot in hangouts chat let's take a look at how it's built let's go back to the slides all right so here's the Elco bot in full glory in Python this example uses the popular flask web framework which is hosted on App Engine compute engine or really any cloud supporting Python web apps as you can see from the top of the function there hangouts chat posts - slash and then which is the code scans from the JSON payload for the message type and then it returns the same message string along with the user and the user name of whomever called the bot just like in Chuan's demo that you just saw now Python isn't the only choice for example maybe you have a mobile app and you're using firebase well of all of your code is on firebase you don't really necessarily want to host your bot on something completely different right it's perfectly fine so here's the same body nodejs and hosted by cloud functions for firebase if instead most of your back end is on GCP then you can host it on the sister product Google cloud functions the to be nearly identical so if you take a look at the code here it does you know pretty much the same thing as all the others it scans the inbound message for our message event then it returns a username and string as before and it really doesn't matter to hangouts chat that your code is in JavaScript or Python and hosted on cloud functions for firebase or Google cloud functions remember hangouts chat only knows how to HTTP POST to your bot alright so how are you guys doing so far one see more code alright switching gears a little bit let's talk a bit about Google cloud pub/sub so what is it many of you know that it's a real-time event streaming and messaging system where you can have many producers and consuming reading and writing and probably at different rates and all course could be coming from different applications but what does this have to do with hangouts chat well the platform is supposed to be flexible right what if you decide to host your bot on premise and behind a firewall well in this case hangouts chat cannot contact your bot so what can you do well this is the perfect use case for pub/sub hangouts chat sends a message to pub/sub instead of your bot because it can't reach it your bot has to register a pull subscription which allows the bot to get the hangouts chat messages from pub/sub and bring it through the firewall and then the your on premise bot can service the request do all the calls it needs to do gathers up all the information and then responds back to hangouts chat like normal alright let's see how to use it so the next example listed Java version of the echo bot ok because a lot of enterprises use a Java and so we want to show an example in this language as well so like Python and node you can see that the code handles the event it scans for message type and it replies to hangouts chat with a message text and username it's just like the others but for house maybe a tiny bit more verbose right well that's great but what if this bot is in our corporate data center behind that firewall well we just mentioned a minute ago that pops up is the right solution so how do we tweak our bot code to work with pub/sub all turns out it's not too bad so if you look over here you can see the extra code that we added to our java echo bot that uses object mapper to convert between Jason and Java objects it's then able to get the message from pub/sub and convert it to Jason for processing it passes that event object to the handle method that we saw in the previous slide which then handles a message as if it was sent via HTTP POST from hangouts chat it doesn't know the difference all right so that's awesome all right so we discussed hosting on Google's cloud your cloud with or without a firewall let's bring it back inside Google with a little twist called Google Apps Script but first things first quick quiz how many of you feel it's important to have off to help keep your users data secure right yeah me too now how many of you like writing off code yeah chirp chirp chirp yeah that's why I thought what about managing your own servers or VMs on-premise or in the cloud not easy either right so in that case Apps Script is for you have you heard of Apps Script before how many of you ever heard of Apps Script before a couple of you yeah that's good but not enough it's kind of like another Google secret but just not a good one because we launched it almost a decade ago so what is it it's a customized JavaScript environment where we take care of the servers and off and you have access to more than 40 G suite and Google API s with just function calls now if you try to build a bot with it we actually provide you a one-click bot template so that you're already given a basic working block to hack on right away check out the video if you want to learn more about the secret alright so Africa is a service environment for all developers including sometimes developers like all you product folk business analysts and data scientists out there now here's the ad echo bot in Apps Script now let's pause for a minute here really look at this code while it's identical and functionally as the others it's only one line of code online right and not only that it's the easiest way to deploy a bot within your organization alright so the echo part is a good start but John can you show us a more useful app script bot sure alright so just like the echo BOTS we're going to show you a very quick but that takes in the user input but did but in instead of just returning a verbatim we're going to do a little twist we're going to translate it okay so let's switch to demo already here all right so I've called the translate bot and I'm going to say welcome to Google i/o in English and skin two fingers to back the same message but in Japanese cool so let's take a look at how that's built let's go back to the slides please okay here it is notice how it's almost as simple as the echo bot the only difference is that we're now calling the Google Translate API and how do we call the Google Translate API it's just a function call away right you're not importing SDK you're not downloading anything it's just there and you can see how it's very intuitive to use you pass it the message the user sent in this case it's our message to argument text argument X being the text you just sent without the bots own name in it and you pass the source language and the target language and they return the result as text that's it it's almost too simple right let's take a look at a more advanced example cool so let's that's the demo again thank you so in preparation for this talk our team has been using a music google spreadsheets to track our work okay so each of us has some tasks assigned and I built a simple bot to take a look at where everyone's at in terms of their tasks so I call it the task tracker bot and so I'm going to call it here okay okay so looks like we have a bunch of tasks pending here let's take a look at the spreadsheet okay yeah can you guys see the spreadsheet okay so you can see you this is a plain Google spreadsheet have the first row with the column names and bunch of tasks here assignee and status so you can see the body is really pulling the data from the spreadsheet that's showing the tasks that are not yet completed so I'm going to mark all the pieces completed right now since we're all already standing on the iOS stage and the mark everything is completed and I'm going to go back to the chat app I'm going to query it again through my tasktracker bot and this time is going to tell us that there are no more tasks Rea videos coming soon by the way cool all right let's go to slides all right so this is the code this is the code for the task tracker bot and you can see it fits on one slide so it's really not that complicated you can see we're doing we're doing some processing here where your call we're opening up the spreadsheet by specially dot dot Oakland by ID we're grabbing the data from the spreadsheet in a two dimensional array we're doing a little bit of processing here removing the first row which is just the column names filtering out the rows they're already completed mapping each row into a string putting them together into a message and then returning them to hangouts chat what I don't see any auth or API calls here it's a very good question list so notice how I mean in terms of API calls just like the translate bot know the API calls are just function calls it's just special adapter over my ID spreadsheet okay that get data range get values get URL that's it like you're you're not like doing complicated not building rest requests or using SDK you just call them as if they're at built in and in addition you don't have to write any explicit authentication code right so obviously this spreadsheet is visit like it's a cold right it's not publicly visible but because I've used this spot before I have given access to it and Google Apps Script is responsible for doing the handling all of that it's you don't have to write an OAuth callback you don't have to store the OAuth tokens you have to refresh them it's all taken care of by Apps Script so after the user logs in for the first time Apps Script will take care of it alright so so far I'm the boss you've seen collect data and return them in plain text but let's take a look at how to present a richer UI in the form of cards great well it's true that plain text is the easiest and fastest but for the cards but you got to use cards to make your response look good right so that's that's what this is for so you can use JSON markup to construct the UI card and the best part is that it's write once run anywhere web iOS Android they're all covered you don't need to write a separate mobile version of your body cards can be interactive like the poll you see here users interact by clicking on the vote button cards are also updatable so when you to submit votes the bar chart and the vote comp they update now the the user experience would be much worse if a new card was generated for every boat right the bot framework supports a variety of widgets so here are a couple to get an idea like buttons formatted text structured data images links and more but really the widgets are just building blocks the real magic is when you put them all together and assemble them into cards whether they're interactive updating or both alright so come on let's see a demo of a bot that has interactive and updating cards all right cool let's go to the demo great thank you cool so it's a great day here today at Shoreline Amphitheatre how many of you have been searched online for theatre before okay some of you okay so that's more than I expected actually but for the rest of you um I just wrote a little bot that helps us find Charlie amphitheater on Google Maps so I call it the where is spot now I'll just use it like this so where is Shoreline Amphitheatre and what this bot does is pull up a map of the show sterling amphitheater and it's the it shows an image of the of the map I don't see any amphitheater there all right on the bottom you can see a row of buttons and guess what happens I don't see it still oh wait there it is there it is so the plus button zooms in and the minus button zooms out so we can see the Bay Area and all of its glory what's the what's that Google Maps icon down there all right so when you click on this button on web it will take you to the Google Maps site with Center down on the location I typed and on mobile it will of course take you to the Google Maps app cool like to see how this is built let's go back to the slides great cool so here's our first we're gonna start with our familiar on message function so as you guys already know the unmess adjourn is invoked when the user sends a message with the bot in this case I said where is strongly after theater right so it's job is to return the card but in this case we're going to move the logic for constructing the card into a new function we're going to show called build message which is note here that build message takes in three arguments it takes in the location that user typed right this is argument text trim so remove the space all right and it's gonna take an initial zoom level and it's going to take in a third parameter which is the response type so when a new message is sent we want to send a new message ouais so that's at least two is the new message type we'll take a look at that later so now let's look at build message right this is kind of a meet of the code as you saw before it takes in the location the user types it takes an initial zoom level and it takes in the response type so what we're gonna do in build a message is that we're going to construct each element or each widget inside this card in sequence so we start with the header you can see just like the header the other widgets are the same all of these widgets are represented by a plain JavaScript object and the header has two properties as a title and it has an icon okay so next we're going to build the image from Google that we see here the map image we'll take a look at how that's built and in the next slide and then we'll construct the row of buttons like you see on the bottom so now to here we're gonna have right creating two more functions build Google Maps link which stage take is just a location and I'm going to build we're gonna have a function called build button which takes in a label the location and the target zoom level that the user will be taken to when they click the button so finally we're going to put it all together into one big JSON object and return this Java this object back to hangouts chat and that creates the card so let's a look at each of these so first let's look at build image it shows a widget from Google image from Google Maps in an image widget so in this example we're gonna use the Google Maps API which you might notice this again built into Apps Script you just say Maps the new static map we set a bunch of parameters like what you know the location zoom level we add a marker that's the real red pin you see there and we can just grab them a map your Maps URL right pretty simple right this is just like function call away and then finally we're gonna take the URL and construct a JavaScript object that represents the image widget and return it so next we're going to build the zoom buttons remember that these zoom buttons are interactive so in addition to creating the UI side of things we're gonna add a text text button which contains a text label we're going to have an uncollected err what's inside the unclick parameter it's going to be the payloads that we want sent back to our bot when the user interacts with one of these buttons so here we're going to set two parameters it's going to put the location of the user typed in the beginning and the new zoom level that the user will be taken to when they click the button so like I said this this object this payload is going to be sent back to our bot when a user clicks the spot so where do we receive this payload we're receiving the function called on card click so just like on message which is triggered when user sends a message on card click is triggered when a user clicks on buttoning a card so what it receives is the payload of the button that user clicked so we can extract the parameters that were assigned to the button and see we extract the location the extracts the zoom level we do a little bit of math to make sure the zoom level isn't out of balance and then guess what which is called the same build message function that constructed the initial card the only difference is that in this this time we're going to set their parameter to update message because what we want is not to post a new message right we just want to update the original car the user clicked on so finally we have the icon in the bottom left that takes the user to Google Maps so like the zoom buttons it's going to have it's going to create a button but it's not going to have an uncle ik handle or pelo that will be returned to the bar because we don't want the box to be invoked we just want to send the user directly to Google Maps so here we construct the link to Google Maps and then we attach it to the open link property which just instructs hangouts chat to not deliver the response back to the bot which is call of Google Maps ok so I want to stress the while this example shows you how to build this kind of interactivity in Apps Script this functionality is not limited to Apps Script right the same functionalities available as well if you realize you're a bot if your bills are bought in using HTTP endpoint or a cloud pub/sub endpoint so what this really means is that you can build the same rich user experience with cards in the language of your choice and deploy it to the environment of your choice cool so so far we've shown you bots the response to something the user does or the user has to send a message or collect on the bottom for your BOTS to do anything but what if the bot needs to notify the user about something right so thanks Ron so the framework supports asynchronous messages which are perfect for long-running jobs or out-of-band notifications asynchronous messages can also be sent to specific threads for context so here our bot needs to the contact hangouts chat so some all off is needed all right so when you see you off it's a strong indication you're using an API so there's no exception here as a bot has to call into hangouts chat now so this Python sample uses the bots permission scope plus the service account credentials that you got downloaded from your API project and then once you have the credentials you establish a service endpoint to the API like you see with the discovery build call and then you can use the API to send message to a DM or a room now like any other bought this bot can call other API so I could do any other processing that you want to have it done and then we've collate the information and then send that back into the room of the DM all right more generally besides creating messages the a P I can do all credence on messages it also has additional features to give you more context like getting information on rooms and DMS or members who are in rooms and DMS in addition to the API hangouts chat also supports incoming web hooks now these are great for one-off alerts like when a server goes down they're quick and dirty or quick and easy and you can integrate with any of your custom workflows and the way you do it is you go to the room with the DM and you pull down configure web hooks and then from there you can see all the current web hooks that are currently defined and you can have different ones because you may have different apps that are posting different alerts right so you just click on that icon to the right to copy the web hook URL to use now incoming web hooks can come from a variety of sources like monitoring apps or even the command line so torrents gonna prove this by doing an incoming workbook from a curl command all right thank us alright let's go to demo thank you so as Wes showed you the way you configure a web hook is you go to a room click on configure web hooks and we're going to see a dialog here that shows you the web web books that you've configured we're gonna have a URL here you can use so in this particular case to just give some context let's say we have an imaginary task manager app and it just wants to send a quick notification into hangouts chat when something happens so I'm going to switch to terminal here and here you can see I've pasted a command I it's gonna be a curl command sending HTTP POST request it's going to be a container JSON payload that's the header here and spins contain the URL I copied from the dialogue from inhales chat in the background and the text I'm going to send this remember this is the same payload the same JSON object that you would send from app scripts or from a cheapy request it's the same JSON format so you just send it as a payload and I'm your head enter here and if everything goes well so you can see here before we close the terminal you can see that I've gotten back this response a JSON formatted payload from hangouts chat that shows me other things like the ID of the message that was just created the space they was posted in and so on it's now let's take a look at this message in hangouts chat you can see here this created a new conversation right and it contains the text that we were just sent to it cool let's go back to the slides great so um one of the most innovative features inhales chat as Mike explained to you guys earlier is threaded conversations right so threaded conversations are great for grouping relevant comments relevant context together so in the context of sort of imaginary task manager app what we really like to see is the history around the particular tasks grouped together kind of like the top in top thread you can see here so what this means is that all the relevant discussions from people while all the relevant notifications from this app get grouped into the same conversation so it's very easy for people to understand what's going on so how do we do this just like you saw before on my on my screen after you send the request to hangouts chat we returned the data the IDS and so on that aboutabout the message is created so you could remember that you could remember the association between a task ID and the thread ID and that's perfectly fine there's nothing wrong with that you can totally do that but since this is a really common use case we thought we could make it more convenient so once the solution we came up with is the idea of a thread key so you can think of thread key as a custom identifier it's a bake to hangouts chat but it's some identify that makes sense to you in your problem domain so for example this in our task manager app it could be a task ID if you have a customer ticket tracking system it could be a customer ticket ID maybe a customer order ID it doesn't matter and what you do with it to specify it in each request that you make to create when you're creating a message in Harold's chat and we do the heavy lifting we will remember this the first time we see a message that has a particular thread key will create a new conversation subsequent messages get posted into the same conversation so now you don't have to remember that mapping between an entity in your problem domain and a thread or a conversation in hands so of course this example here on the slide shows you a curl command which is very simple but this of course doesn't just work for incoming web hooks or from curl this works for boss as well so you could write you know as a bot and then and could use thread key to do the same and group conversations good messages into the same conversation alright so this wraps up our introductory tour of the hangouts chat the Bob Bob framework they're all hand it off to Mikey to take us across the finish line Thank You Wes and Shuang just to summarize what we talked about today so the hangouts chat service with BOTS helps teams accelerate their teamwork and productivity you can stay notified automate tasks query can information all without changing any contexts and like they showed you there's many different ways to connect you can spin up your own web service using any cloud or language you want you can use cloud pub/sub to work with a firewall inside your organization or the easiest way if you're building a custom bot to streamline a workflow is using Apps Script where you don't have to worry about servers off or anything like that so to get started check out developers that we will become slash hangout slash chat for all more documentation on how to actually do all this if you're a GP customer and you haven't tried hangouts chat today you can go to chat cool calm to try the product itself and if you have more questions we're happy to answer them in dome B will be giving some more demos and we could show you some more details on how to publish bots and whatnot so before we leave we want to hear from you so please provide feedback for the session at Google comm is less scheduled and thank you for all coming enjoy the rest of the conference [Applause] [Music] 