 On this week's Xamarin Show and my good friend, Sam, from Progress Telerik, telling us about Bots and beautiful conversational user interface. So tune in. Welcome back everyone to The Xamarin Show. I'm your host James Montemagno and I'm a Program Manager for our mobile developer tools. I have my good friend, Sam, back on this show all the way from Progress Telerik. You used to know them as Telerik and now the Progress Telerik. Is that correct?  Yeah. Progress is the bigger company. We still make Telerik and Kendo UI and all the things that you know us for.  Yes. All the things, basically, I know you for Kendo UI but I also you for all of the different beautiful controls you make for Xamarin, and iOS, and Android.  Yeah.  Now, you have new stuff, Sam.  Yeah.  What is this new bot Conversational UI thing?  Yeah, let's talk about chatbots this morning, how about that?  Yeah, I know literally this much about chatbots. All I know is that the story of this 19-year-old kid that created a chatbot to help me fight parking tickets and it's been amazing. That's all I know about chatbots.  Yeah. I mean chatbots can be as dumb or as smart as you make it. So it's really up to us developers to make the most of it. But the tech is here.  Okay.  So, let's dive in. Once again, I'm Sam Basu. I'm a Developer Advocate at Progress. We make Telerik and Kendo UI and we'll talk about all of that. That's my Twitter handle. Let's talk about conversational chatbots.  Yeah, sure.  Because I think it was back in 2016 almost, where Sacha had got up on stage and Bill and said, "Conversation as a platform, it's a thing. Let's make chatbots."  Yeah. I have my phone here.  Yeah.  I pressed it hard and I start talking to it and then it sometimes speaks back to me.  Digital Assistants.  Magic.  It's all the same thing. It's because behind the scenes, it's services that you are triggering.  So, the Alexas and the Googles and the Cortanas of the world, those were like maybe the first chatbots in the world?  Well, they're agents.  They're agents? Okay.  The stuff behind them is what's bots.  I see. Got it.  So, there are different types of bots. Obviously, you already started the conversation. There are spider bots that crawl the web. There are different types of bots but what you are talking about-  That sounds scary by the way. I don't want spiders crawling anywhere, they're terrible things.  We are talking about conversational bots.  Okay.  These things that you can have a conversation with either typing or you can just speak to them. So, the first thing is bots are apps.  Okay.  They are complicated apps because they have lots of hooks in the back-end and how you have them with their plumbing, and where you have them installed. So, they are apps. They are mostly Cloud-based apps, but to what you're referring to the front-end can be different things. When you talk to your Alexa or Cortana or Google Assistants, you're talking to agents which are smart and then they fire off things in the back-end based on what you are trying to do.  There is just like the user interface essentially at some point, whether it's text that you see in an app or it is an app or just something talking. I now have a Google Home that has a screen, so the Google talks to me but also shows me so it's multiple-  Yeah.  agents at the same time. Is that correct terminology?  Yeah, exactly.  Very cool.  Behind it is a serverless function or an Amazon Lambda. Something that knows how to do something. It's how you can come down the flowchart and triggered that particular thing.  Okay.  So, that's what we're talking about. So, you can have agents, you can have platforms, you can have chatbots deployed to things that people are already using like Skype, or Messenger, or Twilio, or whatever. So, this is what gives the chatbots the personalization of meeting the customer where he or she is at, and also the intelligence behind the scenes.  So, the platforms for Skype, Messenger or Twilio, those are things that I can hook into?  Yes.  Because I can't really hook into I guess Siri. I mean, there's some extent you could but my users are everywhere.  Right. Exactly. So, you essentially deploy your chatbots on different channels and then you trigger them based on what the conversation is-  Got it.  -from whichever platform you're on. Now what makes chatbots smart is all the stuff that goes behind the scenes. Your Rules Engine like how to have a conversation. You don't want chatbots to be very dumb like just be able to answer or fix things. You want to have a more natural conversation. This is where things like Cognitive Services and natural language processing comes in which makes it smarter.  Okay.  By nature, chatbots are also meant to be stateless between multiple hits for the same service. But if you want you can say, "Get me out of here" and it knows what here means. It's that [inaudible] a little more things about you.  So, based on the verbiage, it can detect when I'm at home or on the road or driving a car, maybe because you have a device that you're talking to it.  So that's all the intelligence and the personalization behind the scenes. Now, you can build bots in many different ways. I have honestly not used Lex or Facebook but I have used Microsoft Bot Framework, which I think we are more comfortable within the Microsoft space. But there are lots of frameworks out there and all of them do similar things.  Okay.  When you talk about the Microsoft Bot Framework, this is essentially what you are looking at. You have a Bot Builder, you have a Portal, and you have some Cloud Services. So, first thing is you can get started building a bot by getting one of the SD case.  Okay.  So, you go to our learning page, you get the SD case. You can use Node.js or you can you C#. This is the bot builder SD case. I think we are at the cusp of releasing the V4 of bot framework for which we're bringing some more languages like Java and I think even Python. So, essentially, you build up your bot locally, they give you a nice bot simulator to work things out locally, and then you deploy.  Got it.  When you deploy, you can deploy to any of these channels or you can go straight up to Azure and just have it running in the Cloud. That's where you also get to hook up with and you have to use intelligence services like vision, like speech, any of these things.  So, instead of developing an app for every single service, because there's a lot of them like Slack, Team.  Yeah.  So, would you say the bot framework is like the middleman in between?  Yes. You're not building multiple apps or use different platforms. It's a single app. It's a service.  Okay.  But then you hook it to these different channels. So you have your smartness in one place.  I like that. That's cool.  So, that's the cognitive services which gives you intelligence.  Across the platform bots?  Yes.  It's like the Xamarin of bots?  Yeah, exactly.  Okay, got it. Now we're on the same level.  Yeah. It's one app. Now, Azure really helps out because it not only helps you develop your bot but also deploy it very easily to these different channels. They'll help you out with different types of APIs and scalability. You might have a bot that's sitting out there which no one uses or you might have a seasonal thing which spikes up.  Yeah. Like you're doing winter sports or something perhaps.  So, I'm a big fan of this because it takes care of a lot of the headaches. So, that's where we are at. Now, as with anything else, it all comes down to user experience. UI plays a big part and not just how quick and easy it is, but it also needs to be delightful and users need to be asked to do click, click and out.  So, you got have a smart bot but a pretty bot.  Right. This is where we can come in and help a little bit. Like I said we are Progress and people know us as the makers of Telerik tooling which is for all the things.NET, WinForms, WPF, Xamarin, you name it. Everything has-  Make pretty things so we can make pretty things?  Yeah.  Got it.  Any app any platform. But people also know us as the makers of Kendo UI which is all for JavaScript and front-end tooling. This started off very simple in just as a jQuery-based library but in the last couple of years, we see how the web stack has evolved. We make components for Angular, and Vue, and React. So, it's gotten complicated but it's the same ideas. It's smart UI-  Yes.  -just render it how you want it.  It's like how I go and file new ESP on a core app, and I can pick basically any of these. You can do whatever you want.  Yeah. These are front-end Spark Frameworks, so you can render however you want. So, that's our product suite. Normally, we do little things everywhere. But for the first time, we have been able to do something that's across the board. We call that Conversational UI. So, essentially, we have built smart, modern UI for chatbots. You see the list of products that we support. Everything from the Web to Web Forms, ASP.NET MVC, Core, Xamarin, WinForms, WPF, you name it.  So, it's a set of tools that are on top and integrated into the current tools that people already using?  Yes. Because we have much of the UI that we would like to throw in in front of chatbots, and we just have it for every platform now; web desktop and mobile. So, they are framework-agnostic, you can hook them up to whatever chatbot framework you have and behind the scenes, and it works seamlessly, we give you a consistent API.  That's nice. So, that way not only now I get my bot back in but I have a consistent front-end as I developing one bot service, one app user interface that's going to scale across anything I've built?  Yeah.  That's cool.  Yeah. So, that's what we have been able to do. But you and me are obviously big fans of Xamarin because we would like to make across that for a mobile app, and mobile is a great example of doing chat box right. Because it's very personal, it's easy to just type and click, click, and you're out. So, let's take a look at some of this stuff and how we could get started. So, first thing is that's our landing page terelik.com/conversational-ui. It tells you how to do this for every platform; web desktop and mobile. Then the thing that I'm going to show you is for Xamarin which is our Telerik UI for Xamarin Suite. I'm not going to walk through a whole bunch of code. I'll show you a little bit of it but all of this code is out there, so hit that big "File" button and you will get the code.  So, this is part of Terelik UI, it's that all of the controls and the Conversation UI is part of that control pack.  Yeah.  Okay.  Now we are adding more value to people who already use our stuff. These are all controls that have been added to existing suites and existing subscriptions that people might have.  Very cool.  So, when you hit that button, we'll give you a sample app. So, that's going to walk you through. I'm on VS for Mac, works the exact same way with Visual Studio on Windows. This is that I want to show you.  So, this is what I'll get when I download the file?  Yes.  Okay.  You get the bits and you get the sample apps.  Nice.  Okay? So, this one has [inaudible] in Android but for the sake of time, let's just do iOS.  Sure.  Let's run this and we'll see how this works.  Okay. Now does this work with Xamarin Forms and Xamarin iOS or is it both across the board?  Across the board, yeah.  Oh, very cool. You can choose what you want.  You can do native UI or you can do Xamarin Forms, Wrappers.  Yeah. Very cool. Then it's a similar experience then because it's rendering the same user interface?  The APIs are exactly the same.  So if I have different apps, maybe I want to integrate into a legacy app and then on the new Xamarin Forms App that I have would be the same thing?  Right. Exactly.  All right.  Hopefully, your middleware, the integration with the bots, that's consistent across them, then you can run it for different platforms.  Perfect.  So here's our sample app. I'm literally running a trial. So, you go in here. These are apps that are out there in the iOS and Android and retail stores.  So, I can download a trial and try it here?  You try it on your device. You don't have to get the bits. But let's fire this up. First thing is going to say is "What type of bot do you want? Let's do travel assistance." It's connecting to Azure because, I'm going to show you this in a minute, but it's connecting to Azure Bot Framework and we actually have a bot that's deployed and sitting out on Azure which we are connecting to-  Oh, cool.  -from a Xamarin App but we can also connect through any other platform that you can build on. So, this one's a travel assistance. Where do you want to go? Let's just do time with friends. Just you and me, we're going to skip the families. When do we start? We are tired. Let's do right after tomorrow. Why not?  Ten days.  That's a little much with you.  Okay, five days.  Five days  That's pretty much after five days. I don't know how much time I could take.  Yeah.  So, two people.  So, actually you're having like a full thing.  Yeah.  You're actually getting the info.  Yeah. You already saw a little bit of the UI come up. This is again one of the pickers. So, we tried to throw in the UI that makes it a seamless conversation.  So, this right now what I'm seeing is the teller UI for conversational UI.  Hooked up to about framework.  Hooked up to Azure. Okay, cool. If you want to get that clear that everything we're seeing like you didn't, me as a developer I didn't have to write these little bubbles.  No. We got it all. So, let's go to Portugal.  Okay.  Okay. Now, the next thing-  How is your Spanish?  Not very good. But these are what's called Hero cards. We can talk about how these are rendered. You essentially choose, thing is it's just easy for the user to visualize something. Where do you want to go? Yes.  Do it.  Let's fly Air France.  Whoa, I like how you pick the most expensive ones.  Why not?  They are an Alaska Air partner, so I got points. So, that's good. That's important.  All right. So, now, it's saying, hey, I got your flights. I got your reservation, and that's it. That's my phone number and you're done.  Wow, cool.  Just a quick example of how you can go through automating things with a chat bot.  Here, I'd imagine that this would be an application my user is logged in already. Right.  You know about them so your're passing credentials to the back-end. Yeah.  Is that what we're simulating?  Yeah. You can have authentication as they come into your app.  Got it.  One of the things that we talk about with Chad bots is it's not just the nebulous things like when you see the Skype demos or the Google keynotes where you use a chat bot to make an appointment.  Yeah.  Those are nice, but sometimes we Enterprise devs think, okay, what does this mean for me? It's also a lot about automating enterprise workflows. Little things that your users might benefit, where it sounds bad to get rid of humans but human energy is better spent on more creative things, if you may. So, we actually worked with a hospital where they were scheduling appointments with doctors, and they were able to cut down on some human workforce. Because it's just like with a doctor's calendar out there, it's just automated.  Yeah. It's all info that's available.  Yeah.  So, you can just scrape some of that get it. You can, like you're saying remove some of the bits and pieces that are tedious.  Exactly. So, again, work through these examples and see how we are trying to provide examples of how easy this can get. Like, this is booking a checkup with your physician, and it knows who the doctors are, who are available and then choose a date. That's a calendar control that comes up. That, and then what time do you want? So, it's very easy for the user to just go click, click, pick my insurance and I'm done. That's it. Right. So, just a quick example. Now, this is what it can look like, advance demo, but let me walk you through how to set this up.  Sure.  So, first thing is, if you're using Microsoft Bot framework, start here.  Yeah.  This is the dev.bot.framework.com. This is the homepage which should get you the SDKs, and it gets you a way to stand your bots up.  Yeah.  Then include that in different channels.  Cool.  But what's easier is doing it on Azure. So, I'm on portal@azure.com. This is Azure portal. So, the easiest way to create this is do that. Create a resource, and then I can go in here "AI machine learning" and I can pick a web app bot.  Cool.  Right out of the gate, it gets you this nice thing to play around with, and it gives you some templates. So, when you say basic, it just literally creates an echo box. So, it just relays back what you say. You can have a form bot, which is helps the user typing things that go into a form.  Wow.  You can have a natural language understanding so I can say more natural things to the bot. What you saw was a Q&A bot which is walking you through like a wizard that helps you.  A wizard?  Get a reservation done. Or, you could have a proactive bot which can ask you like, "What do you want to do today?" things like that which are a little more open ended. So, Azure helps you out with some of these templates.  Very cool.  So you can build these things right in Azure. You can edit the code in your browser, which you wouldn't want to do a whole lot of it.  Yeah.  But then you can download the project and open it up in VS code or Visual Studio and run with it.  Wow, that's really cool.  Yeah.  Wow. Bananas.  Yeah. So, that's how you play around with it. Now, I showed you a advanced demo. Let's break this down a little bit, right? So, let's close this, and I'm going to show you this. This also is Xamarin forms app. The only things that I have in here is Xamarin forms and Telerik UI for Xamarin.  Okay.  That's the only things you need. But once you do that, you can light up some UI with your bot. So, what I have here is a repeat bot service that essentially just takes the message from you and just relays it back to you after a delay. So, it's just an echo bot. Then in my xaml, and again, this is a cross platform UI we're talking about that works with iOS Android, all I have to do is just one red chat, right? That's it. You can set up more properties with it, but item sources binding it to a collection. But once I have that, I can start doing things in my xaml, or if you want to do NVVM, you can do command binding and behaviors and so on. So, I have my bot service and then I started this up. So, let's actually fire this just to see how this initially looks like without us doing anything. So, all we're doing is binding it to the repeat bot service and we're giving it a UI. Now, one thing to keep in mind is any UI that you'd throw in front of these apps and images like this little bot guy, those need to come from the iOS and Android projects.  I see that.  Because they're image resources, right? But otherwise we'll give you the shell you're going to play around with it.  Okay.  So, this one here is saying, "Hey, I'm your bot." If I say, "Hello", it knows how to relay back.  That actually went back and talked to a bot service or is it just a?  It's local.  It's local, local bot service.  Yeah, right.  emulate. Emulator.  Exactly. So, that's just hello work type thing, right? So, let's go to a little more advanced controls. Let's do dates here. We saw a lot of dates being picked. So, how do you render dates? It's super simple. So, essentially, when we render a bot or I guess our UI in front of these bot frameworks, we have several core pieces. One is an item's collection, which is the container that holds all of your chat items as they come in and as they go out. Then, on top of it, you can throw different types of pickers.  So, all those little bubbles or the slider and all of the things that we saw?  Those are things that you can add onto the chat item collection.  Okay.  This one here is just doing the date picker. Notice how I can set things up like the min date, max date, and then I add that into my chat collection. That's how, and then whenever the user picks a date, when this property change gets fired, I can grab what the user picked.  Got it.  So, that's how easy it is. So, let's run this thing real quick.  So, here, you can just build up the user interface and maybe you go in, I'm imagining like the one we saw earlier. You may prompt a question and then based on that question, you present specific UI.  Exactly. Yes. So if you were to having the user pick a date, you'd just throw in the date picker context and that renders the UI. It's going to be a native calendar on iOS and Android based on whichever platform you are. You can swipe around, and then once you pick a date, it knows what you picked. That's how it is.  Got it. That's here the items, the "Remove" your moving.  Yeah.  Just like the one then adding in the text there.  Exactly.  That is pretty simplistic.  The time picker works exactly the same way. This one's a super simple example. If you were picking pizza toppings, you would just throw in a list. So, you combine the two items source collection and whatever it is like your POJO business objects.  Yeah.  Whatever it is, once you bind it you can have single or multiple selections and be done with it.  Very cool. Then you're sewing the code behind like you said you could do like BBM style.  Yeah, exactly. So, let's turn that off and let's look at something a little more advanced. This is where the cards come into the picture.  Those nice, cool Euro cards.  So, these cards can either just have a basic card in which case they have a basic card context. They have a title, subtitle, description, and then action is what happens when you actually tap on one.  Okay.  Right. So, that's the basic card. But we can also do an advanced card which has an image which actually makes it a little more interactive. So, again, these images need to stay on the native platforms projects. So, let's do that, and let's make sure we're returning the image card. So, let's turn that off. Not the basic card. Let's return the image card and let's fire this up again.  Okay. Just like where you are picking certain items or stuff a picker item, those picker items are my cards in this case.  Yeah.  It could be text or anything.  This is what helps you provide that rich user experience. So, now, you're selecting a conference VS Live. Dev reaches a conference we put together in Bulgaria, and then Ignite's coming up. So, just a nicer way for the user to glean information just like one tap and you're done. So, when I hit "Select," you select the DevReach.  Now, at this point, that's when you would call back to the bot service, and then you would?  Yeah.  Got it. Yeah, okay.  So, that's just how to render the UI. Behind the scenes, it's entirely up to you how do you hook this up.  Got it.  Now, the important thing to keep in mind is, if I may show you a simple bot that I have here. This one's an echo bot. This one's deployed out to Azure. If I go in here and look at testing this, this one's just an echo bot. I can type in whatever I want here and it gets me back an echo. Let's see. Do you see that? Now, this one here, if you look at the channels, this one is deployed on Skype. It's deployed as a web chat. So, you can have this embedded in any web application that you want.  I see.  But if you'd rather have it talk to it through a mobile device, then Microsoft provides what's called direct line. It's an API that can be used through JavaScript, through C#. If you're doing C#, you can actually go down to a lower level and do web sockets. So, you're doing very fast communication.  I see.  Do a restful endpoint that is your bot.  Very cool.  Right. So, again, how you build your boss is entirely up to you. Make them as smart as you want with Luis and with cognizant services.  Yeah.  Make the most natural flow as you want.  Yeah.  We will come in and give you the UI to throw in front of it.  Very cool.  So, start here, conversation UI. You can play around with the same tribal demos that I showed you on Xamarin. You can play them out on the web, on the WPF, or Win forms.  Nice.  So, all that we wanted to do is throw some modern UI that we already are good at in form of chat bots.  Yeah.  Hopefully, Enterprise and developers realize how bots can really help make Enterprise workflow a little more automated.  Yeah. It's super nice to actually have that just building up, seeing how I can build and structure it, and just the back end is the back end and let me just pretty up the UI. Sam, it's been great. I have a better understanding now of bot framework's agent, all the good things, and how to make a pretty UI.  Yeah. Sweet. Thanks for having me.  Yeah. Thanks for coming on. We'll have all of the links in the show notes below. So, make sure that you subscribe to the Xamarin show so you get updated each and every week. So, become part of the notification squad. hitting that bell, doing that thing, subscribing on YouTube channel. Now, you know what to do. Until next time, I'm your host, James Montemagno, and this has been The Xamarin Show. 