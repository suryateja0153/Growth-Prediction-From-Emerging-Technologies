 A few days ago. I injured my right hand wrist at gym afterwards every time i used my mouse it caused lot of pain because of steep wrist angle. Thats when it hit me 'wouldn't it be great if we could convert any surface into a track pad' and i don't know why but for some reason i thought of her the movie HER, I will let you guys figure it out. This was an exciting thought but i didn't know if i could do it still i decided to give it a try. Before we start i have a disclaimer at the end of these videos i couldn't convert any surface into a track pad but I learned a lot and added big tools to my arsenal. I hope this happens to you too. Let's get started. I setup a raspberry pi along with camera at height of about 45 cm this gives us monitoring are of about 25x25 cm underneath that camera. Following that we need a piece of code that decides if there is a hand in that area and if so where is it? Take a look at this link or one of my previous raspberry pi miniProjects to get your headless pi up and running. Piece of code that lets us decide if there is a hand in area of interest uses some thing called Neural network. They fall under category of programming where you don't define rules to make any decisions but you show neural network enough data that it figures out rules on its own. In our case instead of coding what hand looks like we show neural network images captured from raspberry pi that contains hand and that does not contain hand. This phase is called training of neural network and images used is called training data set. I remote logged in to my raspberry pi and captured bunch of images using this command. I captured about 80 images with hand and 80 images without hand. 160 images are not enough to properly train a neural network but should be enough for proof of concept. besides these 160 images I captured 20 images more to test our neural network once it is trained. I wrote my neural network in python deep learning library called keras and code was written in jupyter notebook from anaconda navigator. First I include all the libraries needed for this miniproject which includes PIL, matplotlib, numpy, os and keras. In second cell I define paths to data set and print out sample count. now we need to load all images into a numpy array. hence I created a numpy array of 157x100x100x3. 3 is for red, green and blue color layers in image and 100x100 is our resized image dimension. In 4th and 5th cell we load images containing hand followed by images that doesn't contain hand in our numpy array. In 6th cell we divide each value by 255 hence limiting value range from 0 to 1. This is how our training set looks now. Next we need to label each image hence we create a one dimensional numpy array of 157 in length first 82 entries are set to 1 and remaining 75 entries are set to 0. This conveys to neural network that first 82 entries are form one class and remaining 75 entries are from another. In cell number nine we define our neural network. It contains three repetition of convolution layer followed by max pool layers with 8, 12 and 16 convolution filters respectively. Following that we have two dense neural nets. Image above 9th cell is pictorial representation of our neural network with output dimension and operations annotated. In cell number 10 we configure neural network optimizer to adam and loss function to binary_crossentropy. They play major role in how weights of neural network are updated finally on running cell number 11 neural network starts training. Just look at loss function and make sure it is decreasing. Once trained we need to prepare test data set we repeat procedure done on training data set in 3rd, 4th, 5th and 6th cell on the test set. We also prepare label for test set but this time we run model on this data set to get predictions and not to train. I got test accuracy of 88%. Take this with a pinch of salt as data set used to train this model is very very very small and inadequate to properly train this neural network. That's it for first part of miniproject number 28 in next part which i will upload in a week or two. We will train another neural network that gives us coordinate of hand detected. I hope you liked this video. If so please don't forget to like, share and subscribe to my channel I will see you soon with another video till then train a network. 