 [MUSIC PLAYING] BALA KASIVISWANATHAN: Hello, everyone. Good afternoon. My name is Bala. We're going to talk about Apigee and the product roadmap, but before I get into that, I just want to give you a sense in terms of what we will be covering today. First and foremost, we'll go through a section, we'll talk about how Apigee helps customers. Then, since we are a recent acquisition, and some of you are going to be Apigee customers, some of you GCB customers, we'll talk about the synergies of Apigee and Google Cloud. And then we'll get into the actual details of some of the roadmap themes and focus areas. So before we get into the actual roadmap presentation, the first thing I want to start with is APIs. We, as a company, Apigee existed before we got acquired by Google for the sole purpose of helping customers deliver great APIs to their developers and manage them in a good way. So why is that important? If you think about it, APIs are everywhere. So the way I think about this is that if the code is the brain, and all the technical infrastructure we see is the muscle, APIs are kind of the air that technology breathes, right? It's everywhere. And we have dealt with a lot of customers who have a significant volume of APIs, and how we help manage that. But when we joined Google, we almost saw a factor of 10 of what that happens within Google, and it gave us a lot more excitement and capabilities for thinking about, what else could we do for our customers. So that's the context in terms of why Apigee exists and what's the kind of problem we are trying to solve for customers, in this world where APIs are everywhere. Now, before we get into the actual roadmap, so lets start with, where does Apigee actually help customers? Now, again, we're going to talk about some roadmap items, and I'm obliged to tell you that these are our best plans. That are no hard time commitments here which we can adhere to. We'll do our best to deliver some of these features through 2017. So take them all with that context as we go through. So first things first, we see a lot of customers, as you heard in the keynote from Eric Schmidt, that people are currently in a place, and they need to go to cloud. And as they're trying to do that, they go through what at least a lot of analysts and we call as two-speed IT. There are systems that exist today in the enterprise, some on premises, some in the cloud, and they are functioning very well, and there are some challenges with them. But what's happening is, on the consumer side, you already have customers who want to go faster. They want new mobile experiences. They want better retail experiences. They want a better web experience. They want better partner integrations with respect to your businesses. And when you want to deliver those, then you get into a lot of problems, because you deal with a lot of issues with the APIs you have. And this could be the lack of visibility. Most importantly, as you heard in the keynotes, security becomes a big thing. The speed at which you can deliver these things, that becomes a big issue. Then when it comes to developers who are really trying to use your API-- so that's internal developers or external developers-- the challenge becomes the ability to onboard them and have them self-serve themselves to understanding what the APIs and what they can build using those APIs. The last, but not the least, is what I love to call a successful catastrophe. What I mean by that is that you did not expect things to be popular. And you heard the example of Pokemon. So that's a good example of what happens when somebody plans, they do their best estimates, and suddenly, things go through the roof in a good way, and then you need to deal with that, right? So all those traits apply very much to APIs. So when you think about all these problems, whether its visibility, whether its agility, whether it's security, or the fact that you have a happy coincidence of fantastic success, and you need to scale, all these problems are where we want to help our customers. So where do we actually fit in the enterprise stack, so to speak? Because a lot of you have a notion of what is in your organizations, what are you doing with different systems today. So we are essentially the layer which we want to call system of engagement. And this essentially gives you a very intelligent way to manage these APIs and address those problems we talked about, which is, how do you help secure your APIs, how do you scale your APIs, how do you have analytics around your APIs, and how do you do developer management, and last but not the least, how do you have some persistent layer in case you want to build an application quickly and take advantage of the facilities we provide you? So this is the context in which we are able to help our customers. Now, if you take it one more level deeper, in terms of what exactly does the product do, we begin with the notion that we have a developer, and that's the developer we are trying to sow. And this is something we call a digital value chain. We've been talking to customers about this for the last five years, and it resonates very, very well, because at the end of the day, the consumer who is using an app does not know, does not care, and does not need to know about APIs. When they want to click a button on your application on your mobile phone, or click a button on your website, it should work, it should perform, and that's all they care about. The developer who is really creating this application also does not care what your back-end systems are-- how old they are, how new they are, are they scalable, are they reliable, are they redundant? They shouldn't care about all of that stuff. They have an API, and they are going to create an application using that API, and it should perform what that API says. The contract between the API team and the developer is the API, and that's very important, because the developer does not need to know the team-- does not need to know the nuances of the system behind it, which is power the API. All they care about is the contract. If you tell me this is the version 1 of API, and this is what it's supposed to do, and it's documented, I expect it to behave that way, I expect it to perform that way, I expect a certain SLA for that API. And as long as you do that, my application is going to perform beautifully and deliver the right experience for my customers, which could be your customers. The API team, on the other side, is also thinking about, how do I do all this when I have a variety of systems in my infrastructure? Some of them are really modern, containerized applications-- they can scale beautifully, They are elastic-- whereas some of the systems are fairly brittle, they're old, but they function for a specific reason. You need to figure out how to kind of abstract all that and provide a clean API for the consumer of that API. So that's effectively the story this digital value chain is trying to tell you, is that the contract is the API, and the people you really care about are the developers. Again, this could be internal developers who don't need to talk to teams, or know who is actually managing the API or managing the system, or external developers or partners who could be using that API to deliver some great value for you and your customers. The API team is also thinking about this as a way to develop APIs, or finesse or enrich APIs which you already might have. And they are also developers in our eyes, and our product is also supposed to help them and solve the problems for them. So those are the two constituents we try to solve for. And before I get into any more detail on this, just a show of hands, how many of you here have heard, used, or are using Apigee right now? OK, about a 1/3 crowd here, OK. So now, let me get into what exactly is the product. The product we have is called Apigee Edge. And the way you want to think about this is a very important runtime aspect of the product, which is the bottom half of the slide, and there, we care a lot about how do you do the right security, right transformation, the right mediation for whatever you need to make your APIs work extremely well. That's job number one. Along with that, we have a set of services which really make life easy for the developer who is using the API, and also the team which is producing the API. And they include things like delivering an awesome analytics experience, so that you can look at all the data and make decisions around, is my API performing well? Does the API have the right SLA? And is it being accessed by different teams in different parts of the world? And all those kind of data points can be easily visualized and seen in the analytics dashboard. It also allows you to very easily publish documentation on a developer portal and let your developers come to the portal and say, I want to learn more about APIs. It could be a store's API, if you're a retailer, or it could be a user information, or a customer information, or account information if you're in, say, financial services. So I come to the developer portal, and I want to learn about a certain API, so I should be able to go, search for that API, look at the documentation, and understand what exactly does the API do, and more importantly, what are the steps I need to take to consume that API in a secure and authenticated fashion? And there, again, you want the developer to be very empowered to go there and learn about that API themselves. And then he or she can go and figure out what they want to build. What are the new experiences they can think about or imagine? And then ask for permission and get some access to that API. You want to make this process as frictionless as possible, and that's the goal of providing your tool set like this. Number three is, we've seen many customers have large set of different organizational boundaries within their company, right? You have a department A, department B, and sometimes they don't talk to each other. And this is one way to make them talk to each other in a very simple, technological way. And when you do that, you always also have to think about all the other obligations the organization has. Sometimes they could be a regulated industry, and I've talked to a lot of financial services customer, and they go that my credit card team cannot talk to my banking team, or my banking team cannot talk to this other team. When they say it, what they mean is, the data has to be isolated, and people who are working on those APIs, and the data behind those APIs, have to be very well protected in terms of who accesses it and who cannot access it, right? So those are the kind of things we can again do with management services, where you can have a logical separation within the product we have. So you can create teams which operate separately. But the beauty of this is that you can still expose all of that API into the developer portal as one consistent kind of interface. What I mean by that is, if you're a company which has developer.mycompany.com, and if I'm a developer who wants to come and explore the APIs, I actually do not care that you have 15 departments in your organization. I just want to know, what are the things you have available for me as APIs, where we could collaborate and create something interesting for our customers, which can benefit me as a business and you as a business? That's what I'm after. So showing your organizational boundaries on a developer portal doesn't serve any good, but it's something very important when it comes to providing the APIs within your organization, because you want to be very careful about whatever your obligations are when it comes to regulatory or compliance reasons. So that's the core of the product, in terms of the high-level functionality. But the most important thing I want you to take away from this particular product is not only the governance piece and the organizational permission and capability which I described, but the fact that we have built this product to be truly multi-tenant, and it's available today for you as a SAS product. However, we've also taken the extra step to make sure that we are able to ship the same stack to you, and deliver to you on premises, should you choose to run it on premises. And the reason we did this was we'd, again, go back to a lot of these industries where it's extremely regulated. And they're still figuring a way to move to the cloud, and we don't want them to lose out on the benefits of an API-first strategy, and how they manage and deliver these APIs in a good way to their own internal developers or external developers. The third piece is that we also understand that the customers who are actually doing hybrid, which is they do want to run some on the actual runtime features, which are at the bottom of the slide, on premises, but the rest of the stuff, they don't want to actually manage and operate. And they want to let Apigee kind of deal with that. And that's, again, the hybrid approach that we have today. We built this product about 4 and 1/2 years ago, and we have always stuck to very much a cloud native kind of principle. It's a distributed computing model. We have used a lot of open-source technology in terms of having the best persistence layer, the data layer, or the runtime layer components. And we can scale effectively very, very well for any customer who chooses to use it. And of course, we also care a lot about compliance. So we do have HIPAA or [INAUDIBLE] certification, and things like that, for customers who really care about that stuff. So what has that meant for us? What has that meant for us is, we have had over 350 enterprise customers who use the product today. Some of the marquee names you can think about in retail, in financial services, in travel, hospitality, you name a vertical, we have customers who are using this today. And just last year, thanks to the way we do our product, we shipped over 90 features in year 2016. But last but not the least is that we actually help handle, just in our cloud, over a billion calls a day in terms of API traffic. So we have proven, again and again, the scalability of the platform and how we can help customers. You heard Dan talk about Home Depot as a great example for using GCP, and they happen to be also an Apigee customer. And again, so we've had customers like them, and others in retail, who use us regularly for Black Friday. And we have had a 50% jump, year over year, from 2015 to 2016, in the amount of traffic we've been able to handle for these retailers on our product, for Black Friday specifically. So all these things are the proof points for you in terms of making sure that A, there's a very real need for you to deliver quality APIs and give them in a very easy to consume and in a very good contract way to your customers, number one. Number two, you need a platform like this to manage, monitor, analyze, and deliver a great experience to your customers. Last but not the least, you need something that's to bridge and help you get to the scale and get to the agility you want to have. So that brings us to the next thing, which was, in November 2015 is when Google acquired us. So we are all part of the Google family now, specifically in the Google Cloud team. And what I want to go through with you now is kind of the synergies we have as part of Google Cloud. I just want to give you a bit of context on that and then get into the actual roadmap discussion. So when you think about the cloud, Google Cloud itself, there is a very specific set of things we are trying to help customers, right? We talked about the fact that we have the infrastructure which we've built over the years at Google Cloud, which is unsurpassed. So we can actually give you the optimization and cost benefits like nobody else can. We have invested in a lot of technologies when it comes to data and machine learning, again, which you can benefit, and take your data, and apply the right insights to your business based on that data. We have provided some of the market-leading Container Engine technology to make sure that you're able to go and do what you need to do for modern application development. How do you connect different platforms and create the right ecosystems? That's another problem we want to solve for you. Last but not the least, we want to make sure that you have the right devices, which make you productive and also secure. So how do you bring all this together when you have this challenge? The challenge here is, as you're modernizing a lot of things in your IT infrastructure, you're going through this challenge of saying, I have all these layers, whether it's infrastructure, whether it's creating platforms, or they're building applications, securing my devices. But if you think about the speed, the speed varies depending on where you are and the workload you have. So to be very open, this slide is very subjective to what you're doing, right? You could be looking at it in terms of your private data center for certain aspects and certain workloads, and you could be looking at certain other workloads in hybrid, certain in cloud. And they will have a varied speed when it comes to what you are able to do. And this is not very dissimilar to what we talked about earlier, when it came to the two-speed IT, right? It's a very similar kind of problem. So the number-one takeaway I hope you all have, listening to the sessions in the keynote and other sessions you do today and tomorrow, is, we are very committed to meeting you where you are, and help you grow from there. So let's look at what does that mean. So first and foremost the way we think about the problem sets is in these five areas, right? Infrastructure, storage, network, something I don't think anybody has any more questions around. They understand the value. They understand the optics around that, and the efficiencies on running infrastructure at a Google Cloud scale. The second thing, which I think was a lot about the keynote today, which is about, how do you deliver value using the data and machine learning capabilities? That's, again, something you've all heard. The third one is getting to be very interesting, where you are able to build interesting new applications, both from an experience point of view, and how you can scale, and how you can have very good containerized applications delivered for your needs. The connected business platform is essentially where we're talking about, how do you bring an ecosystem together? Again, when we talk about ecosystems, it's the APIs powering different things for your businesses, and how you showcase them in a marketplace, whether its internal or external, and how you can have different participants and consumers in that ecosystem. And last but not the least, when it comes to teams, devices, and security, we again have a very clear way to help you, with G suites and the mobile and laptop devices we have. So with all of that, this is how the portfolio looks, right? So when you look at this portfolio, obviously, you're looking at, from an infrastructure, storage, and network perspective, one of the most cost-efficient cloud storage, networking, and computer infrastructure you can get. You're looking at one of the most advanced machine learning [INAUDIBLE] capabilities, which you can take advantage of and apply for your businesses. You're looking at the best open-source, containerized App Engine out there which you can use. And then when you look at the connected business platform, you're looking at how we deliver our own APIs, as a finished product, which you can consume as a customer, and also have Apigee deliver your APIs in a very similar fashion to what we do, for example, like Google APIs. And last but not the least, having the efficiency, and the productivity, and security for your knowledge workers, with G Suite as well as Chrome devices. So lets go one level deeper on this in terms of what exactly is "meeting where you are" means when it comes to the connected business platform. We understand that a lot of our enterprise customers today have a lot of infrastructure and applications on premises, and some in the cloud. And what they tend to do is, they do also have existing legacy integration because of the needs they had a decade ago. As you move forward, you've got to figure out how you're going to expose all of this as APIs and be consumable for your developers. That's kind of where you're at right now. So we want to make sure that we are able to help you, starting with wherever you are in terms of your exposure layer and integration layer, and then take that and give you the facilities to deliver it as APIs. Now, what does that do, though? I mean, you can always argue that I already have an abstraction, I have a middleware tier, and I've invested in that. The challenge with that is, it's a very exposure-driven model, and it does not take into account the developers who are going to consume it. So where Apigee is really trying to come and help you is about helping the consumption part of it. The developers who are internal, or in partners, or external partners, who want to develop on APIs, that's where the consumption is going to happen. And if we can help you with that, that will make sure that you have a lot of agility, you can have a lot of innovation, and you can also have a lot of business growth, because you're creating that ecosystem for yourself. And it also leads to a lot of new business models. So for example, one of the favorite examples we have as Apigee, as a customer, Apigee customer is, for example, Walgreens. Walgreens, for those-- I apologize, if people have traveled here internationally-- is a local pharmacy chain, and a large brick-and-mortar chain. They have always had the ability for you to upload a picture, and then print it, and go pick it up in a nearby Walgreen's store. Now, think about that. As the entire experience shifted for people who stopped taking pictures on a digital camera, and they started taking pictures on the phone, that business infrastructure still is there but is not being realized in terms of a new business model. So what did we do with them? So we started with them, where we experimented with something called a photo print API. So all it does is, it allows you to upload a picture from your phone and then fire a print-out, and figure a store near you and pick it up, right? Sounds simple enough, and the good thing is, they had already some of the back-end systems available, so this was possible, using the technology we have and the systems they had. But that's the first part. So you could almost say that we took a web-based approach with digital cameras and turned it into an API-based approach, for a mobile app plus the store, thanks to this technology. That's the starting point. Once they got that going, the second piece of the information there was, If I polled this room, how many of you would take a picture on your phone with the native camera app? OK, so this is a good example of saying, nobody is going to download a Walgreens app to take a picture, right? So therein lies the problem. So you're going to take a picture with a photo-taking app of whatever you're comfortable with. And then that's what the next step was with Walgreens. They said, OK, how do I take this and integrate it with other applications, which are photo-taking applications, but if I let them print onto my site-- sorry, my Walgreen's store, that would be awesome. So you, as a consumer, get to take a picture on whatever app you want, but you can fire a print-out whenever you want and pick it up in a Walgreen's store. Now, that's great, right? But why should a developer do that? Guess what-- there are hundreds of photo applications today on iOS and Android, and everybody's trying to figure out how to monetize that. What did Walgreen's do? Said, you know what? You send a person to my store to pick up a print-out, we'll do a dev share. You send me traffic, foot traffic, and I'll give you something back out of the photo printing revenue. Great business model. That's a new business model, right? And now you've innovated, because you have hundreds of these app developers who have photo-taking apps, some large, some small, some very local in certain countries, in specific regions of the country-- sorry, in the world-- they all are trying to do interesting things with the photo-taking apps. Walgreen's is not in the photo-taking app business, so they wanted to see how best they can take advantage of that, and turn that into a new business model, right? And here's the other statistic. When you have a customer walk in to pick up the printout of the photograph, guess what happens. They pick up something else at the store. So in retail, for somebody to walk into the store, and trying to get somebody to come into the store is hard enough, but here, you have a customer who can voluntarily come inside, pick up the print-out, and they take something back and buy something in addition to what they came for. That is gold in retail, right? So that's the innovation in terms of business model. But that's not where we stop. Then, Walgreen's started to think about, what are the other things I do, which can be done like this? One of the things they do is a pharmacy. Guess what's the pain point in pharmacy-- and especially, if people who are in the US who know this-- is when you have to go and fill up your prescription again every month, or every 30 days, or 15 days, or whatever it is, right? They said, if I could automate this process, where you could take a picture of the medicine you have, and the app figures out that you're qualified for a refill, and you're ready for a refill, and I'll notify you when the refill is ready, so you can pick it up on the way home or on the way to the office, life is easy, right? So they could do that, and now they'll do a refill almost every minute, right? So that's, again, an innovation, which it leads to brand loyalty, great experience, and driven by an API technology. The last, but not the least, thanks to a lot of this innovation is, now they have a fantastic ecosystem of partners who really are able to deliver different experiences and different integrations. So now you could go to a Walgreens app and ask a question about a condition, or research a medical issue, and then figure out an answer. And if you have the medicine there, you can see if there's a Walgreens outlet which can actually be nearby you, where you can go pick up that medicine. So all sorts of innovations suddenly start to happen with that journey. So when I talk about APIs, it's not about taking your legacy integration and exposure and then just letting it be through another technology layer. But this is really optimized for consumption. And the developers can be your own internal developers, they can be external developers or partners. But the impact you're trying to drive is all about, how do you drive new business models and keep innovating? And this could mean API monetization, it could mean partner ecosystems, it could mean different things for different customers and businesses, but that's the actual benefit that you're trying to drive. So I hope that's given you a sense, in terms of where we are trying to do the whole ecosystem and business model with a connected business platform. And this is, again-- this is not new to Google, right? So today, we have over 3 million businesses that use our Google Maps APIs. So we know a thing or two about what it means to have an awesome API. How do you manage this at scale, how do you build an ecosystem, and how do you have businesses consume those APIs for interesting things, right? That's something we do. We're doing the same thing with other things, like Language API, or Vision API, and things like that. So our goal is to apply both the learnings and the knowledge we have at Google Cloud and Google for running scalable global APIs and creating ecosystems, and marrying that with the technology we have with Apigee, and also having Orbitera there, which is all about monetizing and creating marketplace for applications, all together, to bring the value to you in a connected business platform. So that's what we are trying to do, and that's the synergy we bring with Apigee, Orbitera, and Google Cloud. So, with that context, I hope you found it really useful, let's switch gears and talk about what exactly is the Apigee roadmap, and some of the themes and focus areas. So there are three big areas which we focus on. Number one multi-cloud, number two, delivering awesome APIs, and number three, machine intelligence. So we'll go through each one of these. Why is multi-cloud important? We have talked to a lot of customers. At Apigee, even before we joined Google, I would meet at least 5 to 10 customers a week, and we have a lot of other folks at Apigee who meet customers daily. The reality of the world is a multi-cloud world, right? People have investments in different clouds-- sometimes its public clouds and sometimes its private cloud, or on-premises data centers-- but the reality, is people have investments across the board. And it's our job, as a product company who are helping customers take that leap into the cloud world and make the digital transformation, to provide you with the right tools that's whereever you are. So today, we see customers not only using Google Cloud, but we have customers who are on premises using Pivotal Cloud Foundry, for example, and using other public cloud technologies. We also see people using just their own data centers, VMs, using containers, using Kubernetes on premises-- all that stuff is happening today. So we have to really help customers, whatever they are, and that's an important, and a very urgent need, so that they can move forward when it comes to their digital journey. So what are we doing specifically for that? So I showed you the slide earlier, where it was really about how our product functions. There's one difference in this slide, which is, we have embarked on a very aggressive hybrid approach. What does that mean? That means that our runtime layer is something, we're going to make sure that it's available to you, and you should be able to run it wherever you want that to be. So it could be in another public cloud, it could be on premises, it could be in Pivotal Cloud Foundry-- anywhere you want to run the runtime, you should be able to run. So in the future, we envision a world where the runtime could be, for example, Google Endpoints. You could have our own gateway enterprise-- Apigee hybrid gateway, or it could be even some other open-source gateway that you're running, wherever you're running. Our job is to be able to give you a clean, single pane of management and control across all of that, and give you all the other abilities we just talked about earlier today, right? So that's the number-one goal. And I'm very happy to announce that we actually are delivering the first part of this, in fact, in a session one of my colleagues is doing right now, where we're announcing the early access program for our Edge Hybrid Gateway today. And you can read about it more on apigee.com later this week, and we'll be opening it up for customers to sign up and start using it. And the goal here is that A, you should be able to take this hybrid gateway, run wherever you want to run this, and it's still managed remotely, and it does not have the constraint of having to always stay connected with the management layer, which is running in the cloud, or it can also be customer managed. So everything you see on the top half of the slide can be either Apigee managed or can be managed by you as a customer. The other important point in the slide, which I want to make sure that you understand from a roadmap perspective, is that we also believe that giving you a gateway, or giving you a runtime, to run wherever you want, is the beginning. Let's say you're running this on a different public cloud or on Google Cloud. The next thing you would want to do is make sure that the runtime is able to take advantage of some of the services on that cloud. So that's the other piece we're going to invest in, which is, give you the native integrations out of this runtime, wherever you need them. So for example, if you had to do something like invoke a Google function from the gateway, we should make it very easy for you to do from our runtime layer. So we already have a runtime layer which is very sophisticated than anything in the marketplace, because we let you have-- run Node code in it. You can actually do service call-outs using Java, Python, or JavaScript. All of that functionality is awesome, but when you're running that particular runtime layer in a cloud, you should be able to access all the functions of that particular cloud very easily and should be able to integrate that. So that's the other important aspect of how we're thinking about this whole hybrid approach. So again, to summarize, the key takeaway from this slide is, A, we are committed as Apigee to multi-cloud. Number two, our big bet is around hybrid, so you should be able to run our runtime layer wherever you want to run this. And number three, it should provide you all kinds of native integration capabilities over a period of time, so that depending on the cloud you're using, you should take advantage of that native facility, OK? That's multi-cloud. Let's look at APIs. So when I think about APIs, there are two things which we need to really, really make sure that happens. Every CIO, every product executive, every API program owner I talk to, talks about security. It's not a cloud topic, it's also an API platform topic. At the end of the day, when you are trying to expose your APIs to the world or to your partners, security is key. So we will continue to innovate and deliver the best security features you can have when it comes to the runtime and managing APIs. So we just went live last week with the SAML support and for our core offering. That means you should be able to use any SAML provider for authenticating both our management layer as well as the runtime layer. That gives you a lot of flexibility in terms of controls, in terms of who authenticate-- who is able to access and authenticate themselves in using APIs. We are also making sure that it's very easy for you to manage certificates when it comes to two-way TLS connections or anything else, again, giving you the ability to watch for when they're expiring, renewing them, making sure the API SLAs are not going down because of those kind of issues. There are other two big themes which I want to hit upon here. One is, we do want to make sure that as organizations adopt the API-first approach, what we are seeing is a larger pool of folks who are trying to help drive the overall digital journey in the company. And that brings in a lot of security issue, which-- it's with respect to people and what they can access. So we're investing specific set of energy around making sure that we don't create a friction, because one of the things we want to avoid is a very strong, very top-down governance model, because what happens with that is, it takes away the speed and the agility and the interations you need in an API program. So instead, what we're going to do is provide you very easy ways to either live off your existing authorization models, and create ad hoc teams and permissions services on top of it, or give you a very lightweight model to create the right set of folks, and the right set of permissions for what they need to do, on top of a platform. The essence here is to give you visibility, control, but at speed and scale. That's the goal out here, not to give you a very stoic, straitjacketed way to do something in terms of actual governance models. Last but not the least, we also understand that there are a lot of existing ways in which you can manage keys. So it could be for rotations, could be for encryption, and things like that, and you have existing policies, and you may have existing infrastructure. And one of the things we're going to do is make sure that we invest enough to integrate with those so you don't have to reinvent them, because you may have gone through a lot of due diligence in making sure that they are the ones which are helping you with respect to compliance, and some sort of regulatory burden, right? So we want to make sure that's there. So this is security. So for everything we do in security, which is to make sure that your APIs are safe and your obligations around compliance are there. We also want to make sure that we have a fantastic, delightful user of the API and the product we have so that you can do your best work with our product. So first thing we're doing there is that we're moving from our classic UI, which kind of is what we've been having for about 3 and 1/2, 4 years now, to something we just launched late last year, towards the end of the year, which is this kind of an experience. So it's not just a cleaner modern design in terms of UI, but it's very focused around what you want to get done and how fast you want to get things done. There are a few things we want to do very much out of this, which is, number one is, we want to make sure that we make the OpenAPI Spec a first-class citizen within our UI and our product. And for those who are already familiar with OpenAPI Spec, you know the importance of this open standard, that you can describe and have the right kind of API specifications. You can collaborate on them. And so we provide a very simple in-line [INAUDIBLE] were you can actually collaborate and create the specifications. But we don't stop there. We let you create the right API proxies right out of those specifications so that you can go faster in terms of what do you want to do with it. You can even mock an API, and have your developer consume that API, and build an application without actually really having a back-end system. Those are the kind of things you could do with what we have in our product. The other thing you do is, once you have an API proxy or API, you should be able to think about, how do you want to package it for the consumers of this API? As I mentioned before, this is all about the consumption, not about the exposure. So we do that as well. And that means you can package up, create the right products, and then publish them in a portal in a very easy way. So again, in this particular exercise, what we have done is, we've let you do a very, very simple, easy portal, which is configurable, which you can go and publish everything in terms of documentation and your products, and get your dev portal-- developer portal ready in under 10 minutes. And that's the goal we have. And last but not the least, we want to make sure that everything else you do here is easy, self-serve, and you are able to actually take advantage of the steps we provide you, and you can explore the right way. So we made sure that this particular experience is very, very intuitive, and it's very helpful for you to be more productive. So in terms of the actual focus, in terms of future themes, we continue to do OpenAPI support. And in fact, there is a current draft of OpenAPI Spec 3.0, so as it gets ratified, we want to make sure that we are on top of that and support you in having that support. We continue to improve and innovate on our next-gen developer portal, and giving you more features, and making it configurable, yet powerful. And this also means we give you two options. We have a very strong customer base, which uses our Drupal Developer Portal, which is extremely flexible, very highly customizable, and takes advantage of a large community of open-source development around the Drupal technology. But we're also going to give you something which is a very simple, hosted, configurable portal, which you can go and start up very easily. As people mature in their API journey, we are also seeing that a lot of folks want to actually start thinking about monetization. So one of the things you'll see is, while we have a fantastic monetization product, we built it for large customers who have complex business models. We are going to invest in making sure that you have very easy and-- easy ways to monetize the APIs, and probably very simple ways to try what you can in the marketplace and keep adjusting, so you can find out what's the best way to go and create those new business models which you want to do. Last but not the least, any API program, for it to be successful, needs to have a good community participation. And this community could be all your internal developers, and it could be all the developers in your partner, or a broader ecosystem. We want to make sure that we give you the right tools to bring in that community, or you to get access to that community, as part of the product itself. So that's kind of the other aspect. So as we look at all of these, the key takeaway for-- sorry, going back-- the key takeaway for APIs is, we want to make sure that we deliver secure APIs. And we make sure that the APIs are available for consumption in a easy way. And that's kind of our goal with the APIs. Let's go to the third and-- interesting aspect of machine intelligence. I'm sure you're hearing everything from, you know, self-driving cars to artificial intelligence. All of this stuff is exciting. It's very, very exciting. And we are really hoping that as a Google Cloud customer, you're able to take advantage of all the big data and the machine learning APIs we have and build something awesome, like you heard in the keynote. While we do that, we, as Apigee, are also looking at this and going, what is the stuff we can do in our product, which allows us to make the product shine better, thanks to these technologies? And that's in a very important initiative for us. So I'm going to walk you through some examples in terms of what we're trying to do when it comes to machine intelligence. The first thing we realized is that once you have APIs, the scale at which APIs can get abused or attacked is significantly different than what you've seen before, right? Because there will be somebody who leaks an API key, and you'll have sophisticated programs. They will come at that API from different IP addresses, at different times, at different speeds, in terms of requests per second. So a simple rule-based approach just doesn't work. So all our APIs, you could do something like put a spike [INAUDIBLE] policy. Like, you can say, OK, more than 1,000 requests per second? Just shut down-- don't respond. But the advantage these bots have is, they can learn. They can go out and you at 1,000 requests per second, and once they know you're getting blocked, they can keep coming at you at 999, right? And then you say, no, I'll figure out the IP addresses. But if it's a mobile client API, but it's coming from-- in a public cloud IP address, maybe I can shut it down immediately. They can spawn IP addresses. So you can keep chasing these things, right? So the goal here is to provide you with tools which are able to prevent those bot attacks, and also make sure that you're able to detect them correctly, and then make sure that you're able to prevent those attacks from taking your systems down. And how do we do that? And this is where we are taking advantage of the machine learning capabilities at Google and applying them to a very specific context here, which is the APIs, right? So here, we would look at patterns-- patterns meaning, is there a slow-burn call? Where is it coming from? Is it from multiple places? Is it for a specific resource on that API? What times do it come-- do they come at? All these things can be done, and learned continuously, so that we can give you the right warning, saying, hey, these API calls looks like bot attacks, so you need to do something, and give you the right tools to do it. Or in some cases, we actually know it's a bot attack, and we can do some preemptive action on your behalf. And that's something which can only be done at scale with machine learning. There's no other way to do this because of the volume-- sheer volume and magnitude of these kind of attacks that can happen. The second one is about user engagement. A lot of people use APIs for delivering experiences on mobile apps or web apps. And the good news is that you can do some fantastic personalized experiences to users. The bad news is, if you don't keep learning and changing, you're going to deliver some bad experience pretty soon, because it's not, again, a rule-based approach. You got to look at different factors and deliver the right kind of value. And when you can inject something in that API to change the experience for that customer on the mobile app, and deliver a very specific user engagement or personalization, it takes it to a new level. So again, that's an area where we want to invest and give you the right tool sets, so you can configure and attach some models so that you can say, here's how I want the app to behave if these are the things you notice, and have that model learn continuously, and improve the experience you deliver to your customers. The last one is an example of operations. What do I mean by operations? So there are a couple of examples, right? So you're creating an API proxy, and you happen to create one for, let's say, user account. So when it comes to user account, we may have seen hundreds of user account APIs across our customers, and we would probably also know what are the typical traits of a user account? What are the logging patterns of a user account? What is the traffic like? Is it a time and date-- sorry, a frequency in which they get used? Or in terms of, do they have to have some security policy, because people typically try to attack that, from a bot perspective, because they're trying to get into an account with brute force. So there are a lot of things we can actually glean from all the patterns we watch, across a set of typically known APIs-- could be slash accounts, could be slash login. How can we help you say that when you're creating a slash login API for the first time using our product? We say, based on all the customers we know, we highly recommend that you have these two policies for security with the login API. That would be awesome. In fact, even better would be, as we learn more, we actually prompt you, even after the API is in production, to say, hey, we notice your login API has been running for three months, and blah, blah, blah. We highly recommend, based on some of the new threats we've seen, you add this additional policy to your API. That is something we can do for you, both from a security perspective and making your operational nightmare a little bit easier, right? The second one could be rollouts. We released about every two weeks, and we've gotten into this blue-green model of deployments so that we know, when all our customer API traffic is coming in, we can start with the percentage of traffic switched to a new release, watch it, look at the data, look at the error rates, and keep increasing the percentage for the new release before we switch over 100%. How would we be able to give that kind of information to you for your own APIs? Can we look at patterns of, when you switch from a V1 to V2 API, could we give you some knowledge and say, looks like your error rates are way beyond the threshold. We suggest to roll back immediately. Or you're looking really good, so you should accelerate the release cycle right now. What are the kind of things we can automate for you? Is there things we can do where we look at certain error rates and automatically tell you or your ops person to do some changes to your back-end systems? Those are the kind of things we can automate, again, by learning continuously and applying some patterns and algos to it. So again, this is extremely useful when the volumes are at a different scale, right? And we believe the billion calls a day we're processing is going to be nothing very, very soon. And the data we see across our customers is that everybody is growing in terms of their API calls, because everybody is trying to take an API-first approach. When you have that kind of a scale, there is nothing that is going to help better than having something like a machine learning technology which applies in the API context. So that's kind of the third big market. So in summary, the three bit bets are multi-cloud, delivering great APIs, and machine intelligence. And what the takeaway would be is in terms of making sure that it's an API platform that will be available to you where you want it. We want to deliver you the most secure and easy-to-use APIs using our technology. And number three, we want to present to you, in our product, intelligence as an ingredient so that you don't have to do the hard work. We do everything behind the scenes, thanks to all the power of Google Cloud, and deliver intelligent features for you in the product. So those are the three big themes we have. And we are very, very excited to be part of Google Cloud and Google, and also look forward to delivering some of these amazing features. And hopefully, some of you who are our customers will be taking advantage of this through our early adopter program. And those who are not yet customers, I hope we have your trust, and we'll get you as customers and get into a great partnership. So with that, I want to thank you for taking the time and attending this session. And I'll be around in case anybody wants any questions answered. I'll be more than happy to take them. Thank you again. [APPLAUSE] [MUSIC PLAYING] 