 [Music] good afternoon everybody how you doing that's it let's try it one more time how you doing excellent much better so I realize we are sitting in between you and your beers or whatever cocktail that you may enjoy so you're going to try and keep this session interactive and interesting so my name is Ruth Paul Bogle I'm part of the product team the apogee product team within the Google cloud team and I'm also going to be joined by Greg Braille who was the principal software engineer within the Apogee team as well so if you're here for learning about how you can manage api's and focus on the full lifecycle then you are at the right session right so pat on your back if you made it to the right room you have heard a lot about api's today in in the morning keynote you heard many api has been discussed some products being shown we're going to try and take you to a journey on what does the api lifecycle look like as we see many for customers adopting api's and using their the way to transact digitally with many of the businesses many of the partners and employees and external entities you're going to walk it through the role of the API team this is a team who's traditionally responsible for working standing up api's securing them so on and so forth so today is going to be a very interactive session we're going to dual back and forth between slides and demos to kind of give you a taste of how that experience looks like so why ap is when you hear about things such as digital transformation essentially means many modern enterprises today are transacting the business api's so all the core capabilities that have been locked in some systems of record such as ERP systems some of the systems which are homegrown are now unlocked with a BIS in this modern world which means you can take to the api's and not only creates some excellent productivity applications internally you can take them out to your partners and build this whole ecosystem in the morning in the keynote if some of you guys got a chance to attend that the different kinds of ecosystems by partners employees and then even an outside wall to the industry and then external entities API are becoming more and more central to every organization that is trying to participate in the data world we take a slightly opinion view about api's and we start with what we call as the digital value chain it's actually a very simple concept if you think about it at the end of the day all what matters is the entity to your left or my right which is the customer or the end user it's all about delivering delightful and connected experiences to those end users through an app an app can be of any kind could be a mobile app could be an app which is built in the web or even a set-top box well their developers who build those apps right and they build those apps using velka reddit api's which are managed by an API team and this API team comprises of API developers who will use a platform such as Apogee edge to manage secure publish those api's and essentially the API layer really sits on top of any back-end system that you may have it could be something which is already service enabled it could be an old system which has some slope based API is perhaps or perhaps you have some legacy systems which are unlocked using some kind of a middleware solution ok so we're going to examine what the data really chain is and how you can essentially use these core constructs to do something very simple it's all about ensuring that you have massive adoption of the api's as you start on a digital journey and start to transact more and more through api's adoption is key it's only as good as you know people using your api's that they are gonna start giving you the benefits that they promised it's also about scale you need to be able to rely on a platform that can support massive scale and we're talking about internet scales as a platform Apogee edge supports billions of API calls in a day in the cloud and we have several of our customers who are actually supporting the exact same capacity in their own datacenters today it's also birth control ensuring that people have this awesome experience comes at a cost you want to ensure that if API are the way you are transacting your business it's done in a careful curated way you have a lot of security around ensuring that only the people or the entities or the apps who should get access to the api's do so and in the end all the tools and the platform capabilities really put a focus on trying to give you all that at a very fast pace or agility okay so I'm going to turn over to Greg for this piece he's gonna walk us through what the apogee edge platform is all about and then both he and him and me are gonna duel back and forth ensuring you through a live demo of the journey of an API developer and how they use a platform to build api's Greg excellent hey I'm Greg I'm gonna be talking a little bit about the apogee platform and a little bit about what we actually do here so people always ask what is Apogee do if we looked at that digital value chain there were really two things that were happening we were connecting the developers the people who build apps that use api's with the API team the people who actually create the API is that they use and for that we have to have things like developer portals documentation self-service onboarding tools so that a developer can click on a button and get the security credentials they need to make API calls right away there's also a technical connection where we're doing things like adding security to API calls doing rate limiting caching transforming api's from one format to another the Appaji edge product is responsible for doing really both of those things and if we look at the components of the product there are a couple of different pieces down at the bottom is what I'm talking about between the application and the API itself we have a set of runtime services and that's where we can insert policies and v falls gonna show you how we create those policies and what they can do and those policies can do all sorts of things like I said security rate limiting you know you'll get the whole story there and then on top they're a bunch of services that enable that so for instance there's a management component that is responsible and supplies both a user interface and an API for manipulating all of these components programming the proxies configuring the developers and the applications and everything that prif balls gonna do in the UI has an Associated API as well they're also a set of developer services those are the developer portals and the tools that we can use in order to construct a web presence for our API so a developer can really you know connect and learn how to use the API and their set of analytic services that are gathering metadata about all of the API traffic and presenting it in different ways so that you can report on it create custom reports and see all sorts of information about how the API is being used now Appaji and is a product for all this companies such as Google have API management systems that they built themselves for their own API so what Apogee edge really is is a product that allows anybody to create the API management system that they need for their API and that fits in with with the requirements of their enterprise now I don't know if any of you are Appaji customers already but I wanted to talk a little bit about actually how the product is deployed the entire product we described there actually can run in a couple of different form factors we deliver it as a service it's available as the service which means everything you see in the demo today it's all multi-tenant self-service cloud app just as you gone come to expect from the Google cloud platform where Appaji is actually sitting in between API calls being made from the client to the server and it's actually the runtime is going through our cloud the entire product is also a for on-premises deployment so we have a number of customers typically large customers who have lots of data centers because contrary to what we might say sometimes there's still a lot of data centers out there in the world and customers often want to have their API and all of their API traffic and all of the management of it controlled by their own software running in their own data center and finally there's a hybrid model and I'm gonna get to that a little bit because that's some very interesting stuff that is starting to emerge that is starting to meet our customers where they really want to be if you look at sort of the traditional way to use apogee sort of a big big product that sits in the middle so if we look on the top you may have mobile apps and web apps that are making API calls from the internet to backends that are down on the bottom within an enterprise network and in using the apogee edge as a service typically Apogee is running in the Internet the API traffic is going to Apogee somewhere in the cloud and it is actually connecting back to the backend and interestingly enough the runtime component of apogee edge can run in the Google cloud it can also run in the Amazon Cloud because the truth is we have a lot of customers out there whose API backends are already in Amazon and we're committed to making sure that that runtime is available in both of those locations so that people can choose and they can put their api proxies where they actually need them to be based on the geography of their actual network but we also offer a hybrid option and that hybrid option allows you to have the API gateway the thing that proxies the traffic located wherever you want without having the rest of Apogee come with it so things like analytics and management of the API stuff come as a service or as the Gateway itself becomes something that you can deploy on your own network so what one of the things we're doing this week is we're actually introducing a new option for the apogee edge product called edge hybrid and we're actually announcing an early access program that we're signing up selected customers for this week and what that's allowing us to do is allowing us to mix and match and have sort of the best of both of these worlds for the runtime components the analytics components and the control components stay in as a service within Apogee but the Gateway itself the proxies the traffic can go anywhere and we're introducing a new open source component that we're calling a PID and one of the things that a PID does is it sort of acts as an API for API management so it offers services for things like verifying API keys you know computing distributed quota values and gathering API analytics and then we could have a variety of gateways that actually run in your own data center or inside of kubernetes container or inside pivotal Cloud Foundry or wherever you need them to be that can then use a PID to supply those services and in the end we're giving people a very flexible architecture where we're gonna give them very good performance and a lot of robustness because the truth is that there are a lot of different places where api's need to run api's don't just run in big data centers they don't just run on the Google Cloud increasingly API is run in the backs of stores you know API is a run in you know in airports there are all kinds of places where these API backends live and we want to be able to put a component of the API management system in all those places now I want to go a little bit to talking about the lifecycle and the demo we're gonna talk about we think really that all API is go through a very similar lifecycle like this um we're gonna start at the top with API design but we're gonna move on to how you actually design your API and how you share that API design with others how you actually turn that API into something that's on the Internet how you add layers of security to your API using industry standards how you publish your API to create a developer portal and a web presence developers can use to sign up for your API what to do if your API gets a lot of traffic how is it gonna scale how are we gonna monitor what's going on and get analytics so we can understand how the API is going to be used and there are lots and lots of ways to monetize api's and one of the ways is of course to charge for API calls and if that's an option that works for your business that's something we're going to talk about as well so we're gonna start that and we're gonna kind of trade off a little bit on the demo and switch from one to another but we're not gonna switch just yet I haven't said the magic word um so let's start with design and faith Paul's gonna be sort of the the person who does this and I'm gonna ask him some questions but you know I'm I'm an API developer I've heard of swagger here a lot of and here about something called open API which sounds like a less exciting way to say swagger but as I understand it I can design and I can describe my API in open API and if I do that there's all kinds of things I can do to generate cool documentation and to share my API documentation with other people can you show us a little bit yeah absolutely so you're right open API is a great way to be able to share what a API does it's an excellent contract which can be used to not only create API but also share that across different developers so they have a common sense of what an API looks like can be okay we're on the demo screen out here so what you see out here is I'm logged into a PG edge this is the air PG edge cloud version looks exactly the same like when you would deploy it on premises I mean everything it's a brand new FH experience this is a user interface they actually released just about a few months back and it is centered around the API lifecycle so in this case I'll do a little bit of level setting here I'm connected to the demo file org think about or give a short for an organization and it's the container where I as a business unit or a team or a company for this small enough will build all my api's and add some policies okay so the very first thing we're gonna do is start off with taking a speck in this case I'm going to take the liberty of leveraging a spec that is called open API for hotels it's a very simple spec which is sitting somewhere in the in the internet in this case happens to be just a simple gist or not github account so let's go to the app ugh screen so that spec that yamo was the design of my API so as a developer I might I might use it to also generated or I might just type you type type right exactly okay so it all starts from the spec editor so I'm in the tool I click on the spec icon and let's go import the spec so I'm just going to paste the URL that I just picked up from there and say import and reviewing the demo gods are with us today it should in a few seconds actually show you how the hotel's open abs spec looks like so Greg as you can see out here it spits out some very important information out there such as on the left hand side talks about what the host name is the base path is but more importantly this is information that gets synchronized left right so everything you want to know right on the right I have a nicely formatted set of docs for my API exactly and then more importantly if we now start examining this this simple API doc it very clearly describes what this API should be doing in this case we have certain resources which have been declared out here such as how do I query a specific hotel right so you have different kinds of options provided to your there options to kind of update hotels in this case so we're going to use the backdrop of a hotel as an example and then you also have the ability for you to actually get a list of all hotels so Greg as you as we just kind of were discussing the open API spec gives you the ability to communicate your intent and in this case the open API editor or open API is used to be earlier known as swagger is integrated right into the product once you have imported the spec you can actually collaborate with other API developers in the team so they can edit make some mods perhaps add some changes and then you can take it to the next step of that publishing or to actually creating an API okay cool and I should point out that open API is an open standard it's controlled by the open API foundation on the version 2.0 is the version of the spec that we're looking at here there's a version 3.0 that's in the works and about to be published that takes into consideration a lot of the inputs people have had but we've been working with open API for a couple years now and we found that it's become the de-facto standard and essentially the most popular format out there for a for API specification you know there are some cool things you can do with it you can even generate SDKs for various languages from the open API spec which is sometimes something that's very handy to be able to do so let's go back to the slides for a sec and so we talked a little bit about the spec and what open API is and how it is so once I have a spec you know now what do i do how do I actually turn this now clearly you know I'm a developer I probably wrote some node code or something to implement my API maybe I wrote some node code that uses postcards and I deployed it to Google Cloud or wherever doesn't really matter where I deploy it but I now want to have all the API management goodness and all the serviceability of appaji around my API so so how do I do that yeah so that's a great point so now you're gonna focus on great I have some design using an opening API spec how do I take it to the next level of actually building an API proxy okay so let's switch over to the demo please alright so I have an API using actually using a simple click I can click on the generate API proxy button I can give it the base path let's call it v1 slash reservations and again all I'm doing out here is it has picked up all that information from the open API spec in this visit I'm just making a few changes because I would like for the API proxy to be deployed in a very specific way you can see there the backend endpoint this actually happens to be an existing API endpoint so if I was to go out here and query this this is exactly the backend API that Greg was just talking about this is running somewhere in the cloud could be the Google Cloud could be any other data center doesn't really matter this is the end point that we're going to create a proxy in front of and then we'll use the API magic to add a bunch of different things so I go back out here click the next button and fair enough the API proxy wizard has actually picked up all the different resources which was specified in the open API doc and I had the option to say great I'm only going to do just retrieving all the hotel for right now so we're just going to do the most basic API which is get slash hotels something very very simple and in this case I'm going to add some security a little bit later on in the face but for right now I just want to keep it as a simple pass through proxy and oh by the way by even making a simple pass through proxy you can get a lot of visibility and analytics on API usage so let's go ahead and slick next here it gives me the ability to decide where I would like to deploy the API so let's just go with all the default settings and hit build and deploy so at this point in time it has built a very simple API and I have a brand new endpoint which is going to be now used to start sharing with your outside world so instead of sending my API calls directly to my back-end I send them to Apogee exactly okay here's the apogee endpoint and I'm just using a simple rest line and this kid happens to be postman and when I call this fair enough it gives me the exact same result back from the backend API so at this point of time we've gone through two steps we have an open API spec talk and we've used the proxy editor to be able to generate an API proxy which just points to that Greg do you see something missing out here perhaps if he if I was to share this API endpoint with someone else could someone perhaps abuse it yeah I mean I also wanted to be HTTPS but I know that's an easier yes but yes so I mean what's to stop someone from just you know watching this demo on YouTube it's gonna be on YouTube right and just you know trying to hit that thing in a thousand times a second and trying to screw up our demo yeah so that's a great point how do you ensure you can keep things in checks and balances right so they have variety of different ways so in this case what I would like to show you is great I have an API and this is where the API proxy magic starts so in this case I've opened up an API proxy editor this is where I as the API developer or the API team has the ability to put in a lot of different controls and you put in those controls using what we call as a pa policies so I click on this plus step icon and it brings up the 30 different out-of-the-box policy that we have to do variety of different things so we have some traffic management policies security some of this we're going to be taking a look at later on mediation and then more importantly you can extend the platform by using some of the extension policies so you could literally use things like Java JavaScript or Python to pretty much alter your own policy and shared with the rest of the team in this case I will use something as simple as a spy caress policy the spike response II think of this as a system-wide policy which can make sure that only a specific amount of transactions per second or transactions per minute whatever that rate happens to be it can control that so that none of your back-end systems crash and burn right as we know that DAC and API is running somewhere it's either in the cloud or it's running on premises and it has some finite capacity right so in this case I can make those quick changes using some configuration options in this case for the purposes of the demo I'm just changing it to 3 per minute what this means is do not allow any number of API calls or only allow 3 calls per minute okay just a very simple policy that I've added out here and at this point of time I would also like to call out the trace tool for those who attended the keynote in the morning may have seen the trace tool it was flashed briefly the trace tool gives a very powerful mechanism for the API developer as I'm building out API proxies it gives me some whiter check points and information to make sure are the policies which we've added in working as expected so think about this as a web-based testing tool throughout my API development process ok so I'll just leave the trail session on I'll go back to my client and I will call this API and when I do this you can see that there were the trace which was recorded here I can hover over some of the things and gather some whiter information in this case it tells me exactly what was received from the user I can hover over in this case you can see the spy chorus policy Bailey took even a millisecond right so many of these policies have been very optimized to ensure near literate network level agency right so let's now try and pretend that someone is trying to call the API is more than they should and let's see what the API platform does so when I try to hit it a few times right away the spy crest policy kicks in right it was set to three per minute and in this case it calculates they're only going to allow three transactions per minute thereby protecting a back and api's okay so over to you Greg thanks so as you can see just taking a break here from trying to be scripted what footballs done is is he's shown that we can create a proxy for an API and we can add policies now we don't have unlimited time so you might ask questions like you know can I customize the response that comes back from the spike arrest policy can I have different spike arrest limits for different types of api's can I have TLS turned on and required can I form the API response like we saw in the demo this morning and the answer is yes you can do all those things this product has been around for a couple of years we have a lot of large enterprise customers who drive a lot of sometimes obscure requirements into it for the purposes the demo we're not going to show every single thing we could possibly do with the product but we're trying to give you an idea here but let's go back to the slides for a sec so you know basically what we've done is we've shown you know hey using the Appaji edge we can now create a proxy for the api where we can insert policies so now instead of going directly to my back-end and waiting to Appaji and it's pretty easy to insert some basic policies like a spike arrest to give a basic level of quality of service to my api but of course one of the things i would think is you know gee you know great you got a spike arrest now the people watching on youtube can't really mess things up but my API still has no security and you know that's no good I mean I I've read about OAuth I understand that that OAuth is one of the de facto standards for API authentication how can I start to add some of those things to my API without having to learn all the complexities of the spec and program and all myself know that that's a great point Gregg in fact many customers that we talked to both 2.0 S is a very popular API security standard right so in this segment you're going to take a look at how exactly we now take this API and actually protected using an old policy okay let's switch to the demo piece so let's carry this thing a little bit forward I'm going to create and add a very simple earth 2.0 policy when I add this you can see that I'm trying to use the verifier access token method okay and the verify access token method within these what policy is actually going to ensure that this API whenever invoked is presented with a valid or auth token okay so just for kicks I'll go back to my postman client and hit a send request and right away you can see that it points out I need a valid token so how do we go about getting this token one of the key parts of a platform is the notion of an OAuth server so the effigy edge actually has a built-in Hoth server which can mint tokens and we support a variety of different kinds of Hoth flows right we have the standard two legged and three-legged OAuth flows out of the box and because the platform is customizable you can actually support some other flows as well whether Apogee is the platform that does the OAuth dance itself or it integrates which we have in the past with many different identity and access management systems it can control that mint tokens take some else want other systems tokens and enforce that and other stuff so in this case in order to actually show you how this would work I'm going to introduce a new concept and that's of an api product so what's an api product APA product is actually the way you would want to expose your capabilities which are nothing but AP is in different shapes and sizes to consumers so you could think about a strategy where I could take 3 AP eyes and only give read-only access through what we call it an API product so an API product and I'll build something out here called hotels gold and you can assign some coders out here in this case let's say hundred per minute and I'm going to pick the API proxy that we just built which is hotels in this API product definition I can add a bunch of different API proxies and I can also limit them by perhaps all of these API only have get access so I can limit what I can do with the API as well as which parts of the API I can call but also what I can do with it ok exactly ok one of the other things I could do is the exact same API combination or perhaps a separate one I could perhaps make a hotel's Platinum product yeah in which case yes right and which case give them access to more api's and perhaps let you do more with those API itself and perhaps up your bandwidth 2,000 times a minute ok so let's go ahead and save this API product great so this is where when we talk about the API team you also have collaboration with not only the API developer but the API product manager if you think about detailed business and API those products that's exactly what we mean now you can bundle these API then then offer them to the outside world so great I have a product but I need to be able to showcase some level of security access so in this case I'm going to introduce a concept of an app think about an app as the ability to actually generate some API keys ok so in this case I'm going to very quickly call this the hotel's gold app developer here and in this case I'm going to pick the hotels gold product and hit save so all what I've done so far is saying great I have an APA product called hotels now let me generate an app called hotels app this is the app which has an identifier a key ID and a secret which you would share with the app developer who's going to consume the API okay this is where the consumption angle comes in so you can pretend you have 10 partners each one of them may have a separate app why would you do that you would do that so you can track them separately you can report usage and as Greg mentioned you can do some pretty exotic things you could have some partners who are subscribed to the gold product and have access to lesser parts of the API or at a lower quota or you can create apps that give access to let's say the hotel's platinum product which give you more access to the same API is an additional stuff for some of the other api's once I have the app let's click on this I have what we call as a key and secret so what I'm going to do at this point is as I mentioned Apogee edge also has a full-blown auth provider in the platform I'm actually going to use a pre-configured token endpoint which is enabled by default in any org that you provision and I'm going to specify the client ID and the client secret so what I'm really doing out here is I'm mimicking that I am an external client which you have configured using an app and someone has shared the app key and secret with me traditionally the sharing of the app key in secret essentially happens for a developer portal ok that's on the consumption side so I call this and I'm using the client credentials grant type which may be very familiar to some of the folks who are perhaps API developers already when I make a request out here it gives me an access token so now have an access token which can be used securely to access the API this access token could be timed it can also be scoped we're in it can give access to different parts of the API than the product at the product local level you can actually configure what kind of scopes it allows access to so let's take this access token we'll go back to the hotel's API proxy and now add an authorization header here and the exact same token that was just minted we'll place it in the authorization header and now make a request oops maybe we didn't cut and paste right let me oh that's your client ID I think I think I may have the wrong client ID let's go take a look here make sure there's a live demo guys yeah that's right okay let's see this get out here oh I know what the problem is and I know how to fix it it's a demo oh we didn't we didn't setup did we not know there's one thing which we actually skipped over and that was this back-end system that I'm hitting actually has its own security mechanism and this is all writing the header less damn you're talking to github exactly that's how we can actually and let's remove that token so here's another key thing out here as you are minting these tokens they may be back-end systems which happens to be in this case which is sensitive to an OAuth header you may want to remove or disable that old header from here so in this case let's go and let's remove the authorization header this wasn't scripted by the way just for the record that's a live demo okay so let's go remove the authorization header from here so again using simple policies we can plug this thing in and now hopefully this thing will let me through so if you weren't so quick on the uptake we would have used the trace to figure out what's going on exactly okay but we don't have 24 minutes so let's not do that yes all right so back to you that's really cool let's go back to the slides for a sec so we showed how we could do OAuth now in the interest of time we did the simplest possible form of OAuth which is the client credentials grant type or informally known as two-legged OAuth you're probably asking yeah but I need to authenticate my end users and I need to authenticate the end users using my Active Directory or using my own internal single sign-on system that's extremely common in fact almost every Apogee customer does that takes a little bit longer to configure but it's all the same kind of process you're seeing here and it's a very common thing that we do with our customers with OAuth but I noticed that as we were doing this you're kind of doing everything in the Appaji console so you know I really want my developers to have self-service I don't want them to have to call you up and have you into that thing and push a button to create an API key I want to push a button and I wanna as a developer you know have this thing work just as well as the Google Cloud api's do so can you show us a little bit how we might do that absolutely can we switch to the demo please so you're right you need to be able to advertise to the world he's an awesome API and the way to do that is through a developer portal in this new API experience they've actually enabled that capability in the hands of developers so I'm going to click on this icon here and we're actually going to build a live portal as you go along in this demo so let's click on the plus portal I con and let's call it the brand new hotels API portal and you can see this is a live URL which is being generated as you speak let's go ahead and create it okay so once I do that it gives me something very basic and simple and when I click on this it gives you a street cards page not something which I expected I'm trying to build a hotel's API right so let's see how we go about changing and customizing and show you the power of how you can do that all from within the tool so in this section I can go to the pages so think about my role changing slightly where now I become part of the content team who's responsible doing that and you can do that from then the same tool a PG Edge has our back built into it which means you could essentially have a role or that of a Content developer who has access to only building out this portal and not mess with the API proxies and vice versa okay so in this case we go to the home page and we can start making some changes here we can call it hotels and just change it in couple places and I hit publish okay so in this case if I was to refresh this great I see that change but I don't really like the picture here it's here but odd doesn't look like we don't have any hotels in Chicago anyway yeah exerting in San Francisco in New York only so let's go change that well how can I really do that I can go back to the the hotel's main page out here the portal page and I will upload some handy files in here so first go and delete the the default logo which has been here so right from here I'm going to actually add a couple of files in this case the logo file okay I'm not a UX developer it's all the time on that I say it's awesome and a background which i think is really neat okay so now let's go back and go to the the theme setting out here in this you actually have the ability to change a few things right you can change again this is a very simple markdown kind of format I can go change the footer the background everything oh boy yes okay if simply the just built on CSS I know some some folks don't like it but again this is very simple ones the world okay I think I got it right let's go ahead and publish this portal Hey look at that and just like that I have a branded developer portal within a few clicks and minutes right didn't take that long but there's something which I also would like to add in we have a hotel's API yes that's missing out here so let's see if we can add that to the developer portal yep okay so go back to the portal page here you can click on the API section okay in this API section I'm going to add the exact same hotels API spec that I had used so let's pick the hotels gold product because your API spec is mapped to the product it'll go ad this yep that's the spec we created in the beginning of this demo right exactly on the SunShot is ensuring that if I change it online it doesn't immediately get published until I'm ready for it exactly okay so I hit save and complete one thing I want to go check on is once you go to the spec let's make sure the spec is looking the way it should be here's the hotel spec right oops code you're going here make sure you'll get a snapshot of the latest one let's pick this and see if this okay once I've done this I want to go to the hotel's main page okay and maybe add one more comment to it hotels API excellent and hit publish okay so I just made a couple changes I added an API snapshot and updated the definition so if I go here and click on this you can see the hotel's gold product and you can also see the API spec oh looks like it imploded I think let's move on interest of time okay it's supposed to be here yeah so works with this you would actually see the API documentation render out here in a very similar way better oh yeah as we had in the spec editor not consumer perspective now can I actually sign up for a key here and get that API key in credentials we saw earlier yeah so we haven't enabled that but okay in real world what you would do is you would take this to the next step and the same API key and secret that I actually generated from the API provider side you could have a developer portal through which you can expose that capability and have them generate the API key in a Cell services right right and we're not gonna go into all of that in the interest of time but that's exactly why this ability to create a portal and the customization of the portal is very simple the portal is it's just a web app that calls the management API is an edge everything we've done in the UI has an Associated API we have a portal here which is um you know kind of built into the product and very easy for customers to deploy but we've also had customers build their own portal in their own way completely custom with heavy input from their branding teams on top of our management API and really everything in between so you can get going very quickly as frith polish showing and from any API so that's all you need but you also have the ability to do extensive customization so let's go back to the slides and we're gonna talk through a few more sections of the life cycle a little bit more quickly but we wanted to get the real you know the basics of the whole product there now once I've done this I probably want it to scale and you know I got to assume that the Apogee edge product running as a service can auto scale that runs on top of Google Cloud it even runs on top of Amazon Cloud all those capabilities allow us to take advantage of auto scaling and some of the interesting things you can do with edge as a service we've done a lot of work to make sure that it's not only scales but it's very reliable so for instance everything in the product is is replicated across data centers we use technologies like Cassandra remember we run in a lot of different places not just the Google cloud which allows us to have things like ooofff tokens and quotas and things like that work even in the failure of an entire geographical region and our customers who run on-premises they almost always run in their own data centers and they almost always have more than one data center and none of them has asked us actually one person asked us for the old traditional you know failover disaster recovery drill on the weekend thing what they want is everything to be active active across their data centers at all time now this this chart here shows the common case of auto scaling which is you know most API is just like most web apps have a chart that looks kinda like this you have big traffic Peaks Monday Wednesday Thursday and Friday and whatever geography you're in you have smaller traffic Peaks on weekends and it's pretty predictable and auto scaling systems like the ones built into the cloud can easily keep up because every 10 or 15 minutes the kind of average what's happening and they they add servers and take them away an interesting use case is we have some customers whose peak does not look like this so for instance we have a customer in the clothing industry that does auctions of items of clothing periodically so for instance at 9:00 a.m. on Thursday the locks in a new limited edition item of clothing to their fans who will use their app to try and get this item of clothing and their API traffic goes from one or two requests a second to 10,000 requests a second in the space of about a second these kinds of auto scaling algorithms don't work there because there's no auto scaling and system in the world that can detect you know traffic ramping up over a 2 or 3 period and spin up you know 50 or 100 server nodes so we also have the ability through our global support center to configure sort of what the parameters of this auto-scaling are an Apogee edge you know we send cell to a lot of large enterprises and some of them you know like the idea that they can call someone up and say hey you know we have a big event happening tomorrow morning let's make sure we're ready let's kind of adjust those auto scaling parameters in order to make this sort of thing happen that's a real important thing that we do now if we move on of course this none of this would work if we weren't monitoring so I talked about the scaling I talked about all those kinds of things but obviously within our global support centers we're monitoring what's happening not only with the cloud we run on great cloud platforms but with our own application you know our certain our certain API is using an excessive amount of traffic and we've gotten to the point now where we have great people working behind the scenes as well as a lot of automated monitoring where we often detect problems with a customer's back-end API before they do and sometimes we call them and say hey we're noticing a lot of errors from your API we're noticing that the API traffic is coming to Apogee but it's not necessarily getting to you and they say oh you know look at that we're having a problem um so it's it's a very interesting world that we live in where we're kind of sitting in the middle of a lot of API traffic but since we're sitting in the middle of this API traffic there are some interesting stuff we can do about analyzing it all the API calls passing through averaging we can gather metadata because we do things like ooofff and api key validation we can record for you which developers which applications which geographical locations are accessing the API the most and allow you to do some interesting things in order to run your API program remember in a lot of cases you may have an API product management team that is actually trying to turn this API into a product and even if it's not even if it's just for customers or partners it's very important that you understand what are the most popular API is what kind of SLA am i achieving or my API is very slow do they have a high error rate are are certain applications more popular than others are there giant changes has an application suddenly gotten wildly popular which might mean either you have a hit on your hand or someone has compromised some application credentials and they're trying to use the API in a way that's not supposed to be used so for all these reasons there are a lot of analytical capabilities in the product and let's see if we could take a look at how those work and what kind of information you can get sure let's fit to the demo please so back to the air pH UI you can click on the analyze tab and this give you options around many out-of-the-box reports that are generated by default by the platform so I was talking about you know you have an API proxy that's built as API traffic is piping through the through the Gateway we collect a lot of different kinds of metrics many of them we kind of publish out-of-the-box in terms of these reports so very first one out here is the API proxy performance report now this gives you a very broad idea of how the API proxies are doing and which means the general general model API traffic piping trail system in this case I have a few different API proxies that are deployed in this org and we can see the total traffic coming out through here and in a very quick snapshot the kind of number of errors the percentage of error so on and so forth you can also see the amount of time which is being spent in the API proxy versus the average chaga response time so the amount of time that Apogee might be taking to execute those policies I put in exactly in mine policies are sometimes simple things like spiked arrests or sometimes they're my own JavaScript code or my own Java code and that can be any number of milliseconds that's right exactly so this starts to give you a good idea of the kind of things you should be doing within the API platform certainly we run into situations where customers are doing some heavyweight transformation there's some other tools which are really good for that your API platform is clear of agility this is your face to the outside world you want to keep it as quickly as possible process as many transactions as possible there are bunch of different reports which you're not going to go through today but again you can check them out you know we have a free trial account which anyone out here can sign up for today but what I am going to touch on very briefly is the notion of custom reports so although a lot of these are the Box reports great but many times you had the requirement if think about API has become your channel your digital channel business wants to know what kind of orders but I am i processing right what kind of Hotel Reservations have gone through this so you need the ability to be able to create custom which can be presented to this is user in this case I'll just give a very simple example of a custom report in this case it just shows you the amount of traffic coming in from different AP is no DD ApS could represent different business segments such as orders such as payment so on and so forth and using some simple heuristics we aggregate the data and then he had the ability to canal dissect through this and figure out what's really going on with the api's you can delve deeper we have a bunch of different kinds of metrics out here if you were to click in the Edit tab here you can just add different out-of-the-box metrics which are available at a high level right all the traditional stuff that you can expect to be you can also see some custom dimensions out here these are the ones which you as an API developer can have the ability to create some custom dimensions so imagine we capture usually any information that can be gleaned on from the header information or any kind of commonly available user agent stuff that's available but as an API developer within the API proxy you can actually add policies such as a statistics collector policy and ever start scraping out all the useful analytics that you need in this case the order amount and the order discount right once you do that you can add various kinds of dimensions and you can see the amount of stuff that's available to you some common dimensions which you can slice and dice using the geographic region region that you're coming from any specific developer app perhaps who's calling it you can use some custom dimensions out here and many of the advanced dimensions are available for you to use by default once you do this you actually have a very simple report which can then be shared in a secure way by different kinds of users and of course the reports have api's exactly so you can bring the version API ok cool back to you so back to the slides for just one more second so that's that's how the analytics work so we've got some real comprehensive capabilities there and the last thing is they'll talk a little bit about money I want to make some money on my API now it turns out there are a lot of ways to make money on your API back in our hotels API I might make money by having people stay in my hotels or sometimes I make money because my API drives other product sales but you know I might be doing something really interesting I might be in finance and I'm trying to do a market data API those folks are actually next door or I might be in the news and I might charge a lot of money for extremely extremely timely news or who knows what I might want to actually charge per API call and have different tiers and different kinds of prices for different API calls is there a way that I could do that absolutely let's switch to the demo game please this is actually by design going from slides to demo just to make sure you guys are up I don't think the person taking the screen apart is not by design but that's ok ok so let's use a live example in this case right I'm going to very quickly talk about Pitney Bowes which should also mention in the keynote and this happens through a developer portal so i give you a very broad and very high-level example of how we could take and build a developer portal this is another example of how they taken the developer portal and customized it and they also happen to leverage some of the monetization capabilities of the a page platform if you think about monetization once you hit a level of maturity in your API and you want to make money off your API which would seem natural at some point you can use some of the monetization capabilities provided by FEG edge we are going to review the consumer side of it but from the producer side or the providers are of api's you can create different rate plans right because you may want to offer a pis so that people can consume based on different kinds of dimensions perhaps you want to sell api is using volume based pricing right maybe these new number of API calls per month or you may want to charge separately for each transaction or you might want to do revenue sharing where you give developers money for building apps that use your API exactly so Walt means another example of how they use revenue share when they have their partners who are sending business to them so the developers get a cut of that transaction okay so in the spit knee--balls developer portal you can see they have different kinds of api's I'm going to click on the geo Search API and click on pricing plans this gives you the consumer side of it so if you are an app developer trying to use some of the Pitney Bowes api in this case geo search you can sign up for different kinds of plans in this case they are doing volume based pricing where you can get 5k 10k etc and different credits and in this case you can build custom plans so this gives you one glimpse of how you can use monetization both from the provider side and in this case from the consumer side - now monetize your api's so what's the credit is that like I get different points for different API calls exactly so this K there they have this notion of some kind of a premium tier where when you're using a higher tier they give you more and more credits so that upside for the developers oh I see that's and to use more and more ap is exactly and different API calls could have different weights essentially right exactly okay awesome so back to you okay so back to the slides one last time so what we've done really is we've gone through the whole lifecycle of API as we talked about everything from designing a spec and publishing this Bacchus documentation to creating an API proxy and adding policies so I can have some of the different levels of service around my API without changing what's on my back-end talked about how to create a developer portal and actually publish that API for use by developers how I can use analytics to find out how my API is being used and if I want to charge for my API like Pitney Bowes is doing using the apogee edge product how we can do that as well so you know basically that's what we do with apogee edge we provide a product that allows people to configure all of that stuff to work the way they need it so thank you all for coming thanks for trying [Music] you 