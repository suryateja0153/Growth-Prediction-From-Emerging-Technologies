 I think the last few people just coming in and then we'll learn what will make a start so yeah thanks for coming to see this talk it there's loads and those a real good ones here so choosing this one yes it's good to get to present the sort of stuff that that we've been doing and I've got some bad news so I was trying to use my switch controller to do it because I thought it's quite fun but it won't connect so obviously the demo gods are against us so we'll have to do a bit more old-school naptha yeah there we go so let yeah I'll introduce myself I'm Nick hills I work for a company called true clarity over in Bristol in the UK we didn't cycle builds for probably about ten years now and one of our biggest clients is easyJet and they're quite an interesting one because it's they have to deal with a lot of customers a lot of people buying flights huge numbers of transactions a second and all that kind of thing so hopefully what we'll go through today is a bit of background how we've sort of taken on going from being developers ie know how to work right cycle code through to actually owning the entire deployment process the DevOps process making sure that the site doesn't go down and we get rather awkward phone calls talking about how much money they've not been out to take for laster shirmat time see hopefully what what you'll get from this is that I generally believe cycle developers are very very good at this sort of thing we came into this without really a huge amount of experience in how to do support 24/7 how to monitor system in the detail that we really needed to a lot of the things that have been mentioned here you'll probably hear the term arm templates mentioned and before kind of doing this this whole process and piece that I didn't really know what that meant and hopefully go through the talk by the end of it you guys will have a bit of a better view of of what that sort of thing means we'll then look at a few examples of just the sorts of things that you can do it's not not going to be in any huge detail but some of the things that you might end up scripting as you're doing this sort of sort of process and there are some gifts so hopefully that'll make up for the fact that there's not too many demos because yeah these sorts of things on I don't think a great fit for demoing so probably I think about two years ago we started this process we easyJet hosted everything that they were doing on premise and that worked it we could handle kind of the load that we were dealing with at the time but what we've been doing sort of alongside that is being all of their checkout process essentially into sitecore and so we're dealing then with a lot more load we're dealing with the challenges of deployments where you've got loads and loads of people buying ultimately buying products at the same time in the the production set we're dealing with it is actually all the AWS and and so I know that goes a bit against the sort of mantra of some of these your stuff that we've seen earlier but I think a lot of the concepts they're pretty common you'll see similarities between the two to providers so for our production stack that we're dealing with we've got twelve site core instances and I mean they can bear handling hundreds and hundreds of transactions a second this is a bigger scale than we'd ever dealt with before so I mean it was a very interesting thing to see this happening and the slightly scary a bit is they take millions through this a day I mean it upwards of fifteen million through the checkout process so even small amounts of downtime is a real no notice it's a pretty scary prospect so I think this sort of I feel like this guy's pretty good representation of people learning development they I'm sure he's probably write better code than maybe I've done at point but they go and you started at net developer you leave well in my case I left University went into learning about development work so suddenly this sort of concept of doing DevOps it was a bit of a different different ballpark really it was it hadn't been taught it was kind of you have to learn that sort of thing on your own but I think persevering with it it really hopefully has worked out it's it's proved to be a very fulfilling and the sort of concepts that you apply I see your development your clean codes your the way you might want to stretch your things it's exactly the same you're ultimately or solving problems but you're just doing in a slightly different space now this is quite a common issue that I think we see and it tends our script world introduces frameworks left right and center I think you see that quite commonly as you start to dig into these tools in the way that the different providers offer up their sort services there's always something new coming there's always harder stronger faster next version that will solve all your problems now I thought I mean that duck sometimes is the case but often there won't be the Silver Bullet that will basically get you out of jail try and find something that works for you and just keep it simple you don't need to over-design all these processes because really you're just trying to deploy some code up to a web server so I think my argument here is going to be wide why do I developers a good choice for doing this sort of thing so they're going to be the people who've written the features they're going to be the people that understand the code and how it works they're going to be the ones that ultimately know how cycle works and I think probably if that's not the case then there's maybe well there's probably more options on this but these these will get you side either go on the training or in the UK we've got the Job Center so there you go that could be could be a fallback in the dirt this talk earlier we saw quite a lot of information where they were showing what cycle might look like in Azure that model holds true whichever cloud provider you're dealing with the two slightly blue e boxes here kind of represent cycle back in the old days so if we think back to kind of pre X DB you're talking about web servers and you're talking about sequel servers and ultimately that's it you don't need to really worry too much more than than that sort of thing obviously now in since the incarnation of X DB in the way things are moving forward start shifting towards things like and solar and that sort of thing but it's let's not forget it is quite a simple setup if you want it to be you've got is which pretty much comes with Windows server without you really need to do much and then you need sequel server that's a relatively commodity entity now as you sort of start on this process there's there's all these terms that you'll come across and this is I mean this is only a tiny smattering of the sorts of things you'll run into don't worry about the fact that all of these things exist as you start to the iterate the process it's much like development it's you won't suddenly go into your dump like dev sprints or however you choose to do it whether it's waterfall or outdoor anything like that and try and think like come up with this huge super solution from the get-go you need to start small in its rate and that exact process holds very true for this kind of thing start simple find the tools try the tools some of them you don't even need to do any coding for so if you go down things like the octopus route and things like teamcity it's it's more a configuration exercise it's not it you're not writing c-sharp you're not writing powershell you're not doing anything like that now one one thing we got caught out by luckily this was quite a long time ago and it wasn't nearly as high-profile at a site as easyJet but for some reason our team city broke and we couldn't deploy and something went wrong on the site and having someone stood over your shoulder sort of I guess criticizing the fact this is happening it's not a very nice place to be and I'd much rather be able to tell them well okay we've got either a resilient system built or we can we've got backup so if you do go down that route of using ox personal teamcity just make sure you back it up yeah it's it's not a good place to be if you if you haven't if you're doing anything that involves kind of lots of repeated processes so this might be setting up nuke it setting up boxes installing things configuring or pulling files down from Amazon or or as your blob storage anything like that you'll probably find that you need to start dealing with PowerShell so start learning about it is very very similar and sort of concept to.net you can deal with dotnet assemblies you can write your own custom c-sharp functions if you really need to but ya get stuck into power jokes you'll find you're really at really healthy so I quite like this this little animation here I think is quite good metaphor really for this sir this sort of thing so the goalie I think he's he's cracked ace made the save and the penalties not happened and then get its it goes in things will change over time don't necessarily expect yourself to be finished at the point you can press go and your site gets deployed start like your your you'll have more pages you'll have more sites um in cycles brilliant for accommodating all that it makes life very very easy to create microsites or extra nodes within the tree that represent anything that you want to really you might find that you need more servers because you're getting more traffic you might find suddenly you've got a sail on and you need spikes you're expecting spikes of traffic so you need more kit available to you so they're all these sorts of things mean that you're essentially your deployment entities will need to change and will grow and will shift sometimes you might find you actually need less service you might have over spec things and it's it's you won't be finished it you'll get to a point where things are working but just be think of it like development stories they'll always be more more to look at so for easyJet this has been happening for about two years and we've constantly changing things we shift in the way we use databases around we're adding in elasticsearch to certain bits we're using lambda to do things that we maybe didn't before and it's all yes all out there and actually quite good fun to learn so if you're coming up with a process or a new way of deploying things I think the sort of Montour view that we were trying to get to is you'd have this big red button and you could slam on the desk and the deployment would happen and all this kit would get spun up and life is really simple and you start to think about that and well maybe you need to add a few more parameters to that because it's not one big red button doesn't necessary fit all which environment you deployed to you're dealing with your Pradhan vironment your QA u u 8c you doing your blue or green deployment are you doing just psych or are you doing delivery doing authoring you're doing processing bit so you pushing it to region a pushing to region B so all of these things kind of combine into making this one big red button probably a series of buttons and or at least a combination of the parameters in these your talk they showed the way psych cooperation that and I think that's really neat you they would take you through a little workflow where you could pick kind of these sorts of things how big the deployments going to be is it your prod one is it the blue one or which lot you're going to and that sort of thing what we've done for easyJet is we've built a set of tools in WPF they're not they don't look usually pretty bus wasn't really the goal of them but we can use them to see exactly what we've got running in all of our different environments in which colors we can use it to concoct different deployments so the screenshot on the right here we can choose environments we can choose the fact that we're deploying just cycle or we're just deploying the API as we run we can choose whether we push it to just Dublin or to Dublin and Frankfurt and all that sort of thing so as we start to build this up really what we're doing is we're just generating a set of PowerShell scripts and I suspect the way that azure is handling the new site core combination of templates it's been a pretty similar thing it's aggregating this information together and then giving you something that you can run now this is a Bluegreen deployment C's has been sort of taught around quite a lot today and it's actually probably the the best part of redoing this entire process has been the fact we've been able to add this in and if people don't know quite what it means hopefully the as your talk earlier at least explain some of it but you've got the ability to push up an entire production production deployment test it in isolation and then finally when you're happy you can flip users to it so whether that's done through DNS or various other means that's done to you I want to do it now it's interesting in the talk earlier they did mention dealing with databases and they sort of glossed over it a little bit apologies if they're in here it's not a dig it's just day I it's a hard part of that or at least something you've got to consider that if you're pushing up an entire copy of your production stacks then you've got your master database and your web databases that will contain almost a state of things so it's kind of stateful in that way so as part of the sort of Swing and we'll see how this works in surely you need to take a copy of that so whether that be a backup and restore if you're dealing with sequel in that form or if you're scripting against actually super example use your API then you can control that database flow the impact of that is for the sort of front end users probably pretty minimal because you'll be making sure that you've got your whole green stack ready including your your web tier and then gradually you bring people onto it it doesn't mean that for example for the editors there may be a bit of downtime that they might have to deal with the fact that the master database is being backed up and copied but yeah hopefully as you start to investigate and take on this approach those sorts of things might help so it's sick right decided to try and do updates just midway through so that's good of a kind of Windows but hopefully were right there's a few other benefits that you can get from Bluegreen deployments that if you've got a blue stack you've got a capacity of 500 transactions a second for example so if you create a green stack you've got a thousand so we know for example that the certain points in the year where sale period comes when you get release all these new routes and suddenly we see the traffic go from really high to even even more than that so one thing we've done in the past is we've had blue and green running and we just split the load across them all now there are disadvantages there you you could bit more awkward about how you make content changes so what we tend to do is consider a bit of a content freeze just for that period of your day - but they're sort of reckoning is it's better to have the ability to handle all this load rather than the site go down if they do need to make content changes you might have to do it twice because you're doing it in your blue and green stacks but ultimately we're in a better place I think other things we've done in in Turtles handle that sort of problem you can we just stop the boxes turn them up a notch or two so in AWS we kind of moved them up through the bandings that you've got and then ultimately we've got more more capacity so the the story with as urine and the cycle demos are often talking about this a lot and it's a very very cool and very integrated tool which is application insights we heard the guys earlier mention it and it's very much part of the portal you don't really have to work outside of it now because we're dealing with Amazon we're not we don't have application insight so what we've gone for is a tool called data dog and it does a very similar thing it it a gate Saul the information that you might have in AWS so this is things like the CPU on the box is how many requests to your load balances how much disk you've got left all these kind of things just get pulled in automatically and then you can set up alerts based on them you can set dashboards with gracia and all the stuff interestingly though you can also push out your own statistics to it so we make lots and lots of API calls we get a lot of our pricing data from easyJet back-end systems so we can monitor over time how long these API calls take and if we suddenly see spikes in those we know the problem actually lies maybe with the easyJet and not necessarily with us if you are doing this sort of setting up any kind of deployments and you're pushing different versions of code around make sure you know which version of code is in different places make sure it's easy to find it out because if you're dealing with more than probably like three or four environments it can be easy to lose track of it so just keep a log of possible change that you're dealing with not only of the code but also if you can database and also the tools you've use so chances are you'll be kind of version controlling the tools that you've made to do this I think now one thing I quite like about what we've done with this is that we actually let our Graduate developers so these are people that are straight out uni come in and do our production deployments for us not to remove the burden from from us that's by no means the the intent although is quite nice but having to do a deployments all the time and the reason that we feel confident we can do this is we use exactly the same process within QA as we do in UAT as we do in production and so the problems that you tend to hit you'll find them in all those different tiers and you'll know how to handle that sort of thing one of the slightly frustrating things you do sometimes hit with the cloud and as your I think maybe has these problems but this is talking about AWS is you get this insufficient server resources ultimately Amazon is saying at that point in time they haven't necessarily got enough kit for you to deploy into for the size boxes you want now that's not shouldn't be a massive showstopper just wait 10 minutes and try it again and if your process can absorb that and you don't worry about it then don't get scared by it this I think is possibly one of my favorite gifts that I've managed to find on the Internet I think the only thing that would make it better is if there was some little paper clip offering some advice just before he does it so yes it if you're using the same tools for everything make sure that you can't just do delete production because you're gonna get a prettier heavy bollocky I think if you do that by mistake there's all sorts of different ways you can do it whether you do it in different accounts giving people access keys that only allow certain people to do production deploys whether you build extra prompts into the process all these sorts of things will help so just be careful that careful about how you handle it so I think this is quite an interesting interesting question and so which cloud provided you choose there's two - well there's several out there but I think the two that come up in conversation a lot at least for the the cycle spacer Amazon and Azure so which do you pick and sometimes that could be down to personal personal preference or the company that you're working with policy and that's how we ended up going with AWS that this is what easyJet were doing for all of their stacks and for all their other deployment so we fit into that now I think if you if you were going down the sort of site core purist route I sure would be the clear option to jump out because all of the support the site core building up at the moment and the templates and everything like that are all geared up for working with the shore so we've had to code up a lot of this stuff from scratch because ultimately it didn't really exist in the Amazon world so I mean it's down to you really you can pick both offer very very similar things for what you need to do so yeah I'd suggest it's it's you guys have to make that decision again there's other as you start to once you've picked your provider there's different options to choose for how you deal with things like your databases your mongos even down to your web boxes now with the web app stuff we saw before there are some niceties about not really having to deal with sequel backups or sequel resilience or all those sorts of things hand that over to the provider and they do all the dirty work for you there will probably be a cost with that that the sequel license has to kind of exist somewhere so ultimately that's probably being absorbed in the service that you're using but yeah it's down to you when we started this process there was the offering of RDS which is something that Amazon have it didn't seem like there was that great support for it from from cycle themselves so what we went with is is boxes so we actually host sequel server ourselves and we do the backups ourselves so we every two hours we back up all our sequel databases and push them up to s3 that's really quite useful because then when we come to do our Bluegreen deployments we've already got the backups already in place so we can then just err just make use of them the cloud can kind of appear this really good thing that you've got all this in like capacity that you can start to play with you can design all the networks from scratch you can add this size right and center and anything you want to do it's available the more you add the more stuff cost everything seems to come with a costs just be careful that that someone involved in this process has got a good credit card assigned to your account because you don't want to be in the position that your site goes down because someone's not paid the bill that's going to be a pretty embarrassing sell if it does happen there are a few things that you can do to kind of reduce the cost of stuff so Amazon has this concept of reserved instances and that's your way of kind of reserving your bag seeing the certain size or number of boxes that you want now it does come with some disadvantages so it's slightly harder to change then so you're not letting something that that might be evolving over time so they help some situations but yeah be careful we're not using those at the moment because we're still changing our infrastructure so much what we do to save some money in well another non production account is we just turn everything off at night and then turn it back on in the morning it's pretty simple scripts to run and we actually use some lambda functions which is a serverless concept and yet it's very easy to do it sort of deployment is one thing so you've got getting your kit actually provisioned is one part of the process you've then got actually installing what you want on there that's the sort of secondary part now I haven't actually used assuring a huge amount so hopefully this sort of thing will be will be getting a lot quicker but based on what we find with Amazon and it takes us probably about 20 minutes to from pressing go to the box is actually been running and then we have to do our installation setup so all in all we expect a production deployment provided it goes the plan will take about 40 minutes there is docker support in both providers and that was a bit sort of new for when we started doing this docker was quite early so we didn't think that we weren't quite ready to absorb it into the process but it's something that sort tension pipeline but Westar space we did find that 40 minutes is quite quite a long time so if you're doing QA deploys again and again and the guys having to wait 40 minutes to test out on your feature it's quite that's quite a long time so what we've done is we've built a slightly very process to this where we don't kill off the kit and recreate it we just pushing your code up to the same boxes we only do it in QA though we don't want people to start and start becoming reliant on it because ultimately it's different to what productions do and we own production to be this this real mirror of the rest of it alright so armed templates and CloudFormation doesn't anyone heard or not heard of these before sudden heard of them cope so a few and I mean I have to confess when I started I had no idea what these things meant I heard them mentioned it talks and people sort of went into them but I didn't really know exactly what they really what they did we'll look at CloudFormation first and then we'll have a look at as yours offering because it's very very similar there's a few things you can use with them you have things like parameters so this is when you install the template you can choose I want to push it to QA or I want to push it to you ATO on a push the green to plumb it up you can then set up things like mappings so a mapping might say because I'm deploying to QA through the parameter we pushed in I therefore want to use this network topology or I want to pick this V PC to install to Arnie's these subnets or these disks or anything like that you can then use conditions so this gives you the freedom to almost create if statements based off the parameters you've got now they from the experiences we've had they work quite well but they're a bit mucky they you end up having to write quite for both and quite long and scrip blocks or JSON blocks to achieve certain things so we've we've moved that logic somewhere else and I'll just touch on that later on and then finally you've got your resources so resources define pretty much everything about what's getting deployed your box is your networks the disks the load balancers the IPS the DNS entries you name it you can do that all that through ultimately through we're through this sort of thing it does have a big you I sort of drag and drop way of doing it personally I wouldn't go with this it's it's a bit like using Dreamweavers design view for making a website it hopefully at least shows the fact that we've got all sorts of different things in here we've got web boxes we've got sequel boxes we've got placement groups yeah you name it it's up there so there is your approach is very similar this is just a screenshot from site cause github where they host all these arm templates you can use and again it holds similar things you pass in parameters and you can make use of those throughout the rest of the process and I think what's quite nice for that cycle have done is they take a lot of that away from you you don't really need to worry about pushing all the data around it's something that we had to do which meant we had a real good understanding of exactly what was going on there are I think some really nice things that you get with this sort of approach that you install the template and you get 25 web boxes spun up and your entire production kit is that they're running you delete this template and all of that gets pulled down so you need to be careful you delete the right one which maybe here's a corner oh I guess it's the S is just the way they work you can source control them so you can see all the changes they're basically there Jason he does that's pretty easy to spot them gifts in and all that kind of thing they are pretty verbose so that you have to write I mean one of hundreds and hundreds of lines of Jason to achieve actually some quite simple things one of us is about 3,000 lines of code well the fans like lines of Jason so there's a lot to them and the syntax and the sort of the way that the different providers use them means you have to if you're swapping between the two they're a bit different auto scaling is another option you've got in this source herb that you can choose to add more web boxes at any point if you're going down that class of route in the talk earlier they showed I think that the sliders that you can basically just pump up the bump up the power and you suddenly got more available to you so that's that's a really nice thing I think the risk of that having loads and loads of web nodes can handle lots of requests but behind the scenes you've got to have databases that can handle lots of requests and you've got have that's available and ready to handle that sort of load so it's worth just considering the fact that sliding a scale up in a portal or adding more boxes on the fly isn't necessarily going to solve all your problems you're kind of moving the issue maybe around so yeah we do some load testing if you can and be aware that databases do have this limited limited throughput for easyJet we've we we try to keep actually what happens as simple as we could really we've got the blue start running so we like we touched on we back up the production databases this is happening every two hours or we can do it on demand and that's quite a simple thing to do it's basically normal sequel commands that you ran and then these get uploaded into s3 this is now down on our developer machines we compile it that's gotta be done and then we upload a zip of that to s3 and do the same sort of thing with some scripts you run so at the point that the box is fire up we choose to run a set of PowerShell scripts and that will be doing things like configuring is it will be installing MSI's for your antivirus it will be stopping windows services doing things and then starting them again all that's our thing and then finally we aggregate the information we need for our CloudFormation templates and then we install it so then we're handing over actually into into AWS in the Box startup so we pull down the code we pull down the databases we unzip it run the scripts and we start testing things so now we've got this green stack that's so copy and once we're happy with that we can then flip the dns around so the way we do do that sort of thing is with Akamai we use the GTM weightings to gradually ease people from one color to the other and you can kind of do that ten percent at a time once you're a bit happier twenty fifty and then you're all the way there now the cloud I mean it's brilliant you get in theory huge resiliency throughout but what we have found though like stuff events sometimes does go awry you we when there was to dine and I'm Danis issue I think about six months ago bits of Amazon were affected and therefore we had problems you find that the actual host boxes that you're running on sometimes will be getting patched sometimes for some reason Frankfurt availability zone beers doing something slightly odd it's good because we can see this happening because we've got a monitoring in place and sometimes what we've done is we just kill off that pod we just delete all the boxes involved create them again and keep an eye on the problem if it keeps happening we find we just pull traffic off they're a little bit using Akamai the advantages we can get with the sequel using something called dedicated tenancy instances and this is your way of saying to Amazon I want to keep this almost like in its own reserved little space so it cost more because obviously your ring-fencing your set up a little bit but it should mean that ultimately anyone noisy neighbors aren't going to affect your sequel server when this time dns issue did happen it was interesting we some of the API calls we made into AWS actually started failing so this was for example we would be saying what my sibling web instance is because we might need to find out some information about them there's a really good library that you can get for free that these slides mention and that's the poly library now that has things built into it things like retry logic timeouts things like circuit breakers those sorts of patterns make it very easy to then make it a lot more resilient if your calls are failing then it will just wait a little bit and try again and you can configure all of this in code so I definitely advise taking that on if you're using that so I think there's a quite a cool feature that we're starting to see more prevalent now I think that's this this concept of cloud functions you can use it well in lambda is the AWS version and as your functions is the the your incarnation so these can be C sharp they can be JavaScript they can be other languages but those two are probably the ones that at least we use and they can then be triggered on a schedule so think of them a bit like the windows services used to maybe write to cleanup disk or to do those sorts of things they can run a very very small cost and actually could be very useful so we use them for monitoring all the backups are happening it's all well and good that you think you're taking backups periodically but if they're not in the bucket that you expect them to when you come to rely on them then yeah you don't want to be an opposition so I'll have a look at a few little examples of some of the things we're doing there screenshots apologies it's not not actual code but I think hopefully these summarize some of the things that you can do so at the top we've got the AWS version so if you're in cloud formation if you want to hand over to PowerShell or run commands from the command line that top line it's all you need to do from once you've got that PowerShell exe in you then in the PowerShell world similarly if you're in assure you can do the same sort of thing we with command to execute if you want to pull files down from s3 you've got this one PowerShell command the parameters hopefully will relatively self-explanatory it's basically what bucket you want to pull it from what the files called and where you want to put it and similarly if you're in use your world yeah there's other ways to do it if you want to install for example the is rewrite module then there you go this is sort script there's not much to it like I mean what I'm hoping to demonstrate with this sort of thing is the scripts are running are all actually quite smaller not it's not a really busy or long process it's just doing lots of little bits and they're all quite simple and reusable similarly if you want to start a window service there you go it's as simple as that we so it's one code and we touched on databases so I think there's one one last piece of the puzzle you have to make cycle changes that's that's basically to what deployments will need to look like so there's tools you can use you can TDS unicorns and things like that so which one ultimately is better and I'm not really going to try and answer that because I think it comes down to again personal preference which one fits better for your use cases before deciding on that I think it's worth just just drawing during attention to this that you've got content and content owned by the editors and that's typically stuff under cycle content and the media library and that sort of thing and then you've got content that's owned by developers and that's rendering definitions or rendering items stuff on the system and obviously all your templates so not necessarily one size fits all that the way you think of developer content and content editor content I think needs to be handled differently the sorts of things we use to sort of decide basically of which approach we would take will kind of hinged off a few criteria what how easy is it to build up the change set you're dealing with I mean you might find cycle packages give you everything you need to that's that does work but they're a bit of a pain to build they're a bit of a pain to make to sort of remember which ones you've installed in different places and source control in that sort of thing what happens when merge conflicts happen if I mean if anyone understands the different drop-down options you get when you install them then you probably have a cycle guru I think that's us Buddhist are they in in my opinion so the way that we we take this on and interestingly there was someone I checked to earlier who inherited a project from us who had a very early version of this so I do apologize the later version is is better and does work work really well for us it's something that we've written where you model your cycle changes and Jason so this gives you real freedom as to how granular the changes you want to make are you can just deal with updating just a single field or you can deal with updating every single field in the database in one go so because it's all running in JavaScript you can iterate through databases so the bottom loop we can see is providing a that ability that we can say right we're going to iterate through all our publishing targets and run the changes into each so then you don't even need to worry about doing a publish which is quite a nice thing one change we've brought in recently is this because we're dealing with multiple pods and a pod we think of as being a publishing target we can actually install this stuff simultaneously on each pod so therefore when we deploy the cycle content changes as part of our deployments we don't even need to publish to anywhere and they're all updating at the same time that does come with some challenges you've got to be able to make sure that if for some reason it goes wrong on one of the pods how do you handle that but that tends to tends not to be the problem we the issues tend to happen around miss configurations and things like that and so what we found is it it's meant we can create these really simple little change sets that give us a huge amount of power because we can iterate we can deal with anything that the site core API allows us because really what this is doing is it's calling into the slight crepey eye under the hood and finally I think what I was hoping to get across today is that cycle developers I think can be very very good at this I think ultimately before doing this I'd knew nothing really about the deployment or monitoring process and at the end of it then we got to the place where easyJet is out there in the wild and working for us so as a bomber says yep yeah we can get on him if only us back and finally thanks to these guys they allow this sort of thing to happen if you want to get in touch drop us an email have a look on my blog there are blog posts about some of these sorts of things and yet trying to add interesting ones all the time and if anyone's got any questions then I'd say now's the time to earth-2 shout [Applause] so we think of a pod as being almost like a set of content delivery entity so it would be two web servers and one sequel server which maps to a publishing target in cycle and we've got four pods or two in Frankfurt and two in Dublin so it gives us a few advantages one is resiliency because if dublin goes who's still at Frankfurt and vice versa we've got the fact that if availability zone in Frankfurt goes we still got the other one and we can kind of do crude a/b testing we can push content just to Frankfurt or just a pod one and therefore only see only a subset of the users will see that so users are sticky to a pod that's the one constraint we put in both so blue green you do you like double done so the question was yeah what when when do when we get new routes in and double up the infrastructure how do we do it is that a good summary of it so we we have green running and green will be four pods and that's up in production point in time so what we do is we take a copy of the databases and then we create the counterpart color so we then got eight pods and what we do is we split users evenly across all eight rather than all four and so that's done through Akamai so then we've got in theory not twelve webs twelve bits of kit we've got 24 bits of kit which gives us double capacity does I explain there yeah and we've we're lucky because we haven't got constraints or unlicensed encoder have so good no ace well thank you 