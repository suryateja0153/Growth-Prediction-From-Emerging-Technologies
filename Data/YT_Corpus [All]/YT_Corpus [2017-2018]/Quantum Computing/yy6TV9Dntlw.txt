 We have a very exciting last talk coming up. Dario Gil will take us into a quantum world. Dario is the Vice President of Science and Solutions at IBM research, where he leads over 1,500 engineers that are researching in technologies and physics, math, health care, life sciences and others. And while some of you will think, a quantum world, that's too far out, I'm very sure Dario will tell us otherwise. So come up here on stage, please. Thank you. Thank you. I was joking with Mark that we couldn't pick an easier topic to end the day, on quantum computing. But I'll try to make it entertaining, and hopefully easy to understand. I'm going to start with a reference to this term of beautiful ideas. And it came from hosting a filmmaker about a year and a half ago, in the laboratory I just showed you. At the TGA Watson Research Center in Yorktown Heights. And he was a filmmaker that directed this documentary called Particle Fever, that I don't know if you've had a chance to watch, but I highly recommend it. It's about the team that was pursuing the discovery of the Higgs boson, in the largest physics experiment ever conducted. And a major character in the film is a professor from Stanford. And at the beginning of the film, he said something that really captivated me. He said, "The thing that differentiates scientists is a purely artistic ability to discern what is a good idea, what is a beautiful idea, what is worth spending time on, and most importantly, what is a problem that is sufficiently interesting, yet sufficiently difficult, that it hasn't yet been solved, but the time for solving it has come now." " So I want to tell you about this beautiful idea, whose time for solving it has come now. And that is the possibility to create quantum computers. If you look at how we have created the basis of the information revolution, and you trace it back to other beautiful ideas, like what Shannon taught us, to think about the world of information abstractly. If you look at an old punch card and DNA, we've come to appreciate that both carry something in common. They carry information. And Shannon told us that this world of bits could be decoupled from its physical implementation. That was really interesting. But in fundamental ways, it went too far. Leaving too much physics out. So here is two scientists that work at IBM Research, Charlie Bennett on the right, continues to work in our laboratory, And is an IBM fellow. And they asked the question, at the time, of is there a fundamental limit to how efficient number crunching can be, computing can be? And when they asked that question as physicists, they ended up with a very surprising answer. And they found the answer to be no. It turns out, that number crunching can be thermodynamically reversible. These led to an exploration of, what is the relationship between physics and information? And there was a now-famous conference that was jointly organized between IBM research and MIT at Endicott house, where this topic was explored in more detail. And the plenary speaker was none other than Richard Feynman. And Feynman proposed in that conference, that if you wanted to simulate nature, we should build a quantum computer. And I'm gonna explain you what that means, and how it's created, and the problems that it will solve. But first I've got to tell you, what is a fundamental idea? The fundamental idea, just like we have bits in the classical world, that can be a zero or a one. In a quantum computer, you have qubits, which stands for quantum bits. Now, the difference is that there can be a zero, a one, or both at the same time. That exploits a principle of quantum physics called superposition. And it sounds weird and crazy, but it's true. Now to give you this unease that you should feel when you talk about quantum information, and quantum computing, I'm gonna give you a very simple example. A thought experiment that also happens to be true. So let's imagine that we're going to solve this problem. The problem involves, you have four cards, three are identical, one is different, one is a queen. We shuffle the cards, and we put them face down. And the problem we're going to solve together, is find the queen. We're going to be assisted by two computers. One is a classical computer, one is a quantum computer. So what we do, is we turn them down, and we load them into memory. So we use four memory slots. The cards are identical, we put zeros. The one that has a queen, we put a one. So in our four slots, we will have three zeros, and one is a one. We load them on the two computers. Now we has to write a program to find the queen, find the one. How would it be done classically? You would go and pick a random number, you don't know where it is. You go look under that memory slot, see if it's a one, if not, you go to the next slot, and so on, and so on. On average, it would take you the equivalent of 2 and 1/2 turns to find it. It turns out, that with a two-qubit quantum computer for this problem, you can always solve it in one shot. So that uneasy feeling that you have now, should be an explanation that quantum computer is not just about building a faster computer. It is building something that is fundamentally different than a classical computer. Now, a way to think about it, an abstraction of it, is that a quantum computer is always going to have a classical computer next to it. They have to go together. So you have a classical set of bits, right? The problem that you're trying to explore. And what that quantum computer's gonna allow you to do, is to explore these exponential number of states. These 2 to the n, where n is a number of qubits that you have. So now, we have relatively small quantum computers, with few qubits. But just think of the number, that by the time you have 50 qubits, you have 2 to the 50 states. That's a phenomenally large number. But in the end, after you explore these number of states, you go back to a classical output. A string of zeros and ones, that you interpret with a normal computer. So why is this interesting? And I think in this audience, I don't need to explain in great detail, you know, what exponentials mean, and why 2 to the 50 is a very large number. But it's still, I think it's an interesting way to communicate the power of this, and I like to map it to some problems. But I like to go after this apocryphal story that actually, IBM used in the 1960s to explain to people the power of exponentials. And it had to do with the person who invented chess, that goes to the emperor, and says, well here's his wonderful game. And asks, what do you want in return? And the person who invented it says, give me a grain of rice on the first day, for the first square, and the second day you give me twice as much. And on the third square, third day, you give me twice as much as the day before. And the emperor agrees promptly that that seems quite reasonable. And after a week you only have 127 grains. After a month, you have more rice then you'll eat in your lifetime, for sure. But just by the time you get to the end of the chessboard, you have more rice than Mount Everest. So there are a large number of problems in the world that have this characteristic, that they blow up exponentially. And a dirty secret in the world of computing is that we obviously talk a lot about all the things that computers can solve, and can solve a lot of things. But then, there's a lot of things that computers can not solve. And very interestingly, they cannot solve it now, nor ever. And the reason is because they have this exponential built into them. So take as an example, this fairly simple equation. Factoring. So if I have a number, M, that is made out of the multiplication of two large prime numbers. And I only give you M, and I ask you find me p and q. It turns out, that that is phenomenally difficult to solve. There's no other way but to divide it sort of sequentially, by prime numbers. So in fact, it's so difficult, we use it as the basis of all encryption. But, if you had a very large universal fault-tolerant quantum computer, which is many, many years away, you could solve that problem in seconds, what would take billions of years in a classical computer. That tells you something about the power of what is going to be possible. Take chemistry, as a problem. Because it also has this characteristic, that it blows up exponentially, if you try to calculate it. This equation that you see here is very interesting, because it's predicted to occur at the ocean floor near volcanic sites, and famously has been hypothesized to be the basis of the formation of life on Earth. But if you take a molecule like iron sulfide, and you try to do relatively simple calculations with a normal machine, it turns out, that we're not very accurate. And the reason is that molecules form when electron orbitals overlap, and the calculation of each orbital requires a quantum mechanical calculation. So for that simple molecule, you have on the order of 76 orbitals, and two to the power of 76, is intractable with a classical computer, so we can not solve it. Again, on this theme of our assumptions that computers solve everything, but they don't. If you look at calculating for example, the bond length of a simple molecule like calcium monoflouride, we still get it off by a factor of two, even using the largest supercomputers in the world. To me, this has been very interesting, this recognition of all these problems we cannot solve. It's also true in optimization problems, that are the basis of logistics and routing, and you know, portfolio optimisation. There's tons and tons of problems in which at best we do approximations, but we're far from optimal, because a number of possibilities is enormous. So if there's one message I want to be able to come across, it's that we have these easy problems, which is the world where classical computers fit, and the problem it's solved. But then there these other hard problems, that go outside. And if you don't believe that p equals np, which I would say the majority of mathematicians don't believe that that is the case, that those problems are hard for a reason, the only avenue to go and tackle that, aside from approximations, will be to the creation of quantum computers. So where are we? We believe that small practical quantum computers are going to be possible, and we're building them now. It requires reinventing the whole stack. The device is different. It's not the traditional transistors. As an example, this is the device we use for that quantum computers that we create at IBM, based on superconducting Josephson junctions. And you're seeing an example of one of these device, is superconducting device. And because it's superconducting, you have to cool it. So this is what a small quantum computer looks like. What you're seeing here is something called a dilution refrigerator. And this quantum processor sits at the bottom of this refrigerator, at the nice temperature of 15 millikelvin. So that is colder than outer space, where we have to put this quantum processor in. This is what, for example, a 16-qubit quantum processor looks like. And you know, inside, you see the square where the qubits are, and you see these squiggly lines, which is these coupling resonators that allow you to send information uncoupled to the qubits, To send the information. This is what the wiring looks like, into the refrigerator going into a quantum processor. There's these coaxial cables, because the way you send information to a quantum processor, is through a series of microwave pulses, that go in, and then you're able to take it out. Now, if you look at pictures of what computers were like, right, in the '40s and the '50s, it's kind of like where we are today, right? That's what, you know, quantum computer, that's the signal processing required to actually send all those signals down the coaxial cables, it looks like that. But we've also seen this movie before, in the sense that we know how much progress we have made from those early system. And while we don't anticipate that quantum computers will be on your phone, because they require cryogenic cooling, we definitely believe that access to quantum computers in the cloud will be something that people will be able to leverage, behind the scenes, even not knowing. Because we believe that, we created a small quantum computer last year, and we made it available to the world. In something called the IBM Quantum Experience. And all of you can go and log in and have access to this. It's available for free. It's a 5-qubit machine. And since we launched it, we have over 36,000 users from over 100 countries that have been doing it. And 15 scientific publications have gone on it, and people are learning how to program, and to learn about this new world, and what is being created. And you can actually run things on this. So I was telling you about these chemistry problems. So this is an example of the expected theoretical calculation, and the actual calculation, on a small quantum machine, of hydrogen. So we're starting to solve small problems. And what is coming in the years ahead, in the next few years, will be machines that no classical computer will be able to emulate. Because by the time you have order of 50 qubits, think about that, that's 2 to the 50 states. And no classical machine will be able to emulate what that can do. And that is new territory. And that's the territory we're all going to enter. And now is the most interesting part, because it'll be the path of discovery of what we can do, and what value we can create, on problems we couldn't solve before. So I'll close with Feynman, who proposed this original idea of creating these quantum machines. In his inimitable style, he said, "Nature isn't classical, dammit, and if you want to make a simulation of nature, you better make it quantum mechanical, and by golly, it is a wonderful problem, because it doesn't look so easy." Thank you. 