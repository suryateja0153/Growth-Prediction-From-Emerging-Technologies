 [Music] good morning welcome hi I'm Chris McKenzie I'm a UX designer on daydream Google's virtual reality platform in the lead up to releasing daydream last year our team faced many challenges and one of those challenges that was particularly tricky was designing for screens in VR making sure that text was easily readable that buttons were easily clickable and lists were easily scrollable and another challenge was that this is virtual reality and when you hear those words your mind tends to go straight to the third dimension you're thinking of 3d tools fantastic environments surreal use cases like I want to build a castle on Mars so these are really juicy challenging design problems to go after but what we found was if we ever had to have the user bring up a menu of option or read through a dense amount of content or pretty much read anything we found ourselves designing what was essentially screens in VR this isn't too surprising we're surrounded by screens in real life all the time we're all looking at two large screens on stage right now some of you are looking at screens in the palm of your hand a considerable amount of the content that we consume is packaged in a 2d form some basic physiology behind this is that while we exist in a 3d world we see that world as a projection of light hitting the back of our eyes and a brain does a good job of kind of using that together and figuring out some sense of depth but we really only see what is line of sight I can't look around an opaque object like this podium without physically moving around it and I have to read text spread out on 2d plane I can't read it as a stack of letters going off into the distance I can't around them so this makes projected 2d content a really efficient form of consuming information and this is no different in VR as it is in real life the challenge in VR is that all of the existing techniques and tools that we've used to design for screens for real life screen didn't necessarily apply or they weren't trained as transferable into virtual reality what I'm going to go over today is some concepts and ideas that our team has developed over time to try and simplify this problem and then my colleague Adam glazier is going to go over how we apply those concepts in practice so I'm going to start with talking about a concept called virtual screens so what if we could take the basic concepts of the basic like properties of screens in real life boil that down to its essence and then use that as a tool to design for screen in VR this is the basic idea behind virtual screen so what is it that all of these screens have in common to start they all have an intended viewing distance how far away we've designed these screens to be viewed this can obviously be a range for the screens on stage here these are meant to be seen by the first row hopefully all the way back into the back row it's just easiest to think of this as what is the optimal distance that these screens were intended to be viewed from and that intended viewing distance will inform the size of the screen in addition to the size and density of the content they are in so this is a really important concept to get across if I want to design for many screens across many different distances and its content creators it's easy to take for granted all of the thought and design that goes into any particular screen that we're creating content for now in VR we have to do all of that legwork and then create the content that goes on the screen and we have to do it for every type of screen we're not just mobile UI designers or laptop UI designers we're billboard designers we're stop sign designers we're exit signs across the room designers we have to cover all of these cases one way to do that to create content that's consistent across all of these different types of screens is to use angular units to make sure everything has the same angular side and what I mean by that is that even though the a on the billboard in the back is much larger than the a on the smartphone in the front from the users point of view they're going to appear to look pretty much the same this is because they have the same angular size this is a really powerful concept if we can design all of our layouts in any sort of angular unit that means that we don't have to care about how far away the screen will be placed later on it will be just as readable whether it's right up next to the user's face or or 20 meters away now finding this unit was a little tricky and so the team went on a little bit of a journey to figure out what we should use we started with degrees it's a very common angular unit the problem with degrees was you only have 360 of them for a full rotation so it's not a lot of granularity there you eyes tend to have more so if you have a UI that's 60 degrees across which is a very large UI you only have 60 units to work with you're going to have to deal with decimals and decimals are kind of messy and hard to remember in this particular example we have a an example of it's comfortably readable body text and that happens to be one point three seven five degrees from what we found with today's current headsets now that's just a really hard number to remember so we could step it up and we could go two minutes of Arc these are nice you get sixty minutes of Arc per degree and you get to use this fun little tick mark at the end which gives you the fidelity I mean it definitely 82 I don't have to deal with decimals anymore I have a whole number to work with and that's great although 82 is a very large number for readable body text it's more of a nitpick the problem with degrees minutes of Arc or degrees or arc minutes or seconds is that all of these angular units are hard to translate to an actual size at a given distance so in this case we have an a with an angular size of 82 arc minutes and if I were to say that a is a meter away how tall is it we wouldn't be able to calculate that very easily without pulling out a calculator so what our team wanted to do was basically have its cake and eat it - we wanted an angular unit which that would not change the distance but then could be easily transferred to a metric size an actual world space size at a given distance radians do straddle this line to some extent we explored that to to a certain degree pun intended as well but we we decided that radians are bound to the arc of a circle and that's just a constraint that we wouldn't need to be limited by for our UI so internally we started using this units we call a dim and that stands for distance independent millimeter it's kind of a play off of the density independent pixel from from Android that we use to design UI layouts in so what is the dim a dim can be described as one millimeter at a meter away but it can also be described as two millimeters at two meters away and a half a millimeter at a half meter away all of these were one dim so it's an angular unit that just kind of follows the millimeter as it scales off into the distance how do we use these let's look at a more concrete example in the upper left-hand corner of this diagram I have a screen space layout that I have measured in dims all of my UI elements are measured in dens it's 400 dim by 480 dims tall and then down below I've applied that layout in world space to three separate virtual screens all of these virtual screens have a different intended viewing distance the first screen the smallest one on the left was intended to be viewed from one meter away I call this the identity position of a virtual screen nothing really changes too much here between our screen space coordinates and our world space coordinates for Adid install is 480 millimeters tall easy enough then let's move on to the second screen that was intended to be viewed 2 meters away so in this case all we did was scale that screen up by 2 and now even though the screen is twice as big as the other screen that was intended to be viewed 1 meter away from the vantage point that both of these screens are intended to be viewed from they will look the same to the users they will have the same angular size text will be just as readable buttons will be just as clickable and motion will appear to move the same as well so this is really nice because I wouldn't want the large screen in the background to be animating slower than the screens in the foreground just because the content in it has to move a further distance it would feel too sluggish or lumbering and this is something that happens in real life with songs and TVs that the way the angular movement the angular motion I should say of the content on those screens is pretty much the same because otherwise you would think it's too slow or too fast now if you did walk up to that screen in the back that was intended to be viewed 3 meters away if you walked all the way up to it it would appear to be too fast it would also appear to have much too large text and the textures in it would probably be too blurry that wouldn't be the greatest vantage point to view that screen this is okay because you're going to get the same thing if you walked right up to your own television neither of these screens were intended to be viewed from that particular distance so now we have a consistent screen space layout system that we can apply to any screen at any distance we can come up with guidelines and components that are sized once and scaled later this is going to save us a ton of time and it's important to note that we are not bound by width and height your screen space your all everything you're measuring in dim can also have these because this is virtual reality we have some superpowers here that go beyond what screens in real life are bound to in this particular case we have our UI elements have some thickness and we're also using depth to indicate hover this can be used to great effect it can also be used to detrimental effect with great power comes great responsibility the rule of thumb that I like to use is the further away you get from a purely two-dimensional representation of content the less efficient it will become at conveying the idea you're trying to get across so in this case this comes in the form of we have thickness to our elements so now users have to see this extra edge on the lip of these cards there's parallax of foreground content moving against the background as extra shadows also in VR my eyes are converging at different depth point on this UI my eyes are like ever so slightly converging to hit the labels versus the background this is extra visual information that the user is going to have to process before they even get to what your UI is all about so again this can be a depth can be used to great effect just within moderation another superpower that virtual screens have is the ability to distort or shape your UI to any contour and this is this is really great like we can't do this as much in real life but in VR now we can have flat screens curved screens folded screens detach screens they can all be floating around the user and whatever you do to that contour is making a statement about how that screen should be used or how the content therein should be displayed so we can put all these things together and then when we put all these things together we need to make sure that our ganache and strains still fit to the users that we're actually making this content for and in the use cases that they're using it for and luckily we can use dim to layout guidelines for areas that are in view or just out of view if the user turns their head Adams going to get more into detail about this later when he shows off some of our guidelines one other thing I've just really touched upon and that's because it could really have its own talk is input this model works really well for input in particularly ray based input because Ray's are fairly predictable things they get more and more frenetic as you get away from the origin and because we're scaling our UI with distance that means that all of our hit areas are also scaling to catch that ever-growing margin of error so we can measure all of our button hit areas in dims as well so I just talked about a lot of different properties of what makes a virtual screen but if you only remember two of those today it's that every virtual screen has an intended viewing distance how far away we have designed this screen to be viewed by a user and because we've come up with that rule it means that now we can design our screen UI elements in a normalized screen space measured in dim it won't change based on the since that the screen is actually going to be viewed from now how do we use this in practice for that I'm going to hand things over to Adam so we can talk about how we're applying these concepts in our process thank you thanks Chris so over the past year we've been using this system of dims and the intended viewing distance to design our apps for the daydream platform as well as earth VR which is on oculus and vive so I'm going to walk you through how we've done that so just to back up a second you know it's really efficient when designing for a mobile screen to use a laptop right you you can work really fast you can design fast the screen density is different but you get used to that you you checked your design on your phone once or twice a day you start to build an understanding of you know on my laptop text sizes button sizes look larger but you adapt so we can do the same thing for VR we can design in the laptop we can start to build a mental model of the size and shape of things using dims and then check them every once in a while and daydream and this is important because you know at for those of you who work with 2d designers or r2 designers you understand how much consideration goes into creating a 2d interface and the tools are optimized for that and for 3d the inverse is true if you're used to building 3d things these are extraordinarily complex tools and they are a completely different way of thinking so it's actually beneficial to be able to work in these two domains and have them cross so today I'm going to show you how we've done this workflow using sketching unity but you could use any 2d app like illustrator Photoshop or any 3d app like unreal or Maya or cinema 4d so the way I like to start is take a screenshot of the environment that my UI is going to be in exactly where it's going to be when the user first gets in and if we zoom in to sketch you'll see that every pixel equals a dim so this makes it super easy to do red lines for developers so when when a you know font size is 24 pixels high I know that it's going to be 24 dims and that and then that'll be readable so before we get designing we need to understand something about ergonomics there's not just in the ergonomics of your neck but there's a ergonomics of your eye the human eye can look positive or - horizontally and up and down about 30 to 35 degrees comfortably so no matter how wide the field of view is in your headset just imagine a user sitting on a couch comfortably they're not going to want to move their head around too much and their eyes aren't going to want to move more than about 3035 degrees so you want to keep your primary UI elements within this area then the next organ amah cracker is the neck so this is this outer region it spans about a hundred and twenty degrees and that takes into account the amount that the person's eyes can move plus their neck like I said sitting on a couch this is the dominant posture for VR even though we all say swivel chairs are the best most people doing VR day over day end up on the couch or in bed finally there's the horizon line ergonomically people's heads look down or face down about minus 10 or +10 to plus 15 degrees and then our eyes tend to look up so your visual Center ends up being comfortably around plus 6 degrees below the horizon line what this means is you don't want to have your you eyes dead center and the horizon line because users will end up feeling like they have to look up to see your UI so once we understand those organ aam --ax now we need to understand readability and based on the screen density today of for instance the smaller pixel phone we came up with these recommended text sizes that are readable for people with various eyesight qualities and so these text sizes will go down over time as pixel density increases but right now this is a safe set of text sizes to use and in terms of the target size like if you're using a ray based input like the day dream controller to point and click on things the minimum hit target size we found as comfortable is about 64 dims with 16 dims of padding so this won't go down over time the daydream controller is within an imperceptible limit of the human muscles so while the text sizes go down these hit sizes will stay the same and these will be the same on on the vibe or any other platform that has good quality tracking so here's an example of all those things I just discussed in a sketch template to spec so everything's specified in dims all the text sizes are within the readable limit and all the UI is within the the primary zone that we know is comfortable for users so that's good we did we designed to the front of our UI now we need to tell the developer you know how this lives in 3d space so here's an example of this of what we did in Street View we put the UI at two-and-a-half meters the UI is sitting about six degrees below the horizon line or you could measure that in millimeters which is about two 60 and then as you can see the the navigation elements are actually closer to the user and pointed towards the users head and then from the top view we started with a flat projection but we found us to be unfair to the content on the sides because the content starts to skew it just feels a little odd like these the outer cards didn't feel as important so we tried angling the UI this works well for certain things but because of our scrolling mechanism it made it more complicated for the developers to build scrolling and this folding effect so then we moved to a cylindrical contour or all the UI is being bent on a cylinder and as you can see the navigation element in the front is also bent this felt really felt really odd to bend small elements is I don't know if it's just being in the you know in this world long enough but it just didn't feel right so we found that doing two things one relaxing the center point of that cylinder so if I go back you can see the center point we started so it's basically a cylinder around the user and we moved it so that the center point is behind the user so what that does is it relaxes that that contour of the UI it feels a little less claustrophobic and a little more natural and also in when you have fixed off tracking you get a nicer parallax effect and the UI looks better from multiple multiple angles versus the when the cylinder is centered in your head it really only looks good from one angle and you'll see that the smaller nav element is using a Vista flat projection here so when it gets time to export your assets we recommend exporting at 1x right now but this is going to vary a lot with screen density goes up but for the next one or two years 1x will probably be fine we found it in some rare cases an engineer might implement an asset in a particular way where exporting is a higher resolution works better but recommend starting at 1x and so what that means is 1 pixel you know you export a 240 by 480 asset and it's 240 by 480 so when we bring this into unity you can see here that we have a like a an empty object called apparent UI and the scale is set to 1 the position is set to 1 meter away and inside that we have a canvas and because canvas units and unity are set in meters we need to scale the canvas down by a thousand and what this does is it allows us to use dims in the canvas element so now that the canvas has scaled down whole units like a button defined as a hundred dims wide we can just type in 100 we don't have to mess with decimals and so now that we have this all set up we can just move the parent UI and we scale it by the amount we're moving it so if we move it to 3 we scale it by 3 and all of the elements retained there you know that they look the same to the user from that intended viewing distance so so from all of this work we put together a sketch file to get you started it's full of UI components and we'll be adding more over the year to it but it's enough to get you started with layouts and and buttons and font sizes and things like that so if you'd like to get those just go to our developers guidelines it's developers.google.com/live ER and just look in the resources section thank you [Applause] [Music] 