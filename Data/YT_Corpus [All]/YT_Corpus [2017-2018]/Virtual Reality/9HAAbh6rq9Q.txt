 Thank you. Good morning, everyone. So before I begin anything, I just want to ask two questions. How many of you here are web developers? Awesome. And how many of you have had your hands on developing for virtual reality experiences? That's less. Cool. So the aim of this session is primarily to make the count of these two groups probably equal. A little about me. As she already said, I'm a tech speaker for Mozilla, and professionally, I work as a software developer at HSBC and I've been contributing for quite some time, and A-Frame is something I've been working on for a year, and it's interesting. Now, virtual reality, by definition, it's basically a computer generated simulation of a 3D image or an environment which can be interacted with in a seemingly real or physical manner. It's basically a technology that transports you to completely different interactive and 3D environments, and you can already see how cool things people are doing in the background. It's going to be the next platform. It's going to completely change how we live, work, and play. And it's relatively new. We're still in the first generation of headsets. We have the Google Cardboard on the first one. It costs around $5, and it gives a very basic VR experience. 360 degree, very low FPS and field of view. Not a very good experience, but good enough for a beginner to get started. And then there are high end VR head sets, like the HTC Vive. It has two controllers, it has base stations, and you can go around. It has complete room scale tracking, both positional and rotational tracking, great field of view, but you have to connect it to a PC with a very high processing power. Especially for me in India, they don't really have HTC Vives. So we have to import it from the US and then the customs charges... It's very expensive. We pay almost double. And then assembling such a PC is probably more. So basically we were discussing the day before yesterday... VR is not yet for the common man. But it is soon going to be. But that said, experiences provided by these headsets are absolutely mesmerizing, and these are the kinds of headsets that the VR industry is focusing on, is targeting. But the problem for developers is that there's a lot of friction in the VR ecosystem. And what I mean by that is that you have to go through... There are a lot of gatekeepers. You cannot just build something and share with the world. Like hey, I built this. Check it out. You can not do that. You have to go through a lot of approvals. For example, the Oculus store, it takes only the top ones into the store. The rest are rejected. So app stores and corporations, they control distribution. They can take down your content. Or block it. And even if you go through all these procedures, you have to make other people download your application. For them it's a complete black box. They don't know what's going on inside. Speaking of downloads, you have to download a lot of bulky software and complex environments just for the development. So these are obstacles. You have to learn a new language and then you'll spend some time figuring out how to make it work with multiple headsets. We want VR to be successful, right? We want a platform without these points of friction. And the answer to that is, indeed, WebVR. So WebVR basically allows web developers to create fantastic cross platform, cross-device applications. VR experiences. Quoting from a talk at Google IO, VR should be accessible to everyone, because it has the potential to let everyone play, explore, and create in amazing new ways. So developers should be able to build something quickly and share it with everyone, no matter what device they are on. Kind of how easy it is to share stuff on the web, but in VR. And that is the very idea behind WebVR. It's VR on the web for everyone. Anyone can create anything, just like they create the regular websites. That is with web technologies. And of course it has all the properties of the web. It's open. Anyone can publish. Open Source, open standards, open culture. It's connected. You can traverse worlds and scenes and portals, just like hyperlinks in the 2D web. And it's instant, of course. You just click a link, and bam, you're there. You can just share it with the world, you can tweet it. Like check out what I've built. So more specifically, these are browser APIs that enable WebGL rendering to headsets and access to VR sensors. It was initially by Mozilla, the WebVR API. Currently there's a working W3C community group, and Mozilla, Samsung, Microsoft -- all these browsers have currently implemented WebVR 1.0 API. So these are the browsers that support it. Firefox was one of the first browsers to fully support WebVR. It started with nightly. It's currently in the release channels also, after Firefox 55. And there are these other browsers. Mobile polyfill uses your device orientation sensors to polyfill on smartphones. So the concept of metaverse, from the science fiction, as we know... It's the idea is basically: Collective virtual persistent spaces, and where the world might live in, they might work and play in. And to achieve it, we need to have it decentralized. It must be open. It must be connected. You cannot have one corporation controlling the world people live in. So how can we make it more accessible? Because as we saw yesterday in a talk, three.js is one of the libraries used to create content in WebVR, but it is still very hard. I mean, the developers don't tell you that. But it is still very hard to create experiences in three.js. You need to import a polyfill, camera, VR effect, et cetera, et cetera -- so many things. These are huge obstacles. If you just want to build something very basic, I'm a new beginner, I just want to go and experiment with something. But this is a huge obstacle for me. So I want a platform in which I can just concentrate on what I actually want to build. This boilerplate code, it probably needs updating with the newer versions of three.js and browser quirks. What if we could make it more accessible, encapsulate all of this into a single line, just one single line? Well, introducing A-Frame. A-Frame is an Open Source web framework. For building virtual reality experiences, and it helps web developers build VR content without graphics knowledge and helps you prototype VR effects faster and it's a great start to the VR ecosystem. The best part is that you can create a lot of A-Frame scenes entirely in simple plain HTML. Now, all of us have probably studied HTML in high school. And even if we haven't, how much time does it take to learn HTML? A couple of hours. That's it. Doesn't it sound super easy now? So let's just see a hello world example in A-Frame. So by the way, when using A-Frame, you need to include the script tag, and that's it. There are no build steps, as such. And remember how I told you about encapsulating all the boilerplate code in a single line? This A scene tag is the global object in A-Frame that does that for you. It encapsulates -- it does all of it. Camera, render, controls, VR effect, polyfill -- everything just magically does that, and you do not have to put extra effort on things you don't want to do. You can concentrate on the actual business logic. So let's start putting stuff inside our scene. So here I've used a box, a cylinder, a sphere, a plane, respectively. These are the primitives provided by A-Frame just out of the box, to build cylinder, sphere, et cetera. And components in A-Frame are like CSS tags. You can just add them like CSS tags. And sky is basically the sky. The surrounding world. It can be a 360-degree image or color. This is just a very basic hello world application. But just look at this piece of code. It is to readable. HTML is arguably the most accessible language in computing. And this is encapsulated. So if you copy-paste this code somewhere else, it will work. There are no states or variables, as such. And of course, for very advanced applications, you probably have to write some JavaScript, for the logic. Or the components. But that's about it. You have the full power of the web, and it is so easy. It's beginner-friendly. So with those four lines of code, we have this scene created. We can move around using a headset, and check it out. This is a very basic scene. But what it took was only four lines of code. So we already are one step closer to the metaverse we talked about. And this scene, by the way, is an A-Frame scene embedded in my HTML slides, and I can just modify it and change it using the DOM inspector. And now, since it's based on HTML, it works with all your existing and favorite libraries. And frameworks. So you have d3, Vue, React, Redux -- all of it, you name it, you have it. This is a really good reason for using HTML as an intermediate layer. Underneath, it's just an extensible, declarative framework for three.js. So A-Frame uses an entity component system architecture. This is an architectural pattern famous in 3D and game development. Those of you who have worked on Unity must be aware of it. It's particularly famous in Unity. So the concept is that it's basically promoting the idea of composition over inheritance and hierarchy. Everything in a scene is an object. Which is inherently an entity. Which is empty. It does not have anything of its own. Any appearance of its own. But you can plug in components to add appearance, behavior, and functionality. Now, in the 2D web, we lay out elements with fixed behavior in hierarchy. But in 3D and VR, things are absolutely different. It can be... I mean, the objects can have infinite types and complexities. So there is a need of a unique -- I mean, of a different way of building up objects. And ECS provides that. And it promotes cleaner design by encapsulation, decoupling, reusability. Removes all the problems associated with long inheritance chains, interwoven functionality. So, for example, this is an entity. You have an entity, which is the base of all the objects. It does not have anything of its own. It's kind of like an empty div tag in HTML. Without the components. You can plug in components, which are modules or data containers. To add appearance, behavior, and functionality. So here we have the geometry component, which might have its own properties, like sphere or the radius, and the parameters. We add the material component. So we can keep adding components like plug and play to reuse, to mix and match and configure, and build up an entity. It's like alchemy. So, for example, if you have a ball, this is an entity, it has a geometry, a certain geometry and materials. Sphere, and some leather, probably. And then you add the light component. So it becomes a glowing ball. Then you add the sound component. It becomes a singing, glowing ball. And then you add explore component. It comes an exploring, singing, glowing ball. The point being that you can just keep adding components onto an entity to build up the entity. And you can construct any kind of object. This is the concept of composition. So while coding, what we do is, for any entity, we use an a-entity tag. You can add the geometry, material, like I specified before, and keep building up the entity by continuously adding components. You can just keep adding components. As much as you want. Like a rotation, position on XYZ axis here. So these are the components that ship in A-Frame out of the box. These are provided by default. But A-Frame has a huge community, and they've been building up a lot of components and using the awesome stuff and these are some advanced developers who are helping empower other developers. Who have built tons of components. You have everything. These components can do anything. They have full access to the JavaScript and the DOM APIs. And you just name it, you have it. You have all the kinds of components ready made, built for you. Networked scene, for building multiuser applications. You have particle system. You have oceans. You have sound. You have audio visualizations. You have a lot of components ready made, just built in, just ready for use. And these are all curated in something known as A Registry. A Registry is kind of like a free asset store, where you can just go and search for components, install them. For installing them, all you need to do is drop the script tag, and that's like a very convenient curated collection of A-Frame components. For example, if you have this component, you can drop the script tag in your code and in the actual program, you can include it, as we can see here, and you'll have two hands. And you can do whatever you want with them. Now, A-Frame also comes with a visual inspector. So it's a keyboard shortcut. Whenever you press control-alt-i in any A-Frame scene, you get a completely different view. It takes to you a 3D grid-based system where you can pick up and drop objects, you can add components, and you can move around things. You can change values. It's like a 3D analog, VR analog, of the browser DOM inspector that we have. It's just that it has many more features. You can even copy the changes made, and you can paste it into the actual code. So of course JavaScript -- you can programmatically change components in the scene using JavaScript. We can do all the little things, like query selector, query selector all for getting a reference of the scene and its entities. We have attribute to modify the entities, append child to add the modified entities onto the scene. We can probably use a random for loop in JavaScript and add 50 A boxes on random locations. You have registers, you can register handler functions to perform a particular something when a user performs a particular action, when a particular event is emitted. And all these little things -- you have basically all the power of JavaScript available with you, all the powers of the technology available with you, and it is easy. Now, you can even add 3D models, of course. 3D models basically come with plain text files, and they have the textures, animations, et cetera. They also come along with images. And you can basically... The three.js loaders parse these files and render them as meshes in the scene. And A-Frame model components wrap around these three.js loaders. So this is the 360-degree image, and you can see a 3D image of a queen. I can move it around. It's up to me. And all I have to do, to import this into my scene, is use the OBJ model component. This is an OBJ file, material file that included it, and I can add components like scale, position, rotation. This is an entity that I can add as many components as I want, and there I have it. So speaking of multiuser applications, I'll just give an example of how you can use components to build multiuser applications. Now, you might think that to enable multiple users, we have to know all the concepts about servers and complicated networking protocols. Well... This component -- the answer is, of course, no, not anymore. The network A-Frame component has you covered. So all you need to do is just include it in your file, and it abstracts away all the complex concepts that you might not be aware of. To begin with, we have this basic template. We have an A scene, A scene that we already know about. We don't have anything inside it. We have included the script tags of the required files. So we add the network scene component besides A scene. So in entities we keep adding components. This network, A-Frame component we want for the entire scene, so we add it besides A scene. It's just a basic template. App... You can check out the syntax in the documentation. It's unique app ID, unique room ID. And now we create an avatar. So basically what I have done here is created a sphere, using A sphere, another two spheres, for eyes, white color, another two spheres for black pupils. That's it. And that's all that is there in this code. Now... I wanted to come out... The scene must be built. But it's all popping it at the same place. So I want to have it at random locations. I want the avatar to pop up in random locations, in different sessions, in the different clients. So I just wrote simple JavaScript to randomize the location. The position. Just five, six lines. And I can include that component in my A entity ID equals player tag. I have to add network ID equals to template, something, whatever template I have built, and I have to add the component I just built for randomizing the location, and that's it. So this is just to make a little more prettier and to add up a little spice. I have a grid, a black-colored grid, on the ground, and I have a colorful sky, with snow kind of stuff. Falling in. So basically the scene has been built, but this is just to modify the background and the environment. And if you'll check out this URL right now, we'll have something like this. The GIF. You'll have multiple users. If you open it right now, you probably can see other users looking here and there and popping into the scene. So that was about the multiuser applications. So that was super easy, right? We just wrote a few lines of code and built a pretty cute application. And as I said, A-Frame has a huge community. I mean, people have been working a lot, contributing to the code base, as well as the components. A-Frame.io blog is... There are many things released. There is something known as a week of A-Frame. Every week there are featured applications that are released. If you can just build your application and tweet it with A-Frame VR, they'll probably feature your application in the week of A-Frame, if it's good. Now, these are some examples of the components, of A-Frame applications, already built by some users. A-Painer is a clone of Google tilt paint that was built. It was to show how powerful A-Frame can be. You can just take two brushes and put on a headset with controllers, and paint around. And instead of building your own models in Blendr or complicated softwares like that, you can just paint your own stuff and import it into your scene. That's something cool. And journalism... Well, this is a journalism application. This was built to show the happenings in Syria. The bombings, et cetera. This was another journalism application. This is City Builder. A game built by someone, to show how we can use A-Frame for games also. You just need to pick up and drop things which you want to have in your city. This is a City Builder application. This is my personal favorite. Data visualization. You can just have multiple variables and columns. You can put it into the box. And you can just visualize it in 3D. You can have data visualization in 3D, and it's really beautiful and useful. This is another gaming application. A-Blast. You just use your controllers to hit some mosquitoes. And it's a game. Prototyping. It's very useful for prototyping, of course. You can have your product in virtual reality. You can see it, how it looks like, and you can build it. And then you can maybe move on to building the final product. It's good for mathematics. It's also useful for visualizing in 3D the graphs and calculating, et cetera. AR.js is a framework that is being built currently, and it is very new, and it's under development. It's something very different. It allows you to develop AR applications, using A-Frame. So it actually uses AR tool kit, and lets you build using A-Frame. It's still in its very initial stages. But it's being developed and making great progress. It is something good to check out. It builds marker-based AR applications. And there have been tools built on top of A-Frame. To enable you to -- without coding, you can build virtual reality applications. WebVR Studio is one of them. Real estate, live tour. This is also an interesting application. Education. So, for example, if you... If there's a student studying for becoming a doctor, or medicine, so you cannot practice on a real human, right? But you can do all this, pick up a heart, and do all that, to a man in virtual reality. It's just virtual reality. Right? So that's interesting for practice. So A-Frame has a lot of contributors and star gazers on GitHub. There are many members on Slack. If you check out aframe.io/community, you get all the information about how to get involved. And it's really interesting, and it's still in its initial stages, so it's a very good platform to contribute and to get started with. And there are lots of featured projects, as I talked about. A week of A-Frame. And awesome A-Frame are some of those repositories. Now, there's a contest going on, currently. 13KJS games, which happens every year. But this year there's an A-Frame category also. I would recommend applying to it. All you have to do is submit your game, and it has to be 13 kilobytes of a file, excluding the A-Frame library. And just for participating, you probably get an A-Frame special headset and T-shirts, and it's something really cool. I would recommend applying to it. And other than that, I would recommend checking out the documentation of A-Frame. It's very exhaustive. It's really very informative. You can go and check out the syntax of various primitives and components available. So yeah. That's kind of about how much I can talk about in 30 minutes. But you should definitely check the documentation. Thank you. And thanks for having me at Full Stack Fest! (applause)  Thank you so much! That was really inspiring. I have a few questions here for you. Can you talk more about the performance concerns on web versus mobile?  I think you mean native. That's a very common question whenever anybody talks about the web. The performance, of course, undeniably, native applications have a little better performance. There is a little cost that you pay when you go for web applications. In terms of the graphics performance. But in exchange, you get this incredible power of distribution, and that is sometimes very much worth a price paying for. And other than that, there have been developments... So you can use all the regular things you do with JavaScript. Like web assembly. You can have web workers which can parse things off the main thread, and other than this, there have been developments like streaming content, so you get an immersive experience in 300 milliseconds, but that's not fully... It gets more improved, as and when it gets hardware and resources. But you don't have to wait for the download of the 3D models or something. So yeah. That's what I have to say.  Awesome. Thank you. What are you most excited about, in terms of the future of VR and WebVR?  So my personal interest and an area of research I would like to see is in the field of education. So there are a lot of possibilities in education. Like I showed how we can practice medicine in education. And I've also... I work for a bank, so I've been working on software for a bank. Like, when a person can go into a virtual bank and check their accounts and visualize the data, that will be something very cool. So yeah. That is something.  VR in banking. Awesome. Thank you so much, Shagufta. Let's give her another round of applause. 