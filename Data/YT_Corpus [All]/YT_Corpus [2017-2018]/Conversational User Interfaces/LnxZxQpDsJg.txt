 (applause) - All right, good morning. My name's David Candland. I'm the User Interface Design Lead over at Bungie. I've been with the company for 17 years this month... (applause) I started off, so that would make it 2000 when I started. I started off as our website designer. After several months in I was approached by my boss, who was Max Hoberman, at the time. He said, Dave, we have this game that everybody's working on, called Halo, and we need a UI for it and well you're basically the closest thing we have to a game UI designer, here at the studio and so would you be willing to work on the game for us? Well, needless to say I was absolutely ecstatic for this opportunity. There was about 30 of us at the studio at the time and they were all working on the game and I really wanted to be part of that. But since then I became dedicated to game UI design and worked on the game Halo and then Halo 2, Halo 3, Halo 3: ODST, Halo: Reach. We got tired of doing sequels, so Destiny and now Destiny 2. Looking back I've been pretty happy with the way that the original Halo came out, the UI for that, considering how quickly I had to throw that together and to develop it on a platform that didn't exist yet. As we were working on this they would frequently change the certification requirements for the platform. So it was like hitting a moving target. But recently I've been going back through and replaying the Halo games with my daughter, on co-op and of course I can't help but look at my past work and notice all the little things that didn't quite get pulled off the way I wanted them to for one reason or another. And I'll recognize that sometimes the weaker implementations were just newbie mistakes. Sometimes they were due to lacking the iteration time to adapt and to play test and feedback. Sometimes the correct implementation of a feature was just going to be too costly. And sometimes it was caused by blindly fielding requests that I received from other designers at the studio. It's the latter of these things that I wanted to talk to you today about. Tell me if you've ever heard anything like this in your studio. (laughter) Players aren't doing what we want them to, so let's just throw up a tutorial dialog. Let's make this red, or blink, or better yet, blink red. (laughter) This feature is more important than all the others like it. So we need to bypass the regular UI and present it in a special way. (applause) All right, yes. You've heard that. It's a running gag in the entertainment industry that people will say well we'll fix that in post, or we're gonna need to auto tune that, or we can fix that with Photoshop. If you ever come across somebody, at your studio, that says hey we're gonna fix this in UI, my hope is that there are things that I can discuss today that may be able to help you with approaches and insight how to handle requests like this that are using UI as a crutch rather than a way of enhancing the player experience. There's this saying that kind of goes around in UI circles. Good UI is like telling a joke. If you have to explain it, it's probably not that good. A common mistake that we, as devs, make in game development is when an aspect of the game is a little complex or confusing there's this temptation to kind of coddle the player by pausing the game and explaining how things work by using an un-skippable text heavy tutorial dialog window. For that matter, I've seen games that pause the game and throw up a tutorial dialog window when the concept is not that complex. Nothing disrupts the flow of a game more than stopping the action to put up a UI window, taking control away from the player to give them a paragraph of text how to explain how everything works. One of my favorite discussions on this concept was given by Blizzard's Dan Emmons as he discussed the brilliance of the level design in Super Mario World one one. You can find this discussion on the Design Club YouTube channel. But he explains how the player is given hints, clues and affordances and opportunities to learn how to play the game as they go along. This has the benefit of A, uninterrupted game flow and B, even better, letting the player feel smart about accomplishing and discovering the way things work. Now if we were to pause the action and stick up a tutorial in the player's face during situations when the player can freely explore and discover, like this, it's much like a designers way of talking down to the player and to the player it can feel very kind of condescending and it's as if you're saying I don't believe that you're capable of understanding this, so I'm going to spoonfeed this for you. To all the UI designers here, if you haven't experienced this already, I can pretty much guarantee that there will be times when you will be approached by somebody that will say something along these lines. We're finding that people just don't get the concept of X. Will you make a tutorial dialog that explains this? Now, the simple thing to do would be to go right along with that request and just do it. And in some cases the feature is complex enough, important, testing poorly or just requires this approach, but probably that could be the right course of action. We have several of these in our current game that we have out right now. But I would suggest there are many times that there are things the game designers can do to avoid resorting to a big block of text to help the player learn a gameplay concept. This is in those types of situations that I would challenge each of you to respond by thinking through the situation and open up a conversation with the designer or the person making the request to discuss the potential of an alternate means of conveying this certain information to the player. Sometimes I need reminded myself of this. When we were working on the Destiny one UI, I caught wind of this new feature that was going into the game. It was called the raid. For those of you that aren't familiar with this, the Vault of Glass Raid is a Destiny one end game activity for high level, very experienced players and to do it requires a full fire team of six people and a lot of coordination to complete. I swung by the desk of Luke Smith, who was the person overseeing the Raid design of the game, and I inquired about what kind of UI features he was going to need for us to be able to pull this feature off. Usually this kind of thing involves several meetings. It'll need to have some impact on our schedule if we hadn't previously planned for it. Needless to say, I was quite surprised when he just gave me this big grin and said something along the lines of, well if we're successful we won't need any UI for this feature. I then kind of pressed him for details and said that he said that he wants players to go in with no preconceived notions about what to do, but through clues, observation and affordances teams would be able to figure out the mechanics of the raid, simply by coordinating with each other to accomplish the goals. And when there was a failure in the experience and the whole fire team died, there would be hints and clues in the types of stats that we would display in our post-game carnage report that would come up at the end of the round. So when I heard this I'll admit that I was a bit dubious about how I was going to, how this all gonna shake out with little to no communication from the UI. Some of the mechanics he was talking about were extremely complicated. However, once I was able to participate in a raid with five other players I found that not only had we made something that had very intricate mechanics that people could achieve with very little help from the UI, but the act of discovery became nearly as rewarding of an experience as the loot that dropped from the bosses at the end of the level. And completing a raid in Destiny has become one of my all time favorite co-op experiences of any game that I've ever played. This one, however, comes in a close second. Even outside of expert player experiences as significant as the raids in Destiny, there are many ways that we can convey behaviors without requiring a UI screen to explain everything. As designers, part of our job is to challenge people that make UI requests, when there are better, more appropriate ways to be able to help the player learn. Could we convey the desired behavior by requiring the player to discover the behavior in order to exit the level? Are there visual or sound effects that we can use to help the player discover the correct responses? When the user experiences their own discovery to learn things, they feel elevated by the game. The game Portal pictured here is a shining example of this. Now you may ebe thinkin' to yourself that this may sound kinda counter intuitive, if your job is to create UI, most people prolly wouldn't think that a UI designer would be helping investigate ways to not create UI. But as UI designers it's really our responsibility to insure that the UI and the features that we have are used in appropriate ways. That said, there are many cases in player education, that the best approach may be through UI. Sometimes this is a tutorial, but not necessarily. Sometimes the UI can be utilized and designed in a way that uses visual queues and animations, like these, to draw the attention of the player to fulfill the goals instead of using text. The nice thing about this approach is that the visual queues through animation come up anytime that it is needed, rather then through a one time experience of a text-based education while the player is just learning the game and taking in all of this new information. So besides the aforementioned problems with a lengthy block of text in tutorial dialogues, one of the biggest issues I have yet mentioned is the fact that many people just simply don't read when the text is a roadblock in front of them, gating their entertainment. They just don't want to. Games in particular, they've come to relax and enjoy and be entertained. And disrupting their gameplay with required reading is just this hurdle that requires effort that they weren't really in the mindset to jump over. And many people wanna get past that as quickly as possible. I recall in one session, specifically during the production of the original Halo, the sandbox designer and I were watching a user research candidate in that, or sorry not candidate but participant, on the other side of a two way mirror. And we were, I'm sorry to say, using a big ole' honkin' dialog box to convey to the user how they were going to drive this hovercraft. Anyway in our previous tests people had been ignoring the dialogs when it put it up in the corner. So, for the second test, I did the next thing that I thought was appropriate, slapping it up in the middle of the screen, completely obscuring the view of the person. I would say it would stay there until the player deliberately dismissed the tutorial. Now we watched in horror as this person drove around the level, just like this, for what felt like an eternity. And there were even times when the guy would arch his back and nose up like this, like he was trying to look over, like that would help him look over the top of it. Eventually, after a while like this he turned towards the mirror and said, is there anyway we can dismiss this thing? So at that point the sandbox designer and I literally face palmed. And when I say literally I mean that in the literal sense. I was so glad that that participant could not see us on the other side. Ultimately this lead to our shipping solution. Which was pausing the game, while the tutorial was up. Hey it was my first real gig, I learned from my fail. On the plus side, however, we only showed this in the shipping game when they player was not playing on one of the harder difficulties. And we gated it so it only showed up once per account. And it wouldn't come up again if they played it on a different difficulty or replayed the campaign. Now it hindsight though if people were playing on easy, little small screen prompts that were displayed when needed, similar to the ones that we displayed in Destiny would have been a much better use of UI. Now in Halo three we introduced this concept of the message of the day. It would greet players when we had any major announcements to make and to prevent players from skipping this text without reading we would have this little countdown on the dismiss button, you can see it in the lower right-hand corner. While this worked great in our initial studies, with individuals we discovered later that this feature also fed an alternate behavior. When we invited participants into a multiplayer test we found that many players were becoming so consumed with that little timer, that they would focus all their energy right on that number and sit there and mash the button on their controller like this, repeatedly, so as soon as that hit zero, it would bypass the thing. And they didn't even look at any of the text. It was blocking their ability to dismiss the screen and they could not get rid of it fast enough. In hindsight, this screen could have probably been cut down to half to maybe a third of the text. And I believe that more people would have gotten more out of this dialogue had we had less text. With as much as we had, many people just didn't read it. All right can I see by a show of hands how many of you read this, did you see the fluffy unicorns? Anybody see the.. yeah okay like four of you. (laughter) Okay, all right it's the second to last paragraph about midway through, okay? Anyway there's definitely an amount of text that is the sweet spot for in-game reading. And this was definitely not it. So one way we solved this in Destiny, is when we needed to convey a lot of information was to disseminate to the player in smaller, bit-sized chunks in the animation. We still had them wait several seconds before they could get the agree button to dismiss the dialog, but when we animated it in, in this fashion, the player dwelt less on the time required to dismiss the message and more on the message itself. All right, that's enough on that subject. Next we're going to talk about the most commonly prescribed solution for making something more visible. Let's start off with a true story. A few years ago I, we were in the process of closing out the original Destiny and I had come across a bug on my plate and it essentially said many players are not setting an appropriate difficulty for the activity they are about to start. As I started looking into this, paying close attention to the screen layout I realized that I hadn't really optimized the layout for a natural progression for the game setup. The set destination and the difficulty button were stacked on the left and the launch button was on the right. It was easy, I believed that the player could overlook the difficulty setting since when we read a screen we tend to read left to right and then in kinda this Z pattern down and then left to right again, and setting the destination, the player may easily overlook the fact that there is a difficulty setting that they had right below that. So my solution was to move the difficulty button between the activity selection button and the launch button. And this required the player to actually drag their cursor across the button to be able to get to the launch button. And this created this natural one, two, three, progression.. And once the content was updated I resolved the bug as fixed. I was surprised, however, about a few weeks later to see this new related bug show up on my plate, that basically said make the difficulty button have a pulsing highlight on it, people still aren't clicking on it. Well I was a bit discourage since I was certain the solution that I had come up with had addressed the issue of visibility and the user thought process. I was also stressed that I was going to have to go to battle with the people that logged the bug, over not putting some gaudy call out that blinked on the screen. Particularly if this problem was indeed still manifesting itself. So during game development, a lot of the maps that we work on, on our local machines are in various states of functionality. And to keep things stable for us and to avoid, ya know, massive downloads we'll often just keep a test map or two on our local machine at the time so that we can avoid that. The ones we were using did not have a difficulty setting assigned to it. And so we weren't able to really see this, of the true implementation until the mission designers had actually gone through and assigned an appropriate difficulty to some of the missions and we encountered them in a play test. Now it was then that I realized that the player, to the player there was an issue with the difficulty. What they were seeing was the difficulty was normal. And to a player, when they see the word normal they're thinking oh, well this is just right for me. So as I re-watched the recordings of the various UI studies, I picked up on this and realized that I found that the difficulty levels that were being assigned to activities were actually an absolute, static value. Instead of being relative to the player level. This meant that a mission that I may play when I was level three at normal difficulty would still appear normal when I was level 20. So, cranking the visibility of the button up would not have helped. We had to fix the way that we were defining difficulty as a value, relative to your current player ability. We had to display a more appropriate relative difficulty there instead. And while difficulties in Destiny don't become ridiculously trivial when you over level an activity, but we do want players to challenge themselves a bit, so that they have to work a little bit more and yield a greater reward in both the game and in their sense of accomplishment. But the lesson I learned from this particular example is this. Anytime you receive a fairly prescriptive request to just do X, you really need to find out why. What are the goals that this request is trying to accomplish? Is the feature, if a feature isn't testing well, watch the tests. Try and understand what's going through the player's mind and push for a different solution if you find that the request or prescribed bug fix is not actually getting to the heart of the problem. When we are blindly fulfilling requests without context, we could actually be making the problem worse rather than better. All right, so now we've got this one to address. This request to break from the constraints of the current information architecture. At a larger studio if you were to go around and speak to some of the different designers on your team and ask them, which new feature is going to be the most important one in the game. Odds are that they are going to say it is the currently the one that they are working on. We're all proud of our work. It's human nature to be proud of our contributions and the things that we brought into the project. It's kind of like the one ring, it's very precious to us. Now often times this will lead to a special request that we get from a designer that goes something like this. This activity is different from all the others like it. It needs to go in a special place in the UI that grabs the players attention. It can't go in the normal information hierarchy. It needs to bubble up to the top and maybe even put a shortcut to it on the main menu. Sometimes requests like this are totally valid. And they warrant special treatment but often times if this precious feature is really just would fit logically within the categorization that your interface's information architecture already has clearly defined, you'll most likely create confusion for the user if the feature is drawing unexpected attention to it, and placing it out of the expected location. All right so, catering to requests like this can also send you into this battle of one-upmanship of competing elements vying for the player's attention. You may ship a game on a portable device that has a really neatly categorized main menu that has four items in it. But then a new feature is added, it's of type B, but much cooler and it's a special B, and so you're asked to give it it's own slot outside of the B hierarchy. But then we need to add more items to the A button and so now the A needs a blammy on it to advertise this. Then we find out that A and B are kinda dominating the hierarchy when C should be really the most important. So we've been asked to make it red. But then the owner of B plus really doesn't like that it's taking away from it's former glory and so in the next update we get B plus plus. But now, nobody is clicking on poor option B, so it becomes blinking and yellow and now we have Times Square or the Las Vegas strip, it's just sensory overload. Okay, all right, I'm being a little facetious but we've all seen this happen to a lesser degree in many games that are updated on a regular schedule. And more often than not, ones that are meant to encourage player spending. The problem is when everything is uniquely loud the clarity and usability are diminished from the original product. But let's see we sidestep the gaudy attention grabbing deviations but still brought new features to the top level instead of where they naturally belong in the hierarchy. Even if you are able to filter the noise, you run into issues with cognitive load. Our short term memory lasts about 15 to 30 seconds and stores about seven items at a time. Once our game screen exceeds that number of choices, we've started forcing our uses into this kind of trial and error methodology as they search for the feature that they're wanting to play. So the important thing is that if the features logically fits within the existing categorical hierarchy and does not warrant a new entry into your menu or other UI structure, you may find that the integrity of the interface requires that you insist that the UI adhere to the existing hierarchy that you defined when you get a request like this. Now during pre-production it's important to include the various disciplines and feature stakeholder's in on this discussion, so that there aren't any surprises. And more importantly that if you are pressured to deviate from this and make an exception for their precious ring, that you can refer them back to the alignment that you had during pre-production when they were there and bought off on this information architecture. Now depending on the studio culture that may not always work. And particularly if you are in a situation where your game is funded wholly by micro transactions that demand attention grabbing visibility it would a good idea to plan into the design, a special location wherever the latest one ring is for each release, and then when we design that space with intent it not only becomes more compelling because we have framed it appropriately but it gives off much less of this kinda slapped on appearance that tends to cheapen the players perception of the games quality. So really what it comes down to is a early coordination with other teams and designers. One of the big things that I would really like to see gone from this industry is this thought of UI as a service. Something that is just added on top as an extra layer once the game or features are nearly complete. I found that the most successful features designs that require UI come from a coordinated creative process that involves UI from the beginning with the people that are designing the features. So in Destiny two, one of the big shifts that we made in our activity flow was this notion of play and destination. Where players would be encouraged to roam around a destination, discover activities and launch them from totems in the world. Being a part of the design team that planned this feature, I was able to help guide, direct and participate in the creative process. At one point we had started going down this design direction that would have really taken us into a flow that may have given us flexibility in the fire team roles but at the cost of adding a really complex voting system that could really have been disruptive to players that are currently in combat. Having an embedded UI designer on the team helped us avoid getting locked into a user experience that could have resulted in this complexity and a frustrating interface experience. So we're still learning. There's room for improvement at Bungie, but this methodology of gaining momentum is gaining momentum in our companies design process of embedded UI designers. If you find that UI is treated as an afterthought or a final phase of design where you work, then I would challenge you to look for ways to help your coworkers understand the importance of engaging and refactoring UI or factoring in UI at the early phases of the design feature process. After all there's a reason why user interface and user experience are used often in concert with each other. Involving the former in early phases of the feature design can only enhance the latter. And with that I open it up to questions. (applause) - [Woman In Audience] I love you work, - Thank you - [Woman In Audience] I'm like staring at your in the halls and be like oh my god when you'd say something (laughter) But sometimes you also make my life a bit difficult. I don't know, I worked at Avalanche studios in Stockholm and I don't know how many times during pre-production a game designer came to me and was like are we implementing the Destiny cursor? But it's not only you, also Horizon Zero Dawn comes out and that's what they wanna do or like I had a 45 minute meeting about basically do it like in Titanfall two. So what could you like give me some tools like by how I speak with people when I get these requests? Like what should I, how, how, what, why? - Um you know I think it would be naive to say none of us borrow from other peoples work because we're all influenced by each other. That's just part of the process. But I would, I would think that it'd probably be worth talking to them about how involved this is going to be and if the payoff is going to be worth the amount of effort and work that it's required to be able to pull this off, and if that happens at the cost of what other feature? Sometimes you say yeah, sure we could do that but then we couldn't do this other feature if we were to put that much time into it. Maybe sometimes that is the right thing, maybe it is the right thing to put more effort into this feature at the cost of another one but when people understand that there is a, nothing is free that there's, it's gonna take time and that you have to pull off from something else then maybe it will help them kind of consider that a little more in their factoring of whether they really want this or not. But if people are interested in the cursor I gave a talk at GDC a couple years ago all about how we did that thing, and it's probably worth looking at if that's something that you're considering. - [Woman In Audience] It is awesome. - All right thanks. - [Woman In Audience] But we would never get time to do that. - Yeah, you know when we first started it, Jason Jones, who's our studio head, design head, he basically said we've go to put as much time into this as we put into the auto aim on the halo crosshair. That was somethin' that our sandbox designers spent a ton of time on and making sure that felt good and felt right was really important - [Woman In Audience] Thank you. 