 [Music] good morning welcome to prototyping to production bridging the gap with a common tool you made it to the final day of Io 2017 and we hope you've been enjoying your time here my name is Fiona young and I'm an interaction designer I'm a material design team hi everybody I'm David yang I'm a UX engineer and I work with Fiona in my world as a designer I aim to give users the best most delightful experience with any product I'm designing I create meaningful interactions that are easy yet exciting that help get the user to their end goal in as few steps as possible behind the screens I'm constantly in and out of design brainstorm sessions Orkin closely with a large variety of people as a UX engineer I take the owners designs ground them in reality and implement them in code so let's imagine we have our weekly stand-up between designers and engineers Fiona is going to show me some new designs that she's made and stuff that we're trying to implement hey David hey Fiona how's it going yeah how are you not bad I want to show you this new skater is art safari Valley card I designed the design looks pretty good I wouldn't call it a card though to me it's more like a box with three pixels border radius a light black box shadow and a grey background it's a really simple material design card well this is how it coded up everybody knows code is the truth well you know material design you should probably read up on it it's Google design language I know I know but I'm really busy and it's summer I don't want to have fun so this might this is a perfect microcosm of the gap that's seeing often between designers and engineers we come from two different worlds we have a different we have different backgrounds and we have different frameworks about thinking about themes so we have the same thing on screen and we have two different views of it when designers and engineer's meet sometimes it's hard to get a consensus because of our different backgrounds perspectives and priority there are times when I'm in a meeting and I think that everything I'm showing is pretty straightforward but then I realize that I actually lost the engineers a few slides back so even though we're working towards a common goal sometimes it still feels really hard to speak the same language and because we don't speak the same language sometimes this leads to misunderstanding and eventually misunderstanding can lead to distrust so you have a lot of friction when you try to get any idea from design to implementation everything really feels like an uphill battle ultimately it's the users that lose because you lose focus on them you're not able to iterate as quickly to achieve your end goals you might not fully implement the entire design vision so what's the problem we're not speaking the same language here and today Fiona and I will give you a glimpse of how we try to attack this problem on our team we leverage a prototyping centric workflow using the same tool the flutter UI framework across prototyping and our production code in order to bridge this gap we hope to break down some barriers so that you can leave this talk with a deeper understanding on how to better collaborate with your entire team ultimately creating a better product better team culture and better work efficiency well go over the existing workflow between designers and developers for mindsets to have to bridge this gap the power of prototyping my personal journey into coding it we'll end it off with a live demo using flutter all right let's dive into the workflow between designers and developers as you might already know the design process has several stages it begins with understanding first get to understand our users what do they want what's the current problem and what's wrong with existing solutions after we understand this research we begin to sketch this is where we generate a ton of different ideas before narrowing it down to a select few for designing the ideas that actually make it to the design stage are then mocked out from low to high fidelity before prototyping and prototyping is not only great for developers but it great for designers so that we can test and validate our ideas after several rounds of this we are fine and iterate so we have really rough fire frames low fidelity mock-ups which are just simple boxes for photos and text placements and then high fidelity mock-ups this is what we want our final designs to look like once we get to high fidelity mock-ups we create red lines and this is only typically done in the past well we find that it's not the best way so red lines are only call us back our basically detailed design document that indicates the type sizes color swatches and margin and padding units and this is a great way because if we create if we treat this process like a back and forth handoff it creates a lot of friction as a designer I create the red lines and it takes a lot of time and then I hand it off to my developer and he'll say you know this is really hard I don't think it's feasible let's just let's switch it up and make it easier which means I have to go back to my designs make some changes redo the red lines and just over and over again handing it off to my developer again and the same thing happening again ultimately these comprehensive red lines are exhausted both for the designers and developers as a designer you have to cover every nook and cranny so you have some padding here and margin there and your developers bound to come back with all these questions what happens is you end up building a lot of redundant artifacts that are just thrown away in the process there's another thing these mock-ups don't convey the animation transition and flow that often times really make a UI pop so we lose a lot of fidelity through this gap and through the transition so Before we jump into our tool let's let's talk about some simple mindsets to keep that start to bridge this gap the first one is we have to be user focused and this is important for developers so developers out there talk to your designers ask them about the use case ask them about why you're building this UI and what's the end objective for the user that way you'd understand the overlying goals and have a clear communication with your designers it also helps engage together early and often designers and developers don't follow each other out being in the same page about expectations and goals means that you can still re direct early on it also helps to treat it less like a handoff and more as a group effort because ultimately they result in more viable outcomes and less turn as a bonus if you involve engineers early on it means that they're less likely to reject your idea and it's also important to establish the same building blocks early on so you can build on top of each other so if you and I should agree what a card is and use that from that point on designers you also need to understand technical constraints we have to know what kind of information we have to work with the data the API information as well as the technical limitations of the framework in order for this this helps us prevent us from creating fantasy mocks so it might become too attached to all right so we've talked about four different mindsets to bridge this gap a lot of hands on message to improve this well hopefully a lot of designers out in the room are already prototyping and you realize the power of a prototype because you're able to convey your design in a more visceral fashion that developers can understand as well the good news is there's an influx of prototyping tools out there in the marketplace they're highly expressive and they make it very easy for designers to create these interactive flows but we still have one problem these these prototyping tools don't use the same language across prototype into production so what might be easy to do in your prototyping tool actually might be hard to do in production and what might be hard to do in your prototyping tool actually might be very easy to do in production so as a designer when you're prototyping you might not understand and explore the full technical constraints of your problem space additionally if your honor cooks up some prototypes with these tools and gives them to me I can't just like copy and paste it into my code so we have the same problem as we had before I either has to make red lines which we know are exhaustive or I have to go and evolve the margins and padding's of these prototypes which just isn't ideal so to solve this problem our team has embraced this UI framework called flutter it's an open-source UI framework both art design and engineering team uses flutter for our prototypes and our production code what's great about flutter is that it allows for rapid scaffolding you can design fully for your intent for both iOS and Android platforms our goal is to make it easy for jigal beyond the limitations of stock toolkits and flutter does this by having composable components it's also built in with the rich set of widgets like iOS amateur design guidelines like the card and the gray list so you're already familiar with also flutter has a gallery app for you to explore the different widgets that are already free built for you to explore but that's not all flutter gives you the freedom to be unique you can design Foley for both your for your intent for both iOS and Android platform and flow does this by giving you composable components and the ability to code with a single code base design once code one's ship it to all and hopefully it's as a designer you realize it's important to test your designs in the real world so what does it mean to be real well you want to hook your designs up to real data try to give it to you real users and go through your real work flows because flutter is one tool that can span from design prototypes to production it can carry you through this process it has all the developer goodies that we'd need such as automated UI testing framework and IDE support the cool thing is teams both inside and outside of Google are shipping apps today on iOS and Android using flutter a reading David said sounds pretty good but as a designer the saga coding is still really overwhelming and scary let me walk you through my personal journey of learning how to code so prior to learning flutter a few months ago I never really touched much code add a few HTML and CSS classes back in school but I was pretty much it I can really get myself past the long lines of text and to be honest whenever I did think of coding I thought the matrix which is really confusing and just not accurate but luckily I had a really supportive team our engineering team wanted our designers to come in and take some ownership over the small things such as margins padding in color and so we actually held a series of workshops to teach our designers flutter instead of focusing on the intricacies of code such as syntax and inheritance we just really focus on the building blocks that designers would need to create common UI patterns so my first experience with flutter actually didn't involve any technical coding at all I simply learn drawing boxes representing columns and rows which are some of the building blocks of flutter so I learned that when objects are stacked it's in a column and when they're side-by-side it's trapped inside a row just like this and then I also learned that you can wrap rows inside a column as its children and vice versa so my first time actually creating a market prototype was for the simple recipe mock-up so on the Left we have recipe information and then I write we have an image so these two things are side by sides so that's how I knew it belongs inside a row diving deeper into the recipe component there's the title description ratings and because ratings have the icons on the left and reviews on the right and I thought I was side by side so this is going to be a row inside this column and lastly we have icons the icons are also side by side which meant that they are going to be in a row and all of this because it's stacked meant that it was going to be wrapped inside a column so this was what I did every single time I wanted to code something and because I was a beginner it really helps me map out and visualize my designs and it was a literal one-to-one mapping into the code so I would start with a column inside the column where it's children so in this children I would have a texture title description a row for the icons in a row for the rating what was awesome was not only was Fiona's exploration and sketches useful for the designers on her team it was eye opening for the engineers on our team they it gave them a glimpse of the mental model of how a designer approached flutter and how a designer approached UI layout they were really energized by this and in response they actually created a tutorial which is entirely based off of Fiona's work and this is all live on the flutter website another one of our designers came from a web prototyping world so he was used to using HTML and CSS in order to help him along the process he created a series of cheat sheets that map HTML code the flutter code cut to Matthews concepts and just like before in response the flutter team found this really insightful and they published a full fledge tutorial basically taking a cheat sheets and showing helping web developers or web prototypers move from the web to flutter what this really shows is it shows the collaborative power of being on the same language and using the same framework across engineering and design because of this we're able to have these serendipitous collaborations such as this which produces artifacts that are useful for everybody so what really helped me was to create flashcards and guides things I resonated with how I understood these concepts I also asked for help a lot among my team and also I use Stack Overflow which is a Q&A site for coding topics and lastly just keep practicing and remember you're not trying to become a developer there's still a ton of technical things that I don't understand myself but that's not the part that's not the most important part this is just bridging the gap between you and the developers all right so we finished talking about the problems and some solutions let's dive into our prototype today we'll show you how we use the flutter UI framework to create this with music mock-up and we'll focus specifically on a featured artists card all right let's jump to the code all right so what we have here is IntelliJ and intelligence flutters fully officially supported IDE so you're going to see some some nice things in here as I mentioned before or as we mentioned before flutters built on top of these composable components we call them widgets so typically you'll use simple widgets such as text images icons rows columns compose them together to form more complicated widgets that ultimately result in your end UI and what fiona is going to do is she's going to use these basic widgets to code up the concerts mock that you just saw so from my mock-up we'd begin with a card so really simple I'm just going to type in a card and then inside here we have a new column which is the stack of items and here we see something really awesome Alfie and I need to do is type in card and she gets a material design card with all the padding shadows and and background so it starts to show that flutter is designed to be easily yeah folded for your common designs and because of that we could speak the same language now we both understand what a card is because the card is in the code so the first part of this card is a photo I've already pre coded this part and I'll just paste it right in here I'm going to remove the commenting and check this part up flutter uses the dart language and because of that we get all the developer tools from Dart fiona is actually using dart format here to make her her code all line up and this is extremely powerful as a designer because you don't want to focus on tabs versus spaces or alignment so with the click of a button her code is formatted and it eases the communication between me and Fiona because it's just something that we don't have to worry about anymore and because I'm a designer I really like to visualize things just looking at the code doesn't tell me what I've actually done one of my favorite things about flutter is a Hawtree little tool so there's a little lightning icon here with the click of a button I can instantly see what I've created which is this photo I also can see that there's no margins or padding let's go in and add that this part makes me smile as a developer because what fiona is doing she's taking ownership of the small design details that she cares about so she's heading to margins and because she she wrote this code if later on she decides the margins don't look right she can easily go back and tweak them without having to talk to me alright so put the click on run now there's margins the spacing around the photo next up in this card we have an on sharpen text so again I pre coded this part and then we're just going to paste it right under the photo so it's all wrapped inside the children okay Auto foam core mat and then heart reload and now we have the text so everything was almost ready except we don't have the styling so let's go in and add that here flutter has these objects called themes and text themes they allow you to enforce a consistent style throughout your app which is very powerful for designers and because flutter wants it flutter is designed to be easy to make beautiful apps it comes from a material design and iOS themes all built-in so terms such as headline and body - are all really familiar with - Fiona so again we could start speaking the same language and we're on the same page all right so I've added the text styling now we're just missing the purchase fun let's go in and add that so right now I'm using a raised bun which is right out of the material design guidelines and let's see what it looks like okay we have a simple grade bun right now now if I click on it there's already a ripple effect and this is all built-in so I don't have to do anything and because I'm the one who designed this design I can I know that I want to use a shopping cart and I know I want the bun to be pink and the icon to be white so let's add that it's also really cool is that when I type icons I see a list of built-in material design icons already so it's not hard to just insert whatever I need I know that I need the shopping cart so let's add that and same with colors I want white I want the bun to be pink okay let's double check there now the button is exactly how I want it and also if you notice on the left hand column we have a box for pink white and the shopping icon so there is more visual indicators of different things that I've used probably love David pretty good well actually not I look at it there's just one small issue that well according to material that I owe when you have a card you always want to use a flat button instead of a raise buddy all right David caught me so apparently you can't use raised funds on a material design card so I can really easily swap this up so instead of a raise button here I can use a flat button and just like that the shadows are now gone and if I want to change it for an iOS version I can easily do that right here as well okay and there's just a red box here to show the ice and overflow but that's okay because we're going to stick the flop in today okay now the bun is exactly how you want but there's one last problem the spacing with the text is really close together right now what can I do about that I would actually use the visual debugger in this situation what the visual debugger does is it shows you how margins padding and alignment are used to determine your final layout so what we have here is we see that the bad name non sharp in is getting squished by a button and we really want to have that text base out for that entire row so we push our button flush right okay so that means I need to use an expanded widget so right here expanded I'm going to wrap this column inside so this column is what the text is so just put it here and voila the first part of the card is done now I'm going to hand off my code directly to David and he'll be able to build right off of it using exactly what I've created and hopefully you saw kind of the power of having a really great IDE and and having a framework flutter that is designed to be designed friendly and so it was really easy for Fiona to add her her icons and buttons and change things okay so now I'm gonna let's put I'm gonna check out Fiona's code so she gave me some files and I'm going to check that out oops try that again okay let's give it a run and see what it looks like Sofia has actually gone in and head and created out the venue's details section which is on the bottom right here so it shows that we're going through this non sharpen concert and McKillip spar cool now let's take a look at the code so I've got in a head and started making the code a little bit more production-ready so i extracted out her UI into this into this widget called the artist card which specifically represents this entire card as you have seen maybe in Fiona's code themes started to get it a little bit long we were nesting a lot of themes inside columns and side rows and side columns so in order to make this a little bit cleaner and semantic I've built these helper functions so we have the build header function which is we build the widget that represents this top section and then we have the build venue details function which just builds this bottom part right here and finally we put these two functions inside a column so again it shows that everything is really composable in flutters they're just functions what's really important for our workflow is the fact that I have only moved around Fiona's code I didn't really change it at all so this is Phil Fiona's code oops and she can go back and make changes if she wants to so Fiona what do we want today what are we looking at Caplin on sharpen I want the venue details to close or expand one of our top on it okay cool so we want this card to be toggle so we can expand and close the venue section first I'm going to make a boolean flag which is my stake and this will tell me when to open the card and close the card by default it will make the card close the next thing I'm going to do is I'm going to want to animate this opening and closing flutter has a widget built in called the animated crossfade now what this does is it animates between two widgets so my first widget will be the venue section so I'm just going to copy and paste this venue details function plop it in my first child and then because I'm I'm opening and closing this card my second child is just going to be empty complaint container so I'm animating from something to nothing finally I have to specify based on my state when to show the venue details section and when to hide it so when open is true will show the first row shoulder first widget and when open is false we'll show the second widget which is the empty container all right great finally you want to specify a duration for this animation right now I'm just going to eyeball it maybe make it 400 milliseconds but the cool part is because Fiona and I are using the same code base we're using the same language if you want to think this doesn't look good she could go back and tweak it so I'm not too worried here all right let's see what it looks like so what we have is we have the card the the venue section details is hidden and that's because by default I said open default now I actually want to hook up a user action to toggle this state again because flutter has a lot of material design widgets built in it makes it easy to make this look nice I'm going to use a widget called the inkwell what the inkwell does is it shows a material design ripple every time a user presses on that section and now I could perform an action based on that touch so we're going to move all the content of the card inside that equal give it an on tap callback and let's see what we get oops we have an error that's fine so I put it in the wrong place let's put it right here there we go there we go so when I tap it I get my material design ripple finally I need to hook up that action to change the state in this case it's pretty simple I just set I just toggle my boolean value so open will be toggled all right nice we get this nice animation and it looks pretty good to me it looks pretty good but there's one thing what's that it's a bit too slow oh yeah go ahead and change it so because I'm familiar with this now I can just go right ahead and change it so let's try 200 milliseconds okay that's a little better yeah great all right can we switch it back to the slide please so hopefully this gave you a little snippet of the advantages of working within the same language using the same tool from prototyping to production we're able to jump in collaborate and I think we have a better working relationship now all right so let's take a look at some key takeaways from our talk today one of the reoccurring themes that we've been talking about is embrace the same language embracing the same language allows you to actually be able to communicate with each other with fewer misunderstandings and you're able to work better together creating a more user centered product and ultimately you also become more empathetic towards each other hopefully you've seen it's really a two-way street it's a group effort so designers need to take the job dive into some code and learn some of these technical tools but on the flip side the developers need to embrace design and also help their designers come to this world of coding it's not easy and requires and as you've seen our team has held these workshops to get this going and it's pretty apparent that it's a process so to be honest it took a lot of upfront effort for our team to get this through it took a lot of work and workshops but I think and we think that this work is is well paid in the long run and it's going to benefit your team you're going to iterate quicker your designers and developers are really going to collaborate and like working with each other and lastly we can't stress enough putting to use a common tool so in our team we use flutter but lots of things work for you as long as you use this common tool it helps you break down these walls between you and the developer or designer and bridges the gap between you guys so hopefully you saw the problem we're not speaking the same language and you had a glimpse of how we tried to approach this in our team the really cool part is all that code that we showed you and that mock-up that was all a real project in our team and that's that's all been committed in our repos so it's a real example finally if if the tool we use flutter really interests you I recommend going to this park at ten thirty by our co-workers Emily and Emily this is a more technical talk and they're going to build an app pull out in front of you for iOS and Android on the same time hooked up live to firebase and the best part is that because we're Google this apps going to be a chat app alright so if you need more available resources we have a lot on line flutter do mature design got a yo and don't forget to subscribe to the Google design newsletter thank you I know one last thing yeah and if you're interested if you had more questions about flutter and our workflow will be out there in the patio answering questions and we'll also be giving out some flutter swag so hopefully we'll see you guys later [Music] [Music] 