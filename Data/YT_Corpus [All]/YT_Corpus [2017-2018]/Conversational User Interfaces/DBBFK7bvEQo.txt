 [Music] hello everybody my name is Dominic Vasquez I'm a software engineer on the chrome web identity team you probably all want to provide a great experience on your website and especially when it comes to personalization sign up and sign in flows are a key to success so today EG kim and i will talk about improving the user experience while at the same time improving security for your users so let's get started during the session we want to talk on three important areas sign in sign up and security we're in the letter we will focus on two-factor authentication so let's get started with sign-in so this is my inner state of mind you know not right now but when I'm thinking about the sign-in experiences on the web too often I'm really disappointed you know these situations where you've got a new phone or a new computer and man what was that password again you have to sign in again everywhere and this is not just limited to new devices when I create an account on my desktop computer I want to be signed in automatically on my phone as well or do you know these situations where it feels like every time you go to that newspaper website it asks you to sign in again even though you're using a password manager why do I have to press that button can we make that experience a bit better so for sign-in flows there are three goals that we want to share with you today first form-based sign-in should work really really well for for password managers some websites have implementations of sign in and sign up flows which do not allow the password manager to remember and fill forms very well and for you as a site owner that's a missed opportunity you can increase user engagement and conversions because you can get more signed end users and users enjoy the convenience it's just one thing left to care about no dealing with forgotten passwords one reason left to abandon an account and no more difficult typing on the katana keyboard you know these at least eight characters some lowercase and uppercase some number and at least one special character that is impossible to find on the small keyboard so we'll discuss what you can do to help password managers doing a great job but you know what would be even better than the password manager filling your username and password into the form if the sign-in would happen without any actions from my side so our goal number two is a returning user should be able to sign in automatically no typing no buttons and we'll talk about how the credential manager API can help you with this goal so you know what let's get rid of sign-in forms at least in most situations this is a huge opportunity let's visual clutter less typing nothing to remember and it works on these pages you know when somebody searches online and they land somewhere on your website not at your home page where you have the sign-in flow but somewhere on your site let the browser take care of signing you in and that should work not only with passwords but also a federated login so number three federated login is a fantastic technology it allows making logging in more secure so much more secure and you know this is where Google Facebook Twitter or many others vouch for your identity the user needs a single account and that account can be properly secured with second factor authentication and all the bells and whistles that a only big providers implement and the only few users care to configure for every account for every website they have an account with so I want my password manager to handle federated logins just like in the handles passwords and the credential management API allows you to store meta information about federated credentials just like it allows you to save passwords the information is soon across devices and persisted beyond the lifecycle of cookies so let's talk about sign up in tho typical users and maybe I should say also Google IO attendance should be aware of the best practices for password they use short and simple passwords they reuse passwords across different websites and they do not enable second factor authentication on every website where it's possible the password one two three four five has been the most frequently used password for the past four years at least that's what I've checked we were secretly hoping that at least one two three four five six seven wood negatives here but no and actually the word password that's also among the top ten so this is so sad according to lawless research 71 percent of accounts on the Internet are guarded by passwords that I used across multiple sites and you know what that and second factor authentication second infect and factor authentication could improve the situation so much but it's by far not as prevalent as we would like it to be but okay maybe that's just the usability of second factor authentication where you get a text message to your phone and you have to type in it it's a bit cumbersome so we will talk more about that later in detail what we can do better and how it becomes simpler for your users and even more secure so we postulate signup should be as simple as one tap of a button you know what let's get a read get rid of signup forms as well picking a good password and memorizing it shouldn't be your burden the password manager should know your identities and you tap on one of them and the website gets the name the email address and the generated password and actually in the long term we can be even more ambitious we can create Hansard less accounts and we'll talk more about that later so finally there is security phishing is a huge problem and we want to fix that and there are many real opportunities ahead with this technology you know how many modern phones contain fingerprint scanners and secure element wouldn't it be cool if you could use that for biometric authentication in a secure and privacy-preserving way on the web we want to share with you some details of what we're working on together with the WL with the work of and working group of w3c our end goal is that identity becomes the first-class citizen of the web we want one platter one API the credential management API to manage your identity for passwords identity providers second factors biometric Rios education for signing the enter sign up the browser should take care of identity management and simplify the process of pressing a button and here we want to show how you can help us help your users what you see on this slide is the outline of our presentation at the same time this is where we try to get you motivated to help there are two things where you can help us today we will talk how you can help the password manager doing a great job for our users for form based sign-on and this alone should get you more signed in users and then we'll talk about then building on this we'll talk about how using the credential management API allows you to automatically sign in users and how it provides better support for federated credential management then we'll give you an Outlook to to api's that are not quite ready to be used yet we want to share our vision for getting rid of sign-in a sign up forms and making signup really really simple and we want to talk about a two-factor authentication and new ways of doing this so let's start with the basics we recognize that passives are not going to go away anytime soon we have a huge existing ecosystem but please help us do a good job for your users here you see two screenshots of the friendly password manager in chrome asking whether you want to save a password and fill it later on a website and we've shared with you at the 50th release of chrome that chrome fills 9 billion forms and for our users every month this is huge but it's not always working perfectly so here are the top three issues where the Chrome password manager struggles with today first broken mark-up and improper annotations this breaks chrome heuristics that determine what data to save for the user then there are unnoticeable form submissions and they break the decision process whether we want to offer to save a password and then finally mixing HTTP and HTTPS this is the worst offender with regards to automatically filling in passwords back into forms so let's drill into each of these issues a popular way of keeping the password manager from doing its job properly is to omit the form tag this is really difficult if you have unrelated text fields on your page maybe a search box somewhere and then the login form somewhere else and similar problems occur if you combine the sign in and sign up forms or their text fields into the same form element and of course please do not use empty or duplicate name and ID attributes because these are used to identify the fields in the forms finally figuring out the meaning of fields is really difficult think about the signup form it has a name an email address a phone number but which one is expected to be used to identify the user later during sign-in it could be anything right so you can help the password management by telling it explicitly what is the username that you want to be to see you later and you can do that by setting the autocomplete attribute to one of your form fields to username and this provides so much better user experience and you can also please tell us the semantics of password field it will field representing the current password which the password manager is supposed to fill in or is it the news password where we can offer password generation so unnoticed for form submissions the chrome Panther manager is built upon one principle which is we only want to offer to save a password when they log and succeed it and to check that we use a very simple heuristic if the login failed then typically the landing page contains another login form so that the user has a second chance to type their password and this time correctly if there is no such login form on the landing page we assume that the log and succeeded and then we can ask the user whether they want to save that password this is very simple for conventional form submissions using HTTP POST but if you're using XML HTTP requests or the fetch API to log in the user there is no navigational event so when should we check whether the login form is gone they'd love you forever if you could do two things for us first remove the login form after a successful login and second called history push state or history replace state to simulate the navigation because that simulated navigation triggers are heuristics that check whether the login form is gone and then we can offer to save a password third Chrome loves HTTPS please use it sensibly but avoid a few pitfalls quite often we see code like this on an HTTP page that's an insecure page the page posts the form to an HTTP endpoint and people think hey this is a secure the password is sent over an encrypted connection well that's true but it's not secure the HTTP page itself is insecure and it's easy to inject JavaScript and that JavaScript can steal credentials or you can modify the target URL and thereby again steal the credentials and the problem we observed quite often is that the user lands on an insecure HTTP landing page the home page which has username and password feels like here but the signup page is on an insecure it is on a secured HTTPS page so now the user saves their password during the signup flow but it would be totally irresponsible if we would take that password which was stored in a secure context and fill it into the insecure HTTP page and that again creates a bad user experience and then some developers think I'll just embed an HTTP iframe into my HTTP HTTP page but that's not really different from a security perspective the iframe can be silently swapped for a spoofed version and again credentials can be easily stolen so please if you allow the user to sign in to your website move on to HTTPS but on all pages and we've provided some instructions and tips for you at the URL that you can see there on the left on the screen and you know what if you help us improve the reliability of password managers people may start to getting used to the idea that they don't have to memorize and type their passwords anymore and this is when people will hopefully start using unique and randomly generated passwords for website and we're in the stage of crossing the T's and dotting the eyes to soon launch the password generation feature in the Chrome browser we just need to make sure that we're crossing or that we're covering all the edge cases and that users are always able to access their passwords and there's another positive side effect of generated passwords a user who doesn't know their password is a user who's really hard to fish so think about it less phishing less impact of leaked credentials and the user saves time and have a better experience when they're automatically signed in but that'd be cool but there are still some issues left we can take the guesswork out of our heuristics we can support federated login by the password manager and we can create an even better experience with a credential matter for the user when they are automatically signed into a website without pressing about and all of that can happen with the credential management API to talk more about that let me invite AG on stage [Applause] hello my name is AG and I'm a developer advocate at Google working on the open web so Dominic talked about how we can make the password manager work more effectively by improving your forms now let me talk about the credential manager API that enables a seamless sign-in experience it has roughly three benefits first with the credential money with API you can show a native account to the dialog when a user is trying to sign in this way users can sign in by selecting an account with just one tap second because the credential managed the API remembers fidelity federated accounts such as Google or Facebook users can get a consistent user experience for selecting an account across one that's ID and password accounts and also once with a video telecoms serve the credential management API allows users to sign in automatically this is typically useful when your friend Logan sessions of your website are short so that users don't have to proactively tap on sign-in button this is also helpful if users have multiple devices they will be signed in automatically just by opening your website we have introduced several websites apps and started to using this API at Google i/o last year they have implemented this feature mostly for their desktop version of the website but we are seeing more and more of this applied to progress web apps for example put it card an Indian top ecommerce website launched this credential Madhumita API just love week another example is regal a successful startup in Singapore has also launched the implementation recently Aliexpress from China has launched the integration while ago and they proved the higher engagement of this API with this API is not just in theory they have achieved 41 percent more send in users by using the credential management API additionally they decrease the signing failure rate by 85 percent and increase the conversion rate by 11 percent that's incredible now let's take a closer look into how it works along with some updates to the upcoming changes to the API to obtain a credential call navigator credential escapes by giving it password and federated parameters you can specify the types of credentials you want to retrieve with this call you will receive undefined when there's no credentials stored and no credentials stored if there's only one credential you will receive it immediately so that you can use that for automatic authentication and if there are more than two credentials sort an account you the dialog will show up so that the user can select the one that should be passed to your website if you want to let a user to sign in automatically you should avoid showing the account user you can simply add a minute II to to the call to 10 of showing it in case the user has more than one credential stored you will receive undefined so that you can defer the process to the users explicit sign in like tapping on the sign-in button starting from chrome 60 you should replace a mediated - with mediation silent this is equivalent but it enables some extra use cases for the API for compatibility with older version of Chrome I'd recommend using both parameters for the time being when a user signs out of your website the user probably doesn't want to get sent back in automatically at the next visit to avoid those situations you can call navigator credentials require user mediation this way users will be able to indicate they're in the intention to sign name by selecting an account once you receive a credential you can use it to authenticate the user because a credential object does not expose the password to that JavaScript you'd have to use fetch function in order to send the credential object to suffer this introduce a number of restrictions we have received feedback that developers could not use the API because they had they had to send the password as part of a JSON object or had to send the hash value of the password to their father after performing a security analysis and recognizing that consuming passwords from Java to JavaScript did not really prevent all attack vectors as effectively as we were hoping we had decided to make a change starting from chrome 16 you will be able to access the raw password from JavaScript I'm really excited about this change because it drastically simplified using this API to feature detect this exposure of a password you can simply check to see if password property of a credential object returns undefined or not but frankly front if your server requires a password as part of a JSON object or a hash of the password you probably should not call the API in order in older versions than Chrome 60 in that case please just check the user agent string you can of course store new credentials or update existing ones using the credential management API as Dominic mentioned submitting a form would trigger a prompt to store the credential even without using a credential management API but with the API you have better handling of this by authenticating a user through Ajax first then storing the credential only when it succeeds you can keep the credential information always valid and same to store your credential you can simply construct a password credential object with a Dom element of the same name form of course the sign-in form needs to be properly annotated with autocomplete attributes then call navigator navigator credentials stored this should happen in forms including sign in/sign up and please don't forget to apply this to password change forms as well that will keep users password always up to date by the way sign in to a website using a third-party account such as Google or Facebook is what we call federated login as Dominic mentioned in general federated login represents a few protocols depending on identity providers for example Google uses Open ID connect Facebook uses all those too and Twitter uses all swamp when you store a federated account using credential management API you are not storing credential information such as an ID token for Open ID Connect or an access token for o for us instead you are storing string that represents an identity provider and that ID for that user and optionally some other information as you can see on the slide one last important update to the API is that credentials is about sharing credentials across origins access to credentials in credential management API has been strictly reflected by the same origin policy in chrome 57 we have introduced VD ated sharing of credentials between subdomains this is useful when a user websites dome subdomain is different between for example desktop and mobile there are also cases where you want to let users sign in using a credential that is stored to a totally different domain large companies single sign-on services may typically appreciate this to associate one origin to another you will use something called visual added links create a JSON file that looks like this add both domains at slash well-known slash asset link stop JSON and reference each other this way you can declare that these two or more domains can share credentials with each other okay so that's the credential management API to learn more about it please visit vedic shield slash credential management API so far we've been talking about how we can improve the signing user experience by concealing passwords from the users the credential might be API does a great job at letting users forget about their passwords now let's move on to the sign up API and see how we can help creating stronger password sorry stronger Prudential's general rain published a report that says 58% of US consumers say that passwords discourage them from creating a new account I'd like to share success story from hotel tonight using smart lock for passwords on their Android native apps we want to bring that very signup flow you're going to see to the web but first this is how you would create an account with hotel tonight in the old flow you had to enter your email address a password and your name this is a lot of lock up typing for a mobile phone additionally you would have to verify the email address by clicking on a link in a confirmation email now here is what you see in their new flow instead the user taps on signup button then they account to the dialog which is shown immediately at least accounts registered on the form or saved in smart lock for passwords this enables account creation with a single tab when the user taps on one of the items the email address and name are shared with that website the cool part of this is that ultimately connects supports ID tokens that are issued by the identity provider so if you click on the gmail address the website gets an ID token with Google and does not even ask you for a password also they have proof that you own that email address so there's no need to send a verification email other confirmation this smooth flow created a 23% higher conversion rate for total tonight and now about 2/3 of all accounts are created this way the whole flow is a bit like what you know from regular operatic connect but there are two important differences first the user sees that what they share their name email address and maybe an avatar but no social circles no permissions to access their address book or post on their behalf users are much less hesitant to click the buttons and rightfully so I would say chicken because everything is mediated via secure environment secure environment there is no plan Z redirects flow that moves the user away from your site or app everything is very smooth you can learn more about this experience at GW so as smartlock case studies and finally a team at Google is prototyping this feature as a JavaScript library and we will be working on bringing this feature natively to the browser later this year so if you are interested to become an early access partner please go to DDoS shield slash web sign up API so you can reach out us so we have shared a lot about managing ID password credentials or federated login credentials now let me invite Kim to talk about what we are working on to reduce the risk of credential theft by bringing security key second factors and fingerprint authentication to the web st. Ouija hi I'm Ken I'm a software engineer on Google's identity and authentication team let's talk about second factor off let me start by recapping the motivation for second factor authentication now you already know that passwords have problems dominic and AJ already mentioned some of the downsides password reuse is rampant and as you know it only takes the compromise of one website to compromise that account for multiple others but even if you were superhuman and had unique random 14 plus character passwords that you never forgot or use the password manager to do it for you passwords could still be intercepted by man-in-the-middle attack errs if websites forget to use HTTPS Everywhere like Dominic showed us and sometimes users simply give their passwords away by typing them into fake form and tricking users in this manner is called phishing and unfortunately phishing is pretty darn effective one of our studies found that well-designed phishing pages will trick nearly half of targeted users even the laziest of phishing pages for example containing only input for username and password will still trick about 3 percent of users if you have a large user base that's still a lot of users so it's clear that protecting your accounts with only a password but to your account at risk and one solution to this is something you're probably very familiar with the OTP or one-time password it's a generated code that's valid for only one login such as something you might get texted to on your phone but unfortunately these also have downsides SMS codes have coverage this use delivery delays and a non-negligible cost for the organization sending them out you could get an OTP dongle to display codes for you but you have to have one for website and that can add up in costs and they're little fragile sometimes in either case the user experience for either of these is not great generally you have to copy the code off your phone or device into the website and for this reason security wise they still aren't perfect OTPs can be fixed just like passwords users can be tricked into typing them into a fake form so we really wanted to make it easier to be a security conscious user and our answer to these problems was a second factor device called a security key the security keys can come in multiple form factors it could be a USB device a Bluetooth device possibly even your phone but the key difference is that security keys interact directly with browsers to authenticate you there's no typing in a code there's a one-to-many relationship where your single security key can work on many websites our stats showed that these are faster and produced peer support incidents than OTP and of course best of all they protect against password phishing you may already have heard of security keys we're using them at Google and there are several other companies that use them as well they're currently using a protocol that's standardized by the Fido line and fine o stands for fast identity online they're a group that published security specifications for strong authentication so then what is web offense stands for web authentication it's the next chapter in the story it's essentially Fido plus plus a next generation protocol made for the web and in standardization with the w3c so web off end is a future addition to the credential management API is at ad showed us it's not in Chrome yet but we wanted to give you a heads up that it's coming and show you what it will look like let's first take a look at how security keys might be used so this is our fast and friendly Google login page and you enter your username and password as usual but because I'm a security key user we will notice the prompt me to use my security key now my work laptop I actually have a small USB security key that just stays plugged in all the time so I just reach out and tap it and I'm in this is showing you the use of a portable key in which case you would plug it in and tap it and then you'd be logged in any other case the top action produces a cryptographic assertion that proves that I use my key in other words that a real human being is logging in and not a remote attacker so even if a remote attacker had my password they wouldn't be able to get past this stage and here you can see it also works for mobile environments for example using a Bluetooth device on your mobile phone or you just press that button so now that I showed you how it would actually look to user let's take a look under the hood at the protocol itself kind of at a high level so there are two steps using a security key first is a one-time registration operation one time per security key and account this is to let the server know that you're a security key user so that you can use it on successive logins so what this would look like is I would log into my account I would go to like my settings page similar to how I would set up using OTP and I would say I want to register my security key I'd be prompted to insert my security key and tap it and what this does is this tells your security key to generate a private and public key pair for this account the public key is sent back to the server and you could view the server stores my public key associated with that registration that's the first step the second step is simply getting assertions from the key every time you want to sign in and here you can see that the browser sends my super secure super-secret password to the server that is of course vulnerable in all the ways that we mentioned before and because I previously registered my security key the server knows I'm a security key user and using the web off any P I it asks for an assertion and provides unique challenge to prove that a real person is here so using the challenge the browser will then construct a cryptographic proof to prove that I am indeed here and this has several key parts first is the physical touch or action malware can't cause this to happen like I said before second is freshness via that server provided challenge this makes the proof resistance against reuse and binds it to the specific session third in to origin and that's what provides the phishing resistance and you can also include states that identifies the TLS connection and this prevents man-in-the-middle attacks so you take all of this together the browser packages it up and asks the security key to sign it with the private key that it has stored for this registration and after the key is tapped it does so because the security key was previously registered the server already knows my public key and is able to verify the sign proof in the data that it contains and this protects against all three issues that I mentioned earlier password reuse interception and so now let's take a look at the actual API like I said before two phases and the first is registration to tell the website that you have one of these keys the call to do this is navigator dot credentials that create and you specify a public he'd potential type at a minimum you provide information about the account and the relying party and a unique challenge so this asks the keys event that new key pair and you send the information about the cadential including the public key back to the server now every successive time the user wants to log in the relying party can request assertions from the security key so you do the usual gathering of username and password if the user is a security key user you make the call to navigator credential guests perform the second factor authentication it's the same API as for the other credential type you specify a public key credential instead of say password or federated credential this looks for your registered security key and ask for that touch sperm at the key to do the signing and the resulting assertion is what sent back to the server for verification again this assertion proves that a real user is here logging in so these are two API calls that are simple and secure and we think this is the new future of second factor authentication so you've seen the API you've seen how it's going to be used something else that's cool about web off end that we keep mentioning is that it will support biometrics for faster reification security keys show that a real human being is logging in but of course biometrics uniquely identify you so typical use case would be banking you're logged into your banking app and it either times out or you log out for some reason you need to log back in in this scenario you don't want it to log you back in automatically that just wouldn't make sense of course you would hope the bank would verify that it was actually you so using the exact same web event a if you have a biometric capable device the website can request a biometric assertion to know who you are and confirm the login so yes you will be able to use your fingerprint reader on your phone for the web native apps can already do this you might have a baking app that does this for example the browsers cannot and that's what web often will provide so I know that's a really brief introduction again the api's aren't available yet but you don't have to wait to you security keys themselves you can use them via in existing final AP I Android also has PI to api's which land out here at i/o definitely get a security key add it to your Google Account whatever other counts you can and here are some resources to get you started but in the meantime if you do want to learn more about web off end you can read the actual spec to public feel free to join the mailing list to see what we're working on and definitely watch the working group blog for updates okay now back to Dominic to wrap up alright so at the beginning of this presentation we shared our goals the goal to have one API to mehnat on all of your identity meet needs for sign-in with a password federated login two-factor hardware tokens and even fingerprints and we hope that by now the puzzle pieces connect to the big picture so we hope that you will help us getting the password manager work really really well for your website so that users stop relying on their 1 2 3 passwords that they type into every website and hopefully this allows us to get users to use generated passwords soon so already today you can start using the credential management API to keep your users signed in across devices and users don't need to see and feel sign-in forms as often as they used to we've seen how the credential management API allows you to store and retrieve usernames and passwords but also information about federated login we shared with you our vision and that we want to facilitate entire signup flows with convenient browser UI and we've talked about our ongoing work on two-factor authentication this will facilitate two major use cases securing account with unfishable ii sectors and convenient real authentic ation using for example fingerprint both using the same API actually everything we talked about today will be covered by one API at the credential management API we hope that this gives you more signed-in users and moves them to more secure accounts we want to continue from here and we hope that we got you excited please speak to us and let us know what you think [Music] 