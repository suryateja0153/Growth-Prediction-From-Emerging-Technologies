 All right, we'll get started. So welcome everybody, hope you guys had a great conference yesterday, really enjoyed the day. So my name's Mark Scurrell. I'm a program manager, I'm based in Redmond just outside to Seattle. I'm in the Azure Compute product group. So our overall product group, we're responsible for pretty much, the wider group, pretty much responsible for everything to do with Compute. So that can be defining the new hardware that we're making available, exposing that via VMs and containers. And then sort of having some of the sort of higher level capabilities built on top of that, so things like VM scale sets, Azure Batch, the container service, and so on. So it's great to be here, yesterday I did an introductory session. I don't know if anyone here came along to that where I looked at infrastructure as a service and really sort of how most people get a start with the cloud with infrastructure. And what we sort of call lift-and-shifting applications from on-premises to the cloud. So when we looked at things like the fundamental infrastructure layer, things like storage and the networking, and sort of the basic virtual machine offering. So reading this section today, we sort of really going up a stack, and so we're really looking at some of the higher level application services. The high level capabilities that we're providing, that sort of really should take, sort of, productivity to the next level and ease of use to the next level. And really make it easier, make you more productive to develop applications for the cloud. So I think the sort of first thing if we look back, so I think I'll go back maybe sort of 10, 15, 10, 12 years maybe. And you look at how applications, how companies have moved, start making some of their offerings available on the cloud. Sort of things have changed, and I think customer expectations have changed. In terms of maybe initially like a good, few years back, you would have seen hey, look a website is down for maybe midnight until 6 AM in the morning for maintenance, or Saturdays, the website isn't available. Again, sort of for maintenance or because there was some sort of issue. And so really, that's changing now, I think customer expectations are changing in terms of the functionality that's available to them, the speed of innovation where new features become available, problems get fixed. Where they can access these applications on the PC, on their phone, on their tablets, and so on. So really the customer expectations are sort of changing. And sort of really with what we're sort of providing with these higher level platform services, it's sort of really to help developers to be able to cater for that. To be able to cater for the sort of fast rollout, being able to develop for the cloud, being able to have this continuous cycle of updates and deployments and upgrading as well as being able to monitor and manage that. So interesting look as you look at those four pictures and sort of think to yourself, what do these four got in common? And I think it's pretty obvious, they're sort of all examples of either companies or industries that have been disrupted by some of these newer cloud-first companies. And really sort what these companies have been doing is building from the ground up for the cloud. And really sort of leveraging sort of the new capabilities, and sort of the new characteristics of the Internet and the vastly improved Internet that's available. So sort of leveraging effectively you're in the cloud, people can access your capabilities from anywhere. The fact that everyone, pretty much, has a smartphone now and can access your services or your applications when they're at home, when they're on the road, when they're at work. Sort of really leveraging the speed as well, the speed of the connectivity, the bandwidth that's available and to really sort of enable these sort of capabilities. It's actually pretty amazing, obviously Microsoft owns Skype now, just the quality that you can get with your sort of video calls. The fact that you can do literally as you go real-time translation, that sort of thing. Amazing, I use Uber all the time, for example. They're just some of these new, born in the cloud services that's just totally disruptive. And sort of the earlier point, sort of really change customer expectations. So this also has effectively the fall out of the existing companies. And really, you look at these, it's just four examples of very big, very well-known companies. And they're all sort of looking at the cloud, looking at this sort of potential disruption that's there. And sort of really taking a cloud-first view on some of their offerings and really, again, looking at what customers want, look at those customer expectations. And sort of really wanting to provide the sort of capabilities that people want now, again, so that they don't get disrupted. So some of the capabilities that definitely looked at and are being adopted really across the board here, certainly, in recent times, it's sort of the big data, the analytics, the IoT, deep learning, and so on. One thing that I, sort of particular area of interest to me was in addition to Ford there, is a number of the car companies, for example, they're making available now smartphone apps for the car. And Tesla, in particular, have sort of really been, I think, innovative in terms of effectively every few months, they can effectively upgrade the software in the car. Everything on the car is controlled by software, and every few months you can get an update. And if you bought the car several years ago or just recently, you can get these updates. And it just downloads over night, and in the morning, you got a new set of capabilities. And sort of really, sort of amazing innovations really. So how are people sort of getting there, getting to the cloud, and where do we see things going? And in the session yesterday, as I said, I sort of talked about infrastructure as a service and sort of providing that initial easiest way into the cloud of taking your existing applications. And maybe moving them up to the cloud and allowing us to cater for things like that fundamental infrastructure. But they're the same applications that developed with the same methodologies. But there's obviously a ton of efficiency, a ton of value that you can get from doing that. You can get access to some of the various, actually very large range of hardware that we have, and that we're adding all the time. GPUs for example, are very high performance skews, very good price performance, VMs, a vast range of hardware. You can take advantage of the elasticity, the fact that you can, if you've got a dev test, for example, you can spin up the VMs when you need them, and then you can take them down when you don't need them. And sort of really have that elasticity on your resources and pay for what you use. And then the scale as well, I think I showed a brief demo yesterday, it sort of went up to 300 VMs. I've done other demos and with customers where we've gone into the tens of thousands of VMs. And with the cloud and sort of effectively the hyperscale that we have now and the global reach that we have, there's really definitely new possibilities there in terms of utilizing really, really large amounts of compute. So I still have to step back sometimes. The group I'm in, we sorta focus on large scale compute. And I could be preparing for a demo or working with a customer on a proof of concept, for example. And literally, with a command line, I can create a set of VMs and configure it, and literally five minutes later, I've got 10,000 VMs sitting there, maybe 20,000, 30,000, or 40,000 cores, something like that. So literally, in 5 to 10 minutes, I can get that much compute the power, use it for 30 minutes, an hour, and then again, run a command line and have it all go away. And then I stop paying for it. So pretty amazing new things. So we think in the cloud, we start off with get that initial bump with infrastructure as a service. Get a whole bunch of value and efficiency there. But sort of really moving forward, what we're seeing is after that initial phase, get the initial applications up and running, but with the, maybe developing, enhancing those applications Maybe you're now creating some new applications. You'd be in the position to leverage what we call platform as a service in these higher level capabilities. So just to level setting, sort of useful diagram on the right there is useful, especially for those new to the cloud. And we have so much terminology, it's amazing sometimes to think about that. Sort of in a traditional on premises offering, obviously you're responsible for everything. You own everything from that foundational infrastructure, the service, and the storage, and the network, and then so on. You may or may not, you might have a virtualization layer, pick your OS, all the way up to your applications and data. And I think certainly when it comes to applications that you're writing or applications that you're running, the main thing, sort of bear this in mind going forward, that you're concerned about and the way you want to spend your time is, in your and expertise with earned business domain knowledge and so on. It's the applications and the data. So with IaaS we moved up and so takes some of the foundation at layers away from you. So you don't have to worry about those and that's a virtualization storage in, and networking and all the service and so on. And that's where you can get your initial less than shift your applications and get some initial benefits. But you know you still got five layers at the top there. You still got that responsibility for maybe looking after the OS patching the OS. Middlewares, runtimes and so on as well as your applications and data. But there's a significance value from using infrastructures and service and not having to worry about those bottom layers. So, then with PaaS, what we're gonna touch on him, what you'll see is, sort of think about it. So, we really sort of trying to take away tasks, development effort, management effort that you sort of have to do. And you sort of have to do, cuz user always have to manage the servers or manage these VM's. But really, at the end of the day, it's all about the applications, it's about your data. And so, sort of things that we don't really think are core to your business or core to the applications, and in reality, we can abstract away. We can do that by moving up the stack and providing you these higher level capabilities. So one of the best examples is, and we'll touch on it with a demo, is functions. And functions are sort of our pretty recent Azure offering and it sort of builds upon this concept of server-less. So I think that's where you can run some code and you don't have to actually really worry about whether there is actually physical service or even whether there is vm's. You don't have to worry about scaling them up or scaling them down and so on. We're really providing this sort of serverless capability, so you can focus on writing your code, running your code and managing it. But there is a whole layer that you don't have to worry about anymore, just one example. And then obviously, on the far right, you've got the software as a service, your Office 365s, Power BI maybe, and so on there, where we sorta handle and provide you everything. So hopefully that's just a good level set, especially if you're sort of just starting to get into the cloud and Azure. So we've, what we did in terms of looking at platform as a service and so we worked with some of the companies that have effectively moved from infrastructure as the service and started leveraging platform as a service. And it's definitely a trend we see. Some of the earlier opters of Azure. I think using the virtual machines and using that infrastructure. And maybe they've been doing that for a couple of years, one, two, three years. And radio sort of now looking at a platform as a service, and we got a couple of examples here as well. But what are the benefits of that? I think it's about seven or eight companies we've partnered with Forrester and they interviewed these companies just to try and get some representative sample of companies that have invested in platform as a service and what sort of benefits did they get. And pretty significant here in terms of the return of the investment. And I think sort of the couple that stands out there, time saved, maybe that's time saved on managing, time saved on deployments and upgrades and so on. And being able to iterate faster, get your software out faster, more regularly maintaining uptime and so on there. All right, so let's just put this, the platform services in context what are they and how do they fit in with the stack. Sort of talked about this a little bit but the picture's always nice. So we have our base layer, infrastructure as a service, VM storage networking and obviously even the last year or so, year or two, we've invested heavily in containers as well. So we now have the Azure Container service is available, at G8 last year. And then, even now, we might've seen, and I think in Windows Server 2016 we actually have built in Docker container support for Windows Server as well. So really recognizing the value that containers bring. So we've got that in terms of infrastructure. And then we got a number of offerings on top of that. So if you were at the keynote, I think it was Jeff went through the portal and he was scrolling through. All the things that were available at our session yesterday I had a big iChat with everything. And so you can see we do have lots of offerings located at various scenarios, various types of applications. So let's start off on the left hand side, so App Services. We've done some. Those that had been following Azure. We've done a bit of re-branding last year on this. This is really sort of an umbrella service for a number of actual services there which is web, mobile, API and logic apps. Effectively, there's four real actual services there all sort of under the umbrella of these app services. And again, just for those that have been following Azure. So with some of the name change, I think Web Service, which used to be Websites, Azure Websites. It was one of our first higher level platform services and then logic apps and API, they're sort of a couple of the newer ones. We've got Service Fabric, had a, gave a brief intro or gave a session which introduced Service Fabric yesterday. And really sort of this, there is a little bit at the end of this we'll take into a little. But Service Fabrics have allows you, basically provides both a develop a platform to allow you to sort of build applications based on microservices and deploy them at scale, robustly in Azure, in the cloud, also on-premises, or even on a local machine. That have an overall cluster of machines, cluster of nodes where you can deploy your microservices and provide the developers the tools to develop, and administrators and IT the tools to be able to monitor and manage the applications in the clusters. Functions, we'll dig into that, I've got some specific demo there in terms of functions, as I said earlier, it's sort of really vetting new service, but it's sort of really it's all about server-less compute and effectively you can write your code. I've had so many functions or these snippets of code perform a particular task and you don't have to worry about VM's or servers where they run. We sorta handle that and as we'll see, there's definitely a, and there's a different business model that can come along with this if you don't have to worry about the VMs. Event driven as well, as we'll see, can be very event driven, both sort of for functions and logic apps as well. So you can have very easily creative and driven applications. Cloud services for those that on Azure, that sheet of a very first offering. We actually built some platform as a service capabilities even before our VMs were available. So still extremely popular, really sort of way, it sorts of build a layer on top of our virtual machines. Makes it easier to manage groups of machines, separate out your roles in a multi-tier application. You can have these services talk to each other as well. And will do things like it makes easier to scroll up and down. Some of the roles within your multi-tier tier application. That's probably one of the longest running platform services that we've had that extremely popular. And then also if I showed yesterday the Azure marketplace. We go to Azure.com and go to the marketplace or you're in the portal and you say new, you can go to the marketplace and browse many applications, the OS images and so on there, that including third party platforms as service offerings. So it's sort of vast range there. I mean, I think one of the challenges that we hear all the time with producing a lot of these services even in the last year, you sort of do have to keep checking back on Azure.com, keep following the blogs, and so on. Because from your perspective, there is so much there, and literally we're sort of iterating these updates, a new feature is almost like every week, a new service is every few weeks, even on every month or so. Definitely, things are moving fast. There we go, so yeah. Web and mobile, Microservices, functions definitely on Serverless side, and so on there. All right, so App Service. So with App Service, talked about this for Azure as a whole. But really when we've got these high level app services, we've really still got to bear in mind some sort of key principles, or really sort of get some key fundamentals right for you. Yes, they've got to be easier to build, maybe easier to manage, quicker to deploy, and so on. But you're still running your business, they still need to be enterprise-grade applications. You still need to be running on our sort of enterprise-grade infrastructure. We really want to be able to improve the efficiency of how you manage these applications and really put a lot of effort into making it as easy, and as quick as possible and as low overhead as possible to sort of mange the applications. On the IT side, and then from the development side, you may be, service fabric or some of the functions and so on, really sort of enable the developer to get the high productivity development. Some sort of specific examples there for enterprise-grade, Jason covered a bunch of this in the keynote. Definitely a lot of emphasis on the platform as a whole around security and compliance. Catering for hybrid, hybrid scenarios and for example IV AAD, Active directory AAD, integration there. And really having that global footprint, you can write these applications, you can deploy these services. We'll see it in the demos around the world in our 36 regions. The fully managed, we sort of touched a bit on that, actually towards maybe the serverless. I think the one thing there that we'll see for some of these services that we'll look at is effectively the built-in auto scale. If we move up the stack we have our VMs, and then we have things like virtual machine scale sets and Azure Batch which are very good at provisioning. And making it much, much easier for you to get large numbers of VMs to cater for large scale workloads. Then we have things like the auto scale service, that allows you to scale the number of those VM's up and down according to load. On some of these services that we've got here, you don't even have to worry about that. The service will look at the incoming load, is it keeping up. And ensure that the appropriate amount of resource is there for you. And then we talked about the development, and I think the thing on the development may be two things there to highlight. Really is the choice, the choice of your development framework, the tools, the technologies that you use. As you see, even all our APIs, for example. For the service I work on most of the time, we have obviously .NET and C#, .NET CORS, so that can run on Linux, but we have Java, Node, Python and so on there. All the API's for these services pick the API, pick the language that you want to use. And then the staging and deployment, I think's interesting as well. Sort of being able to cater for more of this continuous development cycle. And to develop these applications, maybe push them out to staging and then push them out to production and basically loop around, keep going. All right, so let's dig into the App Service initially. So this, as I said, really an umbrella for sort of four services here, we'll talk about there. So the first one was the Web Apps and as I said, this used to be called websites. And I think it was one of our first app platform services. And this was really all about, you could use for example worker role offering, worker role and actually web role offering. And have websites, but you were still dealing with virtual machines, you still basically had IIS running on these machines. We provide a bunch of help to make that easier to manage, and deploy and so on. But really, websites came out which abstracted a whole lot more things away from you. Made it a lot quicker to provision and deploy your websites, have them automatically scale for you, and so on there. So and definitely, the auto scale, the load balancing there and then tying it in with a sort of continuous deployment. A lot of Azure.com is based on the web apps. And we have this sort of continuous deployment cycle, where literally, actually you can go in and even contribute to the documentation. We can go in internally, anyone on the team can go in and contribute to the documentation. Go in to GET, make the change, propose the change, submit it. Then it's part of our work flow, it'll get approved and then it's sort of just pushed out to the site. So even internally on our documentation, you are seeing that we use GitHub and pretty much anyone can contribute and get changes in and improve the documentation. And all of that's sort of based on integration with web apps. Mobile Apps followed soon after. I think I wanna say maybe that's about four or five years that has been around. And I think sort of the main thing here was to recognize obviously we've got mobile, certainly four or five years ago rapidly increasing trend, rapid adoption of mobile. And people wanted to make their experiences available on devices. But it could be pretty tricky, pretty involved to cater for all these devices and effectively write the back end services to support these devices. So really Mobile Apps, I think maybe about three or four years ago, came about really to resolve that problem. Provide those high level capabilities, to make it quicker and easier to deploy these services for the many device types to be able to connect to. And whether it's leveraging, often I think we started off backed by databases, internal APIs and so on there. So initially, I think we focused on the authentication and push notifications. One area I've actually worked on is offline sync as well. And they've added some really nice features there for the developer, so that when their users haven't got connectivity, but you still want to give them access to a certain amount of data, then this offline sync capability is built in. And you're not having to write that yourself. Actually, I think it's a great example of having written some of this stuff, really helping developer productivity. And the fact that pretty much out of the box, you get effectively offline sync capabilities for the data sets that you define. So you can have data cached on the phone, the end user even without connectivity can update that, and then when they get the connectivity it will sync for you. So great platform, I think that combines as well with what Jason was talking about in terms obviously then we have that Xamarin, integration with Visual Studio. So, now you've got the tools to be able to develop the front end as well. More easily develop the front end for all the device types, as well as the service for the back end service. API Apps, a bit more recent. That's all about really exposing the data that you have and exposing it in a consistent, standard way, so that then that could be consumed again, maybe by mobile apps or web apps. Or can actually be serviced in, we'll go into the Logic Apps in a minute. But really, sort of all about, you've got all this data internally and you want to make it available to people with devices or other applications outside the enterprise. But you need to make it available in a sort of standard way, in a secure way and be able to easily manage that. So that's what API Apps is all about. And then finally, Logic Apps. So this is pretty much in chronological order there. Logic Apps really takes things almost to the next level. I've got a demo here so already all about building integrated solutions, your various services. It could be your own services, could be API Apps that you've exposed, that could be third party capabilities. Effectively, the APIs have been exposed, and allows you to sort of integrate these various services together with workflow. So there's a large ecosystem and definitely growing ecosystem of these connectors that we offer from our Microsoft Services, Office 365 and so on, but external SharePoint is there, Outlook. And so on. But also for third-party services with like Dropbox, Twitter, Salesforce, and so on there. And the very cool thing, I'll touch on this a little, but the cool thing about this with Logic Apps then you can also call out to and actually with functions as well. We sort of call out and leverage these other services that we've made available. And certainly at the moment, things like cognitive services and machine learning, so powerful to be able to effective write effectively your web API call in your Logic App or your function. And basically say hey, call off and do some image recognition or do some smart thumbnail generation according to whether the person is in the picture, do face detection and so on. And you can just do that by calling out to a web service now. Okay, let's do a demo. One thing I wanted to show you, where are we? All right. Well, I just wanted to click on this link. I'm really only able to hopefully get across to you sort of the range of things that we have available with our app services and sort of touch on what they do at a high level. Are they suitable? Is it something that you want to look further at? And maybe your next thing is you get back to the office the next week and say, well, I'd like to dig into that particular service or that service. So just one thing I want to highlight, and the teams I think have done this nice capability, that we'll start seeing more frequently is basically these try capabilities. So even if you haven't gotten a Azure account, you haven't got a subscription, you haven't even done the free account, you can go and play with these app services. There's a little intro video here. You can select the app type. So I was talking about mobile there, for example. You can say, hit Next. Maybe it's Xamarin CRM, there's an example with a Field Engineer, we're gonna build a mobile dashboard here. So you can select that and then Create. And what it does is it just basically creates a sandbox for you behind the scenes, sort of like, we've provisioned whatever is required there. I think it lasts an hour or so, something like that. So you can keep creating them, but you can have a play with literally no commitments, no credit card, no free trial or anything like that. So anything that you see here you want to try out for app services, do use this, I think it's a great intro. And then you can, okay, well this definitely looks like something that we could use. You could a use a free trial and really start using the service sort of properly for over a number of days or a number of weeks. So I just thought I'd highlight that, tryappservice.azure.com All right, so in Logic Apps, so I'm gonna go into the portal. So hopefully everyone's seen the portal, well, it was in the keynote, everyone has seen the portal by now. I've got my dashboard for the Tech Summit and I've got my list of my favorite services here. This is what Jeff was showing. And I went through this at one of the other sessions. Here's the big list he was going through. And this sort of gives you a, keep scrolling and scrolling, there we go. The amount of stuff that is there and is available to you is in Azure, it's nicely categorized, and so on. But obviously, no one's gonna be using all of this all the time. So there is the way, you'd basically just come up with your favorites and then you sort of take some of your favorites and then it appears on the left-hand side here. So that's basically what I've done here. So, Logic Apps, so I've added Logic Apps here, we can click on that. So I've got a demo, I've got a pre-created one, but what I'm gonna do, keep your fingers crossed for the network and everything, we'll actually do a new Logic App. Okay, so I just need to name it, come up with a unique name for the Logic App. I've got a concept of a subscription, I talked about this before but just very briefly, this is if you have an Azure account, you can have multiple subscriptions. And that's where there's a bunch of configuration, like quotas can roll up to be associated with the subscription. But also it's a way to sorta billing is rolled up. So when you get your bill, it's broken out per subscription. So you can have the subscriptions for departments, for example, individuals, and so on. We've got a resource group and, So a resource group, it goes beneath a subscription. It's a subscription having multiple resource groups and ready, as the name implies, for all the resources you can create, you can group them into one, again, effectively container, and it really sort of helps in management. And I think, actually, you can drill down into the billing as well for sort of the what are the charges associated with a particular resource group. So it's sort of good for maybe a particular application or set of applications, you can create a resource group for those. Really it's sort of a first-class, pretty much in all the experiences within Azure where you're creating resources, you're gonna be creating or using existing resource groups. Here's my location, I've got it set by default to North Central US. But just, again, for those sort of new to Azure, this just gives you the flavor. You can see here on the pull down, Logic Apps about where is it available. Some of the services, it does vary. If you go to our regions, and then you can say for the regions, what services are available where. Some of them actually do vary, maybe they start off in a few regions, and then they'll expand out later on. Logic Apps, obviously, is pretty much everywhere here. One other thing on the billing, it depends on the service, again. But things like for VMs, if you check the pricing, sort of the pricing can vary between regions. It's all sort of based on the demand and sort of some of the costs and so on. But there might be slight differences in VM cost, for example, between the regions. So, it's just something to consider. All right, let's create that. So it's a pretty simple experience, certainly, when you're creating a VM or other things, there are two or three, or four maybe, areas to go through. That is deploying, it looks like that succeeded. I've got my little notification up here, I click on that and that says it succeeded. Sometimes when you using the portals, sometimes it's not so good about automatically refreshing, but it pretty much always has a Refresh there. So if you're not sure, just click on the Refresh and you get the latest and greatest list. Looks like I created those exactly the same. All right, so let's select that, that must have been my existing one. Maybe this one, yeah. All right, so I created this, I've just literally created the Logic App. There's nothing, effectively, in it yet. And, again, a fairly consistent experience, if I scroll off to the right here it's gone and invoked the UI. I've got all my options here on the left, I've got my summary here in the middle. And on the right-hand side, it's automatically put me into what they call the Designer. And, again, helping me here with a set of templates. So hopefully, if we just look through that sort of template, this starts to give you a flavor of what I was talking about in terms of integrating services, whether from Microsoft or elsewhere. And this sort of gives you sort of a flavor of some of the processes or integration that you can perform. So this is sort of Microsoft only here, send an email when a new item's added to a SharePoint Online list. This is totally third-party, share Tweets on Facebook, and then a mixture. Here we go, new member added to MailChimp then add them to a SharePoint list. A whole bunch of sort of starting points here. This might be useful, new file in Dropbox and then also copy it to SharePoint. So if I just select one of these, it's gonna say hey look, what is it? Gives you sort of the high level flow and then you can say, Use the Template. And it'll start you off on the process here. So for some of the third-party services, well for most of these services, obviously there's authentication required and you're gonna have to sign in. I'm gonna leave that for the moment though, and I'm gonna create one of my own. Okay, so essentially I've canceled out of that and I'm in the Designer now. Actually, let me just even, Let me maximize that for you. So I've got my Overview, as I said, we're sort of blank here. In my Development Tools, I have the Designer. So let me select that, there's my Templates. Actually, let me just select that as well, this will just take me off to a web page. So again, just to give you, this is an ever increasing list, looks like it was updated about maybe a month ago. This, again, sort of just gives you a flavor of the number of connectors, the number of services that you can talk to. And for a number of these, further drill down description of how to do it as well as various integrations. So again, just to give you sort of a breadth. So I'm gonna start with a blank Logic App, just to show you something from scratch. And then we know that one of the things other than http call is the status code I'm going to have a condition. Actually, a Web API, Web API availability. And I'm just gonna bring in a couple of services. So the first thing I'm gonna do is I need a recurrence, every hour effectively. I'm gonna run a query on this web API and see, has it come back successfully or not? So to setup a recurrence, so when we go in here you'll see this is a. You get basically the step here, this is a recurrent step. There's more information here about it. You can rename it. You can add a comment. You can delete it. You can get a little bit more of a description about it. And then here the basic information. I can, Let's see here. Setup a, I'm gonna, every 60 minutes. So this effectively is gonna be an event, and it's gonna fire every 60 minutes. Most of these steps will have advanced options. They're sort of hidden by default. But you can go in here. For example, you can specify time zones or particular start times and so on. So now I'm gonna go on. Now I can create a new step, and this will sort of be linked. So the next thing I'm gonna do, I want to make a call off to the web API, and this is nice and conveniently at the top here. I've got a HTTP action. So here the first thing I've got, obviously custom set of fields. And obviously are very specific to the HTTP action. And I'm gonna perform a get. And I need a URI. So just to save me typing. I've got that here. So, I'm gonna make a call after this third party API and do a query against this end point search Jason for Seattle. You can see I can add headers. I can add body to this. And then the sort of more advanced options, for example, authentication. But I don't need any of that. I'm gonna just make that call. Sorry, I'm not being very good here in terms of the zoom. So hopefully you can sort of see towards the back, whoa. There, the recurrence, the HTTP and what I've filled in there. All right, so then, new step, and I'm gonna add a condition. And so I've made my HTTP call, I want to perform different actions sort of depending on what the result was. It might have succeeded, it might have failed. So I'm gonna add a condition. And what I want a condition on, so one of the things that is really sort of nice here. It's basically saying, look, your previous step was HTTP. You could have a condition based on what that action returns. And then we know that one of the things obviously for an HTTP call is the status code. So I'm going to say, okay, I'm going to have a condition. So basically, if the status code is equal to. And then I'm going to just put in the value of 200 so it succeeds. Then I want to do something. So you can see here if yes. And currently it's not doing anything, so here I'm going to add an action. So if that's succeeded I'm gonna perform an action. So the thing I was just doing here, and it's a little fake. But it was just easy, sort of, for the particular demo here. Is I'm gonna call off to OneDrive. And I'm gonna create some information actually in my OneDrive account. For whether that's succeeded or failed, and actually I'm going to create a file. So what this is gonna do is show you, first of all I can search here, search in the actions, I found OneDrive. I can create a file, more information available on this, that's pretty obvious, I suppose. And here I get prompted, so this is where I sign in. So it takes me off, does a redirect. Sign in.  That's the account that we use going forward [INAUDIBLE]?  Yeah, so the question is that account's gonna use in forward. What we'll see, remind me if I don't look at this later. But that'll have filled that in and that will be available and saved in these API connections. So it securely saves everything off. And then it would be available if I want to use that account further on in the work flow, I can do that. So the thing I'm gonna do is create an account and now it's linked it. I can click on here and browse through that. Again, I've got my, I think I've got my, yeah, that's just gonna do, I don't remember the name so I'm just gonna use that one. So I'm gonna create a file, I'm gonna create it in that folder. I'm in the success path I think here, if yes, then it creates success.txt. And also, the file content, what am I gonna put in the file? I know it's success but I'm gonna put in the body of the file just so I could actually see if I want to. I could see what was returned. So here's an example. So on the no case if it fails, again I can add the action. I can do the OneDrive. Create File. Have I still got that? Yes I do. So we're right in the same folder. Say that failed and then the content here. I don't know what the Status code be, so I'm gonna put the Status code and then I'm gonna put the body. So that's, I think, my initial logic app and I can save that. So let's just go through, I think, yeah, API connections. If I jump to here, the API connections, you can see I've got my sort of OneDrive connection here, and it saved off. So let's go back to the designer though. And just up at the top here, we've got various options. I'm gonna hit the Run. And then we'll try this out. So it just takes a second or two. And, I don't know, I worked on the SQL Server team for quite a while. This sort of has a lot of flashbacks for me from integration services for example, that experience. So I can see the various actions, I can see that they've run here. They've all succeeded. It's gone through and it's gone through in the yes condition and in theory, created the file. I messed up here. Actually you can see here maybe in the preview there actually wasn't a file there. [LAUGH] And if I go there, I've got success. Let's click on that. At least you can see the error one getting created. So this is the information that's returned by that API. All right. So let's just check the [INAUDIBLE]. And this was interesting for me. I went through and I couldn't get the node to fire. And I looked at the documentation and so on and got a refresher. And I need to sort of expand something that doesn't look like it's supported in the UI at the moment. So I thought that'd be a good example where I can show you, we've got the Designer view here but there's also the Code view. So the thing I can do is go in. And so here we can see what's effectively the code behind this. And pretty much like everything today you've got sort of this declarative code here. And you sort of see as it goes from the bottoms up. So we can start off with our recurrence, and then we've got our HTTP. And then, after the HTTP, if it succeeded, we've got the action to create the fire, whether it's succeeded or not. So all of that information, the UI basically creates this file here. And you can access it directly. So the thing I noticed, what I needed to get this running was, actually here on the run after HTTP succeeded. And what I need is let me just save that, just put it in a failed [INAUDIBLE] for that. So the behavior is, it actually says, well, this thing failed, and it actually doesn't go on. So it's setup by default with that, and that's the UI behavior. So I want it to go on and check the condition even if the HTTP failed. So I can do that, I can go into the designer, look it up in the documentation, put this in, save it. I could still go back to the designer. So we need to run this. But obviously, I need to make it fail. So the easiest way I though to do that, was I went to the web API here and I just put a Z on the end, so that should be invalid. Let's save that and run. So there we go, so we got our HTTP has failed. The condition has run and then my NO, the YES hasn't run and the NO has. Just in terms of the information that's provided in here, I know, okay, this fails or [INAUDIBLE] succeeded. I can go into it. And dig into it and say, it gives me the breakdown of the information. Look, it wasn't found. Here was your input on the GET, we've got the searchJSON with the z, and here was the output that was returned, including the headers and the body. So, you can always sort of drill down and effectively get that debug information. We can see the no has fired, and then if we're here now, we've got an error.txt that its put there. And we can again see what we saw in the UI there, hopefully in terms of the error. So, not found, and there's the sort of the issue that wasn't found on the server. So yeah. So hopefully that gives you at least a favor, sort of a little bit of a contrived example, but to be pinging a website and so on, for the availability. I could have changed this, maybe, to send an email, call a Webhook, that sort of thing. Pick something you want to do, and literally, within a few minutes, I've been able to tie in a couple of systems, HTTP calls, make a OneDrive call, and so on. I think the other thing, actually, on the Logic App as well is then to what I said, I haven't worried about the resources here. Sort of had to lit servers, I don't know where it's run, or what the resource and so on. I don't have to worry about scaling it, and so on. So, one of the other impacts of that or the changes to bear in mind for that is there is a different effectively business model associated with that. So, there's no core hours anymore or paying for the different VM sizes. You literally, here, I think it's pay for number of, the number of times things execute. So, let me just show you as well the way you can do this, if you go in the pricing, you can sort of see for the various services, options we got. And there we go, Logic Apps, we have in mobile, and you can get all the price and details. So you can see, basically, it's priced actions executed per month, and how much you pay for action. And obviously, the more that you do, you do 100M+, then you're paying that tiny amount for the each action. So, then there's some examples there, so, anyway, you can read all that. But for all the services, all the Azure services you hear, you can go into the pricing details. But it's interesting for these higher level capabilities that are serverless, that you do start then having a separate billing model or a business model. You're maybe not as familiar with, compared to say, something like Core Hours or Gigabytes of space used on storage, that sort of thing. All right, I think that was that. 17, should speed this up. So, in terms of app services in general, I think just one key point to highlight is the It's sort of the integration. You can used these high level capabilities, but you can still work effectively with the Azure ecosystem and the other capabilities here. We've got an example coming up with the Met Office. You can still have that integration with a bunch of devices that may be going through Traffic Manager. You can still have, you continue as integration, pushing code in or code, updating code into sort of the up services. You can still have these services leveraging SQL, leveraging Blob storage, and some of that. So, you have source of full integration with the Aure ecosystem. One example that we sort of highlight here, a company, a pretty big organization that's leveraged app services is the Met Office. Just very quickly, they had this sort of goal as UK weather service, but they had the goal to become really the world's largest data platform for weather, for weather data. So, they've used Azure to be able to sort of really on site crowdsource a bunch of observations, as well as something their official monitoring as well, and then expose that to anyone on whatever device. Whether it's web browser, or phone, or whatever there, and really wanted to provide a platform that they could make available to other weather providers around the world. So, it's pretty cool to go through this. I don't want this little pop-up, here we go. Let me just get out of. So you can see it. I won't go into this in detail. We're running it a little tight. But anyway, this, if you go to, it's pretty fun to play with it. Actually, just noticed last time, that since last time, they've got a bunch of observations there. But obviously, they're focused in the UK, so we can start it off in the UK. So, you can drill down here, and really, as I said, there's some formal observations. This is sort of that platform to get observations from some of their existing weather stations, but also crowdsources that allow schools, organizations, individuals to contribute. So, you can click on sample. This is the latest sample. You can click on get the full observation. So, that's there. You can get the, actually, if we pull on the graph, you can get some of the history. This is the defaults of the last days, and see how the temperatures changed. And then one of the things, it sort of comes in when we look at the architecture is it allows people to submit the photos from that location. Oops, sorry, I moved the location. For the location, you'll know where the photos, and you can see the different weather patterns and so on. Very cool service, and it sort of built on the app services. So really, I mean, just built that out, sort of the thing that we saw, really, so this is sort of that architecture, so that the workflow for submitting data. So, an end user can come in with a phone, can submit some measurements, and actually can submit some pictures, as well as weather stations. The pictures was interesting, cuz they want to, obviously, people could upload everything. And then publishing the pictures, so they want to check the pictures as best as they can before they publish them. And that's a great example of where cognitive services is being used, so we have this set of services called cognitive services. And it can do things like look at integers, do optimal character recognition, facial recognition, face detection and so on there. So, they literally use app services to make a call out to the cognitive services to effectively validate these pictures. And are they suitable or not? And use SQL and then put the pictures in Blob storage, I think, there. So, you can see the vast range of capabilities there. And still using the API apps, but still also using things like Table Storage, Azure SQL, Elastic Search, and so on. And then, under the user query, they've done a lot of work to cater for a massive scale on those, on the user query, whether from the web, whether from mobile apps. So, going through web apps, and that's scaling out, using API management. There's a cache and glare there with Redis and so on. And then the actual data persisted there on a combination of SQL and Table Storage, and then using Elastic Search. So, pretty sophisticated architecture, but all sorta using these higher level platform services. And this just sorta talks a little bit about the scale that they're been able to achieve. So again, some of the value around the scale, sorta the faster time to market, the support, and really sorta the continuous integration, as well on the development side. So, let's. So, let's move onto functions, and we sorta have 10 minutes left here to look at functions. So, this again, another fairly new capability, I think it was just towards the end of last year with GA in November. And this is sort of really our offering for serviceless compute. And actually, we'll sort of see this, in fact, the artifacts of this. But anyone that was familiar with the websites, or the web apps, and maybe use web jobs, sort of functions and sort of built in some of that underlying technology. So, sort of a typical example here would be a mobile backend, so you get a photo taken WebHook gets called. And then basically, that photo gets put into blob storage. And then it'd will be pretty common for a number of these applications that you want to produce variations of that image for various thumbnails, or various different size pictures that appear in different parts of the website. So, that's sort of a perfect example for, and I'll show it in a second of functions. So, the main characteristics there, talked about Serverless quite a bit, and the event driven nature, an image just has to appear, or a Blob just have to appear in storage. And that's detected, and then effectively, your function can get called via a particular event. You got your choice on languages, as we seen in a number of offerings. And then you've got the ability to use various services, both the sort of the built in Azure services. It was like OneDrive, as well as third-party services like Box and Dropbox. All right, so let's have a look at here, functions. Three examples. So we'll start off in the portal again. So functions it's actually in part of app services So let me just go back out here. So that App Services there on the left-hand side, click into that. So I've basically got my, effectively function app created. You can add other services here, and this is my function app. So, when I select that, basically what that's going to do is-. So, for functions I can have one or more functions. It's gonna query the functions I've got, should list them out on the left hand side there, and then I can also create any number of new functions. Just takes a few seconds just to load those up. So on the left-hand side I've got three functions we just briefly gonna go through here and I've got the ability to sort of create a new function as well. This, i see Help here, we see a lot of this actually, sort of a cross a number of services where we're sort of trying to make it as easy as possible just to get your way into and start playing within learning the service. So, this is pretty similar to the try experience, hey just get started, what do you think you're gonna do in, pick your language and create the function. So, we're gonna start off with, I'll just go through these three, I sort of pre created and sort of go up in and as different characteristics and different complexity. So this http trigger here is also like the hello world of functions. And so we can see it's written in JavaScript. Some of the later ones, I think these two are written in C shop. And we've got the function body here. So this is gonna get involved. Here's the function URL. Whenever that gets involved it can get triggered. Whenever it gets triggered, it's gonna look at the request and it's gonna look for query parameter or something in the body for the name, the name parameter, and it's going to either respond if that exists it's gonna say, hello, or it's gonna say. Please parse a name to this. So obviously this is SSA. Just really, it's almost like the Hello World of a JavaScript function. So then you can even author it here, add it to here, the authoring environment. And then once you've written that, or I've just got that here, I can actually test it here as well. Because it's JavaScript. So I can pull in the test section here click, just to click on the test in the top right. And it defaults to post. I've got my code and my code here that I need to access that. And then I've got the body and here, I was playing around with this. So I got a name but I've misspelled it. So, and the value of Azure. So I can run that, I should be able to run that. You can see the logs at the bottom. And we can see that they're, I can, if I zoom in, you can see the function started there. JavaScript was processed, and then it sort of completed a fraction of a second later. And then at the bottom you see that that is executed and it's gone through that code path. So if I, just correct that, I don't think I need to do anything else, I probably shouldn't have an. Always note yourself, always close down Skype. I've corrected that request and I can just quickly run that again. And you can see at the bottom there, that succeeded, 200 OK, Hello Azure. So very simple, sort of hello world example but hopefully gives you the you can just run this. And again I haven't worried about how to write VMs and where it runs and so on. One example, I wouldn't run this, just an example that's similar to the weather example. First of all, this sort of shows you some C sharp and what that looks like. It shows you bringing in external libraries like Newtonsoft JSON, this is using table storage And so on here. And then when the task runs this is an example of calling an external service. This is a cognitive services and it's calling a Vision API. And if we go through and what that looks like. I hadn't set this up. But, you know, you can go and call it and pass it an image and it will go and detect the faces on that image and give you rectangles for where the faces are. So you know literally with a simple few lines of code and a web call you can actually do that on an image and then this will produce, effectively the output image with the faces, rectangular images around the faces. So again, very cool and you can see as you know there is not too much code here and this can be run. The last thing that I'll show you is the resizers, this is the familiar example. So we gonna do resize, so get an input image and gonna to produce a small output and medium size output. And we gonna integrate it with blob storage, so an image will appear on blob storage, normally a full size image and we'll create effectively two different size versions of it. It's going to build a small and a medium and the small would have this resolution and so 640 by 400 and then 800 by 600 image. So this allows me to so that it go through. So I've got my code there that's gonna run, so I need to set up the integration. So the key things here on the trigger, I can click on the trigger and then in the bottom left here, so this is triggering. It's gonna look for new blobs, it's going to assign them to the image parameter. And it's looking at this particular storage accounts, this as your functions bla, bla, bla, bla storage account. And then it's gonna produce outputs here for the small and the medium and it's gonna use this storage accounts but it's gonna use different folders, folders within all containers within that storage account. So then, I go through to the Manage. This is disabled, so the next thing I should do to show you this is to enable it. But if I don't want it monitoring that storage account or it's not active for whatever reason, I can disable it. This is where you actually delete it if you no longer want it, but I've enabled it and then what I can do is going to monitor in UIN and see the results. We'll see what's happening. So while that loads up, let's keep that over there. Okay, so you can see run of this couple of hours ago. So, im bringing up a, it's just a Storage Explorer, it's pretty small font, I apologize for that. So, we can see a Storage Explorer, this has got my storage account and then my image container is within that and the integration I showed you was looking in sample images. I got pictures of my dogs here I've got my sample images and I'm gonna drag a couple of other images into this. So I found a couple of images for Chicago. If we, you can let's see, is that. So you can see it's a fairly large 1600 by 1200, 2000 by, yeah, 1300 there. So, I can just drag and drop them into the Storage Explorer, and they're copied in Storage Explorer as blobs. So, now after everything's gone okay, every few seconds it's gonna look there, since the functions were gonna look there,look, okay. There's some new files that have appeared in Sample Images, and run the thumbnails, produce the thumbnails. I'm gonna refresh here. This sort of tends to take about maybe 30 seconds or so to refresh. We might see this. This will refresh soon. The best thing I've found is if we go into Sample Images, I didn't actually show you beforehand. We can see Chicago 1, Chicago 2. Let's see in small. Chicago 1, Chicago 2. So they've appeared there. And let me click on them. I didn't actually show you them blank. You'll have to trust me on that one. So, that's the, there we go. I knew there was some, there. So, we can see this is the 533 by 400. So, these are sort of the different sizes. If I refresh, there's something that should have shown up here. So, there we go. So, a minute ago, it shows that it found two images, and processed them. So hopefully, that's sort of like a whirlwind tour of it. Hopefully, you sort of get a little flavor for what some of these app services and functions is providing and some of the sort of benefits they have. Again the billing model for this is I think on events and on the time. Again, it's relative on the time taken by the functions as well. So, you pay a bit more obviously for the longer the function runs. All right. So, I'm basically out of time. I went probably a little low on my demos there. I covered this yesterday I don't know if anyone was there, on Service Fabric. So just very quickly, Service Fabric is an offering that we have to really allow both the. Make it easier to develop microservices based applications, as well as deploy them and monitor them and upgrade them and so on. So it caters to both the developer writing the application, providing frameworks to make it easier to write these microservices. And then provides the platform and the IT platform and the way to manage and monitor that and deploy microservices onto clusters. So sort of really take that sort of additional multi-tiered approach and really cater for, break it up into individual services and then be able to deploy it on a cluster of nodes. It could be a varying size of cluster, you might want to scale it up. You can add in more nodes. You could have more instances of particular microservices, say for web frontends, for example. And allow those to be just deployed to just a generic cluster of nodes. And allow you to deploy that and manage that. And then, also, one of the key things is sort of cater for, in the cloud, you're dealing with maybe a VM will get rebooted now and again. Or you've got upgrades to do, so we have to cater for monitoring the health of that cluster. It'll cater, okay, this node has an issue, it's gone down. I'm gonna relocate these particular instances of service on another node. Handle that for you. For upgrades, it'll be able to do that in stages for you. So you can still maintain availability while upgrading. Either individual microservices that make up your application, or all of them that make up the application. So you can sort of really break it up. You go from more of a compile-time contract multi-level approach to a runtime contract with these microservices communicating each other, effectively network operations. And then just one of the key things, I'm pretty much finished here. One of the key things is all around the storage and persisting the data. So, for example, with Lync and a bunch of the Microsoft large scale cloud services that are built using Service Fabric. And one of the key technologies that it provides is a storage technology that really allows data to be persisted using, actually, a dictionary pattern, persisted actually on individual nodes, but it's robust. So, actually, data will be persisted, and it will be replicated on at least three nodes in the cluster. But it's on each of those three nodes. So you've got that data, it's local, it's very, very fast. It's very quick to do updates. But, again, if there was some sort of issue or some sort of upgrade and a node goes away, the data's also elsewhere. So you sort of get the benefits of caching. But you've also got the ability to rapidly update the data. So very, very good at sending parts of the data for an application. Sort of very hot frequently updated data, read and write very frequently. So there's a number of benefits in terms of scaling independently. You could develop these microservices with different technology stacks. Deploy them separately. Even sort of separate them out to different microservices, so you can have different versions of dependencies. Let me just build that. So as I said, provides capabilities to build the apps as well as deploy and manage them. And I think the sort of the key thing here, key value here is the ability that, yesterday in a session, I did the demo where I had a cluster and it was on my dev box. But you can just as easily create a set of nodes. Five nodes, there could be a thousand nodes. If it had to be VMs in Azure, well, containers in Azure for that matter, all running in on-premises data centers, or even over clouds, you can deploy it. And it can develop, you choose Windows or Linux. It's a very powerful set of capabilities for development and all that sort of management's tasks. And these are sort of just an examples of, you can bring an executable and you get a lot of the value propositions certainly around the management and deploying on the nodes and monitoring the cluster health. And then reliable actors, reliable services, is sort of the developer framework if you're writing your new apps or supporting your existing apps to really take full advantage of the platform. So I hope you guys get these PowerPoints, there's a bunch of links here. Yeah, it's basically a bunch of links. And I think that's about it. So, hopefully, this has really sort of given you an overview. Sort of a taste of these high level capabilities we're making available to really improve your productivity to develop and upgrade and constantly innovate on these cloud applications. As well as make them easier to manage and monitor and so on. So, thanks very much for the time, enjoy the rest of your conference. 