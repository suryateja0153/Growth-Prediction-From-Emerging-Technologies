 Hello everybody and welcome to this session my name is Andrew Zeller and I have with me Ricardo Mendes and we're here to talk to you today about doing Unified Development and DevOps across Azure and Azure Stack. So the thing we wanna start talking to you first is that hybrid is a requirement for all cloud activity. And the thing that makes hybrid possible from Microsoft's point of view, is that things need to be consistent no matter where you want to do your work. So that way with consistency, you have the ability to transfer your applications and your investments and your skill sets from one cloud to another. And so consistency as far as the various elements of IT goes, we kind of break it down into four big buckets, right? So there's the ability to develop and operate your applications inside a cloud. There's the identity or I'm sorry the management and security elements that are required to manage the resources and applications that you have deployed. The identity that you use to connect to those applications and to access those resources. And then having a consistent data plane. So that where you wanna store and access your information works the same way in both clouds. So the piece that we're here to focus on today is that sort of that first pillar, where we're gonna be talking about how there's that unified development and DevOps experience for building and operating applications in a cloud. So in Azure there's a multiplicity of services that you can use in order to create and build your applications and you can connect to Azure using a wide variety of tool sets in order to do that. And then you have a choice of what kinds of resources you wanna work with. Windows virtual machines, Linux virtual machines or higher function pass services. And then inside or On-premises you have that same optionality where you can work with Windows machines, Linux machines or pass services. And so Ricardo is here to sort of walk us through what it looks like to have that Unified Development and DevOp experience across clouds.  It's important to look at unified application development. There are several components that we viewed a cloud application. And those components range from different tools and languages, different application patterns, different ways to automate those applications. And with Azure and Azure Stack what we can do is we operate in a way that the description, the way that we describe applications are the same that we do in Azure with infrastructure as code. And then deployment of applications follow the same CICG operations that you would do in Azure. And for control and management the same thing. So what Azure and Azure Stack, we allow you, is to develop design your application in one way. And then choose the place where you want to deploy base on your business requirements and other factors. And this really goes through the idea that cloud is not a place and it's a model and the place you choose depending on other factors.  So it might help a lot to actually jump in and look at it. I know you have some demo that we can take a look at.  So what I have on this screen right now is the Azure Stack Portal. Is exactly the same look and feel of the Azure portal, right? So let's switch to Visual Studio at this time. One very important thing to note is on the left side of the screen, you see that I have a couple of subscriptions. One subscription. It is the Azure stack subscription. And I have the resources that are tied to that particular subscription. With the same experience without leaving Visual Studio. I can just go and explore my other subscription that leaves in Azure with all the resources. Now, this one part of the consistency. The other part, is in terms of deploying this application, I have a template we are looking at so let's see how I can go ahead and deploy this application, this case the website to both Azure and Azure Stack. It's pretty simple. And I'm going to create a new deployment. Which go ahead and new deployment. I'm going to choose a different credential and that credential has a subscription in Azure Stack. But notice how the flow to create this deployment is exactly the same one we saw in Azure. I'm going to choose a location and also notice how the location combo box now is populated with the locations that are available in the Azure Stack. So the tooling is aware of the different clouds and you adapt as needed. And you provide the choices that are applicable for that cloud. Go ahead and choose the resource group location. And then I would just choose Deploy. Finally, before I do deploy, same experience on sending my deployment variables. And let's hit Deploy. Again, the same flow of Visual Studio, you connect to Azure Stack. And we initiate the creation of our resource group. After the resource groups created then we source this place.  So you mentioned that there were lots of different reasons. That somebody would wanna deploy an application in various parameters. Do you wanna switch back to the slide deck and just walk people through what some of those use cases look like for when and why you would wanna make those decisions?  Let's do that [INAUDIBLE]. So over the past four or five months, I actually met with around 120 customers to discuss how they would use Azure Stack. And from that work we came with several hybrid use cases. Use cases where customers will very likely be using Azure Stack. And those we can break down three main scenarios. Now, one is disconnected applications. Talked with many, many customers that want to design, develop and operate in the same way as they do in the public cloud but on an environment that it may be a oil rig in the middle of the sea. Or maybe a mine ship complete disconnected environment, right. So that's one very typical use case that we hear from our customers. The other one is regulations. There are different regulations around the world that mandate that some business keep some type of data On-prem. And then, even on that scenario, you can maintain the same process you use to develop and deploy on the public cloud. But On-premise keeping your data On-premise. And another use case is existing applications. The reality is customers have many, many, many existing resources on their own data center, that they want to leverage when they create a modern apps. So with Azure Stack, you are able to create a modern app, as you would create Azure and now so to integrate that with existing insight on the data center. Great, so if we look closely at the disconnected scenarios, one example of that is that we might have a fleet of ships in the sea with limited or no connectivity. And then when connectivity is established, we want to upload data to Azure and do aggregated views on top of Azure. So in this scenario, you have disconnected or temporarily connected Azure Stack instances aggregating data to Azure.  So I have sort of streams of data coming from each one of those point solutions that are sort of rolling into rivers inside of each Azure Stack. That then kinda get sent up into an ocean of data that's happening in the public cloud. Sort of a everything, then everything aggregates up top. That's absolutely correct [INAUDIBLE] great. So when we talk about regulations and you can have a multiple Azure Stacks deployment in different localities using the same math pattern you can deploy to this different Azure Stack instances. Again your same application and then based on your business requirements or regulations you can target those requirements in different In places. And finally, modernizing applications and there are several times where customers have existing data, maybe residing on data bases or main frames. And you want to get this data, maybe on legacy system. And more than legacy systems and modernize that with Azure capabilities like app services, API apps and things like that.  So if I had a traditional three tiered app, I could sorta take that one tier that was running my web presence and start working that into PAS based model that uses web apps like you showed in the earlier demo. And sort of incrementally grow and modernize parts of my application.  Yes, you are totally correct, you could do that and another example. Let's say you have an existing legacy system that you want to modernize. You could be using app service, app services is one of the resource providers in Azure Stack. To create a modern API backend for your application and that API connects to the existing systems. The advantage of that is. On top of that API backend, you can create your modern apps. And this one way we are hearing from customers how to accomplish modernization.  And so one of the things we're also seeing when we talk to customers is they have investments in lots and lots of different assets that are throughout their entire portfolio. And so, there's a huge amount on tooling that you just wanna do the work to make sure that you're applying the right technology to the problem you're trying to solve. And so with Tyco, one of the things that they did, is they started working through their existing portfolio of applications. And started to modernize those applications by using containers in Windows Server 2016. So that they could much more easily deploy and operate those as they move them up into Azure. And so there's lots and lots of different combinations of things you can do to modernize your applications and get them to the state that you want to get them to be in. So, as you do that modernizing, one of the things that's coming up a lot is starting to modernize not just your technologies but the way that you approach and engage your development practices. And so, DevOps is something that shown up as a great vehicle for doing that work and so you put together a demo on DevOps, would be a great thing to go through.  Yes [INAUDIBLE]. So let's look at how we can create a DevOps pipeline with Azure and Azure Stack, and what that means. All right. So what I have here is The my dashboard of my CI pipeline based on Visual Studio. And what I'd like to walk you through [INAUDIBLE] is how I can establish this pipeline. And then if I make a change to my application code, that change can be pushed to the source control. And from source control, can generate a viewed, that viewed can be validated. And if validation pass, the viewed is pushed to a different environment. So here's what I have, this is the dashboard. And this is a very important capability of Visual Studio where from this dashboard I can have a integrated view of my entire pipeline. And also, I have a website and notice how, and actually I have two windows here and they look the same and actually they are the same, they look the same because this is the same app deployed on different places. So the idea is that as I make changes to my code my pipeline when you deploy that application to Azure Stack, run some tests. If the tests are successful my pipeline will then push the same application to public Azure and run the same tests and then my application is ready to be consumed. So we are showing a couple things here. How we can create in integrated pipeline between Azure and Azure Stack. And in this particular case, I have an environment that does the admin task in Azure Stack and production in Azure, okay. So let's explore this a little bit and if we look at our builds, Let's look at our builds and releases. So what you are looking at right now is all the releases that happened in the past days. And every time that I make a change to my source control, a new release will be created, and that cycle that I just described will happen. And what I would do is I have Visual Studio code, and ahead of time I had cloned my Git repository that has my website source code. And if you notice, This is a shopping cart app. But there is no option that we can see right now to actually have a cart. So let's make a change to this app and add a shopping cart capability and see what happens. So this is my shopping cart code that as you can see I uncommon the shopping cart capability. And I'm going to go ahead and save this file. And as I save the file notice on the left side of the screen. I have the option now to commit those changes. And I [INAUDIBLE] common here, edging. Shopping cart. And now, I will push this commit. So as I push the commit what's going to happen is if we go back to our release definitions. You can see how the last release happened at 19 hours ago. But if we go back to the dashboard Notice how the color of the dashboard has changed, because I have a release going on right now. And if I click on this release, notice and [INAUDIBLE] how the release is going on and I have a compilation going on. And after the compilation, the new app is pushed to Azure Stack. Here's my shopping cart. But now in Azure, you see how I'm refreshing the page and I still have the website without the shopping cart, it's because the website is being refreshed in Azure. So we can keep an eye on the process and let's refresh the screen here, make sure that the release target both clouds. And we see how the release for age shows green through Azure Stack Cloud, it also shows green through Azure Clouds. So at this point if I go back to my website in public Azure, and I refresh this here's my shopping cart.  Awesome, thanks Ricardo. You wanna switch us back to the slide there.  Yeah.  All right, so thank you everybody for joining us to talk about doing Unified Development and DevOps across clouds. Thank you Ricardo for coming and showing us what that looks like and hope to talk to you again soon, thanks. 