 [Music] [Applause] [Music] welcome back to web dev live as a Brit and tickled to be kicking off day 2 from an Amir friendly time zone yesterday we spoke about government's doing great work getting the word out on the web and one of the most inspirational digital services is from the UK where I saw a government convened online for the first time now we've all been learning how best to work and learn from home and at Google we're trying to get a deeper understanding of the needs of web developers partnering with the community as one of our close partners I wanted to invite our friends at Mozilla to chat more about that work and also get information on what's new in their world welcome khadiyah and Victoria hi Deon great to be here hey so Kadir web developers know mdn really well and many may have participated in the last DNA report but can you get us up to speed a little bit and tell us about its history and what we're trying to do yeah of course so this really started in late 2017 shortly after CSS great was shipped and CSS great was a massive success but was also years in the making and layout had been an issue for web developers at least since the 90s when we abused tables implement our UI designs so we asked ourselves how can we have more of these wins and we talked to people who worked at the web platform at Mozilla about how they prioritize things and one thing really stood out because almost everyone said the same thing they said we need to hear more from developers and it makes so much sense because none of us can be successful without that part it's hard to prioritize the right thing without knowing about developer pain points and it's hard to find the right solution especially if it and it's hard to get people to use something if it's not solving that problem or not solving it in the right way so for all of those reasons we proposed developer needs assessment and the DNA in short is meant to be a single and simple tool for harsh prioritization representing very diverse populations and a huge future space and it's publisher I'm Deanna that's important because it's not owned by a single browser vendor you know she initially proposed this under the umbrella of the MDM product Advisory Board where we have representation from browser vendors like Google and Microsoft and Samsung but also the w3c and industry stakeholders and as a community we need to have at least a common understanding of the facts when it comes to needs even if you draw different conclusions from them and for this situation in 2019 more than 28,000 developers and designers took the 20 minutes necessary to fully complete the survey and that's from a hundred and seventy three countries total and that's about ten thousand hours of time contributed by developers and designers to help us understand what their pain points and needs are and we believe that makes the amnion web DNA the biggest web developer a design and focus survey ever conducted so far yeah well when you put it that way I just really want to say thank you to to the community and anyone that took the time to go through those you know twenty minutes and getting us the feedback it's it's incredibly useful to us but but thank you so much so when you were going through the results I could hear the 2019 report what kind of really kind of stood out to you you know one thing really and that's web compatibility and interoperability the four of the top five issues were focused on exactly that topic and one of the biggest strengths of the web is that there is no single entity controlling the platform but that doesn't come for free web developers and designers are frustrated by not being able to use features by having to find workarounds fiddling with browser differences and also by the difficulty to verify that something that works in one browser will not break in another browser and related to that it was a bit of a surprise that the top five issues were extremely stable between very different markets so whether it's China India Japan the US or France the top issues for web developers revolve around web compatibility and interoperability got it so when you take this feedback in how does it actually kind of change the roadmap at Mozilla like what are you now looking to focus on based on this feedback yeah so web config web compatibility was already a focus at Mozilla even before this but we now have doubled down on it so recently we made browser compatibility data machine readable on MDM and that's now starting to pay off so if you use yes code very popular code editor the tooltips have compact data information when you write CSS and we also recently started a collaboration with can I use com to share the data that we have so we are all looking at the same browser combat information and I'm sure Victoria can say more about it in a moment but the Firefox dev tool say now come with compact data information built in got it yeah this the feedback has been really helpful for us and the web platform team is really you know working even deeper on stability compared shoes that you talked about helping with testing layout really kind of understanding what what the developer needs are and kind of bringing it into our prioritization too so it's actually almost time for the next version of the DNA report so what do we have in store for developers this time around yeah so one thing we're super excited about this year is to see how things have changed year-over-year so we want to see that developer satisfaction go up or down and how if the top pain points changed so this is really the first opportunity to see those trends okay well I can't wait to get that out to developers and I hope that everyone's watching would do us a favor and take some time to to get that feedback in so we can like really know what we can prioritize in the future for our roadmaps now Victoria I actually used to work on the on developer tools at Mozilla and not only was it the birth of a you know great tooling in the browser back from Joe Hewitt's you know Firebug on words but it really continues to push the bar so I'd love for you to be able to kind of catch us up on what's the latest what's new in in Firefox dev tools hi Dan as Kadir explained we know that differing browser support for CSS features is a top issue for web devs so our team built the compatibility panel to make it easier to stay on top of this it lists all CSS on your website that's unsupported in certain browsers as well as deprecated Styles you try it now in Firefox dev edition I really love the the UX touches there especially the turtle and the like that's that's great and in general you know a lot of great features Lydia that I landed there and I'm curious if there's anything on the upcoming roadmap that you're excited about sharing we've also been working on the Firefox profiler it's our performance tool which features shareable links for collaboration we've been integrating the recorded UI into Firefox so it's easy to get started this tool is also currently in dev edition as far as our debugger I want to highlight two unique features in 77 we added a type of break point that's new to browser tools the watch point it lets you pause when an object property is accessed or changed also we made source Maps variables work when you pause in an original file we now reverse engineer the scope chain so that variables look correct in the scopes pane and work in the console this was six months of incredibly challenging work done by our teammate Logan who had deep knowledge for being tech lead on Babel the year before we dropped that he's the only person in the world who could have written this so recently I really embraced the open design process for a network panel redesign we set and we sent out a survey and posted early mock-ups to Twitter and got amazing input I originally used bold to indicate large files and someone suggested it be more clear to have mouse and elephant icons for small and big that's how we ended up with the turtle for slow responses people also told us that when it comes to the domain column they mainly want to know if it's third-party or not so in this condensed view with a sidebar we hid the domain column and added an icon that indicates third-party requests originally I made these brightly-colored file type icons and some people love them and others said it was too much they look like candy so I ated toned down the colors and got to the result you see here most of this has landed in the latest nightly we hope everyone will try it out and give us more feedback awesome great so Victoria Kadir thank you so much for taking the time to join us today we really appreciate the great work the Mozilla continues to do for the web now you spend a lot of time both in your developer tools and also on the core task of building your app UI so to chat more about modern web UI let's welcome you now idea hi Yuna now we were just talking about the develop and need survey with Mozilla and there was plenty of feedback from developers on layout so I was just curious you know there any recent additions to the platform that you think target these needs oh yes you definitely been listening and CSS has been evolving so rapidly in the past few years and really months so tomorrow I'll be going over a ton of cool aspects of modern layout with CSS grid and flexbox including how to harness the power of CSS functions like clamp fractional units Auto placement the min max function justification place items the VP function and a lot more to create robust layouts breaking down how powerful a single line of CSS can be there are awesome sub CSS properties coming down the pipeline that will help with a lot of user needs that haven't yet been met an aspect ratio was one of them this just landed in Chrome Canary and it enables users set to find width to height ratios for media items like images and video previously the way to do this was a hack using padding and calculating a percentage but now you can set your ratios in a much more readable way I'm looking forward to the Flanagan browsers and making a lot of developers lives easier because I know this is something that I run into a lot we're also getting the gap property in Flex box this one is exciting because of how many times we've just been styling a series of items and wanting them to be spaced between those items but not around those items gap enables the parent element to control spacing and not the children they can get easier to style these items uniformly within that parent currently you can use gap to create tracks with CSS grid but you'll be able to use with a flexbox layout too meaning you can leverage all the benefits of gap with a greater choice and layout in ISM the web animations API is also getting a lot more robust in chromium 84 now we have promises replaceable animations composite mode partial keyframes and a way to access animations from CSS and JavaScript check out the blog post on web data for more information about these updates and try them out in Chrome Canary yourself the act property rule is also available behind a flag and canary and something that I am particularly excited about because this allows for semantic variables in CSS with a property you can declare a CSS custom properties that have semantics typed values and fallbacks this is a part of the CSS Houdini effort specifically the properties and values API and previously was possible in JavaScript with CSS to register property as a part of Houdini but the app property declaration brings us into our CSS files meaning a nice colocation of super-powered styles with the rest of your CSS the other Houdini API is to keep an eye out for our the type object model the paint rechlicz animation worklet and the layout work with great so javascript seems to kind of have its time with the addition of async away yes modules and the like and it was great to see that evolution it's really feeling like this is a big time for for CSS I love being able to get features that like gap that you may know you mentioned and they like to just make things a lot easier for us and super excited at how deep you can get into on the on the Houdini side too but if I use these and I'm building these super rich designs and the like with this great power comes great responsibility so how do you think about the role of accessibility here I love that you bring up accessibility because accessibility should always come first I think you're absolutely right that that needs to be top of mind your users need to be able to access your content and navigate your product it is not an enhancement I think of accessibility as a core feature and from 83 actually just launched with some new accessibility testing features which are pretty neat because they allow for visual accessibility testing so now their dev tools you can examine if your UI works for users with the various vision deficiency is like blurred vision and for different types of colorblindness yeah it's great we're actually gonna have pool Luis come on and kind of walk through the a little bit and so thanks so much I also have really been enjoying your new CSS podcast with Adam Argyle not only are you both kind of like really fun to listen to him the like it's actually been really interesting to what you kind of go through step by step and kind of teach us the fundamentals there was a lot that I didn't really know about yeah honestly we're learning so much as we are going through the fundamentals and are having a lot of fun making these episodes so if you haven't seen it yet check out the podcast absolutely so thanks so much for joining us Yuna and we'll see you later on the stream bye now there are a few more dev tools features I'm really keen to show you and no one's better to show off a bit all-in than the ever supercharged Paul Lewis hey Dad how you doing not too bad how you doing mate yeah pretty good thanks alright so one of the things that we've noticed is that dev tools puts out these console warnings as you can see on the screen and if you're anything like me after a while you start to ignore them and the reason is that there just could be quite a lot of them so we've been thinking about that and what we decided to do is to bring in the issues tap now if we detect issues on your page you'll see this bar across the top with a button in the top right hand corner there that says go-to issues if you click on that it'll take you through to the issues tab now you might offer you the opportunity to reload the page to get more information if you click on one of these items it'll expand and you can see more information there as well as potentially some links to content for you to read up on what you could do to fix the issue so that's the issues tap the other thing we've been looking at is Web vitals so if you go to web dev slash metrics you'll see a whole list of metrics here that affect the UX and things that we would like to optimize as web developers and we've been looking at ways of exposing this information to you inside of the dev tools UI so things like first content full paint or largest content for paint for example so if you go to the performance tab in dev tools and you take a recording in the performance tab you'll see something that looks like this now there is a timings tab there or timings row sorry I should say across which you'll see these blocks and these relate to some of those metrics so you can see FCP and CP first contact 4p largest content for paper and so on so you can start to get information there on some of your metrics the other thing we started doing is to add candy striping to your long-running tasks and you can see that here I have one task on my main thread that is 17 milliseconds long and what we're looking for is we're looking for tasks to remain under 50 milliseconds this means that the main thread stays responsive and hopefully we can respond to user interactions quickly so as you look around your performance recording if you see this can't distracting effect in the red triangle in the corner you know that you've got a task that's running longer than 50 milliseconds what we've also added as well is we've added a total blocking time footer at the bottom what this tells you is if you like the amount of candy striping that you would see across the whole recording so as you're looking around if you see that that numbers going up you might want to take a look and see if you have a lot of long running tasks on your main thread bringing that down should hopefully help your user experience another thing that we've added is this experience track and what's contained within this is layout shift information so for example when you've got buttons and so on on your page and they're perhaps moving around this can cause you ex discomfort so what we want to do is we want to minimize the amount of moving elements on the page and so the layout shift here is going to tell you what elements are moving on the page and where and so on and the size that they were when they did it so if I look at this I have a warning here which tells me that qtip layout shifts can result in poor user experiences and that's a link to more information as well as information on where it's moved from and - and if I roll over that I get an overlay on my screen which shows me exactly where on my page the shift took place you can also get live information about layout shifts by going to the rendering tab and choosing layout shift regions here in the options now I should say that for people prone to photosensitive epilepsy this might be a less suitable option because it can cause flashing or overlays on the screen but it is there as an option if it's suitable for you the next thing I want to talk about is web assembly debugging it's an experiment so if you go into your dev tools settings go to the experiments tab and click on web assembly debugging you can switch it on there well this allows you to is allows you to do things like setting breakpoints in your web assembly code so here I've compiled a C program it's just a hello world program but what I've done is I've added a breakpoint on the line that says hello world so when this code executes and it hits that line inside of the web assembly it pauses execution just like it would inside the JavaScript and you can see here in the call stack that I can actually take a look at what's going on in that particular frame and I can go between my JavaScript and the C and so on and so forth so that's something that's coming down and it's currently in canary so take a look at that now the last thing I want to show you is color vision deficiency emulation inside of dev tools and there's no better way to do that than to actually give you a demo okay so here I am in Chrome Canary and I have a video here running of me and Surma doing supercharged yesteryear but you see I have the rendering tab open in dev tools and I can emulate various vision deficiencies such as blurred vision or I can do protanopia I can do do too and Opia protanopia let's try try to Nokia a chroma top to you as well and you can see the live effect that it has on the page so these are physiologically accurate emulations of various vision deficiencies now a vision deficiency isn't an on/off thing let me see here but rather it's a spectrum so a person could have a milder form of a vision deficiency or a more acute form what we've chosen to implement inside of the dev tools UI is the most acute form the theory being that as you're optimizing your app for accessibility in terms of the color and contrast if you make it work for the most acute form then you'll include everything up to and including that as well so that's color vision deficiency emulation inside of dev tools thanks Paul I'm really looking forward to seeing more later today now one thing I've noticed as we work from home is how seriously people are taking their home setups whether it be playing with mics and cameras or virtual backgrounds and recently I saw a demo that would make you invisible on your video feed using tensorflow j/s so I've really wanted to learn more so please welcome Jason maze from the tensorflow Jas team hi there I'm Jason and thank you puppy introduction there it's pleasure to be invited to the show and yes I have created an invisibility cloak so maybe we'll learn more about that yeah Jason invisibility cloaks are pretty cool and so maybe you can show us how web developers can create superpowers like that with tensorflow sure definitely so if I switch to my slides for just a second you can see what the invisibility cloak was that Zeon was referring to and in this demonstration on the right hand side you can see as I get on the bed the bed is deforming in real-time and I'm being removed from the bottom frame at the same time and this is running all in the web browser now this is pretty cool because privacy is preserved as none of these images are being sent to the server side and that's super powerful especially in today's climate where privacy is top of mind now this was created in just under a day in fact so it's quite easy to get started with machine running in the web browser and we'll see some more demos in just a second so on that note I also created a Chrome extension that allows me to use the same stuff we saw before as X using body picks to create that which gives me this image segmentation of my body in real time and I can now join a Google meet meeting as you can see shown on the slide right now and this can be combined with my previous demo so I can remove that second person who comes into frame halfway through V gif and then it can it would appear as if it never actually happened cool so can you give us a few more details on how this all works so essentially all this is using body segmentation and this is running intensive OGS in the web browser and this can distinguish 24 unique body areas across multiple bodies in real time you can see on the right-hand side that this works pretty well when it all those settings are bumped up to high and you can even get the pose estimation showing on the bodies to which estimate where the skeleton is these can be used in delightful ways Shutts as clothing size estimation which you can see here this is not a prototype I created and I don't know about you Theon but I am terrible and knowing what size clothing to buy in by once a year clothing purchase so absolutely yeah totally and here you can see I just enter my height and in less than 15 seconds I think an estimate of my inner leg my chest and waist measurements which for clothing site can then use to estimate what size I am a small medium or large now this can even give you superpowers ACC on this next slide and one of our community members from the USA has combined this with WebGL shaders to turn himself into Iron Man of sorts and he can shoot lasers from its eyes and mouth using our face mesh model so this is pretty cool and it runs buttery smooth at 60 frames per second in the web browser and you can even go further of course there's many web technologies out there but you might want to combine with machine learning such as word XR WebGL and use verge of 10 servo GS and if you do that you can get an example like this from another one of our community members in Paris France who can essentially scan a magazine and if there's a person in it they can bring that person into the living room full size you can walk up to them and inspect them in more detail pretty cool technology but of course after seeing this I've got to go one step further and if I add web RTC I can bend teleport myself anywhere in the world in real time and this is using a complete rewrite using WebRTC a frame 3GS and tensorflow GS together to create this demo and it really does make a big difference when I'm seeing someone in my room which I can walk up to and move around it's a massive difference compared to a rectangle that's solid on the screen so this could be the future of video conferencing who knows but it's great to play with technologies that push the boundaries of the web that's really cool from invisibility cloaks to teleportation that's that's pretty cool stuff yeah exactly this changes everything is anything so how should web developers if we kind of zoom out a second and had a web developers kind of generically think about the role of ml and tend to float J s and how it could fit into their web applications yeah that's a great question and obviously right now in fact machine learning in JavaScript is still a pretty new thing right the very early stages but that's super exciting too because there's so much potential to be unraveled at this time as well so on that note I had asked web developers to consider how a machine learning might fit into their existing pipelines maybe you're developing a content management system in that case you could potentially use something like automatic image cropping to detect where a human faces in the image so then you can make sure that it's cropped nicely when you're resizing with your CSS or maybe you want to summarize a blog post article so you have one paragraph of text that shows MD search results that's now possible machine learning too and that can be done automatically so I think only coach people to experiment and and go outside of the regular box of thinking and of course on that note on this side you can see all the different areas JavaScript can run on the browser server-side mobile native desktop native and even Internet of Things and tensor faux pas supports all of these environments too so maybe you want to combine it with hardware if you can recognizing objects maybe you can trigger something to happen in the physical world or something on the server-side but talk to a third-party service and on that note tensorflow jess can essentially run retrain by transfer learning or even right allow you to write your own models from scratch if you so desire now on that note we have a ton of pre frame own rules you can use to get started such as the body segmentation you saw just a little bit ago but also things that pose estimation speech commands base mesh hand pose and some cool natural language processing and just to dive into that a little bit more you can see how these models work here so here's the object recognition in action this class allows you to recognize 90 pre-trained objects that cookies dogs you can see here and you get the bounding boxes that come back at the same time which is pretty neat or what about this face mesh just three megabytes in size and you can understand 468 unique landmarks on her face and this could be cool for making like face masks or some kind of AR experience such as the one you see on the right Madhi face which is part of a loyal group has actually uses for AR makeup try on and this lady on the right hand side it's not actually wearing any makeup at all in fact she's selecting the color of makeup she wants to try on and she can do that all in real time in the web browser in a much more hygienic way which is pretty cool and then finally I just want to talk about some of the client-side superpowers you get if we think about running machine running in the web browser the first one is privacy as we hinted at before essentially because we're running in the web browser none of that data is ever being sent to a server for classification so that allows you to access for sensor data in a way that is great for privacy links of that of course is lower latency as there's no server involved that means there's no hundred milliseconds or so round-trip time from the mobile device to the server you cut out completely by running on the edge and of course lower costs you might spend tens of thousands of dollars hiring beefy GPUs and CPUs to run the machines any models on your server-side environments by running on the client side all of that goes away because you're using the hardware of the client to run instead got it so how can people get started you've definitely piqued my interest now I want to know when I start playing ok sounds good so if there's one slide you want to kind of screenshot from today's talk it would be this one here on this site you can find out our websites our models github code we are open source so feel free to contributes there's a Google group for asking more technical questions and of course some great boilerplates to get started on code pen and Glitch and for those of you want to go really deep we recommend for deep learning with JavaScript book that's very comprehensive and even if you have no background in machine learning as long as you know some JavaScript it will walk you through everything step-by-step so I highly recommend checking that out and on that note I would also suggest checking out teach or machine right after this show maybe in just two minutes you can use this website to learn to recognize any object in your room in just thirty seconds you just take a few images of that thing hit train and you'll get a classifier that can then classify that object if you like it you have an export this model to a JSON format and then use it on any website you like to be more creative makes your own creations using that and then finally I'd ask you to come join the community we've got this made with TFG a hashtag that you can use that allows you to share what you've made so we can find it and we can invite you to our future showing tells and of course and that others to get inspired by your great work too so finally I just want to leave you with one more inspirational example this guy from Tokyo in Japan is actually a dancer but he's used temps of hojae s to make this cool hip-hop video so machine learning really is now for everyone and I'm super excited to see how creatives will start using this and not just for academics musicians artists and much much more so if you do make something do use a made of TF J's hashtag so we can find it and share it for you and I look forward to seeing what you make and with that feel free to stay in touch using the following links if you so desire on Twitter and LinkedIn great thanks so much for joining us Jason yeah and thanks to everyone who joined me on the day to kick off so now let's get to today's sessions where we focus on updates across our tools and the web platform to make developers more productive as well as the latest in the world of PWA s please enjoy the show and remember the team is here to chat with you on web dev slash live and via YouTube I'll see you there today and we'll be back tomorrow morning for the day three kickoff [Music] [Applause] [Music] hey everybody Paulo here just going to show you some features that have been landing inside of dev tools recently and a half as always summer with me and we're just going to talk those through navigate around I've got a few demos and things to show you how you doing Sam I'm good good I thought we could start with I know you've been working on on the performance tab yes in in some ways and that's one something that people enjoy live in why don't we start with that let's deal with that then okay so if you've not seen it if I let's just go there right now web dev slash metrics helps if I can type as always my typing is waffle but nothing has changing has changed web dev slash metrics okay so here you can see we've got a important metrics to measure first content for paint largest content for paint first input delay time to interactive total blocking time and cumulative layout shift now some of these metrics it's worth saying from the off these are all designed to help you improve the user experience in your sites and your apps but not all of them are suitable for what we'd call a lab setting some of them are we call field setting metrics so for example first input delay it's not really something you typically test in a lab so I think something you do more with the field with like rum and sort of live data so not all of these make sense in the lab but the ones that do we've been trying to get into the performance panel inside of dev tools so because once you open death thoughts you are in a lab setting exactly you're not you can never require a real user athma can you please open dev tools and quickly do with a measurement the second you need their tools to measure something you're in a lab yeah and so our assumption is predominately if your local host on your machine we tend to refer to that as the lab setting so let me just run you through very quickly the kinds of things that we've got so if I just if I go to the web dev home page and the performance tab open here in chrome this is Vernon canary so some of these features are very can hot off the press they're subject to change so just bear that in mind if these things look a little bit different over the coming weeks and months it's because we're working on them we just wanted to share them with you because we're kind of excited about some of them and all of them and we want to show them to you so if I take a recording so I'm gonna go to record I'm gonna hit in my case command shift R which will do a reload without any caching just wait for a little while for thing all service worker sorry say again all service worker like it's literally as if you hit the network yeah exactly so I'm gonna stop that profile I left it running for quite some time there and it's going to process that okay so let me bring that down so this I mean this is actually a really good trace recording like a performance recording if you've got something like this in the lab setting you'll be super happy and the reason is if I just zoom in a little bit here you can see that most of the tasks in all of these top-level tasks here the tasks they're all really really short and that's really good because it means a super-short yeah it means that the main thread is remaining responsive so let me just zoom back out but let's talk about some of these metrics so for example dunk content loaded that's been around since forever really and that continues to be shown here but you see this timings rope contains some new ones like first paint first content full paint first meaningful paint and largest content for pain you actually see on my screen here when I roll over largest content for paint the element that is the largest content for paint highlights we put an overlay on that one so you can see so immediately some of these metrics that you're going to see in web dev slash metrics are showing up inside of the dev tools timeline so that's the high level metrics what we can also do though is we can show long tasks now as I said all these tasks are pretty pretty quick but I'm running on decent hardware here this one here is 18 milliseconds and I think we could probably do another recording and actually show it slowed down so what I'm going to do is I'm going to go to the settings here and I'm going to switch on CPU throttling I'm going to switch it to sixth slow down there isn't going to do that is just so that we can see what it would look like on slower hard way so they have a sixth of a MacBook now yeah exactly so I'm going to record again a refresh as I did before as I say I'm going to give it time to actually settle down some of our metrics they do need to wait until there's only a couple of requests running on the network and so on so I'm gonna stop that recording and what we start to see is we start to see these red triangles so again let me zoom in on what's going on here so there's a couple of things to notice one is that the task six times slow down in this particular case is one hundred and sixty eight point five four milliseconds what we're trying to do is we're going to try and keep all our tasks under fifty milliseconds and the reason for that is that we can may make their main thread responsive when we do that to use interactions because most of the JavaScript that people are running like touch handlers and mouse click handlers and all those kinds of things all run on the main thread and so what we want to make sure is that we're not blocking the main thread with work and so keeping tasks under 50 milliseconds is the goal so the the blocking time and I mean let's be honest year that I mean 50 milliseconds is somewhat lenient if we went to the good old goal of like 60 frames a second it would be even less but during the first load we can be a bit more lenient because nobody expects to interact with the website during the first second of loading and so we can be have a little bit of a higher threshold there but about 50 milliseconds it can become very noticeable if the mate that was blocked yeah absolutely great point in the context of page load absolutely this is more about the 50 millisecond thing if you're animating yeah absolutely to just repeat that you'd be going for 60 frames a second and your tasks will need to be a lot more shorter so if you're wondering how much of your recording is actually blocking so how much it can be striping overall do you have going on in here well we actually have this new metric at the bottom which says total blocking time which you can think of is like the amount of candy striping that's in this recording as a whole in this particular case it's two hundred and thirty point zero five milliseconds and we have a link to explain what's going on and you can see that that would take you over to the total blocking time metric information so that's so I find it quite interesting big we have the the total blocking time is actually not necessarily the amount of time that the main has been blocked because you have a fifty milliseconds budget per calf if you're allowed to block but everything gets over counts into that total blocking time so that's the amount of time that you went over the 50 millisecond budget exactly I should say the the total blocking time we tend to stop it at one metric that is not shown here which is the time to interactive so when we hit an interactive time and the back end and blink actually notifies us that we've hit hit interactive time if it can will actually stop tracking total blocking time for that value at the bottom but the candy striping here would tally pretty much entirely with that total blocking time at the bottom you've got this number 230 point zero five in this case it's that if a number starts to creep open up that's something you're gonna want to take a look at because that means that you're spending quite a lot of time with long running tasks on the main thread and the chances are it's it's negatively impacting the user experience in this case web dev is actually really good it's just I had to introduce some slowdown which is a good feature to know about that you can introduce slowdown both in terms of the CPU but also the network as well you can do that if you so desire so that's that's the total blocking time that's long running tasks as well we we mark that at 50 milliseconds plus with the candy striping and the little red triangle in the corner now the other thing we've also introduced is a thing called layout shifting so if I just even go to the Google homepage and I do a recording here and I just refreshed like so I hit stop okay what you're gonna see is you're going to see a new track if we find any layout shifts and the layout track so the experience is the new track it's called experience and one inside here we've got a layout shift and if we click on this let me just bring this up so you can see a bit more you get information on the layer shift so the idea of the layout shift is I think most people have experienced this you're browsing the web and you're about to tap on a button and it moves to somewhere else on the screen and it's really frustrating and so we're starting to give you the ways and the means of tracking those layout shifts in the course of you know interacting with your page and so on and we put them into this experience track so there's some stuff about scoring which if you read the documentation on cumulative layout shifts will explain the scoring a little bit more to you and you can also see whether or not it was in response to some recent user input we also include some location information where you went from and you can see this here is this so it's come from here this element has shifted to hearing see that overlay so I'm pretty confident I know what it is it's probably this privacy reminder here that is coming on here now one of the things that we probably need to add is which element it is specifically and there is that information in the trace it's just a case of plumbing it through so that's actually something that I'm going to hopefully look at so maybe by the time you see this video go and have a look in Chrome Canary possibly we've got the elements there if if not what's doing the time are recording with screenshots help so you can go through the film strip and actually see something shipped and that might be a good way to work around that until dev tools can yeah that's a great way of doing it often I think when it's your own code you have a fair sense of what's likely to be moving around the thing to bear in mind is layout shifts do cause problem a problematic UX and so it's a good thing to try and get those down and ideally removed if at all possible the way to do that normally is to reserve space for your content ahead of time in your style so that you're not just leaving content to just move other content out of the way if sometimes it's not possible but where you can if you can mark certain areas as being the correct size ahead of time that should help an awful lot so that's that's the layout shift information so that's added in so those are the main bits of performance so in summary we had the timings which are here I've got the layout shifts and we also had long-running tests which we show on the main thread with the candy striping and the red triangle so in dev tools we have also been working on web assembly and debugging experience that it gives you because you write your code in whatever language then you compile it to this vm bytecode and you kinda don't want to step through the bytecode you want to step through your original code that you wrote and for the longest time web assembly in dev tools use source map source maps to define that mapping from the compiled web assembly binary code to the original source code and source maps are kind of built for JavaScript and minifiers and transpilers and so that worked quite well but it's also lacking some capabilities that are quite important and so I have little example secret it's actually a sample from M script that I just simplified a little bit it just draws little gradient it doesn't really matter what it does but this is C code and I have compiled this to webassembly with our new debugging experience because in native land in binary land there has been a bugging format called dwarf for a very long time that has all these capabilities but until recently dev tools didn't understand it so now we have compiled this to represent Li this is what the output looks like it just draws this little nice gradient that you see on screen here but what's cool about is that now if you go to the source panel in dev tools over here we have our usual Java Script files we have a web assembly bytecode which you know that's not the kind of code you want to step through I mean that's not because that is base it's basically assembly well that sometimes can be useful it doesn't read that well let's be honest and what you can now find with dwarf support in dev tools is that we actually have a mapping to the original C++ file again this also worked with source maps but this has some more capabilities so I can now set a breakpoint here in the C code actually I said let's let's set to code as breakpoints why not and so if I reload the program will be halted once we reach that breakpoint and then we can continue going through it as we're used to and you can see the UI updating so if I now step over this SDL unlock surface the gradient shows up because we're actually stopping the program and updating the UI as we go along and I think that's pretty cool so now the question I have for you guys is are you able to inspect say the values of like I or J or alpha and those kind right so for example if I hover over this nothing shows up and that's exactly the capability that does for example I was also missing with source maps because source maps can't really handle renaming of variables very well dois forever can so while we are using dwarf to have a more efficient debugging experience um the capabilities our potential puzzle we haven't quite built that part yet so we are using dwarf to allow you the old experience of stepping through and brake pointing and all these things but you can try to expect inspect variables yet but we are working on that and only now is it even possible to build so that's really the exciting part here the other part is that we are no longer using a web assembly interpreter during debugging but actually our baseline compiler so usually in the olden days when you will start debugging your weapon sembly with source maps you will actually experience a much much slower webassembly execution so if you had a long loop and you want to break through it you would actually have to wait longer until it is done now we are at the baseline compiler which generates much more performant code under the hood and so you can do debug with higher performance and if that isn't the great tagline I I don't know what is to be honest so you've kind of pointed at this I think a little bit this is experimental it's still a work in progress if somebody wanted to actually try this out for themselves in Canary what would they do where would they go so it is currently in Canary and it is still being worked on so in the last couple days it kind of oscillated between working and not working sometimes I could set breakpoints sometimes I couldn't but we are on track for getting this ready for stable I don't know if we've set a milestone yet if so I will update the description of this talk accordingly and but you want to play around with it please do I'm stripping if you just Google for M scripting and dwarf the most recent release now has support by default for these dwarf surviving symbols so if you just update your engine to the most recent release this just just work out of the box just to be clear there is no source map file and the four that I'm serving so source Maps cannot have provided the surviving experience so this is definitely using the dwarf symbols that are in the webassembly binary cool well with that I think we have covered what is important in new in depth ills that we know I've got more stuff to show you I've got the issues you have more stuff to show yeah switch back to mom well alright so the next thing I want to show you is the issues tab now you use similar your a similar thing when you see lots of warnings and messages in the console over here you can ago sure and you start to kind of mentally filter those out and you maybe if you're like me you kind of clear the console and you something okay it's just too busy just too noisy I'll kind of deal with those at some point well if you are like that completely understand where you're coming from so we've added this new thing which is the issues tab it says the issues have been detected so if you see something like this we've detected some issues during the execution of your page and you can go to the issues tab which opens a new tab here now sometimes if the page is already loaded and you you bring up the console you might say well there's possibly more information would you like to reload so sometimes you'll get an option to reload the page and you might see more issues coming through that way so you can see here that this particular page some say same site cookies issues are starting to show up so you can see I've got the issues listed here and I can spin this down and it gives me an explanation of what's going on and how I can resolve this issue directly it also tells me which cookies in this case are affected and also links me off to some information up there about how this all works it's also true of something like mixed content as well so if I go to something with mixed content which is HTTP and HTTPS together similarly I can go here and it says that there are eight cases where I have mixed content where all resources should have been loaded via HTTPS but they haven't been and it lists again it lists lists the requests and the resources in question so hopefully that's going to make the console less noisy and makes it much more clear to you how you can track down any issues that dev tools has noticed in your site and your app okay so the last thing I want to talk about is color vision deficiency emulation so let me fire up this brilliant video of HTTP it very second yeah it took it about impostor syndrome something I personally suffer from so if you're not seeing that go ahead and watch it's a really good video so what I've got on my screen I've got the rendering tools inside of tools now if you've not seen this you can go to more tools and then rendering down here if you click on that this tab will pop up and there's a load of tools just for rendering inside of here and since we're passing through here the layout shifts that I talked about earlier in the performance area layout shift regions this is a live update version of layout shifts so if you're just wanting to see very quickly what layout shifts you have during the you know the life cycle of your page you can switch this on and if you see blue flashes then that's the layout shift that would have been caught if you took taken a performance recording now I'm not going to show this today because as it says here it may not be suitable suitable for people prone to photosensitive epilepsy and I want to be mindful of that but if you think this is the right tool for you definitely check that out when you're looking in the rendering tools so if I scroll to the bottom here of this list you'll see that you can emulate vision deficiencies and if I start playing this video back you can see that if we work our way through this list we have blurred vision which you can see applies a blur to everything and I can still interact with the painting still click on buttons and so on but you see the content is completely blurred we also have protanopia and there is due to a Nokia Triton Opia and a chroma top seer assuming I'm pronouncing those correctly if I'm not then forgive me I find it really cool that all these effects so to speak I applied to the page without disabling the interactivity or the animations or even the video so you can really check if all your animation entire experience holds up when someone has one of these vision deficiency so I think that's just a really cool thing yeah absolutely so you might noticed so these are they seem fairly extreme when you look at this it looks to me as somebody who doesn't have any of these vision deficiencies these look like a very extreme form of of change visual change so I mean I said this in the introduction with Dion earlier but to say it again these deficiencies that we're emulating are physiologically accurate but the most acute form of that particular vision deficiency so it's not on/off like we have emulated here where it's sort of Noah no vision deficiency and then protanopia if you have one of these vision deficiencies it's much more likely to be a spectrum and you may have a certain amount of one of these vision deficiencies so what is like this is the most extreme version of all of these vision deficiencies and so that way you can make sure if your page holds up in the most extreme case you know it will also hold up for any less severe case you can make sure your website remains usable for anyone really that is exactly the idea behind it exactly that if you're optimizing for accessibility you want to be as confident as you can be that you're capturing the colors and the contrast and all of that stuff in the most helpful way possible and so by going for the most acute version of these vision deficiencies exactly as you said you can you can optimize for those and then anything up to and including those will also be covered as well so so that says we've talked about the issues tab we've talked about long tests we talked about layout shifts color vision deficiency and webassembly debugging with dwarf I know right and ballast quite a lot of new things and dev tools and you should definitely try those out absolutely yeah so if you want to try any of these out the probably the easiest thing to do is to fire Chrome Canary give them a go if you run into any issues you can go over here to the help menu and you can report the dev tools issue which will create a bug and you can fill that in and that will make its way aka your inbox I really hope not so with that thanks for watching and I guess we'll see you around see you around bye hello my name is Shu and I work on the JavaScript specification as well as the v8 project my name is Leszek and I work as a performance engineer on the v8 VM so sure what's new in JavaScript these days yeah whole bunch of stuff has happened since last year and you might recognize some of the features we're going to talk about today from some of our colleagues 2019 Google i/o talk because language futures take a while to be standardized and to be shipped into browsers the ones we're going to be talking about today have shipped so let's start with the fun stuff like I said we're about to when either shift or about to ship quite a few syntax features that should make web devs lives easier for this talk we'll be focusing on two features that will make dealing with optional values easier so let's shake have you ever ridden code that dealt with configuration oh yeah definitely like always using a hash table for those things yeah so I'm keeping I'm running this new chat app right something of a strength for Google engineers I made some network parameters configurable which I keep in this map of configurations called config the you see on the screen but the network configuration is optional because it isn't always set by the user and it has sub configurations like the server and the port and maybe those aren't set by the user either handling that kind of optionality is kind of a pain currently folks do this with logical and like you see on the screen well that's pretty cool boys yeah for those chains of property accesses were at any point some property in the middle could turn out to be undefined we added this feature called optional chaining easier to show you on the screen than to talk you through it so the optional chaining feature is the question mark and the dot instead of a plain duct oh I see so that config is undefined then Netcom picked old servers undefined and odder isn't lined and so forth yeah almost it's a little bit more relaxed than that it's if it's undefined or not and specifically we call the set of things to find earn on knowledge so in the in this case if that config is knowledge the whole optional chain is undefined if nekron sake isn't knowledge but net config that server is knowledge then again the whole thing is undefined you get the idea if nothing is knowledge then eventually you get the whole property the most nested property access echo that's not easy to read yeah I think so too now another comment feature while dealing with configurations is default values and sometimes folks use logical or for this like you see on the screen oh yeah definitely that cool yeah and it usually works fine but sometimes it doesn't and it is really surprising when it doesn't suppose I add a configuration for enabling compression to the to the server do you spot the bug oh yeah right how would you actually explicitly disable compression right if it's folks than full soul true is still gonna be true yeah exactly if enable compression is false false or true like you said is true so what we really want to test here is not something is true the-- which is what logical or tests for it but actually if something is absent or present and we already are familiar with that concept that's knowledge so we introduced this new syntax feature called knowledge coalescing which is the two question works and that does exactly what you want here for default values it tests for knowledge nasaan the left hand side if the left hand side is knowledge then it evaluates to the right hand side if the left hand side is not knowledge then the whole thing is undefined so in this case the enable compression is false question mark question mark true will still get you false because false is not null or undefined but if enable compression wasn't present if it's undefined then you get the default value of true that's pretty cool what can I use it so you can use both optional chaining and knowledge coalescing in chrome stable today now enough talking for me this the test that was just a taste of the new features you can find more on our website later we'll show you the link but you know we add all these new syntax features and I'm worried that supporting them all will slow down the parser v8 is known to be fast and I don't want to do anything to make it slower you know what that's the effect it sends huh when we shift es6 back in 2015 we actually saw a big pausing dropping this is measured on boxing on the code Loic benchmark and we have this big drop during this implementation phrase but actually nowadays parsing speed doesn't matter as much using my thing oh really not anymore eyesight parsing was pretty expensive but it's still not cheap but the past year we've worked a lot to move a lot of passing off of the main thread and be able to pass scripts while they're still loading so imagine the chrome season script like this the HTML parser gets up to it it sees the script and it has to pause the HTML pausing has to download to the script parsley execute it and only then can it continue parsing the HTML I know is strictly true preserve optimizations like pre loading no you're absolutely right this isn't actually the whole trees and the download of the script happens a lot earlier if there's a link preload or if the pre positive lines of script earlier and if the download moves off of the main thread and earlier in time they will pause and execute can move earlier too but the thing is the parsing itself can happen on separate rail as well it's only really the execute that happens happen on the main thread in particular if a script says Marcus async you can keep processing the HTML up until the pausing of the async script was actually finished then it needs to execute and we had support for this basically forever but it's been very limited we've only been able to concurrently pass once from scripts at a time and we've only been able to do this very same script yeah how come it's been so limited honestly just historical technical reasons which don't really hold anymore so one of the first things that we did was move everything from this dedicated thread into our global thread pool which meant that they could happen at the same time in parallel another thing that we changed was to have synchronous scripts also use this or thread pausing functionality I'm kind of confused you said synchronous scripts but what's the point of parsing synchronous scripts in another thread isn't the whole point for non async scripts that they block the main thread well that is the point for the execute but for the pausing even though with pausing on a different thread if the main thread is free that means it can do other things it means that the user can scroll it means that the user can type it means that we can execute other JavaScript like on click handlers so it's actually very useful to be Tablas space here on the main thread okay I see this is a difference between improving interactivity versus just improving the loading time right but we can improve loading as well because the pausing is happening on a separate thread we can actually move it earlier we can start pausing when the download starts and then as data comes in from the network we can feed it into the pawza and then the actual past time doesn't matter as much as you might think although you need is for the pawza to be faster than the network really the networks are already pretty fast not always but usually they are fair enough and you know caches are even faster so we can't completely ignore positive performance so we have invested a lot into improving the positive performance as well the single threaded positive performance starting 2018 we put this big effort in put some of our best engineers on it and we had actually very good results in proving PA's performance just through programming optimization yeah up and to the right that's the kind of graph I like to see very fascinating stuff thing I learned quite a bit in just the past five minutes about making parsing and compiling faster and web app performance in general and you got me thinking about this other big chunk of what a performance which is memory I was doing this thing of the day with with my chat app and you know I got it basically working and I was trying to measure the performance of the packets that I was getting from the server I wrote this little moving average class to compute the latency moving average of the packets that I was getting from the WebSocket you see there that I add a message listener that basically all it does is it accumulates events into the event array and I use that later in this compute function which I don't show to actually compute the moving average and the way I use that is I have this component that's when I start measuring and I want to see the live statistics of the moving average of the latency that I make a new instance of it and then when I stop I know it out because I don't want to keep all the events I accumulated in memory I know that v8 garbage collects memory that can no longer be reachable and as long as the moving average is reachable through the this top moving average property on the moving average component that the garbage collector cannot collect it which is why I no Doubt's solo no sense to me yeah and I thought this would work fine but then what happened was you it's a chat app I kept it open for a while and I opened the memory pane I see every once in a while that a GC happens and it moves you know it it collects some memory the memory goes down a little bit but it's pretty clear that the trend is up and to the right is one of those graphs we're open to the right is actually bad and what this was basically showing me is that it's a memory leak right that every GC every time GC happened it wasn't able to collect all the memories so I just kept accumulating more and more memory and eventually if I kept this chat app open for another day or so my computer will have RAM memory memory leak but v8 or any collects objects you can actually reach you no doubt your moving average field so the garbage collector should be able to reclaim his memory shouldn't that yeah so it's a common mistake but it's still pretty subtle I'm sure the more seasoned web developer would have spotted it right away so what's going on is that the WebSocket is holding on to all the event listeners strongly which means that until they are explicitly removed everything that it's reachable via the event listener is also considered reachable and thus not collectable by the garbage collector so you see that use of this dot events that push inside the event listener as long as that uses inside there the whole moving average instance is reachable from within the event listener and thus not garbage collectable so even when I knocked it out in the moving average component it was still considered alive by the garbage collector to deal with this folks often use what's called a disposable pattern where I have a a method that manually removes the event listener called dispose and that's kind of annoying and to use that the way I would do it is before I know it out in the moving average components I would have to remember you manually called dr. spokes what is the Seacoast bus you have to manually manage your memory of the whole point accomplish conditionals they don't have to follow that stuff sure exactly and it's so easy to forget it too and this is all because the event listeners can't be garbage collected until you man to remove them so what if there was a way to actually tell the engine don't let me keep you from garbage collecting this thing even though it's reachable then you don't have to remember to manually call dispose or even need the disposable pattern and it turns out there's a new standard feature in JavaScript that lets you do exactly this week graphs alright and before we go into it I have to give a quick disclaimer so we graphs mask feature that's hard to use correctly because of our reflection is unpredictable and very different when browser browser and even from an even different from run to run at the same browser because of that unpredictability we didn't add week graph to the web for many years and you hopefully will never run into a memory leak or a bug that logically needs it but on the rare occasion that you actually legitimately use a week raft finally you can use it and fix your problem at the root all right back to the main programming so how am I using week rest here to solve the previous problem I still have this event listener but now instead of directly registering that event listener function with the sockets I wrap it in a week ref it is the what's called the target of the week ref and inside the actual event listener ID ref the week ref and I call it the function and this kind of indirection basically means that the function that is actually holding the moving average component alive via distance that push is no longer kept from being garbage collected because it is a weakly held reference inside a weak ref okay and what does we craft the TRF return Isao using optional chaining function called syntax here yeah good eye on that that that was not an example that we showed earlier but like optional chaining for property you can also optional chain a function call so if it's undefined then you don't end up making the call and the whole thing is undefined but that also suggests that D ref here when the thing is actually collected will return on defined to recap here what it basically means is that you have to manually call DRF because we're no longer preventing the garbage collector from from collecting the the event listener since is wrapped up in a week ref so every time you want to access it you have to manually via ref and if the garbage collector has collected it then the ref will return on defined okay so in this case the listener is reachable by this stop yzma and once particular moving average instance isn't reachable than the component and the component knows it out then the whole thing can be connected right exactly because we're no longer accidentally keeping moving average alive anymore via the event listener we can go back to what I naively thought would work in the first place when I no longer need all the data in the moving average instance I will just know that out and let the GC do its thing okay no way but hold on but now you've got this strongly held listener on the actual event it's not that's calling the we craft yeah that's a good point you know I thought you wouldn't spot that but that's exactly right even though with this weak ref indirection I still have this event listener remembered sake still keeps strongly it just calls onto all the event listeners until I own register it I still have this extra event list so what do I do there there is a companion feature do we craps called finalisation registry that lets me do the thing that's needed which is I want the garbage collector to tell me when it has collected something so that I can perform some action at the point that an object has been collected or in GC parlance finalized and that feature is called finalization registry on this slide what you see is that I make a finalization registry and when I add the new event listener I also registered with the finalization registry meaning when the inner listener the thing that actually does that this dot events that push is collected and remember it's collectable now because it's held in a week ref when that's collected it's going to run this function that I passed the finalization registry asynchronously to remove the event listener cleaning up all the excess memory now again this is an advanced feature and hopefully you'll never need it so it doesn't actually pass the object in so then to define liza this is good observation there you see that the thing that actually gets passed to finalizar are some other values the object that you want to observe the finalization know if that's already been collected so you don't get that back in this case the thing we need to perform the finalization action to unregister are the socket and the wrapper listener and that's what we pass to the finalization regice all right that makes sense yeah and like I said this is a this is an advanced feature and this example here is pretty des I recommend that you follow the link on the screen there to follow our full explainer on the v8 that that website for the future so with all of that work I opened up the memory panel yeah and I kept my chat app on for a while I start and stop measuring the latency and now I see that every time a GC does happen it's able to reclaim basically all of the memory and then over a longer period of time I'm no longer accumulating memory and yeah it looks like I fixed a leak it looks pretty tricky like I've collected garbage before and I don't take you to tell miss thinking myself yes garbage collection is not predictable it's not it's non-deterministic don't depend on always running and that's why we we have kept saying that we crafts and finalization registry is an advanced feature so and that's a good point to give the unpredictability of the garbage collector are there other things that the engine does to make apps slimmer actually yeah basically doing a lot of work to reduce this memory consumption there's actually two major projects the London last year which have focused on this points compression in v8 light and I can actually talk about both of them very quickly so point a compression first of all you've probably heard that machines are 32-bit or 64-bit on 32-bit machines we have 32-bit pointers on 64-bit machines we have 64-bit pointers and the whole point of this I have no pun intended is that 32-bit pointers can reference up to four gigabytes of memory 64-bit pointers can reference up to eighteen exabytes of memory which is quite a lot more and chrome wants to be able to run in 64-bit so that it can access more than four gigabytes of memory yeah from definitely needs more than four gigs yeah all right we've all heard we've all seen the same means and you know fair enough if you've got a hundred times open with a thousand images and they're playing games and they're playing music it's gonna use our memory but not necessarily each individual tap not necessarily each individual v8 instance and the key observation of points compression is that actually we can probably restrict hv8 incidents to be less than 4 gig and if we can restrict it to the less than 4 gig and we can pre allocate a four gig area for it and force all objects to the allocates inside of that area and now instead of referencing those objects by a 64-bit pointer we can reference them by an offset like this under pointer compression you can take your 64 bit pointer and you can split it in half you can split it into a base and an offset the base is the start of that for gate allocation area and the offset is the offset within it and then you only have to store the offset on objects which means that your pointers call half the size they go back to the 32 bit size now guessing it wasn't just easy as that it definitely wasn't it was a whole journey and there's a whole blog post describing that journey which was very exciting but as a little spoiler I can tell you that on typical websites we reduce memory by about 40 percent yeah that's this is a very impressive number is 40 percent but what if a web app or an OGS program really wants to use more than the four gigs or you constricting apps to only have four gigs of memory well kind of but also not really first of all with points compression those objects are a lot smaller so you can fit a lot more of them into that four gigabyte allocation area and also this four gig only applies to a single instances JavaScript object heap so for example typed arrays they have their own external memory backing so they're not included wasm instances have their own forged by an allocation area so those are separate even other V instances inside of web workers and on other tabs have their own forged by location area so only restricting one v8 instance not all of them the other big project last year was v8 right and this was this was a really interesting one because we thought to ourselves what would happen if we just gave up on performance and try to just improve memory how far could we actually get and for memory constrained devices where the a just couldn't run at all without the memory that it needed yeah that's an interesting thought experiment I guess if you run slowly that's better than not being to run at all because you're out of memory right absolutely the approach that we took was to just look at typical websites and look at what kind of things I'll take actually taking our memory forty-eight percent was user data there's not really much we can do about that projects like points compression are gonna reduce that by a lot but we can't really have any targeted optimizations that reduce the amount of data that users create and those this big bucket over there because there's always a big bucket Cordova and we can reduce the high but with targeted optimizations but we did look at some of the top users of memory and we decided to try and target those right so right after bed if you're now worried about performance at all you don't need to opt in this code it makes sense to me absolutely and if you don't need talked to mice code you don't need to really collect IQ back either because that's just storing the data that we need for optimization and it's only used for performance even the bicoid gene that we generate you don't have to store that you could just compile it on the fly whenever you need it and get rid of it afterwards sounds a little different to me though my code is on optimized code and if you're even getting rid of that that sounds like you're giving up more than just a little bit of performance yeah the first prototypes of EI light were pretty slow but then we realized that we could get a lot of these gains without actually sacrificing performance at all just by being a little bit lazier yeah something of an expert had been lazy myself yeah I'm pretty good at being lazy myself too but as an expert in laziness you know right that being lazy doesn't just mean not doing anything at all means not doing anything until you you're really required to so we took the same approach with v8 let's talk about those feedback fixes that I mentioned previously the type feedback you're not gonna make get much benefit from type feedback if you and you run a function once or twice you so where you can start benefiting you after you run it tens or hundreds of times so we can delay creating this type feedback until we've already had a couple runs of this function taking off some of those feedback actors but not all of them same thing with sauce positions we only need those for printing line numbers when print exception stack traces or for printing stack traces and dev tools so if we can delay calculating those two later then we save a lot of space as well even bytecode we have this capability of getting rid of buy code that we don't need so we can just get rid of old bytecode keep around buy code that we're still using and save a little bit and read that and there were a bunch of tiny projects targeting these top memory users which I described in this blog post in a lot more detail but again spoiler alert they reduce memory by 10 to 30 percent on typical websites nice so it's actually been a lot more going on in VA in the last year we didn't really have time to talk about a couple of projects recommend you visit our blog where we post about new versions of v8 we talk about exciting new things that we just like to talk about it's a great read and we look forward to seeing your that thank you very much for all the viewers who joined us for this whirlwind tour of the javis what's new in the JavaScript language and the new developments in the engine itself that makes running JavaScript both faster and to use less memory we definitely didn't have time to go into all the new features that were added to JavaScript so please give our blog but Reid thank you very much thanks everyone [Music] [Applause] [Music] hi everyone my name is Matias and I'm here to tell you what's new in puppeteer but before we can do that we should probably talk about what puppeteer is in the first place but patear is a browser automation library for node it lets you control a browser using a simple and modern JavaScript API after installing it using NPM install puppeteer you can require puppeteer in your notes script and start automating the first step to browser automation is to launch an actual browser and with puppeteer that's just one line of code next we open a new page this is equivalent to opening a new tab in your browser now let's navigate to a URL this line of code ensures that the page has finished loading before continuing with the rest of the script then we take a screenshot and save it to a file before finally closing the browser and that's it that's the entire script we did all of that with just a few lines of code and puppeteer can do much more you can generate PDFs evaluate JavaScript in pages enter text and input fields click on elements almost anything you would manually do when using a browser can be automated using puppeteer puppeteer project is fully open source and has received contributions from individual contributors all around the world as well as from companies like Mozilla sauce labs and Microsoft at Google the puppeteer team consists of chrome engineers who also work on dev tools and this might sound a little strange at first but it actually makes sense because puppeteer is built on top of the same underlying protocol that dev tools also uses to communicate with the chromium back-end because of this puppeteer also gives you access to advanced browser functionality that is usually only available through dev tools for example you might know that dev tools lets you emulate print media so that you can easily debug print styles well puppeteer lets you do the same thing in an automated script here we call page that emulate media type to force print styles and then we save the result as a PDF okay now that you know what puppeteer is what it can do and who is working on it let's take a look at some recent feature editions similar to emulating print styles we recently added devtool support for emulating light and dark mode as well as other so-called CSS media features we then shipped a new puppeteer API that lets you perform the same emulation programmatically this puppeteer script takes two screenshots of your web app one in Lite mode and one in dark mode it works independently of your operating system settings one of my favorite features on WebDAV / life is the schedule which adapts to your local time zone I live in Germany so when I view the schedule I see something like this today's event started at 2 p.m. for me but someone in Tokyo for example would see a different time for them the event started at 9 p.m. I love that the website just tells me what I need to know in my local time nobody likes doing times with math to make it easier to test this kind of timezone aware functionality we add a dev tool support for emulating arbitrary time zones yesterday's event started on June 30th at 6 p.m. for me but for someone in Tokyo it was already 1 a.m. on July 1st in addition to the new dev tools functionality we also added a new API to puppeteer to let you change time zones programmatically this script emulates various time zones and then executes some time zone dependent JavaScript in the page context we're logging the same date but in two different time zones and that produces different output here's another example this puppeteer script forces the Tokyo time zone then loads the web dev live page and finally takes a screenshot of just the schedule similar to the side-by-side screenshots we saw earlier dev tools recently gained support for simulating the effects of various vision deficiencies including blurred vision and color vision deficiencies this can help you identify accessibility issues related to color such as met contrast and guess what we added a corresponding puppeteer API that lets you apply these simulations programmatically this script takes a screenshot of the web app after simulating blurred vision achromatopsia or full color blindness and deuteron Opia which is red-green color blindness one feature we're still experimenting with is the ability to register and use custom selector query handlers many puppeteer api's deal with selector strings which by default use query selector or career selector all to find elements in the page we've heard from users that they want to be able to provide their own selector query handlers with custom logic and this new feature now makes that possible you can imagine providing a custom hats next handler which looks for dumb nodes containing a string of text or maybe you want to select elements across shadow dom boundaries which query selector doesn't let you do there's one more feature I want to talk about and it's a little different from all these API editions we've been covering until now let's go back to our very first example launching a browser navigating to a URL and taking a screenshot puppeteer was originally built for Chrome so when you call puppeteer dub launch it launches a chromium browser by default you can now also specify this explicitly by using the product option okay so we added a new product option by itself that's probably not very interesting but here comes the exciting part instead of Chrome you can now specify Firefox and then use the same puppeteer API to test a real Firefox browser by changing just this one line we are now automating Firefox instead of Chrome Firefox support for puppeteer is a result of an ongoing collaboration with Mozilla part of this effort involves patching puppeteer itself but a big chunk of the work happens in the Firefox codebase the puppeteer Firefox implementation is still experimental and so not all the puppeteer API s are yet come parable with Firefox but Mozilla has been making great progress here in fact as of mid-may exactly three hundred and nineteen out of the 638 tests in puppeteers test suite are passing on Firefox that's exactly fifty percent we're hoping to ship puppeteer with more complete Firefox support soon longer term we would love to support Safari as well and were actively working on making that happen in collaboration with other browser vendors we believe the right way to get through a fully cross browser puppeteer is by standardizing a protocol that all browsers can implement instead of building on top of the proprietary chrome dev tools protocol in addition to all those new features a lot of work has been going on behind the scenes of puppeteer we recently finished migrating the code base to typescript we simplified our test runner we considerably improve the robustness of our continuous integration setup and our documentation keeps getting better and better this work is often less user visible but it's crucially important because it enables us to iterate more quickly and more confidently I hope you enjoyed this overview of what's new in puppeteer thanks for listening and see you next time [Music] [Applause] [Music] hi my name is Anne Redmond AAHA and in this video I'm going to show you how to use your progressive web app inside an android application without writing a single line of native code progressive web apps or petaboys combine the reach of the web with the capabilities that were also available to native apps if you are new to petaboys read more about them on web dev slash progressive - web - apps it is natural that developers building great petaboys who wants to reuse those experiences inside their Android applications in the past possible ways for a developer to use their progressive web app inside an Android application included using the Android webview or embedding a browser engine the webview doesn't provide support for many of the new capabilities on the web like push notifications or web Bluetooth so the output can be a super experienced compared to the pdaboy it's built on creating and maintaining an app with an embedded browser requires a considerable amount of engineering effort and produces an app that's larger than a native app equivalent at last year's Google i/o we announced terrset web activities which allow developers to use their progressive web app inside an android app in a full-screen tab that is powered and has the same features and capabilities as the browser provided this leads to a small development cost and application size even though Tercel web activities provide a better alternative for using a PWM entered app developers - needs some knowledge about native application tooling and development so to create an easier path for developers who want to create their Android app using their PW excited we have created bubble wrap emoji is projects that contains both a library and a common line interface developers can use to generate and build their and allocation in the next few minutes I'd like to guide you on how to configure bubble-wrap and use it to generate an application from an existing progressive web app I'm going to use Romero woods persistence app as a starting point but you can use any existing progressive web app check the video description for the link to the persistence app who needs to modify the application later so I'll open app scroll down and click on the code link then I'm going to remix the project so we can modify it we can get the link to the remix tab by clicking on share then live app and then copying the link we are going to need that information soon in order to use bubble wrap we need node.js 10 or above installed on the development computer and optionally an Android device setup in developer mode so we can test the application check the link on the video description for more information on how to setup an android device for developer mode bubble wrap builds on top of native SDK tooling so we'll start by downloading the Android common line tools and the Java development kit or JDK version 8 to download the Android common line tools we can use the shortcut on the bubble-wrapped CLI documentation which is a linked on the video description inside the page click on the link for your operating system accept the license and click on download the bubble-wrap CLI documentation also links the corrections version of the Java development kit inside the page choose your operating system van architecture then download the compressive tar file for the JDK in our terminal we now create a directory where we can place both dependencies then we unzip the common line tools and then the Java development kit make sure to take note of the directories where those files were decompressed as we're going to need them later I like to rename the JDK folder to just JDK as it's easier to remember with the pen season already we can install bubble wrap using NPM install with bubble wrap and its dependencies now installed we can start the creation of the Android app itself let's start by creating a folder for it and now we can initialize the Android project by calling bubble wrap in it and passing the URL to the web manifest to it when bubble wrap runs for the first time it will ask for the location of the JDK and the Android comma line tools we downloaded previously while also automatically installing order dependencies then the CLI will ask you to confirm values read from the web manifest and fill in any missing required values needed to create the Android app we can for instance change the Stars URL so that we can use Google Analytics to measure how often our users are opening the pdaboy from the Android app Android applications needs to be signed with a self-generated key in order to be uploaded to the Play Store if bogel rep is unable to find an existing key it will prompts the developer to create one so let's go ahead and create it and make sure to take note of the password you choose finally we can now evoke bubble wrap build to build the project the comment will output three important things the quality criteria for the peter blake an asset links that json file used to validate the domain open and inside the treasured web activity and assigned android application that can be uploaded to the Play Store bubu Brad who check the quality criteria against the URL used to launch the treasured web activity we strongly recommend the repeatable passes the called secret area the quality criteria is measured using lighthouse against the start URL and consists of a minimum performance score of 80 and getting the peelable a check in order to be shown in full-screen developers need to implement digital asset links bubble-wrap takes care of the configuration of the Android application but there is one extra step that needs to be done in the webapp the content of the asset links to JSON file needs to be made available on dot well-known slash asset link JSON on the root of the domain oh my remix project how creates a dot well known slash asset links to JSON file then I'll place the content of the file generated by bubble wrap into it the application is now fully setup if you have an Android device in developer mode you can now connect it to the computer and run bubble wrapping start to launch the app congratulations you have built an Android app when uploading an application to the Play Store for the first time you ask if the developer wants to use app signing if op C in into app signing the Play Store will manage the signing key for you making sure it's not lost this is important as losing the key means it's not possible to update the application on the store anymore but it also means that the final key used to signed application will be different than the one is generated by bubble wrap to update the asset link start JSON file we need information on the key used by the Play Store this information can be found by clicking on the add links item on the menu on the left and popping the details for the fingerprint and using is to update asset links dot JSON file on the web app it is possible to use both fingerprints in the application check out the video description for a link on how to add both cases application bull wrap removes friction for web developers who wants to open the repeatably in an Android app I'm a fan of comma line tools if you are more like a graphical user interface person checkout peel away builder it uses bubble wrap as a library to power their Android application generation and that's all for bubble wrap today make sure to check the github repo and drop us some feedback and if you're watching this live jump into our live chat and tell us what you think thanks for watching [Music] [Applause] [Music] hi I'm Damian a webicon system consultant at Google in this talk you will learn how to define an install strategy across all your mobile experiences letting your users install your app is one of the best ways to keep them engaged today you can achieve that in different ways let's start with native app installs if you have a native application you might think that this might be the best platform to promote to all your users and for some of them this might be true but for some users native apps can have some disadvantages too the most common one is storage constraints making space for a new app my mineral moving by level content freeing up storage is also the number one reason users remove apps from their devices there's also the issue of available bandwidth especially for users on slow connections and expensive data plans finally moving to a store creates additional friction and delays a user action that could be performed directly in the web a great alternative to this is allowing users to install your progress he web app from the browser through another home screen prompt you can also upload your PWA to the play store using trusted web activity in this example Kint and are a real estate company from Brazil was able to reuse the same codebase in the world and the Play Store while offering a great experience to users let's take a look at another example all your rooms is one of the largest hospitality companies in India they have a very large user base coming from a variety of devices and networks they have built different versions of their mobile experience to satisfy the needs of all their users first I created a native application for the Play Store for the most sophisticated users this could be the best choice all you light is a progressive web app uploaded to Play Store be a trusted web activity it provides the same functionality of the native app well occupying only 7% of the space finally for users that visit the site directly by typing the URL or clicking a link or your offers a chance of installing the pedo directly from the home screen having all these ways to achieve app installs is great but how can you combine all these offerings to increase installation rates well a boy did make your apps compete with each other let's discuss some strategies to combine different install offerings the first strategy is to show the different options in the same screen this is a simple approach that might just work for many users the challenge is to be able to communicate the value proposition to distinguish clearly one from the other but instead of delegating the choice completely to users we can make the life easier the video of the following strategies is to make some inferences for example by tracking users behavior and device characteristics we call this heuristic based approaches the first one is web installed as fallback in this strategy you can start showing the native app installed prompt if the user doesn't install the app and keeps visiting to your website chances are that the web is their platform of choice after a while you can start promoting your pillow EA to these users this rowdy sheet can be implemented very easily for example by using cookies to track user behavior the group of users that this means the up banner huh it come in several times to the side might be good candidates for a web install offering but before showing the web install call-to-action there are two more things to take into account the first one make sure that the user hasn't already installed your native app or your PDA by other means the Getty store related apps API can help you check that the second is actually a UX best practice to maximize the opt-in rate for your web install prompts you might want to use the double permission pattern in this example I'll show zagweb install icon after capturing the before install prompt event when the user clicks on it they trigger the standard Add to Home screen prompt if you want to learn about UX patterns for web permissions like this one check Pichet stalk say permissions for the capable web at crowned Epsom in 2019 let's move now to the second strategy intuitively users on slow networks or low-end devices might be more inclined to download Lite apps therefore if it's possible to identify a user's device one could prioritize the light up over the heavier native app installed version you can implement this by writing a function checking for device characteristics to decide which prompt to show if it's a low-end device a light up and if it's a high-end device you can offer the core native app inside the function the by signals can be obtained in two ways the first one is by using javascript api s-- like device memory hard work on currency or the net more information API the second one is by using client hints which can be inferred from the header of the HTTP request to use them you need to send an ascetic header in your response indicating the type of hints you want to receive for example device memory after that you will start receiving these hints in the header of the HCP request finally you can use this information to map to a device category and use that later to decide which prompt to show if you want to learn techniques on how to map the by signals to device categories check out adaptive loading a talk that was given at random Sammy 2019 Rapinoe today you can offer different channels to users to install your model experiences for example you could offer an ad but a piddly available in the Play Store and iWeb installed from the user screen then you can define a heuristic to show the most suitable install offering to a particular user you can create a very simple one based on the user behavior on your side for example by tracking how often they come to it or you can go for a more sophisticated approach by mapping the buy signals to device categories and show different install offerings depending if the device is low mid or high end we encourage you to experiment with these techniques for example by running a be test and to reach out to us on Twitter to share your experiences how you continue enjoying why of life thanks for watching back in March 2003 Nick thank and Steve champion stunned the web design world with the concept of progressive enhancement a strategy for web design that emphasizes core web page content first and that then progressively adds more nuance and technically rigorous layers of presentation and features on top of the web content while in 2003 progressive enhancement was about using at the time modern CSS features unobtrusive javascript or even scalable vector graphics progressive enhancement and 20/20 is about using modern browser capabilities my name is Thomas Tanner I'm a developer advocate based out of the Google Hamburg office today I want to talk about progressively enhancing like it's 2003 building for modern browsers since we all can be here together in person due to the coronavirus has corroded my talk into an online trip that I want to take you on with me for this trip you need a solid understanding of JavaScript talking of JavaScript the browser support for the latest quad JavaScript features is great promises modules classes template little world's arrow functions you name them all supported basic functions work across the board in all modern browsers and even super recent language editions like optional chaining and knowledge coalescing reach support really quickly when it comes to CRO JavaScript features the grass couldn't be much greener than it is today for the trick that we are going on the likeness should have a good understanding of progressive web apps for this talk I work with a simple pwe called fugu greetings the name of this app is a hat tip to project fugu where we work on giving the web all the powers of native applications you can read more about the project at web per death slash food - status fugu greetings is drawing up that allows you to create virtual greeting cards just imagine you actually had traveled to Google i/o and wanted to send a greeting card to your loved ones let me recall some of the PWA concepts fool greetings is reliable and fully offline enabled so even if you don't have network you can still use it it can be installed to the home screen of the device and it integrates seamlessly into the operating system as a standalone application with this out of the way let's dive into the actual topic of this talk progressive enhancement starting each green card from scratch can be really cumbersome so why not have a feature that allows users to import an image and start from there with a traditional approach you have used an input type file element to make this happen first you'd create the element set it aside and the to be accepted mine types and then programmatically click it and listen for changes and it works perfectly fine the image is imported straight onto the canvas when there is an import feature that Robley should also be an export feature so users can save their greeting cards locally similar to before the traditional way to saving files is to create an anchor link with the download attribute and with the blob URL as it's a trough you will then programmatically click it to trigger the download and to prevent memory leaks from happening hopefully make sure not to forget to revoke the blob URL but wait a minute mentally you haven't downloaded a greeting card you've saved it rather than showing you a safe dialogue that lets you choose where to put the file the browser instead has directly downloaded the greeting card without interaction and it's put it straight into your downloads folder this isn't good what if there were a better way what if you could just open a local file edit it and then save the modifications either to a new file or back to the original file that you had initially opened turns out there is a better way the native file system API allows you to open a great files and directories make modifications and save them back let's see how it can feature detect if the API exists the native file system API exposes a new method choose filesystem entries I can use this to conditionally load import image under s and export image nsj if the API exists and if it isn't available load the files with the legacy approaches from the earlier slides but before I dive into the native file system API let me just quickly highlight the progressive announcement I'm browsers that don't support Canada filesystem API hello the legacy scripts you can see the network tabs of Firefox and Safari here however on Chrome only the new scripts are loaded this is made elegantly possible thanks to dynamic imports that all modern browsers support as I said earlier the grass is pretty green these days let's look at the actual native file system API based implementation for importing an image I call window choose file system entries and pass it an accept option parameter where I say a month image files both file extensions as well as mime types are supported this results in a file handle from the file handle I can obtain the actual file by calling its gate file method exporting an image is almost the same but this time we need to pass a type parameter save file to the choose file system entries method so I get a file save dialog before this wasn't necessary since open file mr. default I said the accept parameter similar as before but this time limited to just PNG images again I get back a financial but rather than getting the file this time I'm creating a writable stream by calling crate writable next I read the blog which is my greeting card image to the file finally I close the writable stream everything can always frame the disc could be out of space there could be a write or read error or may be simply the user can tell stuff ideologue this is why I always read the calls in a try-catch statement I can now open the file as before the imported file is drawn right onto the canvas I can make my edits and finally save them with a real save dialog where I can choose the name and storage location of the file now the file is ready to be preserved for the eternity apart from storing files for the eternity maybe I actually want to share my greeting card this is something that the web share and web shared target api's allow me to do mobile and more recently also drastic operating systems have gained native sharing mechanisms for example here is safaris share sheet on Mac OS check it from an article on my side block Tommy calm and afflict the share button you can share a link to the article with a friend for example by the native messages and the code to make this happen is pretty straightforward I call navigator dot share and pass it an optional title text and Ural but what if I want to attach an image whether one of the web share a P I that you can see on the screen doesn't support this yet the good news is that web share level two has added file sharing capabilities let me show you how to make this work with a fool greeting card application first I need to prepare a data object with a files array consisting of one blob and then a title and a text next as a best practice and the use of the new navigator dot can share method but does what its name suggests it tells me if the data object I'm trying to share can technically be shared by the browser if navigator can share tells me the data can be shared I'm in the final step ready to call navigator dot share as before again everything can fail in the simplest way when the user cancels the sharing operation so it's all wrapped in try-catch blocks as before I use a progressive enhancement loading strategy if both share and can share exist on a navigator object only then I go forward and load shared on MJS via dynamic import on browsers like mobile safari that only fulfill one of the two conditions I don't load the full functionality if I tap the share button on a supporting browser native share sheet opens I can for example choose Gmail and the email composer Richard pops up with the image attached up next I want to talk about contacts and when I say contacts I mean contacts as in the devices address book when you write a greeting card it may not always be easy to correctly write someone's name for example I have a friend who prefers her name to be spelled in Cyrillic letters I'm using a German courts keyboard and I have no idea how to type their name this is a problem that the contact thicker castles since I have my friends stored in my phone's contacts app by the contacts picker API I can tap into my contacts from the web first I need to specify the list of properties I want to access in this case I only want the names but for other use cases I might be interested in telephone numbers emails avatar icon or physical addresses next I configure an options object and set multiple to true so you can select more than one account finally I can call navigator without contacts at select which results in the desired properties once the user selects one or multiple of their contacts in fugu greetings when I tap the contacts button and select my two best pals said again makarevich green and Laurence Edward Larry Page you can see how the contacts picker is limited to only show their names but not their email addresses or other information like their phone numbers the names are then drawn onto my greeting card and by now you probably learned the pattern I only load the file when the API is actually supported up next is copying and pasting one of our favorite operations as software developers is copy and paste as greeting-card process at times I may want to do the same either paste an image into a greeting card and working on or on the other way around copy my greeting card so I can continue editing it from somewhere else the I simplify API about from text also supports images let me walk you through how I have added copy and paste to the FUBU greeting set in order to copy something onto the system's clipboard you need to write to it the navigator to clipboard or write method takes an area of clipart items as a parameter each clip or item essentially as an object with the blob as a value and the blocks type as the key to paste I need to loop over the clipboard items that are obtained by calling navigator or clipboard Audrey the reason for this is that multiple clipboard items might be on the clipboard in different representations each clippard item has a types field that tells me in which mine type the resource is available I simply take the first one and call the clipboard items get type method passing the mime type I obtained before and almost needless to say by now I only do this on supporting browsers so how does this work here I have an image open in the Mac OS preview app and copy it to the clipboard when I click taste the fugu readings app then asks me where I want to allow the app to see texts and images on the clipboard finally after accepting the permission the image is then pasted into the application the other way round works too let me copy a greeting card to the clipboard and then open preview and click file and then new from clipboard the greeting card gets pasted into a new untitled image another useful API is the bedding API as an installable PWA fugu greetings of course does have an app icon that users can place on the App dock or the home screen something fun to do with it in the context of FUBU greetings is use it as a pen stroke counter with a batting okay it is a straightforward task to do this I've added an event less than that one pointed down increments the pen strokes counter and sets the item whenever the canvas gets cleared the counter resets and the badge is removed in this example I've drawn the numbers from 1 to 7 using one pen strobe for each number the batch counter on the icon is now at 7 this feature is a progressive enhancement so the loading logic is as usual want to start each day fresh with something new a neat feature of the FUBU greeings app is that it can inspire you each morning with a new background image to study a breeding card the app uses two prokaryotic background sync API to achieve this the first step is to register a periodic sync event in the serviceworker registration it listens for a sync tag called image of the day and as a minimum interval of one day so the user can get a new background image every 24 hours the second step is to listen for the periodic sync event in the serviceworker if Devon Tech is the one that was registered in slider go the image of the day is retrieved for the get image of the day function and the result propagated to all clients so they can update their cameras and captions again this is truly a progressive enhancement so the code is only loaded when the API is supported by the browser this applies to both the client code and the service worker code on non supporting browsers me of them is loaded note how in the serviceworker instead of a dynamic input they use the classic import scripts function to the same effect sometimes even with a lot of inspiration you need a nudge to finish it started greeting code this is a feature that is enabled by the notification triggers API as a user I can enter a time and I want to be nudged to finish my greeting card and when that time has come and I get a notification that my greeting card is waiting after prompting for the target time the application schedules the notification with the show trigger this can be a timestamp trigger with a previously selected target date the reminder notification will be triggered locally no network or server side is necessary as everything else I've shown so far this is a progressive enhancement so the code is only conditionally loaded I also want to talk about the wakelock API sometimes you need to just stare long enough on the screen until the inspiration kisses you the worst that can happen is for the screen to turn off the very oka API can prevent this from happening in full readings there's an insomnia checkbox that when checked keeps your screen awake in a first step they obtain a wake lock with the navigator like dog got request nod I pass it the string screen to obtain a screen back lock I then add an event listener to be informed when the weight load is released this can happen for example when the tap visibility changes if this happens I can when this happens visible again we obtain the wait look yes this is a progressive announcement so you only need to load it when the browser supports the API at times even you stare at the screen for hours is just useless the idle detection API allows the app to detect user idle time if the user's detected to be idle for too long the app resets to the initial state and clears the campus this API is currently gated behind the notification permission since a lot of production use cases of idle detection or notification related for example to only send a notification to a device the user is currently actively using after making sure that the notifications permission is granted I then instantiate the idle detector a register in event listener that listens for idle changes which includes the user and the screen state the user can be active or idle in a screen can be unlocked or locked if the user is detected to be idle the cameras clears I gives the eye detector a threshold of 60 seconds and as always I only wrote this code and the browser supports it whoo what a write so many API send just one satellite and reminder we never make the use of pay the download cost for a future that their browser doesn't support by using progressive enhancement and make sure only the relevant code gets loaded and since with HTTP to reverse are cheap this pattern should work well for a lot of applications although at times you might still want to consider a bundler for really large apps this has been a short overview of many of the ApS we are working on in the context of project fool definitely check out our landing page they can find links to detailed articles for each API that I've talked about if you're interested in FUBU greetings go find and fork it on github and with that thank you very much for watching my talk you can find me as tomahawk on github Twitter and the web in general I'm looking forward to answering your questions and I hope you enjoy the rest of website deaf life [Music] [Applause] [Music] hi I'm Damian a web ecosystem consultant at Google this talk will explore how different companies are building fast are resilient experiences in the world will use the war box libraries to show how to implement four different patterns in your site but all of these features can also be implemented by manually writing the serviceworker code our first pattern is called resilient search experiences and can be applied to any site that offers some type of search functionality when a user searches for a topic in Google search for Chrome in Android devices and loses connection instead of the standard network error page they are presented with a custom offline page asking if they want to opt in for notifications if the user accepts the permission once the connection is back they will receive a web push notification inform me that the search result is ready clicking on the notification will take the user to the result screen this is a great way of keeping the user engaged while letting them complete the task they were looking for at the heart of this implementation is the background sync API which lets you differ actions until the user has stable connectivity in war box this can be implemented very easily first you can define a network only cache in a strategy for the search endpoint so this request always go to the network then you can pass a background sync plug-in to take care of the offline scenarios let's see how the plugin looks like the waterboxx background scene plugin receives the name of a queue to store failed requests to be retried later the plug-in also receives an unseen callback which will be called once the connection is recovered inside the callback you can retrieve any fail request process them and inform the user of the result for example with a notification before moving to the next pattern let's take a look at an important detail from this implementation you might have noticed that the notification permission is requested when the user loses connection a duck the user understands the value of the service and knows that the notification will deliver timely and relevant updates this is an example of a good implementation of the web push permission our next pattern is adaptive loading with service workers and will allow you to provide a fast experience regardless of the network and the device Tara is one of the biggest media sites in Brazil they have a large user base coming from slow and fast connections to provide a more reliable experience to all their users they are combining service workers and the network information API to deliver lower quality images to users on 2g or 3G connections Tara Duda strategy to the next level when users are navigating on slow connections they deliver the amp version of the articles which are more lightweight and tend to perform better under these conditions to implement this functionality in war box you can first apply a cache first strategy to images then you can pass an exploration plug-in to limit the number of entries in the cache you can extend this strategy by creating a custom plugin that we will call adaptive loading plug-in inside the plug-in you can listen for the request will fetch callback that will be called before the request is made so you can apply a transformation to it inside the callback you can check the connection type if it's a slow connection you can create a new URL for a lower image quality finally you can create a new request based on that URL and fetch the most appropriate image file according to these conditions if you are using cloud inari there's a war box cloud in re plug-in making this feature even easier to implement check it out as you might have noticed the first two buttons have some things in common we have combined the functionality of runtime caching strategies with plugins this shows one of the benefits of using were box allowing you to extend the standard features in a very see way let's move now to the second part of the talk our third pattern is called instant navigation experiences and it's useful for any type of site performing a task in a website might involve several stacks each of them meaning a navigation request navigation requests live requests for HTML pages are normally satisfied via the network this means using a cache control header of no cache or a max age of zero to ensure that the response is reasonably fresh having to go against the network means that each navigation might be slow or at the least not reliably fast to speed up these navigations you can apply a technique called prefetching in this example MercadoLibre the largest e-commerce site in latin america dynamically injects lean prefetch tags in listing pages to accelerate parts of the flow but prefetching is not only useful for ecommerce sites Italian sports port out-build Giulia sport you see service workers to prefetch the most popular posts that appear in the home page before the user even clicks on them as a result load time for navigation to articles have improved by 78% and the number of article impressions has increased in 45% prefetching is commonly implemented by using a resource hint in your pages link prefetch the tag tells the browser to fetch a resource at the lowest priority and keep it in the HTTP cache for five minutes in the serviceworker side you can intercept requests for HTML pages so that you can extend the lifetime of the prefetch resource beyond the five minutes window for HTML pages estelle what revalidate strategy is a good option to respond quickly from the cache while simultaneously keeping it up-to-date before moving to the final pattern there's a slight variation of this technique if there are using resource in the page some developers prefer to delegate prefetching completely to the serviceworker for that you need to implement a page to serviceworker communication technique the war box window package allows you to do that so if you're interested on following that route you can check that out we have reached the end of our talk our final pattern is app shell UX with service workers and it's useful if you want to make multi-page apps feel like single page applications that has become one of the favorite platforms for software developers the architecture of their side is a multi-page up their team was interested in the benefits of the app shell model but didn't want to incur in a measure architectural change so let's see what they did first they created partials for the header and the footer of the homepage these assets are added to the cache at the serviceworker install event what's commonly referred to us pre-caching the content of the page is the only part that's actually being fetched from the network when navigating but the key ingredient of this solution is the usage of streaming thanks to that bytes can start being painted in the screen before the full response is ready war box you can start by creating a regular expression too much requests for patience then you can pass an array of stream responses to compose for the header of the footer you can use a cache first strategy for the content you can use a network first all these streaming sources will be composed by war box and sent to the client thanks to streams the header can start being painted as soon as you speak up from the cache without having to wait for the full response we have seen for advanced patterns for speed and resilience as a complement of this talk we'll be allowing guides and cold ups so you can see them in more detail please check web dev slash progressive works and what devs reliable thanks for watching [Music] you [Music] [Applause] [Music] hi i'm andre today we're going to answer some frequently new features and capabilities for installed petaboys that were reserved previously only to native apps and to tell us more about what is new and help us with some hard questions we have a guest hi PJ tell us a tell us about your role at Google thanks so much Andrzej I'm PJ I'm a product manager on the chrome web platform team I work on progressive Web Apps usually called pwace and basically progressive web apps or modern applications built using web technologies that are making users happier pwace have a lot of capabilities of which one is that they can be installed into a user's computer just the same as any other application oh cool so that means we have exactly the right person in their home in the room for people in the audience who are not yet familiar with installable petaboys can you tell us a bit more about what they are and where they are available being a sole is really a standout feature for PW AAS because it's giving web developers the ability to make applications that can be started from the Start menu on Windows from the application folder on Mac the home screen on Android and iOS and these can really look and feel like any other application on the device so for applications that users are using repeatedly being installed means that that app is a little bit more top-of-mind for the user because that launching surface is is immediately accessible to the user they don't have to navigate anywhere in the browser to get to get back to the application it also means that the application is showing up in the activity switcher as a separate app and that makes install quite attractive to developers but I want to be clear that a pw8 doesn't have to be installed to be a PW a being installable is just one property of a PW a us this question about distribution so let's talk from what about where PW A's are available so first PW eyes can be installed directly from the web browser on both desktop and Android and on desktop pwace can also be listed in the Windows Store on Android you can find PW a powered Android apps in the Play Store these is a technology called a trusted web activity you also see pwace in the Samsung store you might have heard that pwace are showing up in the chroma West Play Store and that's an early access feature I'm really excited about so let's save a little time at the end of the session to talk more about that oh I'm really looking forward to learning more about Chrome OS Play Store but before that can you tell us about the recent features that you think are the most exciting for developers I really wish that we had time to go into everything that shipping because there's a lot happening right now but I'm gonna have to just pick a few favorites for today so the features that I'm most excited about are some of the things that web developers could previously only do using a hybrid technology like an electron app or a Cordova app and to begin here let me just mention that the ability to install pwace on desktop is still really new so for those of you the audience who have been paying close attention I might've seen the announcement at i/o last year this might seem like old news but I think for a lot of the web development community this is still a very new feature and people are still getting used to the super power that install can happen everywhere you can now write one app and have it be installable on desktop on tablet on smartphones and users can discover that app on your website in search results in play in the Windows Store in a Samsung store and this is giving web developers a really unprecedented reach for distribution of their applications so I'm just super excited that this is now possible for they have install across all of these different screens and through all of these different channels the other features that I'm most excited about are all the capabilities that were previously only possible with Cordova or electron so for example registering a file type handler for an app offering an immersive mode so creating better web games through an immersive mode and adding context menus for shortcuts and more so the file type handler would allow a user to start a web-based image editor by double clicking on an image in their OS File Explorer that's that's exciting exactly that and so like with file type handling you can register a file extension or mime type so let's say that you've written a new type of image editor and you can edit jpg and pink files you could register a file type extension for those file types and then those file types will automatically open in your editor if the user double clicks on those a word of warning file type handling isn't quite here yet we expect it to go into Oranje trial in chrome 85 in August and to be available generally sometime in the fall or winter looking forward for this one to go stable tell me more about the immersive mode what does that mean immersive mode is a term that's just a board from native it's a full-screen mode and basically it removes all of the operating system decorations so no status bar no navigation bar and this is great for games or other media basically when you want to be able to address every single pixel on the screen so I could start a video player a full screen from daikon and a home screen nice and what about up short codes sure absolute cuts are a way to provide quick access to important functions in the app directly from the app icon so for example on Android you might be familiar with a long press on the app icon on the launch screen so or on the home screen so if you were to long press on a home screen icon for say a mail application you might see compose functionality directly in the menu that appears when you long press on the mail client app shortcuts also work on desktop operating systems and that support will be arriving in chrome 85 interesting so that's like deep linking into parts off might be the Blooey directly from the icon that's on the home screen exactly switching gears a little bit we launched tracer to web activity at last year's i/o and since then we have many feature requests and questions from developers and I wanted to go through some of those with you today first developers have pointed out that the wait permissions work in the browser any native is different and that may stir users a little bit confused as an example native apps getting a notification permission by default while web apps need to need the users to accept the permission first how are how are we planning to solve those inconsistencies so let's just start by just sharing my perspective on the philosophy here of I don't think that users should need to think about what technology was used to build the application that they're using users should really just have a job you know users just have a job to get done and we want to help developers help users as easily as possible so wherever it makes sense I think an installed web application should use the operating systems typical UI for things like managing permissions launching and switching between applications just to match the users expectations for how things should behave on the device that they're using so we've introduced this concept of notification delegation into installed pwace and that means that when a PW is installed it will delegate the notification permission into the native setting area on Android so another difference between an app installed from Play and a web for example is that an app install from play automatically receives notification permission so we want that experience to be the same for Android applications that were built using a PWA and that's why we've delegated the web notification permission to the notification settings panel in Android and these apps can be configured to auto enroll users and notifications so that they just look and feel and behave exactly like any other Android app and the user doesn't even need to know that this application was built using web technology in the future we're going to be adding location to the Settings panel to of course there won't be any auto enrolment for location because users are not Auto enrolled in location for location permission on in Android native apps either so we're just gonna match what the behavior is between you know for a native application for apps that are installed for say the Play Store or from any other you know distribution channel where the user you know may or may not be aware that this application is a web application we're going to continue as well to delegate more permissions and match OS preferences over the next few releases got it so this will make the experience more seamless to users regardless of the technology that developer used to build app another frequent request developers sometimes feel that when they make and write an Android app using pdaboy and tracer to web activity they should have a communication channel between the native application and the web app this would allow them to use native platform capabilities where an equivalent on the web doesn't exist already is this something that is being considered I really glad you asked this question because this is exactly the kind of product question that I really love and I'd like to hear from our audience on this one so today you can pass parameters into a trusted with activity when you launch it and you can use intents to leave the trust of activity and pass some information into another activity inside of your app and we're considering adding support for a message bus for example we could extend post message to enable a bus with this functionality however I don't have use cases from developers on exactly what they need here most capabilities are already in the web platform or are planned in you know it herb plant as part of the fugu effort to add web capabilities to the web platform so if the web platform has missing capabilities I'd really rather add that capability to the web then create a message bus to native because if a capability is part of the web platform then it's gonna work everywhere and developers only need to have one code base which is simpler and that code base will work in multiple browsers whether the app is installed or not installed etc so I'd like to turn this just to do a question for our audience what do you need to do in native code that you can't do today in the web platform and other things we could do to improve the web platform so you wouldn't need to do that in native or perhaps it's something that could only be done in native and you really need that message bus I'd really like to hear from you about this cool I'm also looking forward to hear from folks on Twitter or if you're watching this live on the live chat many developers have a native application and prompting users who install a PDA in the in the browser when they already have the native app installed can lead some confusion is there a way to prevent the prompts from showing when the native app is already installed so that's a great question it's also probably one of the the top concerns that I hear from teams that are implementing a progressive web app it's it's called channel conflict and it arises where you're not sure which experience is going to be best for the user so I think the most important thing for developers to know is that you do have full control over the promotion a PW install so you know you don't need to worry about the browser promoting your PW a if you don't want it to there are ways you can prevent the browser from promoting the installation of your PW a if for example you have a native app so let's let's talk about how that works first in the web app manifest there's a couple of fields you should know about one is called the related applications field and this is where you can list native apps for Android and iOS and then there's another boolean field called prefer related apps and if this is set to true the browser's not going to promote the install of your PW a secondly there's an event that fires when a PW a passes the install ability check in the browser and when this happens developers can call a prevent default method and that's gonna block any promotion of the PW a install in browser UI finally there's a new JavaScript API just landed earlier this year called get installed related apps and this is gonna let developers inspect if the user has native apps installed on the device that are associated with the origin that the user is currently on and just to be clear this isn't gonna let you see any app that the user happens to have installed in the device the app has to be associated with the origin that the user is on this API does allow for a lot of programmatic flexibility for developers so it means you full control which experience do you want to promote to the user you could use for example user behavior you could provide the user with preferences in your HTML it's really up to you how you want to use this control but it does give you as the developer a lot of control over what you promote to the user and when it happens so this means I can use this API to check my notifications installed and make decisions like showing that sounds crane prompt or not what if my native app is using twisted web activity willed is a pice to return so yes absolutely this doesn't mean that you can use the API to check your native app is installed at Russell web activity is really just an Android app so it will show up just like any other Android app and to say this API will return it it will also return if the if the app is a it has been installed from the web browser so a PWA installed from the web browser will also get returned by kit installed related apps cool on the developer experiences side we've been working on tools like bubble wrap to help developers view their project to use interests of web activity but many developers is you wonder if it wouldn't be easier if you could just copy paste in your own to the Play Store that's a great question so the reason why we've been focusing our efforts on making this easier for developers on bubble wrap is that we could create a much more powerful much more flexible system for developers for building Android apps using a command-line utility like bubble wrap then what we could do in a web interface so app stores are really a different ecosystem and they have different requirements and policies and we believe that developers should have powerful tools that they need to rethink the experience of their applications for this environment and we also want to avoid giving developers the perception that they could just drop a website into the store without thinking about that experience so there are all kinds of design decisions that should go into building an Android app whether or not it's a PWA powering that up for example you know what's the splash screen it'll look like when you're gonna hide it when to show content didi notifications there wouldn't be that's this kind of flexibility for configuring these options with a web interface that being said we wanted to be as easy as possible so we've worked to streamline it to the maximum extent that we can with bubble wrap and make it a powerful but flexible and easy-to-use developer tool what about police or policies do Android apps that use PW inside the tricity web activity Stu needs to comply to those policies I think you said the magic word there which is Android app it doesn't matter how your Android app is built whether it's built using PWA s and web technology or whether it's built using Java or : play policies apply to all Android apps distributed in the Play Store and therefore they also apply to Android apps built using progressive web apps gotcha so same same store policies apply what about applications designed for children can developers use web technology those apps if the target audience for your application is children you need to comply with the Play family policy requirements and these requirements are intended to help keep minors safe from inappropriate content unfortunately that's really difficult for the review teams to evaluate with web apps where the content can change and not only can the first party content change but it's really easy to include third party content inside of a web application which can be unintentionally inappropriate let's imagine that you were using you know an advertising network or something else where you're loading content in from a third party site you might not be able to verify yourself for sure whether or not that content is always going to be appropriate so for the time being it's not possible to build Android apps using trusted web activity that comply with Play family policy we are working on ways to make this possible in the future got it so it seems PWAs are crossing over ecosystems and developers need to adjust some of their expectations from that developers using trusted web TVs are also expected to fulfill your quality criteria is that wide that criteria exists yeah nobody wants an app store that's gonna be cluttered with low-quality apps and we also want developers to you succeed with their apps in the Play Store keep in mind something that's really different about distributing through the Play Store than it is to you know just sort of build a PWA on your own site is that these apps have user ratings and reviews and we want to make sure that developers are set up for success to get good ratings and reviews on an aunt for their app so at a minimum users expect apps that they install from the Play Store to look and feel app like to be fast to work offline and that's why we have quality criteria for pwe than in the App Store and this is exactly what progressive web app criteria has been intended to do from the very beginning so first I want to share that there are certain types of events that can happen to a web application that are effectively a crash and these are things like you know a 404 happening these are things like failing an offline check when the user goes offline and returning to chrome dino this is effectively a crash failing the digital asset links verification which is something you need to do with a trusted web activity to verify that you are the owner of the content and the owner of the application in the app store so if any of these things happen starting in chrome 86 in October we are going to be mapping those crashes into android vitals crash events and you will see Android apps begin to crash if you if users are running into 404s in your application etc so this is something that developers should be aware of and we're we're making another announcement with more details about this the second thing is on the performance side right now don't have a date to announce with respect to enforcement of enforce of performance but developers should be aware that the criteria is a full batch PWA and a light has performance score of 80 or better and you can use webpagetest.org slash easy or PageSpeed insights against your start URL as the fastest way to check whether or not you're meeting this criteria because having the app launched quickly is an essential part of having a great application experience for your users we will be providing a lot of notice as to when enforcement will begin it will be in 2021 it won't be in 2020 for the performance and full batch PWA scores so expect hear more about this later in the year so less one tutor has recently launched their pdaboy on the chrome s Playstore which was quite exciting can you tell us more about how they did how they did it and when it is this is becoming january available i'm really excited about this right now this is an early access program and it requires manual intervention from our team members so it's not something that we can extend to everyone in the community but we're working on getting it to general availability and when that rolls out it'll be possible for everyone to just do this themselves I'll give you a hint it uses trusted web activity so if you're building a great trusted web activity it'll be really easy to make your progressive web app available in the Chrome West Play Store in the future and I hope we could share more about this in the second half of the year so what are soda web activities are coming to Chrome OS nice well I think we covers a lot I wish we had more time to discuss our YouTube and though so for those of you who are watching please do reach out to us or Twitter if you want to give feedback and if you're joining watching this live please join us on the live chat we'll see you there and thanks so much for watching yes thanks for watching [Music] [Applause] [Music] hi everyone thanks for joining I'm PJ I'm a product manager on the chrome web platform team responsible for progressive web apps notifications and permissions today's talk is about quieter notification permission prompts and how recent changes to how chrome handles notification permission requests can make browsing for the web a little better for everyone there's also important information in here for developers who use notifications to help you improve your user experience improve your notification accept rates and to tell you about upcoming changes that will detect and flag abuse abuse of notification prompts or content if you're not familiar with them web notifications are a channel for communicating timely and contextually relevant information to the user mostly these work just like push notifications in mobile apps except they can also work on desktop on Windows Mac as well as smartphones on Android for example web notifications appear in the notification drawer and on desktop they typically appear in the top right corner of the screen in some cases notifications aren't just helpful they are almost essential to the apps functionality for example if you had an incoming call from a communication app like google google duo or chat that's not something you want to know about later you need to know about it right away of course not everyone uses apps that require notifications and not all websites are putting the needs of their users first and that means that we are seeing a lot of websites out there that are misusing notifications in ways that are annoying or could be abusive before we get into that though I want to talk about how users get enrolled in notifications to receive web notifications a user needs to accept a notification permission request when websites prompt users out of context for a notification such as when a user first arrives on the web site it can be a pretty annoying distraction both from the browsing experience itself as well as from the website's content worse some abuse of web sites look for ways to trick users into accepting notifications that are then used to promote we're or undesired content I want to cover why we have notifications in the web platform in the first place in a little bit more depth the web platform is there to enable web developers to create powerful applications and web notifications are part of that toolkit without notification support there would be entire types of apps that would be simply impossible to build using web technology so for example messaging apps calendars ecommerce for food delivery notifiers taxi or ride-sharing apps all depend on notifications to provide a timely tap on the shoulder to the user and well you can imagine that some of these apps might be usable without notifications you can see that most of the time you're probably going to want one we've also all equally experienced some of the misuse of notifications though that includes things like unwanted marketing promotions or content that just isn't very important or relevant to us at a given moment to address this problem starting in chrome 80 that was released in January of 2020 we started making changes to how these notifications request work tell me browsing the web safer and less interruptive we're gonna get into that new UI in the next slide in chrome 80 we added quite notifications UI quite notification UI is less interruptive but it still lets the users know that the request has been made there's a little bit of animation to catch the eye but on desktop the dialogue is in the omnibox so it doesn't actually cover any part of the web content on mobile the notification prompt used to be a modal in normal UI but in quiet UI it's an easily dismissed info bar at the bottom of the screen quite notification UI aims to reduce the visual priority and interruptive 'no snowed vacation requests on desktop what you're seeing in this example on the left you'll notice the bell icon initially animates with text indicating that notifications are blocked on the site in mobile the quiet UI is now an info bar in both of these cases in product help explains to the user why notifications were blocked on the site quite notifications UI was created specifically to address the concerns i mentioned earlier in this talk we receive frequent plates for users in Chrome feedback about disruptive notification permission prompts or unwanted notifications that being said there are services with tens or hundreds of millions of users like messaging apps and calendars that are depending on timely web notifications every single day let's talk for a moment about how users get enrolled in quiet notification UI there's several ways that this can happen first users could just enroll themselves manually by changing their preferences in Chrome settings second sites that have very low accept rates for notification permission requests will be automatically enrolled in quiet notifications UI and this is currently sites that have the lowest few percentile of notification except rates so the absolute rate needed for quote quite notification UI does change over time because we are using percentiles we'll also periodically increase the accept rate percentile that's needed to preserve normal notification UI we always keep a control group of users that are in normal notification permission UI so that if a sites accept rates improve we can remove it from quiet UI and enforcement third there are some users who almost never accept any notification permission requests these users simply don't want notifications and for these users we adaptively enable quite notification mode on their behalf in chrome settings if they repeatedly block notification requests as sites improve their behavior and use of notification permission requests we expect that there will be fewer and fewer users who are adaptively placed in quiet notification UI mode finally and this is starting in chrome 84 which is coming up soon we're going to begin enforcing against abusive notification prompts the try to mislead users are fishing for private information or promoting malware in this case in addition to quite notifications UI the user is going to be advised in the notification prompt that the site may be trying to trick them so what should you do to make sure your website is not enrolled in quite notification UI well first and foremost if your prompting users to enroll notifications as soon as they arrive on your website please stop doing that this is the easiest way to improve your notification accept rate very few users will accept a notification from a site they're visiting for the first time and if you think about it why would they we're all experiencing information overload wait until you know your user better and you know you can add value for your user before you prompt them you can and should prompt your user to accept notification when there's a clear user benefit and in the context of the user's journey in your application websites that ask for notification permission in the context where the benefit is clear the user have 80% accept rates or higher that should be your goal even if you do the best possible job with your notification prompt 2ux it's possible that some of your users may be in quiet notification UI mode so the first thing you want to check here is to make sure that the accept rates on your site or what you really expect them to be notification accept rate data is in the chrome user experience report which is a public database containing important information about real world chrome metrics for popular destinations on the web there's a minimum number of users and decisions that are required for data to be available and the chrome user experience report and that's the help with preserving visitor privacy so if your site doesn't have data and the chrome user experience report you may need to get that information from somewhere else for example most notification service providers will have this instrumented so that you can check your accept rates or if you've rolled your own notifications implementation you may need to add your own instrumentation it's also a good idea to look at the notification accept rates of sites that are like yours in the chrome user experience report so you can get a sense for what the benchmark accept rates are and aim to be better than those the article linked here in this slide will give you more details about how to use the chrome user experience data set to learn more about users notification permission prompt decisions on your website so the second thing you need to think about is how can you make your notification requests more in context I know I mentioned this before but it bears repeating you want to make absolutely sure that you're asking for a notification permission at a moment in the users journey that makes sense to them in this example we're showing a notification request the first time the user receives a response to their first chat this is a perfect moment even with quiet notification UI it should be obvious to the user why they would want to accept notifications the activity and motion in the web app combined with the motion of the browser prompt should be sufficient cues for the user to enroll in notifications if they want them if your user doesn't accept notifications with this in context pattern there is a pretty good chance that they just don't want notifications and you should respect that decision before I finish I want to share a little bit about what's coming next for notifications first we're planning to increase the accept rate percentile that's needed to have normal notification prompts since this is a percentile as well something to keep in mind is that if other sites are improving their notification UX and you're not your site may be slipping into a lower percentile and quite notifications may be activated for your site if your site is a notification to accept rate of over 50% you're in safe territory but we recommend aiming for 80% or better second chrome places a high priority on user privacy and security and we intend to take more steps to protect users from abuse of notification in the future that includes more protections for abusive notification content as well as retroactive action to help users who may have already enrolled in notifications from abusive sites prior to the release of chrome 84 most important as we improve the signal-to-noise ratio of the web notification ecosystem we hope users will come to view notifications as being more helpful if this happens it means we're doing a good job protecting users from unwanted notification prompts an unwanted notification content ultimately this will help developers who use notifications for key functionality in their apps as users are more likely to accept notifications when they have less reason to be worried about spammy or abusive notifications thanks again for joining today everyone have a great day [Music] [Applause] [Music] true or false indexdb is limited to 25 Meg's false gone are the days of tiny storage quotas true or false local storage should be avoided true it's synchronous and may cause performance issues by blocking the main thread all right here's another one true or false cookies are a great way to store data false they've got their uses but to never be used for storage how about this one app cache is a great way to make your app work offline yeah a trick question absolutely false app cache is awful and it's going away soon thankfully so how should we be storing data and caching our critical app resources on the client how much can we store how does the browser deal with eviction and be sure to stick around to the end and I'll tell you how you can start Chrome with only a tiny storage limit so you can test what happens when you exceed your storage quota I'm Pete LePage let's dive in to storage on the web's modern storage makes it possible to store more than two small chunks of data on the user's device even in perfect wireless environments caching and other storage techniques can substantially improve performance reliability and most importantly the user experience with the cache storage API you can cast your static app resources like HTML Javascript CSS ensuring that they're always instantly available and with indexdb you can store all kinds of data article content users document settings and more index DB and the cache storage API are supported in every modern browser they're both asynchronous and will not block the main thread they're accessible from the window object web workers and service workers making it easy to use them anywhere in your code there are several other storage mechanisms that are available in the browser but they've got limited use and may cause sickness in performance issues if you're concerned about storing large amounts of data on the client don't be unless you're trying to store several gigs modern browsers typically won't even bat an eye and even then it really comes down to the amount of disk space available on the device of course implementations vary by browsers Firefox allows an origin to store up to two gigs Safari allows an origin to use up to one gig and when that limit is reached Safari is currently the only browser that'll prompt the user to increase that limit and Chrome well look it's a little complex but to stick with me here chrome and most other chromium based browsers limit storage to 80% of the total disk space and each origin can only use 75% of that for example if you had a 10 gig hard disk chrome with limited storage to 8 gigs then each origin would be limited to 6 gigs essentially each origin will be allowed to use up to 60% of the total disk space it sounds complex but there's an easy way to see what's available in many browsers you can use the Storage Manager API to determine the amount of storage that's available to the origin and how much storage that you're already using it reports the total number of bytes used and makes it possible to calculate the approximate bytes remaining unfortunately the storage manager API isn't implemented in all browsers yet so you must use feature detection before using it but even when it is available you still need to catch over quota errors in some cases and I'm looking at you chrome it's possible for the available quota to exceed the actual amount of storage available most chromium based browsers factor in the amount of free space when reporting the available quota chrome does not though and it will always report 60% of the actual disk size this helps to reduce the ability to determine the size of stored cross-origin resources so what should you do when you go over quota most importantly you should always catch and handle right Aires whether it's a quota exceeded air or something else then depending on your app design decide how to handle it for example delete content that hasn't been accessed in a long time or remove data based on its size or provide a way for users to choose what they want to delete both indexdb and the CAF api throw a Dom error named quota exceeded error when you've exceeded the quota available for indexdb the transactions on abort handler will be called passing an event that event will include a Dom exception in the error property and if you check the name of the error it'll return quota exceeded error for the cache API rights will reject with a quota exceeded error Dom except some data is stored in the browser can be cleared in a couple of ways it's most commonly initiated by the user choosing to clear data in the browser's site setting panel but it can also happen when faced with storage pressure like low disk space in this case browsers typically automatically delete data from the least recently used origins and continue to delete that until the storage pressure has been relieved if the app hasn't synced data with the server it will cause data loss and means that the app won't have the resources needed to run both of which can lead to a negative user experience thankfully research by the chrome team shows that this doesn't happen very often and it's far more common for users to manually clear storage thus if a user visits your site often the chances are small that data will be deleted let's take a look at a specific example of how automatic eviction might happen in chrome origin a is the least recently visited site origin B is the next least recently visited site and so on origin II and origin K are getting close to their quota limits but they haven't reached it yet and the overall usage is less the total quota so nothing is going to be evicted origin B has a star next trip because it was granted persistent storage meaning that it can only be deleted by the user check out my article on web dev for more info about persistent storage when you should be using it and how to request it now let's say the user visits origin n again which happens to be a music playing site the user saves a few more songs for offline listening now each origin is still within its quota limit but Chrome has exceeded the overall limit to get back under the overall limit chrome will start evicting stored data from the least recently used origin first and continue until it's back under the total limit Firefox and other chromium based browsers work in essentially the same way Safari is a little different when it's out of storage it will prevent anything new from being ready but they recently implemented a new 7-day cap on all writable storage including indexdb serviceworker registrations and the cache API this means that after using Safari for seven days and not interacting with the site it will evict all content for that site this eviction policy does not apply to progressive web apps that have been added to the homescreen essentially installed pwace check out the web kit blog linked in the description for complete details modern computers typically have large hard drives which makes it hard to test the over quota failures so here's a little pro tip create a small RAM disk here I've created a 500 mega con my Mac then start Chrome using the user data der flag this tells chrome to store the user profile and user data on the RAM disk chrome now thinks my disk is only 500 Meg's thus is gonna limit my storage quota to only three hundred Meg's which I can quickly fill this makes it much easier to verify that my code behaves properly when it hits those quota exceeded errors chrome dev tools also have helpful features for understanding what's going on with the data that you've stored in the application panel the clear storage we'll show you how much storage you're using for the origin and makes it easy to clear some or all of that data that you've got stored the storage panel lets you see what's in local and session storage as well as what's in index DB including the actual databases and even the individual entries and the calf storage panel shows you what's stored in cache storage gone are the days of limited storage and prompting the user to store more and more data using the cached storage API and index DB you can effectively store all the resources that your app needs to run be sure to check out my article storage for the web where I've got additional details and info on some of them not so good storage mechanisms then check out my article on persistent storage to learn how you can protect your data from being blown away even when the device is facing storage pressure see you soon [Music] hi everyone my name is Thomas and today I want to talk to you about the explorations that we've been doing with the zoom team over the past few months and some of this specific advanced api's that we've been exploring together as you've all probably seen zoom has become a staple in many homes and so it's critical that we're able to provide a good experience directly through the browser zoom does have a web version today but compared to its native client it's missing some features and sometimes misses the mark in performance we wanted to change this and so even before Cova did we started working with the zoom team to understand exactly what changes they would need and what new things in chrome they would want to create a truly great experience now zooms of course a video conferencing application you can't talk about video conferencing on the web without talking about WebRTC WebRTC is a really great full-stack solution that provides a complete package for achieving video conferencing on the web web RTC was built and standardized about ten years ago and now ships in all major browsers this makes it the best choice if you want a complete solution with broad support across browsers web party sees strength of being that complete solution can however also be a challenge for someone like zoom who have their own presto custom protocols and their own architecture zoom would rather want a set of more simple low-level api's that they can then build their own architecture and system on top of themselves and the three specific ones that we've been exploring and that I want to talk to you a little bit about today are webassembly sim D web transport and web codecs I'll mention from the start that all of these are fairly cutting-edge and most of them are in active development so while they're all in a place where you can start to play with them these aren't shipping api's just yet but hopefully this presentation will cover some of the early parts of it and by the time you're watching this it might be in the future and you'll be able to actually use these directly and lock already shipped so first all I want to talk about webassembly sim D and how it can provide really highly performant code most of you probably heard about web assembly already but as a recap web assembly is a new low-level binary format for the web that is compiled from other languages and offers maximize performance this means that you can take something like C++ or rust and then compile it into web assembly the for shipping it to the client webassembly has been out for a while and has been shipping in all major browsers for a while but we're continuing to expand it with functionalities such as Simbi which stands for single instruction multiple data to explain Cindy let's look at this incredibly simple loop that just adds to erase together without Cindy the CPU would go through this loop and add their different elements together one by one requiring four full steps but with Cindy the CPU is able to vectorize these elements and then take just a single CPU operation to add them the best part is that because compilers are so smart they can automatically detect these optimizations and do them for you in in scripting you just need to pass the - MMD 128 argument - EMCC and for rust you can pass - c target feature equals plus MB 128 this will cause the compilers to automatically find and use Cindy where possible sometimes you also want to have more explicit control and this is where you'll want to use Cindy intrinsics which let you use the Cindy instructions directly this is more detail than I can cover here but if you're interested I highly encourage you to go and check out these links simply can be used for a huge variety of things including highly performant ml models such as this hand tracking a real life invisibility cloak and real time automated background removal and this last use case is just one of the things that zoom is excited about using Cindy for they have an awesome feature where you're able to automatically remove the background so that people in conferences can't see all the random stuff that you have in your background and then replace it with fun videos or animations if you're interested in diving into webassembly and Cindy here are some of the links that should help you get started webassembly cindy is doing an origin trial in chrome m84 which will start rolling out to users in July 14th if you aren't familiar with origin trials it's basically a mechanism for you to test out features with production users while we may still be making some changes to the API you can read more about those origin trials at this link as well so the next IPI I want to get into is web transport which is a next-generation networking yeah for client-to-server communication let's look at the definition of web transport web transport provides bi-directional transport through both unreliable data grams and reliable streams based mechanisms that's a mouthful but let's see if we can't break it down and understand it a bit better first bi-directional means that it enables easy two-way communication with something like HTTP the connection has to be initiated by the client and you have to send all of the requests at once and then wait for a response with web transport you don't have these limitations and so you can enable a much more interactive session looking at the two different mechanisms unreliable data grams are one of the mechanisms for sending data through web transport these data grams are similar to UDP data grams in that they are packets of information that gets sent but with no guarantees about delivery or ordering reliable streams in contrast are similar to TCP streams and provide reliable and ordered data communication so now that we have an understanding of the definition of web transport let's understand what you might actually use it for firstly web transport will be the only mechanism to do unreliable data communication without leveraging WebRTC and this is exactly why zoom is interested in looking into web transport because it'll allow them to simplify their deployment and put it a little more in line with the other platforms that they support it's important to note though that web transport won't be just a pure UDP sockets API since it does have some requirements around encryption and congestion control it does offer an alternative to WebSockets and to understand exactly how it compares to WebSockets and WebRTC let's look at this chart so to understand the differences let's dig into each of these pieces first web transport and WebRTC offer both reliable and unreliable while WebSockets only offer reliable delivery web transport is a in development API while both WebSockets and WebRTC are widely available while WebRTC provides a fairly high-level complete solution to the problem of video conferencing web transport and WebSockets are both much lower level API s that doesn't solve everything for you but gives you more of that basic access web transport also enables multiple cancelable streams whereas WebSockets can only do a single stream and web RTC can also do multiple streams but they aren't cancelable so here is a quick example setup for how you can actually use web transport in this part of the code we really just set up our new quick transport which is specific subtype of web transport and create that object passing in the URL that we want to connect to then we just set up some simple logging function and await the transport being ready for us to use then we can simply grab the writer from the send datagrams function of our transport object which we can then use to send data at any point remember that this data that we send does not have any guarantees of delivery or the order that it will be delivered in next let's look at how you can actually read data from the server here you see a simple example where we get the reader from the get reader function and then in a classic while true loop we just read things from that reader and then detect them when we're done and console log out the actual values that we're able to read web transport is still very much in development but we do have a blog post already published about how you can use it and you can find that and more information at these various links so now it's time for us to jump in to our last and exciting API the web codecs API which aims to offer direct codec access on the web but first let's back up and remind ourselves what exactly a codec is a codec is a device or computer program which encodes and decodes a digital stream or signal while many of us have not worked directly with codecs we've all seen common examples like mp3 vp9 h.264 and many others codecs are actually used in tons of places throughout chrome such as the audio and video tags Web Audio WebRTC and the media recorder API however in all these places where it's used you can't really configure and get pure access to just the codec part for example Web Audio allows for decoding a media file but needs to work on the complete file and doesn't support a streaming based approach media recorder has some controls but they're very high level and you can't really configure it to support extremely low latency use cases as mentioned previously WebRTC does give you a lot of this control but it needs you to bring the whole package of WebRTC along and without doing that it's hard to get access to just the encoding and decoding parts that you want as a result of this lack of configuration some apps have started compiling these codecs to JavaScript and web assembly some of you may remember that this is how the awesome application screw Sh lets you resize and Riaan code images this approach is really cool and workable today but has some specific drawbacks specifically it increases your bundle size lowers your the performance cause a slower startup time and reduces the power efficiency really what you want is to avoid shipping these codecs all together and just get the direct access that you need through the codecs that are already shipping as part of the browser and that's exactly what the goal of web codecs is and in their own words the goal of web codecs is to provide web apps with efficient access to built-in both software and hardware media encoders and decoders for encoding and decoding media web codecs main advantage is that it lets you get the direct access that you need to again build your own systems on top of the basic coding access this completely unlocks some use cases like video editing since you really need that frame-by-frame access and faster than real time encoding and decoding to do this properly something that's currently completely impossible on the web platform except for maybe shipping codecs with web assembly additionally many existing things that are possible today on the web but only if you use WebRTC things like cloud gaming live streaming and video conferencing will get more flexibility about how they can interact with these codecs zoom for example is looking into using this API in conjunction with the web transport API they're hoping that they'll be able to take encoded video frames and send them up to the server using web transport at the same time that they'll be fetching down encoded frames and then decoding them to to the client providing a really smooth integrated experience next let's look at some of the simple examples for how you can use the decoder part of this here in this canvas setup part we're really just grabbing a canvases context and then making this very simple function to paint a video frame to that canvas from converting it to an image bitmap now when you want to set up the decoder part you just call this new video decoder element and you set up the output function that we defined previously as well as just constant logging out any errors then you configure it with the codec that you want to use and then you have this incredibly simple function that you just pass in your endo encoded chunk and called the decode function from your video decoder and then it does the rest of the work for you web codecs is still extremely new but for those of you who are curious you can go and check out the explainer to see what the team is currently working on we will also be doing a web dev post about web codecs so if you're seeing this in the future be sure to go and check out that and that brings us to our overview of these three new exciting api's that we've been exploring with zoom you've hopefully getting a better understanding of some of these new and advanced api s and hopefully an understanding of how they will be bringing all of us closer together in the future thank you so much for your time and I hope you enjoy the rest of the sessions good bye [Music] [Applause] [Music] you 