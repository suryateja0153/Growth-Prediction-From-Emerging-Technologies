 Good afternoon. Thank you very much for joining the HEART webinar and workshop. The first 30 minutes we're going to give a brief overview of what the HEART profiles are and then through the rest of the afternoon. We're going to go into a deep dive and talk more about The UMA standard aND different profiles about scopes and then trusted ways that you can take advantage of the HEART profiles as well. So to kick things off. I'm going to start with Nancy Lush from the Lush Group and we hope you enjoy the afternoon. Hello, so HEART enables patient choice. This section of a presentation provides an overview of HEART. Why was HEART developed and what problem it solves? What HEART is and the value of HEART to healthcare our physicians and our patients. How to address the following gaps and challenges and healthcare, a patient needs to see a specialist outside of our health care system. Too often there a long delays before that specialists gets access to the patient record. Sometimes the patient wishes to share the health data with a spouse or adult child. A patient may choose to share her health data with a research organization or a new provider wants to provide care, but does not have access with the current diagnosis or treatment history. A patient may have collected meaningful data from her IoT device, but has no way to share that with her doctor A patient with sensitive data needs a way to control fine grained sharing. Care coverage transitions as parents travel or relocate seasonally, and not easily accommodated. Patients need the ability to delegate decision making to an advocate or medical power of attorney. And then we have all the emergency responder use cases. By solving these challenges, we will empower patients to be more engaged in their own health and have more control and transparency in accessing care. We will empower caregivers to provide better care and patient data is available seamlessly. Together, these will reduce the cost of providing health care while improving patient care. And there are many pain points associated with these gaps. This is the human perspective, there's a lot of frustration of there. Patients repeatedly complete long paper forms from memory. There's a lack of patient access to the own consolidated medical record. Physicians waste time trying to find all the relevant medical information and has negative impact of care. Patients often don't remember in a unable to provide accurate medical data when asked. Physicians are forced to make decisions without complete accurate information potentially lead into inappropriate treatment. Repeat test are costly and not required not required. So why HEART? HEARt was created to address these challenges and gaps. HEART enables the patient to safely share her health records with users of theirchoice and interoperable way that respects and honors patient security and privacy in enables patient directed sharing of the clinical data. So what is HEART? HEART stands for health relationship trust. It's a set of profiles that enable patients control how, when, and with whom the clinical data is shared. HEART provides a standard to enable patient directed interoperability implementation through FHIR API's. HEART leverages existing open standards and positions for evolving this practice security standards high profiles additional security features supported by Open ID Connect. It gives patients control over how the data is shared and HEART to find the interoperable process to exchange data consistent with those open standards. HEART creates a protocol for managing both sharing of permissions and data and adheres to the highest levels of security and privacy. In the process, both patients and providers increased trust that the data is authorized and accurate. Where's the industry now? Today, providers can access patient data within their healthcare system. Further using FHIR, innovative clinical functionality can be integrated with clinical data and made available to FHIR all within the healthcare system. The industry is rolling out systems when a patient can safely access to health records from our providers EMR portal. This will accelerate patient engagement and enable innovations. I'm looking back mandate electronic health records that vision assumed it would enable the sharing of medical records. We realized, even then that we could improve care by sharing that patient medical record. During that time, the industry became concerned about patient privacy, and rightly so. But it also created roadblocks to sharing patient data HEART solves that problem while honoring patient privacy and security. I'd like to introduce the terminology of a wide ecosystem. Let's assume our patient Alice goes to a small physical doctor's office that may be perhaps be you say one to five phyisicans in that office. Probably all of the caregivers in that office can access Alice's health data, but this is what we call a narrow ecosystem. Now let's assume that Alice uses a large integrated healthcare system with many buildings across many towns and perhaps across states. It may also include several EMR systems that system may still authenticate against a common authorization server. In this instance, a primary care provider in one building and a specialist in another building both may have access to Alice's health data. But this is still a narrow ecosystem. If Alice needs to see a cancer specialist outside of that integrated health healthcare system that specialist cannot easily access Alice's data. Patients need to exchange clinical data across many healthcare systems. When we have achieved this we will have a wide ecosystem. So while HEART could run in a narrow ecosystem. HEART enables the ability to share securely across a wide ecosystem interoperably. HEART gives patients control over how the data is shared. Electronic consent, per say, are a scope for HEART, but most HEART implementations rely on electronic consent to define patient sharing wishes. When a authenticated user request access to the patient state electronic consent is interpreted to determine if the user is authorized per that patient specified policy. HEART enables sharing across multiple parties. Your authorization is provided asynchronously. So the patient does not need to be present for access. The patient makes a decision on who has access to the data bypassing limitations that may be enterprise constraints. Cybersecurity and patient privacy concerns become spotlighted and current news patients already have a greater awareness of privacy concerns and the privacy rights and options that are available. While patients still have the right now to decide who sees the data. We do not have a mechanism to ensure that their rights are honored. We expect an increased demand for these new features and need to be positioned to provide these options. The patient controls who has access to their data. Eliminating some of those traditional roadblocks and enabling seamless data exchange. HEART worked with trusted identity frameworks and evolving industry best practices. It supports true security of delegated access and fosters control for new compliance requirements. HEART works in conjunction with best practice security standards. HEART also provides more granular management overprotected resources. Often, oAuth implementation support single authorization or deny. HEART puts emphasis on more granular management because patients can define what they're willing to share and the more granular level, they get more control over what data is shared. As an example, a user may request broad access but permission could be granted for a subset of those requests, not all the exchange becomes much more dynamic and user friendly. In this example, a portal may allow users to read the patient's common clinical data set, that same portal may allow us to both read or update a care plan. As an example, the patient may choose to authorize a new specialist to read some subset of our clinical data and update her care plan. Example B demonstrates patient control over sensitive data. In healthcare sensitive data can be characterized across FHIR resource types. Since said sensitive data is cross cutting against resource type the HEART workgroup introduce special cross cutting scopes. These provide a mechanism for a patient to control how her sensitive data is exchanged. This is an example of patient granular sharing by sensitivity data is demonstrated by the consent to share project. HEART provides more granular management over protected resources. HEART leverages existing open standards, adding profiles for important use cases that are not handled interoperability today. FHIR and smart on FHIR again in rapid adoption and HEART further enables that technology for patient directed exchange. HEART uses the well known or two with authentication protocol. It enhances use cases by enabling more Open ID Connect features to support more fine grained authentication claims and more enhanced security requirements. It uses managed access to enable patient directed features in a standardized way. Some of the HEART standards of specifically healthcare standards such as HL7FHIR and smart and FHIR Well, other standards or industry standards, the healthcare industry benefits by using industry standards and learning from experiences outside of healthcare. These standards are complimentary. And together with additional profiles hard enables the patient to securely share data across healthcare systems. So again, HEART leverages existing open standards. HEART address difficult use case challenges to enable patient directed exchange. The more difficult issues have been addressed by HEART in the background. So what does this mean for users, the patient interface is easy to use and the provider interface is easy to use. As this new paradigm is adopted, and trust increases sharing private clinical data will become seamless. Ultimately, both improving health and reducing the cost of healthcare. And this example, a patient Alice creates policy to share with Dr. Erica. She selects to sharing preferences and press share the patient sharing is just that easy. The usage is also easy. The user requesting the patient's clinical data may either receive a notification that data is available or there may be a link from the EMR via CDS hooks. That user science in it has access to the clinical data. Again, accessing the data is easy. This particular example provides a view of the data, but FHIR actually provides a discrete data elements, the receiving client could act on discrete data elements, just as smart and FHIR apps currently do enabling more innovative solutions to further the cause of better care. So HEART patient and provider clients are intended to be easy to use. These companies that we know have have already implemented HEART with others, considering implementation. For more information, please refer to the implement draft at this URL. And then closing it like share several use cases. Alice may access or health records from several of our health care providers and store her data in a portal her portal enables both sharing consents and HEART. Users chosen by the patient would then have dynamic access to her clinical data. Health care system enables HEART the patient data could be available directly in a HEART client to any users permission by Alice. This scenario might include the ability for Alice to share with her husband, Bob. She doesn't want to get Bob her credentials to access her records. She wants to be notified when Bob has access to data, and she wants the ability to revoke that access. In this example from EMR direct the sharing. This is an example of the sharing directors requested by that particular patient. This last example enables our patient Alice to share her device data. This example also provides a mechanism to shift control of the device with a third party. Well, there are some unique elements to this use case they are not all solved by HEART alone. For this example, the devices provenance can be short, a short so that healthcare providers payers and Alice herself are confident that its usage results in correct diagnosis proper care and access by the right other parties. So why is HEART good for organizations? HEART leverages existing standards already in use in the healthcare environment. It empowers the patient determine who has access to the data and for how long. And it provides transparency to the patient. Widespread implementation of HEART will enable the full benefit of FHIR API's but bringing patient mediated sharing to a wider ecosystem. This will enable cross organization organizational sharing of data to meet the requirements of today's healthcare systems. And the benefits to providers, having accurate and current medical data is available to clinicians at the point of care and that will improve care. And having adequate clinical information on that first visit eliminates the delay and treatment and reduces duplicate visits. It reduces the burden on providers to send data manually. Simplification of access to health data by apps and systems enables a range of innovative ways to use medical history for the advantage of both consumers and providers. HEART makes all this possible. By embracing HEART, for the interoperability transactions that are controlled by patient consent we simplify life for providers, but also for patients. Patients have control over who has access to the clinical data, but not just who, for how long, and what level of granularity. The patient can be notified, who has access to data in when and empowers them to get data where it's needed when it's needed. Eliminating one of our major gaps. It provides the ability to share, consult with a trusted health advocate, and combined all this leads to improve care at a reduced cost. A call to action today is to refer to the HEART profiles and use cases for more information. And please reach out to the HEART work group to learn more and get involved. So, you have my contact information that I know will be available at the end of the session. And it is my pleasure to introduce Eve Maler to present the overview of UMA 2. Eve is the Co chair of the HEART work group and chair of the UMA workgroup. Hi, everybody. Thanks so much, Nancy. I want to invite people to submit any questions that they have in the chat. And as we're able will try and answer those questions. What I want to do now is just introduce you a little bit to user managed access or UMA which is now at version 2.0. It's one of the key pieces of standards value add in heart that it's a little bit newer so you may not be as familiar with it as you are with OAuth. Next slide please. So many more of you may be familiar with OAuth with this protocol. OAuth was designed to help us avoid what's known as the password anti pattern. So, it enables constrained delegation of access to applications by Alice we personified her as Alice. The password, in the case of the this, anti pattern gives a client application access to a first party service. So with OAuth, our resource owner, Alice wants to authorize a client application to make calls at an API. And in the case of a law, the client gets access in a secure way as we see in social sign in, like, you might see in Google and Facebook access. So in the case oAuth the service is protected with OAuth maybe also Open ID Connect and the client gets a limited scope to access token, not Alice's password to the service. So, oAuth actually innovated around consent and also revocation or withdrawal of that consent. And oAuth defines two endpoints one called authorization and one called token. Next slide please. So UMA is actually built on top of a walk to it leverages a lot to And to achieve cross party sharing UMA adds a new party to the picture or requesting party, Bob. So basically enables Alice to Bob sharing. Alice can dictate how to share data access with Bob, not just access to applications that she herself uses. So Nancy discussed several healthcare use cases where this is valuable. And one nice property is that Alice doesn't have to be around when Bob wants access. So to accomplish this. The way that the protocol is defined the client app that Bob uses gets helpful hints about what to do next at each step when he's seeking access. Next slide please. Another thing that the UMA protocol achieves is this definition of how a wide ecosystem can happen. So Nancy introduced this concept of a wide ecosystem and makes it possible to actually build this bridge to trust in a more formal way. And in fact, how it does this is that it actually leverages oAuth and yet another way to achieve this so that Alice is actually sewing together an authorization server resource server relationship using oAuth. Next slide please. So what you're actually doing is enabling a variety of resource hosts to be able to work together with a single centralized authorization server. So the reality is that Alice's health related data, her health related devices, and the clouds that are associated with those health related devices may live in many places. It's valuable for those resource servers to specialize and what they do and it may be valuable for a single centralized authorization server to specialize in what it does across many beta hosts and to take on the liability for actually doing that task. The fact that you may have a centralized authorization server can enable Alice herself to get a unified view across all of what's going on and to be able to express her preferences for sharing access across all of those hosts at one unified place. Next slide please. So Nancy was discussing going beyond that authorized versus deny paradigm as a user experience, but it's also possible to offer different experiences, for example. Next, please. So a Google Docs like experience where Alice can hit a share button, as Nancy was showing well ahead of anyone else seeking access or where others try to access Alice's data before she even knows they wanted. And then she can consider their requests, much later and an access approval interface like actually Google Docs house or UMA makes it possible for Alice, as I was just saying to monitor and manage her resources, wherever they live in a central place over time. Additionally, because of the special properties of the protocol and its tokens. She can even withdraw access that you may have already given requesting parties in a finer grained way then then you typically see with oAuth today. Next slide please. So taking a wider view for a moment here so benefits for service providers of the protocol. First in an era where strong adaptive authentication is more important than ever, we really should discourage password sharing between people. Not just people and apps, they themselves. Use and implement true secure delegation and we're seeing password list authentication more and more now. So it's really important to start doing this. As as a as a paradigm. Second, the best and most scalable way to ensure data subjects shifts data sharing preferences. Are implemented is is not to guess what they want. It's to actually implement their expressed wishes on demand. Third, UMA standardized a way of doing security and access control and consent that is itself API. First, which is what organizations prefer these days. And forth as Nancy was mentioning, by virtue of setting up loose coupling for the key actors in these scenarios, UMA regularizes their behaviors and it makes it easier to prove that you conform to privacy laws and regulations. Next slide please. So, and now taking a wider view of the benefits for patients and consumers. So first, giving people like Alice choice and sharing data beyond just to apps that she herself uses and and as well as giving access to devices, health related, devices. which is just gaining importance. She can control sharing to healthcare providers, family members, other caregivers. In fact, anybody. She may wish. If that's becoming increasingly important. Second, the nature of the sharing is is really just not reactive. It's not just kind of an opt in switch. It's able to be empowered and directed I'll consent directives, as Nancy was showing. Again, especially important in healthcare Device Control and that's kind of the difference between A smart IoT device and a dumb device is, is, you know, all those things that you can do with it and and their data. Third UMA enables this monitoring and management to be centralized from consoles and dashboards and you can see ensconced in the wording of some of the regulations is phraseology like privacy dashboards and now that can become much more meaningful. And then forth, those control has many granular dimensions scopes sensitive data as Nancy was mentioning, and the recipients themselves. Next slide please. So UMA and perhaps a very large nutshell, to wrap up this overview section here. So UMA as a standard completed at the container initiative at version two. It's based on existing standards was recently introduced to the Internet Engineering Task Force the IDF where OAuth work is done. It is not just for health care. It's also being used in the financial services world and as so many things are starting to get more horizontalize, I guess you could say. Where's our worlds are all starting to blend where there's more open API's in the world that's becoming increasingly important as well. It's actually not just a technology. It has business and legal elements as well. That's why we have a BLT sandwich here. Business, legal, and technical to account for use cases that we may know well in the healthcare space. For example, like a legal guardian managing health data access for young child, but then having to give up doing that job over time as that young child grows up. So, next slide please. That concludes our overview just want to see. Any questions on this section here, I see it looks like we've got A chat question that was answered in the chat. Um, if no other questions on that section. We're going to. Debbie, do you just want to say a word. Yes. And there is a couple of questions in the Q&A section that you might want to look at. Below sharing of health information for purposes, yes, to treatment payment and operations without constraint. Yes. So we're really talking about enabling use cases could be for a number of purposes, and indeed this is really broadening beyond constrained purposes, it may actually be for any purpose at all, directed by a patient or indeed a consumer. I've started to talk to a number of providers and payers about many, many use cases that can really be directed by them. It could be acquiescing to marketing purposes, it could be for their own purposes and sharing with caregivers in the home, caregivers outside the home, third party rehab providers who may be under a BAA. It could be that it's sharing with a spouse, one of the use cases that has been especially intriguing has been sharing a bundle of resources, that's often UMA, which talk and we'll explain in a moment, but sharing a bundle of digital resources that may have come from disparate places, so it could have been EHR data. It could have been fitness wearable data. It could have been data from multiple sources shared with a spouse and then the organization serving in that authorization server role wants to be sure that the person sharing with a spouse of this would be somebody in a pair role wants to be sure that the person who's sharing with a spouse then has a covered life event. They get divorced from that spouse and the person has a big incentive to not want to share with the spouse anymore because they're no longer spouse. And the health insurance payer also wants to know that their systems are clean enough to be able to unshare everything on the person say so, because of that change in the relationship. And so they want to be able to externalize their authorization and consent logic inside their own systems. And so that's it's kind of an UMA use case. And it's a one that I know is an identity relationship management use case, kind of like Identity and Access Management squared challenge use case. And so that's something that I'm seeing quite a bit of when I when I talked to folks who want to want to do this kind of delegated sharing use case. So that's one of the ones that's coming up. Oh it looks like there's a number of Q&A things here. Great. How do you handle surrogate handoff? Okay, so that's where you are looking at like the legal guardian use case, I think. And I'll try and type the answers later so we can have them sort of in the Q&A but that's the use case where you may have the child growing up and then being competent to consent and that's another identity relationship management UMA And HEARTuse case. And that's one where you would like to manage the relationships and that's where that BLT sandwich comes in. Public Health reporting. Patients may not be able to opt out of required reporting. This is one where I would briefly suggest that If, oh foster system of public health reporting, I'll finish that one. If consent is not the right basis. I'm going to sort of speak in GDPR terms which I know. Well, if you look at GDPR which has six legal bases for personal data handling consent is one of the six, you should not be using consent as a basis for personal data handling if somebody is not if they're not able to not consent, because you have to handle the personal data. So, by analogy I would say that if you have to handle the the health related personal data, the PHI, and you're not allowed to let them not consent to your handling of it then consent is the wrong basis to us. So because we're at the bottom of the hour, and it's time for us to move into deep dive content and I'm going to switch now and we'll see if we can make sure to answer all the, the rest of the questions in good time. Right. And I would say because the volume of questions. Thank you. We may go through and have like a Q&A, a portion afterwards when we post the webinar and slides. We will go through some of these and post what we can. Great. You're still up and I'll just want to keep going. Yeah, and Debbie. If you can sort of moderate and curate the Q&A if it comes at good times that will be awesome. Next up is an UMA 2 deep dive and I'll try and keep it very healthcare relevant and everybody can keep me honest indoing that. So we wanted to ensure that because UMA is a newer part of the heart profiles that we gave people a good grounding in it. So that's what we're going to do, and I've got probably about 25 minutes of this content and hopefully we'll have a good time for additional questions. So first I wanted to do just a little bit of a big picture technical landscape. And so we'll start with what we call the marvelous spiral squared. People who work on UMA are known as humanitarians and UMA trust model has been inspired by Fibonacci is marvelous spirals. So this is a square edge version of that spiral. UMA is defined in its main spec as an extension grant of all off and that bottom half of this picture is representing the OAuth two extension grant that is UMA and it defines how you do Alice to Bob sharing. As well, there's a subsidiary spec, which we call UMA federated authorization and that standardized is an API for centralizing the interactions of an AS with however many RSS an authorization server with however many resource servers. Because this ends up involving more than one access token more than one kind of token of whatever stripe. We started giving them nicknames. And so you can see them here, the access token for the UMA grant spec or the UMA grant. It's known as a requesting party token, because it's the token that enables Bob's access, RPT, the access token that is most closely associated with a federated authorization spec. is called the protection API access token or PAT and there's a new refresh token like structure stands for persistent claims token is the PCT. More about that later. So now let's go into just a little bit more detail about the zoom extension grant. What does it add to oAuth? These graphics will be familiar, if you joined us for the first 30 minutes. It adds how the requesting party works with the client application. It also ensures the resource owner doesn't have to be around when Bob tries to access the resource. And ultimately, we hope succeeds, if he is suitable for access. It also ensures that the resource owner Alice's wishes can be expressed and respected. How they're expressed? How Alice's policy for Bob to gain access doesn't appear on the wire? So it's out of scope. And Nancy was explaining this in terms of electronic consents, she mentioned that, you know, they're not really part of HEART that's true, they're not part UMA officially either, but they're a big part of what we want to have solved. So they're out of scope, but we still care about them. So the big picture of UMA Federated authorization. What do they add what does this add to OAuth? Again, these graphics will be familiar you joined in the first 30 minutes. This spec standardized is what we call a protection API as you might have guessed from that PAT token. That obtains between an authorization server and any resource servers that get hooked up to it. So the authorization server presents that protection API that helps to automate resource protection. And that's what makes the as centralizable. It also enables sharing control at the grain of individual scopes. And it also puts resource servers in control of what counts as being protected by an authorization server. So now let's do a deep dive on the grant spec and that's going to mean swim lanes. So let's take a look at our first swim lane here. This is all about the UMA grant from a 50,000 foot view here. So the first thing to note is that, well, Alice may not be around. So our authorization server is acting as an agent for what may be an absent resource owner The very first act of the client is to attempt to access to a resource, um, without a token. So that's a little bit different from all the other oAuth grants, we may be familiar with. For people who are Identity and Access Management people that may look to you like classic web access management, try and hit a resource and, you know, normally get a 404. But in the case of UMA the resource server is prepared to send back clues about what to do next. So what it does is it provides something that we call a permission ticket and it also says what authorization server for the client to go to next and attempt to take the next step. We will say more about permission tickets in a moment. So the next thing that the client is going to attempt to do is what we call claims collection. And there's two options for claims collection. And the point here is to try and have the requesting side meet whatever the policy was for gaining access. So we sort of think of this as claims based access control, back channel options and for channel options and we'll go into some detail about that in a moment. So, Authorization assessment to say, well, did Bob meet policy? Has some guardrails that will describe in a bit as needs to consider suitability given its agent role there are some guardrails and are requesting party token. That's just the access token, as he calls it, they can be upgraded. They can be revoked. They can be introspective, and it can be refreshed. Remember, this is just one UMA access. So I promised you a little bit more information about this permission ticket thingy. It's pretty much how in UMA you start building that bridge of trust that Nancy talked about in HEART. Given that the client and the RS and the as with respect to the RS are all loosely coupled. That whole flow needs to be bound together for security. So this is kind of an UMA innovation is permission to thing. It allows robust security and trust even given the loosely coupled actors. So, It also allows flexibility in the way that you test that Bob is who he says he is so that you can see if Alice said, Well, I want to allow Bob to get access to my EHR data or my Fitbit data or whatever it might be. So we allowed that permission ticket string value to be refreshable, as if the client keeps coming back and saying, Here's more information about Bob or I'll show you what the flow looks like in a moment. But basically this whole sort of flow is repeatable and kind of buildable so it's quite flexible in terms of what it's able to do. So now, let me show you the two most kind of common scenario as for how you do this claims collection thing. The most common scenario is known as pushed claims and it's a back channel scenario. And I'm going to describe it as being forwideish ecosystems. And I think you'll find this very familiar. If you're an Identity and Access Management kind of person. And I say wide ish because and involve some colocation have certain kinds of entities here. So first note that what I've done in this one lane is I broken out the authorization server into Kind of user interface place and then a couple of different endpoints. We've got a discovery endpoint where you find the OAuth metadata and then we've got a token endpoint that we know and love to have that extended but it's there. And so the next thing is now we start our flow. So here we find that the AS is also the place where we find that Bob is that's where he goes to log in. And the client that he's using is actually the request the know the RP the relying party in an identity terms, we have an IDP and we've got to relying party. So Bob is going to go to this is, the AS, the authorization server in UMA terms, that is an IDP to go log in and with this client and I'm the clients going to go, it's going to get the results of that it's going to get, let's call it an ID token in in Open ID Connect terms. And then we're going to go through an UMA dance and here I'm just providing a little bit more detail for your information. This is what the RS returns, once the client does that tokenless this resource request. There's a 401, you get a dub, dub, dub authenticate with an UMA authentication scheme. And this is how AS discovery looks, you get a header parameter that says, AS URI. That's the way AS that the client wants to go to. And there's a ticket parameter that actually hands it the permission to get it where needs. Great, discovery happens. That's just a walk metadata and the client then wants to go to the token endpoint to say, hey, where's my access token. And because it's in possession of an ID token that it just got from the as that is an IDP. It's going to do what recalls pushing that token along. Hey, I know who Bob is because I'm a relying party that just got an ID token about Bob. I'm going to push it right along to the AS that's expecting it. There the AS is going to say, well, heck, I was the IDP for Bob I know precisely who this is. So I'm going to go validate this token. I signed it. I'm going to be able to validate it. And we now have success and Bob is let in. So, what we're looking at is something that kind of resembles single sign on, or maybe the OAuth assertion grant and ID token is turned in and or an UMArequesting party token is granted and it has the stuff needed. Again, this is a high level. Okay. Second scenario. This uses a different flow uses a front channel flow and this is for. We're going to call fully wider ecosystems. This is a case where no such assumption can be made about Alice's authorization server being any kind of IDP for Bob. Bob just shows up. And he's got a client, and the client is nobody to Alice's authorization server. So, I'm skipping detailed we've just seen. This time Bob's client is going to send Bob over to the authorization server saying I got no help for you. Go have fun at Alice's authorization server. It's going to check you out and it's going to send Bob to a claims interaction endpoint. Which is going to have to have appeared in the authorization servers metadata, otherwise the client doesn't know where to send Bob but assuming it's been declared and it knows where to send them some interactive claims gathering happens and that could be a lot of stuff. It could mean that Bob knows how to login analysis authorization server, it could mean that Bob doesn't know how to login and Alice's authorization server makes him register for an account, makes him fill out a CAPTCHA, makes him get redirected to three other places to provide some claims. It could be a lot of things. My doesn't specify. There's a lot of flexibility. One kind of claim that could be collected is hey, Bob, are you willing to consent to my persisting claims, mind this is Alice's AS, persisting claims so that next time you might show up, I can shorthand all of this and say, Oh, you've been here before. So I'm calling that a meda claim. What would be really handy is for if Bob were to say yes to that kind of thing, then the as can issue his client a persistent claims token or PCT. I told you I would explain what that kind of token is now I just did. And I said it was refresh token like, and it kind of is. That way if those claims still happen to be good and the client shows up with a PCT next time. Not so much has to go on around claims gathering. So you might think of this scenario as kind of like an authorization code grant, only it's not for Alice as an other oAuth experiences, but it's for Bob, and it doesn't work strictly require Bob to have a unique identity over at Alice's AS. You can sort of pump Bob through multiple flows, if you need to. And it's buildable as I described So hopefully, that gives you an idea of how Uma's grant is flexible and yet enables cross party sharing and in a lot of different ways that are applicable to both familiar patterns, we know from Identity and Access Management, and also really truly challenging problems in our healthcare space. So now let's take a look at this federated authorization piece. How is that wide ecosystem challenge solved? I'm going to show you an UMA Grant picture again, but it's a little bit different this time. It's a new perspective. Just like any other oAuth grants offerings. The UMA Grant says nothing about authorization server resource server interactions. So now let's wonder for a moment about how those interactions might happen. How does the AS know when to start protecting resources? And how does the resource server know what ticket the AS is associating with the resource servers recommended permissions, that the AS should start working on when it gets to authorization assessment? And is there anything that all special about token introspection? In this case, in the UMA case. So why don't we standardize interface with AS if they asked for these jobs. And in fact, that's what's been done. So these graphics on the right will be familiar if you joined in the first 30 minutes so what the protection API that's been standardized in the Federated authorization spec does is standardized three endpoints, and a security mechanism for them. So the first endpoint, standardizes resource registration that's required for an authorization server to be on the job protecting a resource. A second endpoint is for the resource server to get permission tickets, and the third endpoint is for token introspection and the specialty is that it needs if you use token introspection. And we'll go into some detail about each of these. I want to spend a moment here talking about this trust model. This oAuth protection of this API, it's mandatory. So what we've said is this protection API is oAuth protected. That's that sort of embedded additional use of OAuth. this is really interesting because the resource owner is actually authorizing this AS RS connection so however many resource servers Alice's hooking up to what may be a central authorization server. She is owning that connection. And that's very important because she controls it and if she revokes that connection, it means that she's saying bye bye to that trust. This is that building bridges to trust. And it's also breaking them down if Alice says so. So let's take a walk through each of these endpoints and how they work. So the resource registration endpoint. It's really a whole API in and of itself. It's kind of a cred API. And I'm not going to go too much into the details here, but I just want to note that registering your resource puts it under protection. And the availability to set policies can be done anytime after a resources actually registered after creation and I want to show you here. Basically, some code examples, oh, deregistering a resource removes it from protection. And so what this means is that a resource servers or authoritative for what its resource boundaries are. Because hey, you know, In this case, the heart profile spell out FHIR resource types. And so we've made the resource server authoritative for what resource types, it actually supports and this is where David will go into much more detail about HEART scopes later and Justin will comment on security properties as well. But so specifically what we're doing here is leveraging the UMA properties of resource registration and marrying them to FHIR. So the way this works is resource registration is what enables a resource server to say I support these actual features of FHIR. And it works like this. So let's say you want to do a create request as a resource server, you would actually post this kind of request message and you'd be declaring by sending this metadata over to the authorization server that you intend to use the observation FHIR resource type for this resource and it supports the read scope patient slash star dot read. That's the specific scope dictated by our profiles and you're basically registering that to exist as a resource and the response, comes back and the authorization server assigns a resource ID RS RC one. Having done that. Now the other two endpoints leverage the same design of the structure So the permission endpoint is how the resource server is going to get a permission ticket that it's going to be able to supply to the client. So the resource server is in charge of interpreting that clients initial resource request or if it ever has gotten an insufficient token message from AS. It has to go back to the beginning, it'll do the same thing. And the resource server is in charge of figuring out, well, if the client hit a resource, without a token, it has to figure out, okay, well, does this mean Alice's resource and does that mean that Alice is resources are being protected by this particular AS, so that it knows which is to go to with this request and so on. So the request in this case for for permission ticket looks like this. You can see that this is a familiar kind of request structure now resource one and it's interpreting what the client tried to do as read. And a permission ticket comes back. The token introspection endpoint. Let's say that we've got kind of a stateless model here and the token doesn't really sort of have anything in it is just a an opaque string of some kind. So the resource server is in a position to need to go look up what's associated with the token. So human needs to enhance the token introspection response object because of this ability to have scopes that could differ per resource we're bound by ,in the case of the HEART profiles, were bound by what HEART is attaching in the way of scopes to the resources .so Here we're just adding a permissions claim with resource ID bound scope. So in the request, you're basically just sending The token and you're getting back this response object. And here you see the permissions object that we've we've enhanced so that you have the resource ID and the scopes and there's just the one scope in there. One last bit. I'll cover and then I will have time for a few questions which I'll take a look at in a moment. So authorization assessment, I said that there guard rails. What are those guard rails, so you know, if you look at, oh, a RFC 6749 has the section, section three dot three that says The authorization server may fully or partially ignore the scope requested by the client based on the authorization server policy or the resource owners instructions. That's kind of vague, I guess. Oh, it gets a bit more specific and that's because of Alice's and each of her RS's importance in this picture. Because that's the way it was built. So let's take a look at what The guard rails are. And this is how the authorization server adheres to the arrows wishes in the larger context of all of these are RS that may be attached So we've got this Venn diagram here that is kind of hinting at the process that the authorization server has to go to go throh once it's gotten all the information assembled about the the scopes asked for and it's got a bunch of policy and it's got a bunch of environmental context so one of the things you need to know is that the client can request scopes at a token endpoint. The way you can and other grants. Um, but it must have pre registered them with the authorization server for that scope request to work. And that's pretty much a check on client legitimacy. And we don't say, you know, how you have to pre register those scopes that's, you know, between the client and as The next thing to know is that the authorization server treats the scopes in the intersection between pre registered and requested scopes. As matching any available scope that's associated with the resource in the, well in the, permission ticket, as we just saw as the resource server requested them. Um, and that's because clients know nothing about resource boundaries. They just know about scopes pretty much as in the documentation. That a resource server may have put out about its API. And so you'd look at like FHIR documentation and our case for HEART. Um, The permissions associated with the permission ticket can add to the total requests of scope. So even in the case of, you know, the intersection between A and B. Permission to can actually add to the list of scopes being considered. And that's because it would give weight to their the resource servers authority over its own API resource boundary definition. So the resource server can say well you know i think that you know clients trying to do XYZ. So I'm going to add this. And finally, if authorization assessment results in only a subset of what the client was looking for, um, it can actually choose to error. And that's just clarifying what the authorization servers authority over such business rules is and that's because of that kind of like, you know, clarifying that quote that I just gave you from the OAuth standards. So that concludes the ooma deep dive and I hope it gave you context about what this means around the heart profile. So I'm going to turn things over to Justin in a moment, but first I want to just check in the interface here about all the questions that probably have now appeared Let's see. Many EHR FHIR servers are closely coupled with their respective authentication and authorization servers. How would one transition from this model to a centralized authorization server? Great question. This model is looking to, as Nancy was mentioning, solve challenges in wide ecosystems. So it's kind of a new class of challenge and we don't anticipate that necessarily folks who are happy solving exclusively narrow ecosystem challenges may want immediately to solve challenges in wide ecosystems, but I know people who are starting to want to solve wider ecosystem challenges as an adjunct to what they already do solve, so I think sometimes of what we saw actually 20 to 15 years ago 10 years ago in the Federated Identity space where we saw you know the first challenges of wider ecosystems and identity of federated identity. Where you saw different pathologies of identity Federation take hold. And it was, you know, incremental in some places and then wider leaps and some other places like higher education where you saw what I would refer to as stars of trust. Where everybody was an IDP and everybody was an RP, relying party, all at the same time in higher education. So that's just one observation, for me, maybe others will want to jump in as they get a chance I'll probably leave that there, so as to make the comment a little bit shorter. But we may see sort of some who choose to be sort of simultaneously UMA enabled HEART servers. And some who may just want to be like, OAuth enabled hard servers, for example. So the first claim scenario. Here's another question would be used where the two parties have an existing relationship, as in the case of HIE exchange, whereas the second scenario. The first one was pushed and the second one was interactive claims gathering, whereas the second scenario would be useful for handheld apps or other applications that there's funding partners, not have relationship with. Yes, exactly so. Well stated. Final question here, how does healthcare consumer know that they are using UMAwhat apps are testing UMA now. We had Three HEART enabled implementations and I believe all of those were UMA implementations as well. I will invite others to jump in and comment as we switch over to Justin's presentation. Thanks everybody for your kind attention to this presentation as we switch over. All right, I think we are ready for the next section. My name is Justin Richard and I'm going to talk about the HEART suite profiles and get into a little bit more technical depth there. As well as kind of situated them in a world we have other kinds of profiles that we see in the space today. First off, it'd be nice if I could actually, there we go. All right. Why have a profile, you know, what is a profile? And why are we dealing with them at all? So the thing about a specification, a standard specification, is it's going to give you a lot of options. It's going to say there are certain ways to do things. There's a thing called a door that you can open and close and walk through and whatnot. But it might give you the option of a lot of different doors. And so in some situations, you're going to use one some you're going to use another. And that's kind of left up to your discretion and depending on how the specification is written, how tightly it's written. The options that two people pick aren't always necessarily going to be compatible and this is especially true when you have some fundamental base layer protocols, security protocols, like off Open ID Connect and UMA which are designed to solve a very, very, very wide array of security issues and security problems. You can choose different ways to implement them. And they're not always going to fit together. So what a profile does is it comes along and it says Yeah, these other options may exist, but this is the one that we're using. So we are deciding that in this situation, this is the specific set of options that we're actually going to be doing. Now, this works in a couple of different ways. First off, and most commonly, you will see a profile as a conformance subset of the specification Which is to say that by doing everything at a profile, you're still conforming with whatever specification that it is profiling. But it makes a lot of optional things mandatory often will remove options that are potentially problematic or don't fit this particular use case or in cases where you just have to pick one thing or another. It picks one and the end result is that the options that you choose in your profile make things more compatible, such that, if you've got one system running a profile and another system running a profile, they will work together within the constraints and auspices of that profile. Especially, important for the space that we're working with in heart is that you can choose options that are more secure. So you set the defaults of all of the options that you choose to be more secure. A lot of security profiles will give you options to do things, one way or another, depending on how you want to apply and deploy specific security and this is especially true of protocols like OAuth but with things like our profiles. We want people to be able to say like you do one or the other. And this is exactly how it's going to work. So at the end you want things to be working together. This is what the profile itself is all about. It's all about making things work together. And that's not to say that if you took two off the shelf oAuth systems, they wouldn't work together, they might, but within the scope of this profile and profiles like it. You have a much better chance of things actually connecting at the end of the day, because a lot of the optionality will have been taken away by the profile. Nancy covered this earlier HEART is an awkward acronym for health relationship trust and it's a suite of profiles that's hosted in the Open ID foundation. An interesting historical node is that HEART was one of the first vertical specific profiles from the Open ID foundation. Which is to say, that we were looking at how do we apply all of these security profiles to the healthcare space and with a specific focus on user centered access of healthcare data API's. And we built the HEART profiles in a very, at the time, novel way. When we were looking to solve this problem of profiling for the specific vertical we realized that we needed to profile the underlying security mechanisms, but also adapt to them for the healthcare space. But, we realized that what we were doing in the base protocols was not necessarily healthcare specific and that led us to what we call the mechanical profiles. They focus on the underlying security layers to build connectivity between different systems so that you could have a heart OAuth profile server connect to a HEART OAuth profile. Client and it would work, whether or not you're actually sending healthcare data we wanted this to be able to be reused. We of course did, however, have to deal with healthcare data. So that's where these semantic profiles come into play and the semantic profiles are all about how you connect healthcare data and we focused on the FHIR protocol, specifically, the FHIR API specifically Over OAuth and over user managed access which we've just been learning about. Now I'm not going to get into all of the depth and details of the mechanical profile, because there's a lot of stuff in there. But what it boils down to is going through and saying, Hey, there's a whole bunch of different options that OAuth allows you to do. We're going to say do specific things. So, for example, all clients need to have what are called asymmetrical keys OAuth allows you to have shared secrets in the form of the client secret. This is far and away the most common use of OAuth two in the wild. But in the HEART profile, you have to have an asymmetric key and a means of presenting. HEART also says that your redirect URL needs to be matched. Exactly. Whereas OH off as a bit more fuzzy about that. We also say which token formats you use and what goes inside those tokens OAuth allows that to be completely vendor specific. Now the reason for all of this is that with the HEART profiles. We wanted to make sure that all major technological components of an oAuth ecosystem. The client, the authorization server, and the resource server are all able to connect to each other in different ways. So for the client connecting to the authorization server we say that the server has to be discoverable its keys need to be published. It has to have a registration mechanism. You can expect the URLs to be matched in particular ways specific grant types and client types are supported. And an interesting thing here is that HEARTactually took a step back from the standard OAuth way of looking at the world and that a client has any software application. And we said that you know what people are using this in different ways. You've got web based applications, in browser applications, mobile and desktop applications and clients that are working just sort of direct in bulk access. So this is kind of the health exchange type of scenario where you've got a lot of data going from one space to another, that it's not necessarily on behalf of a specific patient or user, but instead on the authority of the exchange. HEART wanted to be able to work with all of these, but we knew that all of these types of clients were going to have different aspects. So what you do within the HEART profile depends on the type of application, you have and the type of access that you're using. The client also needs to be able to talk to the resource server. And a lot of this was already covered by a relatively narrow set of specifications in the OAuth world. But we tighten that down even further and said that this is the presentation mechanism that use and the token that you get is going to have a specific form. Now that's important to hear because the resource server needs to be able to understand the token when it comes in, regardless of who wrote the authorization server. We wanted to really enable the wide ecosystem in both the user managed access and do off the use cases by allowing any resource server that is HEART compliant to be plugged into any authorization server that is also HEART compliant. Now those of you familiar with the underlying technologies may be interested to know that we have specified both a token format as a JSON web token. And we've said that It has to be signed and we have recommendations on key types and things like that. But we also say that the token itself should not include any personally identifiable information about the person making the request. Also, if you have a self contained token, it's difficult to know whether or not it's been revoked. So we say you also have to allow the token to be introspective at runtime. We do both of these because that signature and that payload in the job itself allows the resource server to say, oh, yes, this token comes from an authorization server that I know that I trust that can be a policy or configuration question. But it also tells me, hasn't been modified, hasn't been expired, so I can do a really quick thing locally without having to talk to anybody else. But introspection gives me both detailed information and real time information because if somebody's coming in and asking for very sensitive information. I want to know is this token really still good, or has it been revoked by somebody, since it was issued. This also allows a resource server to talk to multiple authorization servers. Now, this doesn't necessarily have to be the user driven, bring your own authorization server fully wide ecosystem scenario. This can just be a resource system that is set up to talk to multiple healthcare providers. There are lots of scenarios where this makes sense and this allows you to look at the token to see which, as it came from and see whether or not you actually trust that. Now an Open ID Connect. There are there are fewer connections, because there are fewer moving parts. It's all about getting identity from an identity provider to relying party. So we say which ID token claims and which signature methods are required to be supported, but we also say everything that you have to do in the OAuth profile also applies here. These things build on top of each other. For UMA, it's much the same picture because here we're talking again about the technological components, talking to each other. Where UMA really changes the picture of all off is in the parties and the people that are involved in this picture. But as far as the software talking to each other. We say, Well, okay. You need to be able to present your claims as an ID token from an authorization server and an identity provider. You have to support them and discovery. Your tokens all of your tokens need to follow specific formats and everything else from the OAuth profiles. And on the connection between the resource server in the authorization server we say you have to support federated authorization You have to allow this type of runtime connection to be able to look up information about the authorization server and build up your authorization requirements. During the transaction. The semantic profiles. Again, take a little bit different look and it's mostly. How do you access stuff over a FHIR API? In other words, if I'm a client and I want to get out of specific thing. How do I ask for it? I need to be able to do that consistently across all of these different API's. Even though they're speaking FHIR I need to ask for the right OAuth token, or the right UMA token to be able to get that stuff. And if I'm a resource server. How do I interpret a scope on a token that comes in? We're going to take a quick look now and we're going to look a little bit deeper later a core scope in HEART has three parts. The first part, basically tells you whether you're acting on behalf of a specific individual or you're doing that type of bulk access that we talked about before. The second bit tells you what kind of FHIR resource, you're, you're asking about. And we do allow a wild card that says all resources for the current patient or all resources that I might have access to. And finally, we allow you to say what type of action you're going to take on that resource. So am I going to do read access. Can I upload new information? Can I do both? Can I extend this with something new that isn't covered by this core scope? Some different type of action, this is where I would put it. We also have scopes for describing confidentiality of information. Now, this is how you ask for information that has been tagged with confidentiality markers. This isn't necessarily saying that you have to tag all information with its confidentiality, but HEART is saying that if you have information that you can filter based on this, then you will be able to respond. At the resource server, when you see a token that says this confidentiality code in it, you'll be able to pull that information that's been appropriately tagged in your response and filter out things that don't match the access that the token has. Same idea with sensitivity, except the sensitivity goes across a whole bunch of different standardized sensitivities for, you know, sociological information, alcohol information, HIV information, all sorts of things like that. When you have information that has been tagged with this type of sensitivity marker. HEART allows you to say, when I see a token an access token that has this scope in it, I am going to either let you through let the data through or not. Based on whether I have that on the token and whether I have that in the data itself. So this is a standard set of sensitivity markers and of course can also be extended. And finally, there's the break the glass scope. Now, what this is is this tells the way that a client can tell the authorization server and the downstream protective resource that Hey, something is going on. I may not be the resource owner here, but I need access to this now and I can prove that I have the right to access to this and will clean up the mess later. Right. I can't wait for the resource owner to approve this, I need this now and we'll figure it out later. What this does is this tells the resource server to do additional auditing, additional notification, and it tells the authorization server to do additional vetting on the person that is requesting access, whether you're OAuth or UMA to say this person and this piece of software is allowed to use the break the glass scope. And so by doing that, we have a situation where you can now say I just, need to get in right now with this full wide ecosystem dynamic system and we can allow the information to flow in this type of situation and be able to track it and sort of pick up the pieces later. Because it's better for the data to flow when somebody's life is on the line than it is to necessarily stop it. We're going to take a quick look at some of the other profiles that are tied to both the healthcare vertical and potentially to other verticals. So we're going to first look at the SMART project, which is all about, how do we standardize it was focused on standardizing deployed healthcare applications. So this is a very, what can we do, absolutely right now, today with the state of the art of what's available in hospitals and doctors offices in portals today. The target for SMART is largely around application portals and bundled applications. Now that is expanding today and SMART is moving towards a wider view. But it's really going to start in this notion of how do I launch an application that has been tightly bundled to a patient's health care portal. However, the application needn't have been written by the people who wrote the portal or included with the portal itself. It was effectively from a technology and perhaps an acquisition perspective of third party application, even though it's been tied tightly into the healthcare system by the healthcare provider. And there was a lot of really great stuff that's come out of the SMART project, including the SMARt scope system that three part course scope that was an idea that we have brought in from the SMART project. In such a way as we have aligned to the work that we've been doing in HEART,which is again very broadly focus with what's been going on in SMART, which is very hands on and feet on the ground. I would not say that we have built on SMARt, nor that SMART is built on HEARt, but they are two efforts running in parallel with similar long term goals and we're seeing a lot of alignment over the years. If we want to take a look at the different industry in the United Kingdom, the financial industry has been told by the government that banks need to make account information and transfer functionality API's available to third party applications and it has to be done in a standard way across all of the major banks. And what's interesting about this space is that this is a case where the government made a regulation that everybody had to follow by a specific date and industry had to come up with what the right standard solutions. The open banking group has built their profile on top of OAuth and Open ID Connect, much like we've done with the HEART specifications in the healthcare space and you see a lot of similar solutions, but also some interesting novelty in the space, like for example registration of intent and transactional based processes. So we're seeing some innovation in other verticals that will probably potentially, be applicable, to the healthcare space as well. Part of also being one of the first ones in the space. Has really paved the way for a lot of this vertical specific profile work. Now the financial grade API or happy working group in the Open ID foundation is basically doing Work that the open banking group in the UK is doing, but on a much wider scale much beyond just banking API's, but for lots of different financial and high value API's. And this is now the parents specification of Openbanking. In that Openbanking is a profile of fatty itself. And we're seeing some interesting things come out of this group, including a client initiated back end authentication, the CIBA platform, and the job authorization response method or JARM. What these do is that these are additional pieces of functionality that were invented to solve specific use cases in the financial space that are seeing applicability in a wider world. And finally, the I go specification is another Open ID foundation profile, but this is for government use so government to citizen government to government. It has a similar approach to HEART in that there's a split between you know the the technical profiles and whatnot. And in fact, the core technical profiles, the original text of the I gov specifications was taken directly from the HEART Working Group and built on for this use case. What that allowed them to do is focus on the specifics of the government use case, which, as you might imagine, include things like citizen identity numbers, social security numbers here in the United States, there are national identity numbers in other systems. You know, how do we communicate and track those in a way that is privacy preserved? How do we communicate information about proofing documents? If somebody is talking to the government. We want to know that it is actually the appropriate citizen. Did they show up with a passport at a local office and somebody said, yeah, that's them that this is their account. How did that happen? And there's some good work being done in the I gov world and related spaces on this technology called Vectors of Trust. Which allows you to communicate things, including how was the person proved. How did they authenticate. How is this carried across the network from one system to another in a way that is standardized and relatively simple compared to previous attempts that we use parse. At the end of the day, it's not really a direct one on one comparison between all of these different efforts. They are all focusing on things from a different perspective. And in a slightly different way. But they're all kind of poking at similar aspects. This is far from a comprehensive table to compare all of these things. But I wanted to point out that there are a couple of interesting areas of commonality and difference, for example, everybody across the board here says that you have to use an exact match URL that's something that was in the HEART profiles and just about every new profile, we're seeing in the office world says, yeah, you really need to do that, including current best practices from the OAuth working group in the IDF. A lot of these groups aren't getting rid of shared secrets. A lot of them are doing things with dynamic registration. But again, not everybody is. Only a couple of them are working with wide ecosystems. Most are focusing on narrow ecosystems. And we're looking at where the commonalities between solving problems in those two different worlds spaces really comes into play. And with that, I've got a few minutes for questions. There's my contact information. And let's see. Does this mean the patient applications can provide consumers with very granular level data sharing capabilities and health information exchanges need to be able to ensure this granularity is preserved across the network? That is an excellent question. So the granularity of the data, in my view is, and I would encourage the other panelists to chime in as well, in my view, the granularity of the data is something that is it should be preserved. But, sort of the the ground truth is that data is going to be transformed and incorporated and amalgamated, as it travels through different systems, people are going to store things in a little bit different way they're going to combine records so that you have your full medical history in one, you know, in one data store. And then when that goes out somewhere else you might have something, you know, something different happening. Um, so, yes. Ideally, You would be able to have all of that information in a very granular fashion, but it's entirely possible and even probable, I would say that some of that granularity is going to get lost in practice when data gets moved around the network. All right. Any other questions or do any of the other panelists want to jump in on the data granularity question. That's fine. So maybe that might leave a few minutes for, we were so tight in the schedule, maybe they'll leave a few minutes for questions for the other two presenters. So thank you so much, Justin. David, are you ready to cue it up. Oh. Can you share some of the real life examples of HEART's implementation. Eve, I'll give you this one. Real life examples of current implementation, actually, Nancy shared three examples and I was all of them as well. So we have EMR Direct, and Oh, I'm trying to think of.. Well, mush group. HRU1. One move health data forward challenge. It was a Docket, and live well. So, I would also say these apps have actually helped. We went through a second round of updating the profiles and a lot of that was due to the testing. So we welcome more actual interrupt testing like this one. All right. Thank you. Well, I think we're ready for the next presenter. Okay. That would be me. So typical to follow these presentations. Obviously a lot of work went into all of them all. Very good. My name is David Staggs, I've got 15 minutes to talk to you about scopes. So, and how the scope support the secure interoperable distributed authorization paradigm, we've been talking about using FHIR and a restful approach. So let's get into it and if it gets too technical. Don't leave because Dr Maas comes after me and he's got a great presentation too. So let's see. All right, this is going to be tricky. Okay so scopes are defined as individual pieces of authority as we learned before. First off, you've got to have an agreement on how attributes are going to be securely exchanged their meaning and how to use those attributes. How they will be used in the access control decision. We've covered a lot. FHIRgives you the common vocabulary. Scopes are the way you exchange them. HEART gives us the rules that increase data security and privacy as Justin described. So here's our general description of scopes. They are compound strings. You see that their scope equals a permissions resource dot access And when we're talking about patient remember patient doesn't mean the patient. It means a patient a single patient versus a bulk access. So let me give you a picture of the core scope. So here's a representation describing the scope statement in HEART. The resources can be any fire resource for example scope could be patient slash appointment dot read and that would give you that would ask for read access to a specific patient scheduled appointments. So, patient, remember, is not the idea of the patient. It's just a string, meaning it's specific to a patient, the Scope Statement can also include confidentiality codes. They are included in a request by a client and could be authorized by the authorization server. And when allowed can return information have a higher heightened sensitivity. So here's an example of confidentiality codes. Their type of security label HL7 health level seven security label. And as they described the overall content of the information bundle, so you can find that on the Ahl seven fire pages and HL7 healthcare privacy and security classification system. So they describe the information associated and they're like the high watermark so you get a bundle in and you have to have the authorization of the highest level of confidentiality in order for you, be you, to be able to look at it. So one of the things you can do, and adding confidentiality codes, as Justin mentioned. Is that you can add on confidentiality/R for restricted. There's normal restricted and very restricted into your Scope Statement and if it comes through in the request, having been approved by the authorization server. It'll say this request has permission to access data labeled as restricted. So the data could include information like HIV status, things like that. So we also talked about sensitivity labels. They provide a finer control over access to protected information so they describe resource perceived as undesirable share without additional controls. Like data that might cause a stigma or financial harm to the patient. So, alcohol, drug abuse, HIV status, psychiatric care. These are all security there's big vocabulary of security labels in HEART support has labels they support in their standard. So in this case you have, for example, scope. Patient slash star star that Justin said that's everything and then to sensitivity labels. You've got eth MPs why and this statement is telling us give full access to this patients data, including substance abuse information and psychiatric information. So, there's also one purpose of use. Eve discussed purpose of use indicates a reason or context for performing operations on information so access concision decisions can be made on why the request is being made for example emergency marketing. In general, the purpose of use gives you the context like marketing operations, payment. You can see them there. Right. And treatment think someone mentioned treatment so purpose of us treating categories can include subcategories like clinical trials, coordination of care, emergency, break the glass, emergency room treatment, those are those are all part of the vocabulary. So, here's the big picture Eve showed us. So as Eve discussed earlier. This illustrates which entities are involved in the exchange of scopes using UMAuser managed access 2.0. You can see, you can find more details it for the upper the elements in the upper box that's in the Federated authorization for user managed access UMA 2.0 And the bottom box is governed by the ooma grant for OAuth 2.0 so you can take a look at those. But the diagrams shows the tokens required and describes the resource server and authorization server. Like, he told us the authorization server is a server that protects on the resource owner's behalf. Resources hosted over at the resource server. So the resources you can get a description in the heart profile for fire limited resources. So the resource owner works with the authorization server to configure grant rules which will be used when a request is made by a client. So the user doesn't have to be present. And the authorization server uses scopes and the grant rules and the process of issuing access tokens requested by clients, you can look at the scopes and the HEART profile for FHIR OAuth 2.0 scopes document. So, Eve used swim lanes, I will use a picture. So I'll try to focus in a little bit on scopes. This shows the creation and issuance of a protection API access token. The PAT. And the PAT gives the specific resource server, the authority to interact with a specific authorization server. So you got to have that in order to interact with your authorization server and that also identifies who the resource owner is. The resource owner can also communicate separately to set up their access policies and that will be used in deciding, along with the organizational policies, whether the requested x can be allowed. So now that we have the PAT. We're going to register the the resource. So there are several endpoints on the authorization servers. I've tried to illustrate registration of the protected resource. Resource server defines the boundaries of the protected resource in the scopes available to that resource, then it registers, the protected resource, using the PAT,in the header at the authorization servers resource registration and point the little green thing. This creates a resource description at the authorization server. And includes the scopes that can be applied to that resource. The actions on the FHIR resources. The authorization server then returns a handle to the resource description back to the register resource so they can maintain it, you know, update it, change it deleted. So let's move on to the red font. This is the UMA grant the green was things pulled out of the UMAof federal office federated authorization. So now, Let's take a look at the authorization server has a resource description and the resource server has a handle to it. So they're both on the same page when access requests come in from a client. So here's a client right down here. So the if a client requests makes a request without a valid resource party token, RPT, then it triggers this resource server to calculate the required permissions for the requested object and then send the permissions over to the resources sense, the permission for the resources in a permission object that goes to the authorization server. The authorization server responds with, as he described the permission ticket. Right. And that's a handle to the requested for permissions. So now the resource server has that and it can push the ticket and the authorization server location over to the client. So, if the client successfully receives the permission ticket, and then it can now use it at the authorization token endpoint here right, and the requesting party token. The RPT that it needed and that's specific to the protected resource and the resource server. So the client uses their unique identifier and credentials, as you remember, Justin said there's a lot of signing going on, to prove to the authorization server that it's requesting party has the clearance to access protected resources over at the resource server. And you can do that by pushing claims or setting up authorization server and requesting party directly, right. So after you've got that you've got all the scopes and the authorization server can take a look at the Resource Description and decide whether you should have access, so let's just say we fail. So if the if the requesting party is authorized only for a subset of the scopes, the authorization server as Eve said, could return an error or could return in RPT continuous subset of the authorized scopes for the resources associated with permission ticket. So in our example let's say the first attempt failed, but the client was pre registered with the authority to submit another scope called a break the glass, the BTG. At the authorizations servers token endpoint. So the client could ask, and this is a common scenario that could ask the requesting party. For example, a clinician, if they wanted to resubmit With break the glass. So it's important to note, you've got to be registered to be able to do that. But in this case, we're going to resubmit it. A client uses their client ID specific to them the permission tickets specific to this interaction and the scope, break the glass. So in the healthcare domain break the glass does not result in an overriding access controls. It's used during the authorizations servers authorization assessment. DTG is just another factor, combined with the security policy organizational policy and the patient's grant rules to determine authorization. So, if the Resource Description and the organizational resource owner policies permit access to the requested resource for this particular requesting party. The RPT may be returned with all the requests scopes. So the client can now use that now request access to the protected resource on behalf of the requesting party using the RPT specific to that resource server and authorization server. Pretty good. Right. So here the client requests the protected resource with the client ID and requested party token. The RPT's and opaque handles. So, as described the resource server has to send that RPT to the authorization system and for the introspection endpoint. And the authorizations server returns an object holding an array of objects, each having a resource ID and authorized scopes. So the scopes within the sets of scopes registered for each of the resources, not just any scopes, but the subset. The resource server uses that information to determine whether it should permit the action requested by the client. And there is some autonomy, which is needed because of the resource server has its own organization and policy and legal requirements. For example, it would share differently between let's say it's VA versus DOD or VA versus non DOD so there's there's some autonomy that's given there. So I've got 15 seconds left, so I'll just say there are a couple slides to describe these permissions that we've been talking about, you might want to go take the take a look at the link. I also walk through what it looks like. And there's also a description of how the authorization assessments done. So I appreciate you spending time with me today. And here's my contact information if you need it. And I think I'm done. Anyone want to take it from me? Luis, it's your turn. There we go. Thank you. Okay. Thank you, David. And thank you, everybody. With the patience to stay till the end here. I'm Luis Maa.I'm the CTO of EMR Direct. One thing that clear from listening to all the previous parts of this webinar is that there are a lot of actors in the FHIR ecosystem. And they all need to talk to each other, including the authorization server, the resource server, the client application, and the end user. And as we've seen heart can add requesting parties Grand Tours, possibly even identity providers so it gets very complicated. What I'd like to do today to finish off the webinar to take a higher level view of the ecosystem. And talk about a number of tools that can be used to establish trust between these actors to make the ecosystem scale more effectively. Now these tools are based on straightforward extension. So OAuth and Open ID and are intended to work seamlessly with FHIR and with a number of security, ensuring framework, including HEART. More importantly, I'd like to talk about how these tools allow all this to take place dynamically, and then a frictionless manner so that we can break existing bottlenecks, but not compromise security or trust. So let's start with the registration of client applications. Today, app registration is essentially a manual process. And this is only going to get worse in an exponential manner as the number of apps and servers grow, so clearly automation is needed here. I'd like to begin by discussing dynamic client registration or DCR as I will refer to it as a starting point to address. So what what is dynamic client registration. Essentially, this is a standardized API automate the client registration process where the client application can provide the necessary metadata about itself needed to make the open FHIR workflows work. What we're shooting for ultimately is leveraging VCR and some extensions to it. So the client apps that the end users are choosing can register and connect to the endpoints that are needed, on the fly, much like a user of the World Wide Web today and can pick their own browser when connecting to a website and can freely switch between the browsers without really noticing any difference as far as access to the data on the other end. So here's an example of how a dynamic client registration might appear to the user, because the OAuth server that supports this will know that the client registered dynamically, and we believe transparency in this is important so that the server will display to the user what information it knows about the app and include the dynamic nature of that registration. If that is the case, so that the user is well informed as to what's going on. Basic dynamic client registration is fairly open process as the example I showed on previous slide. So the question is, how can this be expanded to establish a trusted network of client apps. So one approach that's being actively worked on in this area is application endorsements and certification. These essentially allow third parties to verify or endorse applications and provide what is a reusable vetting that can be used across the Trusted network based on the requirements of a given community. So this approach where third parties can can vet information about the app developer or the app itself can increase confidence by the relying party as to which, after actually dealing with and who has evaluated it And this information can be trance transmitted directly by the client application to the server at the time of the connection. And how we're looking at doing this and the standards that are being approached for this use sign job JSON web tokens and the X five or nine certificates, which together, bring in all the benefits of the digital signatures to ontegrity and authenticity of these of these certifications and endorsement. Additionally, the certifications and endorsements can be tied directly to a client's private keys, such as those that Justin mentioned in the HEART profile. So that this can be tightly bound to a particular app identity. And that's, that's one way to do that. And there, there are a few others. We're also have explored. Importantly, this this concept of the trusted application registration also works for headless application. So the so called back and applications where a user isn't present Such as apps that might use the OAuth client credentials grants for those of you are familiar with that. And this has been an area where dynamic client registration has historically been problematic, bringing the trusted aspect into it can can really address that need as well. So what do you get after you've added a endorsements and certifications to this environment well as several powerful things You no longer have to rely on self assertion submitted by the app developer operator in the basic open Dynamic client registration, but instead you have access to the verified information about the app. And the developer and this could include verification from one or more third parties. So the app is not limited to just a single endorsement or certification. It can include all the relevant information for the use case that it is trying to execute So this does in fact become a reusable identity for the application across the ecosystem and the app developer, this only needs to register once for each certification endorsement that it wants. Rather than having to go and register everywhere, every time. Even if the likelihood of connecting to a particular endpoint is low. So, for example, an application. Could use a certification across a whole network of different health system and API providers different vendors that that have chosen to recognize collectively a particular certifier an endorsement. or endorser that's forming a trust community. And this obviously is much more desirable than registering having that app developer register separately with each of those health systems. And each of those technology vendors, which can Everyone in this space knows. Be very time consuming process. So in the, in the framework that's being developed here. I'll also add that the vendors and health systems. It. This isn't a one size fits all solution, the individual participants that hold the data can opt in. Or opt out of different endorsers or certifiers based on their own requirements and their own use cases and this this lets The servers, the data holders enable a number of advanced features on the server side, based on the information in these certifications and endorsement. For example, the server could enable read write access to a certified app that has certain credentials as opposed to just basic read access for an uncertified app. You could add access to certain sensitive or restricted data to an app that hold certain endorsements about privacy. For example, whereas that might not be made accessible to a generic and there are any number of clients scope access step up so you could envision for different setting based on this kind of information, information. Importantly, I'd say the certifications and endorsements can also be used to increase the confidence of the end users participating in the ecosystem. Where they can see information about their app, who has verified information about the app, and what what people or organizations or endorsers have said the app is appropriate to use for. On a related note, before I move on the same trust framework of the identity and and characteristics of the participants can also be used to increase confidence that a participant is connecting to the correct fire endpoints and, you know, with the growing deployment of multi tenant. type situations conventional SSL web certificates just may not be good enough. And this type of extra level of verification of the entity that controls the data, the actual data holder and not necessarily the server operator can be very important. So let's put this all together here. What we have is a number of years, holding different parts of the ecosystem tools I've been describing and showing how these might tie into the co op sign in page, for example. So you can see in the bottom information about the app has now been enhanced in a way that it also display separately verified information to the to the app user This is in the middle gear here. I mentioned directories and there was a question about directories earlier. So let me just briefly comment on that. There are a few directory initiatives underway for cataloging FHIR servers, to be sure. But I'll point out that this is the trusted server identity framework. I mentioned a minute or two ago. This provides a natural opportunity to aggregate verified in endpoint information into a community directory. It can also more effectively scale the network and as the HEART folks know, once you know where the endpoint is you can determine its capabilities, including support for hard or other advanced features. So I would basically talked about the two bottom years. I'm going to move on to the top gear about users here and talk briefly about trusted identity and trusted identity networks essentially reusable and user credentials. so, in HEART and other data sharing. Model. We have delegation from one user to another user of access and what we want is for that to work beyond the user space that has local credentials on the server that's managing this so this becomes an issue of federated identities, if you will. But beyond just the basic outsourcing authentication of identities to Open ID Connect servers. We still have the same scalability issues that we've seen in the client app to fire server space. Of managing these trusted network of identity providers to allow for a dynamic environments where more than one identity provider might be available depending again on the use case and requirements the community. So one approach to this built on Open ID Connect. It uses the same trusted network concepts, I've been discussing for apps and servers to allow an OAuth server to dynamically register to use an Open ID Connect identity server if they're part of the same trusted network so that can happen even if the servers have not previously interacted. So in this case, the co op server registers as a client with the identity provider in the same way that the client app would register with the server. Because the server is in the middle and access both a server to the app and a client to the identity provider. This is known as tiered OH off and there's a link on here that, for those of you who get the slides. You can follow for some more information on this. So in the heart setting tiered OAuth can allow those user managed access grants to cross organizational and server boundaries in a dynamic way. In other words, we are no longer restricted to using the identities that are registered directly with the local OAuth server. And the users, no longer need to go obtain separate credentials for each server FHIR endpoint in the network, so two scaling issues have been addressed there and as an added benefit the data holders can get relevant user information about the end users directly from the identity provider, rather than relying on the client app to act as a proxy for this data. And they can use this information to make access decisions or to assistant access position. Since the communication is between trust with parties, the server and the identity provider. The framework enables access to a richer set of user metadata for these purposes. Metadata that could even be used for identity resolution, if necessary. So plugging this into our into our world of gears, we see an additional element brought in with this idea of the trusted third party servers. OAuth servers and identity providers and all of these tools, as illustrated, will work harmoniously to scale trust across the various actors in the ecosystem. The resource server, the server, the client app, the grantor is requesting party identity provider, they can all talk to each other dynamically in a trusted way. Using essentially straightforward extensions to often Open ID Connect and they can communicate even if they have never previously interacted, without having to go through an extensive pre registration process. I'd like to summarize a little bit here is there are some common patterns of trust that are enabled by this framework, regardless of the participant and I've tried to collapse this down to three repeating concepts. Starting from the left the registration of the participants, whoever those art. The end user, the client apps, the servers themselves. Can be automated and This eliminates the multifaceted exponential problem of manual registration and allows for vetting of participants to the level appropriate for each community and each use case. Moving to the middle. At the time that a connection is established participants can dynamically register with the corresponding server so that they can be reliably identified and finally on the right data holders can dynamically get information. About the other participants to make informed policy and access decisions prior to responding So where do we go from here, well first work is underway on an implementation guide for trusted dynamic line registration, which makes use of most of the tools I've discussed Second, for anyone who's interested in joining the group have implemented already testing the tool and then cross vendor across platform environment. I invite you to the next HL7 FHIR connected on in Montreal on May 4th and 5th. There's the link on the side here with more information. Third, if you're interested in collaborating on the actual specifications and profiles that enable these workflows. You can find the current draft of the unified data access profiles that the depth like shown here. And finally, the trust communities themselves and start evaluating what policies and criteria if any they need to for the use cases, they want to support so that they can implement these these items to scale their ecosystems effectively. Thank you, that's the end of my part of this talk and I appreciate everyone who's stay till the end. And thank you to Debbie and the ONC folks for sponsoring this event. I don't see any open questions here. But if anybody has any. I guess we are pretty much at the end of the a lot of time, but any of the panelists, they want to jump in. I'm done. Great. And I just wanted to say a heartfelt thanks to all the participants today for this very long a webinar. And thank you so much for staying and listening to everybody that hung in there and have a great day. Thank you. Thank you. 