  MICHAEL HICHWA: Hi, this is Mike Hichwa from Oracle, and I'm joined today with John Bratincevic from Forrester. And we're here today to talk about low-code. So we're just going to dive right in. And, John, I know that Forrester coined the term low-code, and I know that you cover this area very closely. And I'd like to know from your perspective, what do you think is driving the recent interest in adoption and just a lot of companies looking at low-code? And what problems are they trying to solve, and what is causing all the excitement? JOHN BRATINCEVIC: COVID really concentrated the interest in low code. Overnight, when people have to start working remotely, all the paper and spreadsheets that run a lot of businesses are broke. And there are a lot of new application needs that couldn't be met any other way than low-code really. You needed a way to build and deploy this stuff quickly, and low-code kind of really had its day quite dramatically. But, I mean, the market's been kind of building up to this and primed for it for years. Low-code just kind of concentrated the need and the problem. There's a few things. One is, we need to adapt software all the time and quickly, right. And low-code is intrinsically adaptable. It's declarative. You can take a piece out, put it in, so it allows you to change what you have for whatever business needs there are. Also speed-- low-code is a lot faster than programming at a lower level language, and we need new apps fast all the time. We delivered them yesterday and need to change them, and that's what low-code's good at. And then third, even if those other two problems could be solved with process or more modern technology in general, there aren't enough developers to go around. There aren't enough coders. So if you think about all this stuff-- the business needs to digitize all the paper and all the spreadsheets, and then all the old systems to make new and then connected and everything-- the only way to get at that is through some form of democratization, right. You need to involve other people in the software work or it'll never get all done. So, kind of all those things coming together means low code is really big. MICHAEL HICHWA: So you kind of introduce this topic of a broader development community that low-code affords. And I was wondering if you comment on citizen developers? I mean, on one side you might think, hey citizen developers are going to create insecure systems that don't scale. That aren't enterprise or something. But also, they bring maybe a lot of knowledge to the table where they know the business. They know intrinsically what you want. Where if you just have an IT professional that just codes all day long, they might not understand what a particular finance group or sales organization is really needing. And maybe you could comment on that sort of interplay between the pro-developer, the line of business developer, or the citizen developer and the different roles they might play? JOHN BRATINCEVIC: The principal I always point to on this is we talk about being digital and being a digital business and digitally transformed. So my simple way of putting it is, well, if everybody's in the software business, then business people need to do software work. If software is how you get things done and what you are as a business, that means software needs to be an expression of the business. Which means business people need to be involved in the day to day. So I think the fundamental principle going on in being software driven sort of requires business people being involved in the work. Not just as a contributing party in the form of requirements, but actually doing the technical work themselves for a lot of the reasons we outlined. But, I mean, again, if you're a software driven business, people need to do software stuff. So what we see happening is-- think of it as a spectrum. So low-code kind of allows this, and products have their pros and cons instead of different points on the spectrum and all that. But you have the hardcore developers on one side handling the big, gnarly, complicated stuff that requires code, and big architectural concerns and need to be closely guarded, right. But there's a whole lot of stuff outside of that. We call it the long tail. They might be apps of significance or they might be less significant, but there's a lot of them and they add up. So what we're seeing in terms of best practices for governance in kind of mixed teams is you have a local platform, or maybe more than one, to appeal to the different personas depending on how they're set up. You have the pros sitting in IT who work on the big projects. They coach people in local departments who are kind of champions on trickier projects, or want to learn or whatever. And maybe they co-build. And then those champions work with local people who either build small things themselves, or contribute to projects their champion is working on. So think of it as this federated spectrum of governance all kind of in a local environment. So I expect we'll see a lot more of that because, I mean, there's just so much technology need, and so much need for business to be expressed in technology. And this idea of, well the technology isn't over here, and everybody else is in business, and you just feed them what you want. I just don't think that's sustainable. MICHAEL HICHWA: It's the new normal. It's a mishmash of everyone together sort of. JOHN BRATINCEVIC: It's a done deal, we just got to catch up. And some people are doing it quite actively and aggressively, and experiencing really good results at scale. MICHAEL HICHWA: So, I see low-code used in many different ways. But I was just wondering if there are specific areas where you just see as the lowest hanging of fruit? Maybe it's bespoke or custom app development. Maybe it's SaaS extension. Maybe it's a legacy system, modernization, digitization, analytics, you know, data reporting. Is there something that when your customers call you and talk-- are they more concerned about one use case or less? Is there anything-- any specific area that's driving low-code more than another area? Maybe not. [INAUDIBLE] everything. JOHN BRATINCEVIC: It's a little hard to answer because the platforms that are premature can do a lot, right. Because if you have-- if the tooling includes data and databases, interfaces, process design and automation, security, reporting-- MICHAEL HICHWA: Using the building blocks of all applications, right? JOHN BRATINCEVIC: You can make a lot of stuff [INAUDIBLE].. MICHAEL HICHWA: It's not just for SaaS extension, or custom app, or line of business apps. JOHN BRATINCEVIC: Yeah. Where there's a really, it's just a-- if you're not doing it this way it's really silly. It's just a profound gap. It's just digitization. Just the business of taking all the crap that runs a business behind the scenes, like in reality for so many enterprises, and turning that into apps. You're not going to go out and buy 1,000 SaaS apps for doing all those things. You want to take all the stuff that's invisi-- all the workarounds, and turn them in-- and at a minimum that's like the-- if a company doesn't do at least that, that's just a gigantic gap. But in terms of the way the platforms are used, these are everything from core modernization for big apps or big companies to replacing spreadsheets and the whole spectrum of patterns between them. MICHAEL HICHWA: So one thing I've noticed being in low-code for a long time is that it used to be when you build an app you would spin up a team. You would have a project plan. You'd have a project leader. You'd have a year time horizon. You'd have a big budget, and you'd build that app. And it's like building a bridge, right. You're going to buy the supplies. You're going to build the bridge. But more and more, for low code what I see is developers just try something. You could be a citizen developer. You have no idea, but there's no reason why you just can't dive in and start developing. And I was wondering if you've seen that. You've talked to people that do that. And this idea that there's this low barrier, just go for it, and if it works, it works. It doesn't, just toss it out and try again. There's sort of a lower barrier entry to build an app. You don't need a big team. You could go solo if you wanted to, maybe. JOHN BRATINCEVIC: So what I've seen in the supplies, both the development teams but also citizen development-- so especially citizen development, I feel-- it's kind of like rocket fuel for innovation and continuous improvement. So exactly what you said, there isn't a lot of investment or difficulty in prototyping, or making minimum viable product, or just trying something. So it happens naturally as people get used to this idea that they can do that. They just start doing it. So I've talked to companies where that was exactly one of the benefits they identify. When they scale low-code and made it available to a lot of people, there was tons of innovation and ideation. But expressed in software, not just on a whiteboard somewhere. MICHAEL HICHWA: Yeah, Yeah, Yeah, Yeah. JOHN BRATINCEVIC: And they would even make disposable apps. Like, hey, we just need it for a few months, but why wouldn't we? Why would we use some analog workaround to get this done? Or why don't we try out this product idea or whatever? So it's kind of intrinsic to the model once you get used to it. Once you wrap your brain around it there's this place beyond just agile, which is built around a technical team works with business people and iterates and all that. There's another place where-- it's just like, it's like the speed of thought almost, and the working patterns change. And then, I mean, the experimentation, the continuous improvement and the innova-- it just explodes. MICHAEL HICHWA: So, one last topic-- I'd like to talk about IT governance. And my perspective is that, for example, if I want to build a system it can be hard sometimes, because there's so many rules and so much complexity. There is-- maybe you'll begin clickjack. Maybe you're going to have a denial of service attack. Maybe you're going to have a SQL injection. Maybe you're cross site scripting. Maybe you're using an open source library that's old. Or maybe you have some HIPAA compliance or some other standard that you've never even heard of-- issue. And so you're always very worried about these things. And maybe it's kind of like an adage with lawyers, saying no is a safe answer, just don't do it. But I'm just curious, what kind of guidance do you give? Because there's sort of pros and cons. You don't want to be fast and loose with your data, and your governance, and your security, and your corporate information, but you also don't want to hinder innovation. And I was wondering how you strike that balance and what type of guidance you give on a governance perspective? JOHN BRATINCEVIC: On data governance or on low-code governance in general? MICHAEL HICHWA: Both. I mean, I understand they're different, but maybe low-code, because we're talking low-code. But the governance because-- certainly you're building an application, and applications can have vulnerabilities. They can expose data, they can be vulnerable. JOHN BRATINCEVIC: I suggest to people, I basically say, approach this with the goal-- so if you want lots of people to develop lots of apps, because that's really where the big governance questions come in-- approach this with the goal of creating a frictionless experience for the business people to solve problems. They want to use these digital tools to solve problems. To do this you have to separate the actual serious risks from the lesser risks, or the imaginary ones of which there are many. So, for example, something that doesn't integrate or only integrates to innocuous data sources or through some sort of innocuous pattern, that should not be subjected to checklist help. People should be able to self serve to some degree. As kind of like with spreadsheets they can today, this is just way, way better. And then it's visible, you can see what they're doing in the platform, and you can put some process into the development and deployment. And it's a way to direct all that positive energy. So they can do way better work and you can see what's going on. Then for more sensitive things, for that smaller list of real risks, basically that's when you can kind of put tiers of developers in where they have access to certain data sources, or access to data sources in a certain way. And you can then-- you can segment the development processes to say like, oh you need an approval before building an app that has this kind of data. Or you need a code review to do it, or some other parameter about the app. The size, or something like that, suggests that you need to hand this off to us or whatever. But, the core of it is-- go ahead. MICHAEL HICHWA: I was going to say that your recommendation-- you don't want to have the process per application. You want to have a policy and a standard, and when you do this then you fall in. When you cross this line, you go through this process. When you're over here, you're all good, just use a certified platform. And it kind of-- you recommend that the IT department get their act together and get a low-code standard in corporate policy in place? JOHN BRATINCEVIC: With the philosophy in mind that there's a lot of stuff that doesn't require a lot of oversight. You're not delegating-- you're not delegating IT. That is not what you're doing. You're trying to jump start a digital problem-solving culture where they can get wonderful things done. And you don't want to get in the way of that or they won't do it. If it's hard and onerous and-- MICHAEL HICHWA: They'll just do it in a spreadsheet. JOHN BRATINCEVIC: I won't do it. I'm going to go back to my spreadsheet or my access database. Or I'm going to go buy a platform that you didn't buy me. I'm going to run it on my credit card and do it myself. My credit will just continue to grow unless you rehabilitate it. That's basically what it is. You're trying to direct all that positive energy in a pragmatic way. It has to be pragmatic and aim for a frictionless experience so people can take care of business. And you can unleash all that stuff, and I've seen it done. But that requires carefully segmenting out the actual risky things from the much less risky things. The big bucket of stuff that you need to [INAUDIBLE].. MICHAEL HICHWA: I agree with that completely. That's the critical factor, I think, there. JOHN BRATINCEVIC: There's a lot of teaching. It's teaching design thinking, and problem solving, and continuous improvement. And then technical things like architecture, and best practices, and things like that. But it's this mentoring thing. We want you to go do these wonderful things. That's our goal. MICHAEL HICHWA: So is there anything we've missed-- sort of been talking about that you can think of about low-code? Or something that's important with low-code that we haven't really addressed, maybe in terms of business processes, or CICD, or-- JOHN BRATINCEVIC: I think probably the most important thing to bear in mind is, when people approach this subject I think they think of it in terms of just, well we're going to make some series of apps in an easier way. And that's kind of it, right. And they kind of put it at this lower tier of development, a very specific tier of development. And that pattern works and can be effective. But I think what I'm seeing-- what I expect is that this idea of declarative development, it's matured to this point we call low-code. It's going to be baked into everything. It's going to be baked into packaged applications. It's going to be baked into suites. It's going to be baked in specific software categories. And this idea of software just changing all the time-- the only way to really do that concretely is some sort of practical development where the interoperability is guaranteed. And there's quality checks, and it's all on a platform. So, my expectation and my recommendation in general is that low-code should be seen as kind of a first class development approach in your software strategy. This isn't just a we're going to replace spreadsheets kind of thing. This is a all our software has to have some low-code units to some degree or another. And we might even choose to write an app in low-code as opposed to buy an app off the shelf, because it can reflect exactly what we need. And we can continuously improve it, and change and adapt in an ongoing way. And the costs and difficulties of doing so are so much lower than writing it with code. So I see it as getting to the point where it's quite disruptive to kind of everything in software. It's not in this little bucket anymore. MICHAEL HICHWA: Thanks very much, John. Thanks for talking low-code with me today, and I wish you the best. JOHN BRATINCEVIC: Thanks for having me Mike. 