 [Music] hello and welcome back so the we go to continue our demos of typology of fabric the best way to go through some of these demos is to work along with me while you're seeing this video try it yourself for an IBM cloud said I would encourage you to do that so in the last lecture we looked at how to set up your own network create a channel add peers look at the blocks in your in your network and so on in your channel in this one we don't look at a demo application a simple application that will transfer marbles so you can think of it as as an extrapolation of what Bitcoin does Bitcoin is actually transferring assets across so you call it transfer bitcoins from one person to another person but here's a toy example you're gonna transfer some marbles right two marbles have certain properties it has a color it has size we look at that rate and this is a very simple application that you can deploy on on hyper edge of fabric of course you can think of very much more complex applications as well apart from just deploying that code will also look at what that code looks like how you would write that smart contract code and also write the client application code that will interact with the smart contract itself and all this it how you also get a cool UI with it I'll show you that along the way okay so I'm going to start by now creating this launching this application first so let's go first if you go to the same network that you created last time the try samples tab here there are two sample applications that you can deploy so let's start with the first the first one is on hyper edge of fabric the second one is on Composer so we will have a demo of that later but let's first to go deploy this on our network so this is one of our deploy the marbles smart contract on to the object okay so I was not a member of the default channel so I was trying to do this as Company C and it did not let me do that so let me go do this as company hey so I'm gonna try and deploy this has come now Company A I'm gonna deploy marbles on the default channel so now a and B are the ones who are going to be part of this application this was just a sample application you can of course take the same code and deploy it on the second channel that you had right so what's happening behind the scenes so in the behind the scenes what's going to happen is we're gonna clone the github repo so iBM has made this piece of code public you will clone that into your own github repository there is a deployment pipeline that will go automatically deploy that code onto IBM cloud shield apply this part contracts onto the channel you have selected and it will also go deploy the application as a separate runtime alright so all this is getting going to get deployed for you let's select the region it's going to be u.s. south again we're going to deploy the marbles application github I'm gonna give a give my authorization for my github so let me add that I will authorize it to clone into my github so I'm gonna authorize IBM cloud okay so I think that should get done and be reflected here so now that required has gone away if you see it so I've already authorized github and all of these details you don't have to modify it but these are some of the configurations that are set up it gives you the URLs it says that there's a node.js application that's being written a few other things let's go ahead and create this so this is going to take about maybe five to ten minutes really depends on your internet speed because it's gonna clone some docker containers it's going to do a bunch of things so it says five to ten minutes like it it gonna take that much so in the meanwhile what we'll do is while this gets created it also tells you how much has progressed let's go and look at the the code itself for what the smart contract looks like okay so this is where IBM has made the code public so this the marbles this is again gone through various iterations it's very well written and it's a good way for you to get a feel for what the what a smart contract looks like so what is this actually going to do right so let's look at this gonna be creating marbles so each person can be can say okay I have a new marble and add that to the network so that's one operation they can transfer the ownership of marbles between people so if I own a marble I can transfer that to somebody else and in that same way I cannot change the ownership of the marbles that I do not own right if I don't own another marble I can't change someone else's marble to be my own so that will be prevented so that'll be an access control rule that we will implement and there are some attributes your mother that marble has an ID it has a color there are multiple colors that are available it has a size small or large and it has an owner right so once a marble is created each time it could change ownership across people and all that will be tracked on blockchain we are calling it marbles here but you can think of any kind of an asset that is getting that's owned and I can the ownership can transfer amongst people right so what is the architecture look like so what we have is there is a marbles application this application is written in node.js it has a client which uses the node SDK that fabric provides to connect to the smart contracts on blockchain so there are there is a smart contract deployed on each of the peers this is the module smart contract we look at the smart contract also and in just a little bit what does the network look like we have two peers this is on the default Channel this is the ordering service and there are two CS for that that each of the pair is connected it's like this see actually the peers will connect to the CA directly the CA is the one is showing identities and you're going to use those identities and the period will validate those identities and apart from the node.js application we also have a browser UI from which we can trigger transactions via the application onto blockchain so there's a WebSocket connection between the browser and the marbles node.js application and from the application to the peers there is a G RPC Google RPC connection that uses the fabric SDK to communicate with the object so that's the overall network architecture so this tells you how to set up Mobile's yourself so this will be the next demo that we have it so if you the IBM cloud makes it very simple for you just through a few clicks you can experience all of this but what does it take to actually do this yourself so we are going to do this as the next demo so hold you hold your horses for that it will take you through all the steps that's right now in those 5 to 10 minutes whatever is happening we're gonna do that step-by-step ourselves on a on a virtual machine that or or any other system that key that you have ok so this is how the marbles will go through the application of holes at itself theta but let's look at a little bit of the code itself right so let's start with the the smart contract code so let me open up so if you go to good github there's a folder called chain code source marbles so I'm going to open that in another tab so let's go through this part so this code piece of code that's in this folder is what is getting deployed as a smart contract on each of the pairs on blockchain right so this is part of your installed in instantiate so this is the smart contract code that's run in a decentralized fashion so let's open marbles that go right what does it provide it refers to finds the data structures that we will be using so we have a reader structure called marble right it has an ID it as a color it has a size and an aura right now the owner is actually a relation it's actually of type owner relation now owner relation itself has an ID user name and company I think the owner object is a little more interesting so it has the details about the the object type the main identifier is really this ID field the rest of it is just cosmetic right so there is a main function but I think the two important functions to look at are in it and below that there is a book right what it does is the init function of a smart contract so this is a required function that you need to implement in your smart contract what the init function does is it initializes your spot contract with any parameters you need to set right so you can set certain values as initialization in your spot contract and this will get called at the time of instantiation of your chain code on a particular channel so you've installed this strain code on up here and the it's it's not at the level of a channel at this point but then you instantiate that chain code for a particular channel saying this I want this copy of a chain code running on this channel and then there's a separate state for that chain code for that channel and you will not you'll be allowed to ins initialize that state so what are we doing in this novels application what what are we initializing so here we are going to take one argument just just for this just for illustration of how that works it's going to be a numeric are given so you can actually parse this argument you can so you can send that as an argument to your chain code at the time of instantiation and you can just check whether it's it's actually a numeric argument so this gives you a way to validate any inputs provided to your network so for instance you can initialize your network with saying okay there are going to be three marbles that each of the members are going to own so I'll create those marbles as part of the visualization for instance you could do that but we're not doing that here yet in this in this example this just goes through that and all it stores is just just some key this is again as an example of what you can do so you can put state you add a new key and put some value to it so you're just storing or saying the UI is is for point 0.1 okay so the initialization step this allows you to initialize but let's look at the invoke right the invoke is what is going to get called each time your chain code is going to get is trying to perform a transaction or you are trying to query for some values stored in the chain code then it comes from the invoke function so the PR we'll be calling this invoke function in the chain code and that's how transactions execute and everything within this invoke function whatever is the execution is known around atomically which means that any state you change here either all of it will change or none of it will change right so here if you look at some of the examples some of the functions that are implemented so it implements a simple read and write but you can do a delete marble you can initialize a marble you can set the owner for a particular marble you can read everything so tell me all the marbles are going to work across all the users tell me everything so that's another query you can get history for a particular entity so you for a for a particular marble tell me all the transactions that have happened for it right maybe change ownership five times tell me all those transactions so you can get gogit history as well you can get marbles by range so based on the name of the marble whatever you've identifier you've given give me every or give me all the marbles between range this between this value and this value in the ID range all right so you can do that okay so let's go look at some of these examples so let's go back up a folder and let's look at write ledger dot go so this has all the functions that are modifying the state of the chain code itself so these will be committed as transactions on blockchain when when invoked ok so let's take one example I will come back to the delete marble but let's go to init marble right so what init marble does is as it show as it says in the in the comments here it's gonna create a new Marvel with a certain set of parameters so it aches a few parameters as input so this is an arc string array it expects five parameters so that's you can do a check on the number of parameters and then what are what are those parameters right so it's doing a few checks you are saying the third argument must be a numeric string and so on and then it's also checks whether the ID you've provided it is actually unique if it's not then the model already exists and you can't try and create a model that already exists so you're gonna get an error there so all these errors would result in the transaction itself throwing an error and you will get that as part of a notification back from blockchain so in your transaction is failed and you'll also get the error message along with it okay so now all these checks are fast so we're gonna create a new marble so you're gonna set doctype as marble there's an ID color size enola so you're gonna set all of those things as provided in the user input and you're gonna call put state to store that information onto the ledger so the put state is actually a call to the blockchain ledger the state database and you're gonna store this key value pair the key is the ID and the value is the object representing in the marble itself with all of these parameters for it so now you have once the put state is on you've stored that on a blockchain remember this is just the endorsement phase when this is executed after this all the nodes have to execute it has to go through ordering service it has to be validated and only then will it get committed into the final state and blockchain so that's the that's a process you can also edit owner so this is creating a new owner new possible owner in the blockchain you can set all over for a particular marble so what this will do is does the initial sanitized sanity checks it checks of the provided user the new owner is actually a valid user so if it's it does that it gets the current state of the model it tries to find out who is the current owner so it does a gap state so it goes and looks up the blockchain ledger to find out who owns this mom now check who is authorizing this right so is the person who invoked this transaction is that person the owner of this marble if they are not the owner then you're not going to be or you're not going to authorize them to to transfer the marble that they do not want all right so you have to own the marble you are trying to transfer so unless you do that this can be done so a word of caution here this is just meant as a simple example a toy example it's actually possible for you to send you to perform this check using crypto trip cryptographic right so you can actually send the credentials of the user or attributes of that user and you can validate that it was indeed the this the owner of the marble is indeed the one trying to invoke this transaction so this check right now we're just doing it as a simple if condition based on the argument provided but you can actually do this using cryptographic checks it's possible to do that in chain code also right better that we're not demonstrating that here okay all the checks of passed now we're finally gonna transfer the marble so you're gonna set your gonna update the record set the new owner as the owner provided and you're gonna update the argument the same marble ID you got to put state put that back onto the ledger so if this transaction goes through successfully across the network the new owner would have changed okay so there are other things about disable owner delete marble and so on you can go through that at at leisure right so that gives you an overview of what the smart contract itself looks like so it's a bunch of functions that are all known a manipulating state maintained by the smart contracts by this by that smart contract itself and the state is isolated for each each Channel so you can have the same contract running on multiple channels and they can be managing different state information okay so let's go back to our github and let's look at we went through the chain cons what are the other aspects of the application so the other aspects are the application code themselves so let's look at that briefly so this all the application code is inside the utils directly and there is a WebSocket server side rjs so this is the server side node.js application that we talked about and this is the one that's going to interface with the blockchain use the client has decayed use the node node SDK to call blockchain to perform transactions so what are some of the things it does it gets the channel ID it gets the pure URL so all of these will be configuration parameters for the application and if you want to create an marble so this is data type is create then what I do do is is create an object and it will call create a marble right it's part of the libraries folder so you're gonna create a marble with these these parameters and that create a marble we'll be calling the SDK functions likewise you can also transfer a marble it calls that so this is the library function that I talked about so this has functions for set marble owner and it'll also have something for create marble also right so the set owner is if you look at it it has the pure URLs the channel ID this particular chain code ID for the for this marble strain code all these are already set in earlier parts of the code right all right what about the endorsements you need right and finally the chain code function to call so it's going to call the set owner function because we saw this function previously in the write ledger dot go file and it has the arguments that needs to be passed to the chain code so it sends all of this information it calls invoked chain code so this is a is something in the SDK so you go and work the chain code with these parameters and that will then call the blockchain he'll send send control to the pier to invoke this particular function on the good okay so that was the server-side application so apart from that you can also have a UI so we have a we have a UI for this and there is a UI building the GS and it has the abilities that you will some of these capabilities you'll see you'll actually be able to easily drag and drop marbles as a way of transferring ownership right so all those UI capabilities are also available as no J's code but that's all of this is now a step removed from blockchain itself so I'll leave you to to see these things that Leisha okay so now let's go back to our UI r and see okay our marbles application has launched so you will see that it's no longer this black and white picture there's actually a color picture that tells you and it's it's ready to launch so let's go ahead and launch it so I'm going to launch this marbles application so this has now been deployed on your default channel that you had previously you have two organizations or company a and Company B that are part of this this demo okay so let's go through the guided tour for now so what are some of the things that are happening in the backend right we've kind of gone past this is just let IBM cloud deal with all this thing what are some of the things we are doing one is the connection profile so this tells you what is the network how do you connect to the network what peer do you need to connect to who's the order what is the policy so all of that is captured what are the channels I mean all that is captured in your connection profile so you need that set so as part of your network that will be available in one place you can actually go look at your connection profile so next thing is you have to set up identities right so you have identities for your admins for each of your organizations so you have that you need to have that setup then you have to get your chain code deploy that chain code or install that chain code on each of the peers and instantiate that chain code on the default Channel on which you want to run this so that's happening in step 3 so if you each of these will also give you the settings that that are being used so you can go through them as well but all this has been done for you in the background so it's just telling you what are what are the things that have been done and finally you're gonna be creating some assets so we have three marbled users Amy Alyson Ava and each of them are going to be having three marbles so we've already performed some invoke functions on blockchain to create these owners and create the marbles owned by each of them so let's go ahead and create them so that calls this calling the invoke functions in the background so that will also look at what we can also parallely look let's go to our channels and watch how the block height keeps increasing for the chance if you go to look at the default channel the block height is 6 right if you go look at one of those transactions it will tell you that the marvel's underscore sample chain code is invoked this is the UUID of the transaction it wasn't invoking gives you as a timestamp as well so these were all the transactions that would invoke and all of these were part of block number 5 right in your in your channel ok so let's go back to our UI so the everything has been set up now our marbles application is ready to use so as before as I mentioned before Amy Amy Alyson IVA are the three users yeah in this network each of them have three marbles but if you will see they all have different things Ava has three large marbles Alice has three small marbles and so on so for each of these marbles we can easily in this UI go create new marbles so let's add of marble for IVA we can choose a color let's pick a color and we can say what size it is and let's go create it so when I clicked on create it's actually going to call our marbles application which in turn calls blockchain to put that information on launched in that IVA and now has a new marble purpose marble of size small right so that information would be added to blockchain if you go back and see our channels the channel height would have also increased right so the it would have added one more block here block hits block I'd seven okay so let's add another marble just for the heck of it a marble is being created to for a me and here below that also shows you the blocks so it shows use at zero zero six each block has been added sequentially so what we can do now is we can easily pick up and drag and drop to somebody else and this is really shows a change of ownership its signifies a change of ownership so the red marble now belongs to Alice and a new block has been committed to the nature right so we can just do it once more let's say this is a large marble and Amy gave that marble to Ava okay so some of these other things you can play around with later is you can for instance go try and shut down a pure I'll bring it back up and it should still show the same state of the ledger so some of those things you can play around with so that shows you some of the fault tolerance aspects I'm not going to show that here let's the other aspect here is in the again let me just step back in the settings place there's a called story mode you can actually go enable it that's any but it actually it's a pretty cool I think tells you what's happening in the background the story mode is now on okay so let's see let's go through this so I'm going to create a new marble this is no story story mode is enabled let's choose green then it's small so when I say create it will actually tell you what's gonna happen in the backend so for instance the first part of it is you can build a proposal a transaction proposal that has this information about what is this new marble who is the new owner that information is created in a transaction it is sent to the peers for endorsement the peers will execute the smart tracked the function that was invoked it was then say okay I agree that this is the output of the transaction we'll send that endorsement back right so that's the transaction response once the client has collected enough endorsements it can then submit it to ordering so the ordering service might get such requests from multiple clients they'll order those transactions and then say okay these transactions have to be now committed into a block and then each PR once they get the block from the order they will validate these transactions make sure there's no double spending make sure there are no errors and then it will commit the transactions so that's the process of so it tells you what's really happening in the back end when you do any one of these transactions okay so that ends the demo but before we close this lecture I would like to just prepare for the next demo so so far in the last two demos we had it easy we had the IBM cloud do much of the work in the backend and I just walked through what ty bian cloud is doing in the backend so in the next table we're gonna do it ourselves right so we're gonna do everything from scratch build a network ourselves so for that what I would encourage you to do is be prepared with Ubuntu VM so that's what I'm gonna use in the demo but you can also use a Mac it will work just as well in a Mac there are instructions out there where I'll show you the pointers for it and there are a few prerequisites so please install those prerequisites before you get to the next lecture so you need darker but docker compose nodejs so darker and darker compose or how each LM H and T of your network the pairs the orders the chain codes they're all going to be deployed as docker containers you need nodejs and npm so for the some of the application development you need a git client and you need go lonk so please install these prerequisites before your next lecture and next lecture we will do it all from scratch and you'll scare a feel for how it what it looks like to run on a network yourself okay with that thanks a lot and I'll see you soon at the next lecture [Music] you [Music] 