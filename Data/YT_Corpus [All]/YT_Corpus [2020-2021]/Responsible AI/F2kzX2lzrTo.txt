  Hello and welcome to our session today where we raise the question, how machine learning is able to influence existing end-to-end processes in an existing shared service framework environment. So my name is Nik. And I'm part of SAP's IDG, so Intelligent Delivery Group, and I'm taking over such responsibilities and projects related to S/4HANA, Shared Service Framework implementations, and machinery projects. So for today's session, first of all, I would like to do a little bit of stage setting to give you some insights about the shared service framework, and in the end, going a little bit deeper into a specific end-to-end scenario. And finally, giving you some details regarding our AI business services. So, first of all, the shared services framework. So if you're talking to customers, for example, midsize or global customers, they all have to deal with different kind of stakeholders. In the end, with internal stakeholders like your own employees, which are raising some questions related to their salary or whatever, and also external stakeholders like customers or vendors. In the end, it doesn't matter, which is the question, or the inquiry, or the exception about. It doesn't matter if it's finance, HR, procurement, general ledger, inside of finance, or KMCC, or car fleet, or whatever. In the end, you would like to find a solution for the question. And therefore, you need a single point of truth, a single point of entry. And this is the layer, what we can see here, it's more like a service management tool. And the shared service framework offers a lot of functionalities and capabilities to taking over these tasks in the end to forward a question to the responsible person with the capabilities to answer the question. In the end, we have to split the questions to find a solution more or in a granular way. Typically, for finance, you build business areas like accounts payable, accounts receivable, general ledger, whatever, because in the end you would like to identify a team which is able, based on their soft, hard skills, et cetera, and their know-how to answer the question. You do it like this. Example, if you have a question from a vendor related to the standards of an invoice, it's always in the accounts payable area and it's related to one work list because there is one team which is able to answer the question related to status of the invoice. And now the big deer, the game changer is here to raise the question where is the place for machine learning, artificial intelligence, IRPA, et cetera. And that's the main question. So we have to identify, based on the business area, high volume processes, including high manual activities. And this is the starting point also for our session today. We stick to the vendor inquiry process. The typical process of really easy. You are buying some good from a vendor, the vendor is sending you the good and, at the same time, the invoice. You are paying this invoice and everything is fine. The vendor can clear their items. But what's in case of an exception? If you're receiving, for example, 1,000 vendor invoices and only one is missing, for sure, the vendor will raise a question, when do you pay my invoice? And that's exactly the challenge. You have to establish a process in the end. What you can see here. At the end, receiving the email, creating a ticket. The ticket is more like a container from our server's perspective, and it contains every information you need to finalize the process with the solution in the end. The agent has to capture everything, read the email, et cetera, extracting the relevant content, searching any back entrance action, like your UP system or an S/4HANA system, find your right invoice, and, in the end, preparing everything, sending a response, and close the ticket. And if we are talking about an amount, 2000 vendor enquiries on a daily basis. That's normal for a global company. And if you need five minutes per each, this is a very hard process with a lot of manual activities inside. And the saving potential is very high because if you are able to kick out manual activities by using machine learning to make four out of five minutes, this is a massive saving potential. And exactly this are we doing. We're using machine learning to read the email; to extract the content out of it; pre-categorize ticket; extracting relevant details like, who is the vendor, or what is the invoice about, the invoice number-- bringing everything into a pre-configured ticket so that the agent don't have to look. And we are creating essential business value by combining both worlds, extracting and using the extracted details out of the incoming email and the attachments, for example, and bringing it together with your business application, like the S/4HANA Shared Service Framework, via creating relations between the extracted details and the existing master and transactional data out of your system. Finally, what we all so can offer is an auto-reply, for example. If there's an easy question related to invoice status, which was already paid yesterday, then there's easy going. You can directly raise an email based on a made template. It's already paid. And I would like to go a little bit deeper into this scenario with our demo. Now, let's have a closer look into an existing end-to-end scenario for a lot of our customers. So what I already mentioned that, for example, the vendor inquiry process is an end-to-end process where you receive a lot of inquiries in shared service organization. For example, some of our customer, they were receiving 2000 vendor inquiries on a daily basis. So it is a huge amount. And it also includes manual effort. So what we are doing now is, so we are trying to demonstrate this end-to-end scenario and how machine learning is able to step in to take over manual activities. So, for example, we need here to roles. In the end, the first one, the first role is the vendor. The vendor have a question, is writing an email. First of all, the question regarding the existing invoice, which is still not paid, and, additionally, the vendor will attach a new invoice. And, on the other hand, the second role, this is in the accounts payable area in our service organization, the agent. And the agent is trying to find a solution for the vendor inquiry. So what I will do here-- So as a vendor I'm typing in a target address, which represents any additional service or organization for the accounts payable question. Then I'm typing in, for example, a subject; question on invoice; a body, so I'm writing an email. Hi, I have a question on the status of invoice SAPX00145155. This is a real one because we would like to create the business value in the end to use machinery to extract this value, this invoice number, and to directly create the link between the existing document instead of your ERP or S/4HANA system. Could you please be so kind to answer? Best regards, Nikola case. And this is the first part; the question regarding the existing invoice. And now I will attach the second invoice. And if I have a closer look to this invoice, this is a new one. And the interesting part is here. We would like to extract, via machine learning, this invoice number, INW17058. And that's all for this part. So now I'm sending this email to the shared service organization. Now, I switch the role from the vendor perspective into the role to an agent. So what does it mean? Now, I'm in my service organization in the accounts payable, and I receiving this incoming email. So what we can see here, this is the new ID. For our case here, the Shared Service Framework, as I mentioned already, is more like a service management platform, and it provides a lot of details, and a lot of functionality. So you can see here, for example, there's already a categorization in place. So the reason for it is that, based on the email, the first machine learning service, service ticket intelligence was running, was extracting the context of the email and provides a categorization. So as a result, the email was routed to the right or corresponding person instead of the shared service organization. What we can see here in this note section is nothing more than the email with the existing invoice number and also the attachment. But if we go to the machine learning section here, we can see two entries. The first one was extracted by the Business Entity Recognition service. So the BER was analyzing the text of the email and extracts this reference number, which we provided. And, finally, here we can see the real business value, because the BER was able to extract the right value and our Shared Service Framework as business application was able to provide the real document in my system. It doesn't matter if we're talking about an ERP system, S/4HANA system, or another system which is integrated or connected to the Shared Service Framework. So for our case here, we also can see that the postings already done. So in the end, the vendor should already receive the payment. But if you would like to check it a little bit deeper, we are opening the link in this case. And you can see the real corresponding document right here with the document number, which represents, in the end, the lingo, the Shared Service Framework environment, the document date, the posting date, the fiscal year, et cetera, et cetera, so the reference. In some of the cases, if an invoice was not paid, then, for example, there was an exception or whatever. For example, then prove it's missing. Then the easiest way is to check here, for example, the workflow. If the workflow is completed, for our case here, yes, the workflow is completed. But, maybe, in some cases, there are approvals missing. And in the end, the message here is we were able to exchange every information we need and every information which is here available on the EFI document. We can directly bring it into the Shared Service Framework for every case or every requirement where it is needed to answer the question. So now let's going back into my ticket. So as a result, we directly can answer the question. So the first part of the email, that, for our case, for this reference number, due payment was already. So therefore, we can go directly to email functionality of the Shared Service Framework. So the Shared Service Framework offers a lot of functionalities. And one of the functionalities is here in email editor. So and now, we're having the advantage by using those functionality. For example, we are able to use mail templates. So these mail templates, in the end, is able to use the existing information which we collected for this specific invoice number, and we directly can paste in predefined email. So what you can see here is that the invoice was transferred to this email template, and also the information that the payment ran by us already. So now, finally, we can send this email to our vendor. So now, just to summarize what we did so far is; we received an email with two questions in, the first one regarding an existing invoice, how is the status of my invoice, or what is the status of my invoice? And the second question was here's new invoice, could you please proceed this invoice? For the first part, we were able to check based on the invoice reference number and the related document that the posting was all ready. And this was also the answer and, in the end, the solution for this question. And now the second question is what's regarding the new invoice? What we can see here in the second line is that the Document Information Extraction service was able to extract the right number out of the incoming document. But what we also can see here that the confidence is only maybe not high enough. So now the next step could be to validate if the numbers are correct or not. And therefore we are switching in Correct UI based on the Document Information Extraction service. What you can see here is the brand new Document Information Extraction and Notation UI. And this is exactly the invoice which we attached to the initial email. And you can see here that also the corresponding and important information are marked. So the INW17058 was extracted as invoice number, or we can call it here, document number. Additionally, you have the possibility or the option to include much more attributes than shown here. But for our case, the most important part is this one. And you can see here, this is the overall document and demarked invoice number. So in the end, from a technical point of view, we are handing over this number to the Shared Service Framework. And this is not only a notation UI, it's also a correction UI. So, for example, if an invoice number was not found correctly, then you have the chance to mark it here or also to correct it. And then send these details back to USSF to Shared Service environment to use the new information, or, also here, to directly hand it over, for example, to the Vendor Invoice Management, or directly to UFI transaction to post this document. OK, so and now going back to my Shared Service Framework environment. Now, just to summarize, as a result related to the initial email with two parts. First of all, from a chat service perspective, from an agent perspective, we were able to answer the question regarding the status of the invoice, it was already paid. And regarding the second part of the email, capturing the new invoice, that's already done. So, in the end, with the help of machine learning, of different kind of SAP AI business services, STI, BER and DOCS, we were able to automate this process, at least, in some parts of this process because the agent don't have to step into the notes or, you can see here, the email, or you don't have to read the invoice. It's everything possible-- automation happen by using machine learning. So just to summarize, as a result, what you have seen so far in this demo is that we bring this process on the next automation level. And this was not only our idea. So one of our customers, BMW, was raising this question one and a half year ago. So as SAP, are you able to support this process with machine learning? And then we started a co-innovation together with BMW exactly for the vendor inquiry process. BMW now is live with more than 150 persons and people inside of their shared service organization. And they're reducing their daily workload, regarding the vendor inquiry process, between 20% to 25%. And this is a significant increase of the automation and, in the end, of the reduction of the manual efforts. But now let's have a closer look to the AI business services also from a technical point of view. The SAP AI Business Service is more like a portfolio related to different kind of services. What we've seen so far in our demo was that we're using Service Ticket Intelligence to categorize the ticket, in the end, and the email. We used the Document Information Extraction service to analyze the PDF and to extract details related out of the PDF, like the invoice number and the vendor. And, finally, we also used the Business Entity Recognition service to be able to read the unstructured text. And those are the good news. Those are only three pieces, in the end, which we combined to solve the end-to-end process vendor inquiry If you remember to my first slide with the different kind of pillars, FI, HR, whatever, it doesn't matter. The only thing what you need is a high volume process with a lot of manual activities inside. Then, related to this process, you have to decide which capabilities you need and, in the end, which service. The ultimate target is always to create business value by combining your business application and the AI Business Services. From an architecture perspective, this is also really easy because, on the one hand, you can see that we are using the S/4HANA Shared Services Framework as my business application, and on the other hand, we can see the SAP Cloud Platform with the capabilities of the SAP AI Business Services. And, as I already mentioned, it doesn't matter. It's also possibility to exchange the business application, for example, using a CRM sidecar solution or another ERP system. It's all about combining everything. Now, let's stick to the next demo. If we are talking to customers and real customer projects, we are always facing the questions regarding, for example, an F1 score, accuracy, or at least the question; if we are extracting nine out of 10 on the right wave, what do we have to do to also get the last one? And from a machine learning perspective, this is a very difficult question. Because if we are talking about a score round about 90% this is not bad for a machine learning service. But the customer expecting always 100%, but from machinery perspective, we're not able to deliver to 100%. For sure, we can try to get as near as possible, nearly to 100%. And, as always, the customers are challenging us. If you remember to our vendor inquiries scenario, there was a really easy question on one, more like complex year invoice number, which was mentioned in SAP, ENV, and the number, for example, 10 digits. The machine learning was able to extract this number. But often, there is the case that the customer is telling us, yeah, but if I'm testing this Machine Learning service with the invoice number 47, 11 it's not working. The expectation of the customer, and for sure I can understood this expectation that the machine, which I showed was able to solve this issue. Please let me show you this example. I'm switching here in to my Postman. So I'm using the Postman to test my APIs or to use my APIs. And for our business anti recognition example, we can see here on the left side the capabilities what I can do with the Postman and, in the end, with DAPI for starting an easy question to the API, which is here in an interference job, or train them, or to create new data sets, and, in the end, to publish and deploy, also, new trained models. But step-by-step. First of all, I will copy and paste an easy example. I have a question regarding invoice 4711. Could you please be so kind to tell me the status? So the only thing what I have to do for the BR is to type in the text handing over the model ID and version regarding to the model ID. Currently, I will use a standard one. So you can see it here. This is an SAP Email Business Entity Recognition model, which SAP is offering our customers. So, in the end, in the first step, I'm handing over the question and my expectation is that BR is extracting the right value. So now let's checking the result. So what you can see here, the Business Entry Recognition Service was not able to extract 4711. The question is, why? Because, for example, this invoice number is not a typical invoice number. OK, so the customers raising the question, but why it's working if I'm using this number? Let's check it. So I'm handing over a longer number with the same model and also the same version et cetera. So now the expectation would be if it's working with a longer one, then for sure why not with a shorter one? Let's check it again. So the BR is able to extract this typical invoice number with a very high confidence. It's really hard to bring this fact to the customer, but what you can do is you can train the model and therefore I would like to go deeper into an annotation UI, doccano, and then, how we can use new annotated details and data to train a custom specific model, which is also able to handle the shorter numbers. And the only thing what we can provide our customers currently is to tell them, OK, so if it's not good enough, then we have to train the model, for example, based on new annotated data so that we are able to provide some metadata, and some data to train the model, or template approaches, or whatever. But, currently, this is the only way to improve the score. And what we have to do to retrain, or to train a machine learning service-- This is honestly really easy because, typically, we have everything in place. On the one hand, we have a business application. As I mentioned in our first case or in the first scenario with the Shared Service Framework, there are some tickets in place. So you are able to extract some details out of the ticket, or you are able to extract the incoming email, PDFs, whatever. In the end, to have to bring it into a format, that an annotation tool is able to consume this data and these details. And for now, I would like to demonstrate how doccano was able to annotate data, which we can use as an outcome, influence with some metadata, to train a model. So the only thing what we have to do here is to create a new project. I will name this project, for example, Teched ML model training. Training-- or we can name it for BER, for the Business Entity Recognition service. And we will do a sequence labeling. So we will label the attributes which are interesting. For example, if you are receiving or sending an email and we are typing in the invoice number, then this is our attribute of interest. And then we will create this project. So now we are in doccano which provides us some functionalities to do the annotation. So the next step, I will upload a file. Give me a second. I will do it right here. So now we have imported data. And the next step is we have to create some labels. A label in the end, we need a label to mark an attribute which is of our interest. So, for our case, we would like to create a new attribute which is named invoice number, for example. And that's all. If you would like to extract more details like purchase order, vendor IDs, currency, or whatever, for sure, you can do this. But for our easy example, we will only go for the invoice number approach. OK. So let's start the annotation. And what you can see here, this is the overall text. Yeah, for sure, a really easy one. But now double click to the invoice number. And that's all. I've labeled this attribute as an invoice number. And this is not a keyword matching or whatever what we are here doing. No. We are extracting, in the end, some information regarding in which position is the invoice number out of this text? And for sure, typically, you have much, much more complex cases, for sure. But for all purposes, this is enough to train a really easy machinary model. Now, going one step back and exporting the details. Then, finally, with the exported file, we can directly upload this file to our Postman environment, start the model training, deploy the model, and then we are able to making use of the SAP AI Business Anti-recognition service based on our new trade model. Therefore, I have to switch to my Postman environment. And, now, we can directly start to create a new model. Therefore, we have some restrictions. And the first one is we have to create a new data set. So the data set, here we can provide a new name for example chateau is a framework and tag it. And now we are creating this new data set. OK so therefore we received a successful created data set including a data set ID. And now we have to fill this data set with some documents. And this means, in the end, the data set is more like a container. In this container, we have the chance to bring in some documents. And the documents are exactly the JSON file, which we created by exporting it from the kernel. So therefore I go into the documents and uploading a training document. Here I have to select the right one. And this is the example. And uploading the document. So now we were successfully able to fill our data set with our JSON file. And that's all for the second. And now we will starting this training job. Therefore we have also the chance to create a new model and, for example, take it. So this will be our new model. Now, we submitted the training job and this means that there is a new entry in sort of the training pipeline. And now the machine is working and its training based on the data set, including the document, and in the end, including our JSON file. So, and as a result, we finally will receive the new model. Now, we can go to get the training status and, if the model was successfully trained, and we will receive the new model. And we also can see the accuracy. And this one is very high because there was only one item in the end. And if we check one item against the same item, then it's no surprise that the accuracy is only one. Now, that's capturing the model name, because, finally, we have to deploy our model. So let's check my variables here. Oh, it's the right one. Updated. And now, this model is used and was deployed. Finally, we can check if our new trained model is able to extract the right invoice number. So, and therefore, I will stop this indifference job based on the new model. And now, checking the result. And what we can see here, with the new model we were able to extract 4711 So just to summarize what we did. We exported some data, for example, out of the Shared Service Application, then we used those information to bring it to doccano, create metadata out of the doccano results, exporting it into adjacent file, transferring it through the machine learning environment in the end, training a new model, deploying a new model, and now using the new model. And in the end, this is also from a customer perspective, the right way to go. You can demonstrate the customer how easily the customer's able to improve the old machine learning model. In the end, it's always a combination. You need more and more data. For each machine learning model, which is not on a template approach, you need as much data as possible because then the accuracy in the end of the score will be higher. If there's more variance in some of the documents, than it's always better from a training perspective. And, for sure, the first dot could always be of a pre-trained model, but every customer have to validate if the accuracy and the score is high enough or not. If not, then go for the custom specific model approach. And this is also scalable for every other process. Doesn't matter if we are talking about finance documents, or HR documents, or facility, car fleet, whatever. If we would like to extract, for example, here for the BER attributes of interest for sure, it always matter which attributes I would like to extract. For sure, there will be a difference between car fleet and for example finance documents like invoice inquiries. But in the end, it doesn't matter if I would like to extract license plate or an invoice number. It's always a number, in the end. So you have to check what are the real requirements from the customer perspective and what is the best way from a machine learning perspective to support this process. So as a result out of this model training, we at SAP in our own shared service organization decided to go for the same approach. So we implemented a pilot in the end and our own business gave us the feedback that at the beginning with the pre-trained model, we have a 60-40 year. So six out of 10 are correct. Then we go for the customer specific model training and we enabled our business to train by their own a new model, extracting the details, annotation, and then training it. And then the results were really fantastic because the feedback and the feelings of the agent was 90 10. So nine out of 10 are correct. So this is a very this was a very, very good outcome here. And we also recognized that one out of four emails is a new one. So it's not a question related to an invoice, to the status. It's a new one. So just to summarize quickly. What we are doing here is, we're using the SAP AI Business Services together with an SAP application and business application S/4HANA. We would like to automate at least some part of the process, in the end, to speed up the process by using the integration with Cesaro which is already here. And, finally, to create much more business value out of it. And if you think and remember to my first slide, it doesn't matter about which area we are talking, finance, HR, procurement, those are the good news. It's very scalable for every kind of process where you have a high volume process of many activities, you can decide which AI businesses you would like to use to create business value out of it. I hope that you enjoyed this session and I wish you all the best also from a learning perspective here. So please join other sessions, and I hope you can continue your learning session here. So thanks for your attention. Please stay safe and take care. Bye bye. 