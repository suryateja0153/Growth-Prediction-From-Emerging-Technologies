 [Applause] [Music] so I have a pretty simple message for you how many of you guys use slack or some sort of collaboration tool that involves chat how many of you say to someone hi when you DMO notice the jeering here's the one message I want to convey if you say someone you're trying to be polite right you're just saying hi but now that person has to think and say okay why is this person messaging me they're just saying hi are they gonna have an ask and are you entrapping them into sort of forcing their attention or your attention to them and so I just want you to everybody we consider it when you tell somebody that when you tell somebody hi actually mean hi and don't necessarily haven't asked and if you haven't asked just say what you want and they'll get to you when they can so that's my talk yes okay so this will make it fast audio participation anybody who thinks that they are the smartest person in the room or amongst the smartest person in the room raise your hand okay we had a few now if you think that you are amongst the least smart person people in the room raise your hands keep them up now if you raise your hands look around and see the other people who raised their hands and so the next time you think that you are not smart enough to understand something or to ask a question or to fix a bug or to have an opinion or to give value to the community or to have a seat at the table I want you to remember all the hands that you had you saw put up and those hands should say to you that yes you can understand this thing your question is worth an answer you can fix that bug your opinion does matter you do have value and you do belong at the table because everybody else in the room who raised their hands thinks you do hi i'm jonathan slate i have one minute to make two requests of you number one please support the minneapolis climate action and racial equality fund to quote the fund will engage residents most affected by climate change by supporting solutions developed by those communities I believe that when rails comp comes to a city like Minneapolis that City should be better off for having had us there you could help simply by purchasing extra rails comp t-shirts or you can make a donation at the t-shirt station also please come to the up yon hell of happy hour so I can thank you for your donation if you don't donate come anyway it's a 730 Lakes of legends Brewing Company it's just for a minute walk and there will be games and give card giveaways the location time we're also on the board out there and stuff and you if you want to come have a drink and then go to the weed Maps thing half an hour later that's totally fine too thank you what's up are you are you guys are you all tired today I know right but also very excited yeah yeah okay anyway hello man - sorry thank you I'm Morgan Fogerty hey everyone hi I am a former dancer and choreographer turned web developer and today I'm going to tell you who I am and why I'm cool and why I love this community and why you should hire me this is me now currently this is earlier today really great years so I danced for about three decades in college at the University of Kansas professionally in New York City and as a choreographer and professor in Chicago and then I decided that I wanted to see what a regular job would be like because although modern dance is fun and fulfilling it pays in literal peanuts get it like it doesn't pay okay penis okay they wouldn't give me peanut it's like nothing so anyway I moved to LA because it was warm there and I worked in an entertainment law firm in Beverly Hills and the important thing I took from this experience was that it was not a place for growth it was not fulfilling it was not exciting and so I moved on to the next thing so I left Beverly Hills and embarked on a road trip with my partner that lasted about a year and a half and spanned 38 states this part of my backstory was very exciting and fulfilling but not really sustainable forever we settled in Portland Oregon in the beginning of 2017 and I took an HTML and CSS class and it was so exciting and my brain started lighting up like like it did when I would choreograph and so I knew that that was the next the next step that I could take in my career well to have a career I attended a full-stack JavaScript code school and after graduation I was a TA there for a few months I love doing that I love teeing and I love teaching after my TA experience we were relocated to the Bay Area and I got into the blockchain space since I was a new kid at a big school the Bay Area I decided to jump on to the newest thing so that I'd have some knowledge that even senior programmers didn't have potentially and that led me to a work-study where I would lecture about the solidity programming language to students at galvanised in San Francisco then I had a short-term react contract with the blockchain company and then I got a job in tech events during that time I gave a talk at Waffle jeaious in San Francisco and in it I talked about and demonstrated how I choreographed at the implementation of an algorithm this is just a little part of the dance also during the the events time I was gifted a ticket to Rails camp West I'd only written a tiny bit of Ruby code but I thought like I'll just go for it great and rails camp is so lovely and you should all definitely go is Bobby Lee here right now no she quit she's not supporting me right now but I'm sure there are there still I'm sure there's still tickets available and you should you should go I was struck by how welcoming and inclusive the community was I got to watch a lemur themed in numeral innumerable methods talk by Brandon Weaver we all talked about tech and community and life at this freezing cold lake and the experience convinced me to learn Ruby on Rails so while at my events job I read the rails book and then I decided that I learn even more by building a thing and so I'm building and iterating on a thing and it's this thing it's called dress me and it's a virtual stylist users can build an inventory of all their clothes and then mix and match to make outfits and there's still a lot to build because software's never you know finished and now I will fangirl out about this community because it keeps showing up for me and it's incredible when you're entering a new field so while building dress me I've had the privilege of pairing with a few senior developers and they're generous with their time and they're awesome people last month I attended Ruby by the bay it's the West Coast version of Ruby for good please learn about Ruby for good and support it sponsor it if you can and go to it it's amazing there I worked on a team with six senior developers and together we scoped and architected and implemented a feature for an app in just a couple days and these team members were supportive and go listen I'm looking for a job so I wait I started I started Morgan late Morgan 10 more seconds ago ten more seconds go okay um Oh more slides okay okay then inches railsbridge ITA tits awesome and oh here this is me hire me [Applause] hi everyone I'm I'm Michael - hug I work at the at coinbase on the back-end platform team and I'm going to talk about the coinbase service framework today or how to introduce strong api's in rails strong api contracts in rails so a little bit of background about coinbase coinbase Lacombe is served by a half a million line rails monolith which we affectionately call the monorail it's 2,500 routes it's pretty you know the API footprint is pretty big the last couple of years we've been growing pretty rapidly and that's led to our API is evolving very quickly and the largest consumer of these api's are our internal API our internal apps so web iOS Android so let's take a look at a bit of an example API suppose we want to expose some cryptocurrency presses so we create this spot rate controller and we expose it as a JSON object which has the cryptocurrency tickers as the keys and then the values of the prices and then later on the line we decide we want to add a bit of metadata to this so we add a color and we have to sort of rejigger API such that it returns a top level eight array instead of an object but we still want to support the old version of the app so we have to keep both in sync and then maybe one we want to convert a rate to a string because some cryptocurrency doesn't like float something like that and then we need to paginate because we've added so many crypto currencies over the past few months that we need to paginate this endpoint right so the this is a contrived example but the idea here is that as your company grows and you and you make new features your API evolves and it's hard to keep all of that up to date so our external API is are driven by Rails JSON API but internally we have a lot of gr PC and protobuf services and we and with protobuf eur you are able to define a contract ahead of time with strongly typed messages and RPC endpoints when we thought how can we bring some of this magic into rails and that's what that's what birth the coin based service framework so what what might that look like so take this example of before with this spot rates API we define a typed spot request and a spot response this is a proto buff file here and then we define a service down the bottom that has an RPC endpoint that is typed takes a request returns a response how do we get this in rails so this is what the routes dot RB file might look like we have this special CSF command here that is taking a controller which handles a proto buff service and it automatically creates all the routes required for that service and this is what the controller might look like as I said we're defining which service we're handling here and then we implement the service so in the proto buffer Lea we had one RPC endpoint called spot and here we're taking a typed per to buff message as the input and we're returning a typed proto message as the output and note this is just a normal action controller we can do callbacks before action and stuff like that and under the under the hood we're doing content negotiation so you can support both protobuf and json on the wire you can curl the endpoint it's very debuggable and it's all sort of hooked up automatically extra features we do client generation see no more manual integrations of the api no more out-of-date clients and automatic documentation generation as well so we've found protobuf and the strong contracts in in protobufs and rails to be a really good fit and we've had success from that so that's the end thanks [Applause] my name is Cindy Backman and my twitter handle is sinner I'm married that's my husband James and one of our hobbies is writing in a writing in a motor service we have two awesome kids that's my son he's 18 and our daughter is 12 and then I work for a really awesome company this has sound confreaks who's heard of konbu so I'm the chief operations officer for confreaks and okay we've made a lot of changes over the last like six to eight months and we are currently a woman run business now I don't know how many how many people in here actually know the owner which is Coby rehnquist and he's my brother so he owns colt he owns confreaks but the last three or four years at spin ran by me and now we're an all-female women company running it and I just wanted to make sure everybody knew where you can find the videos for the conference after Rell's is over they should be out in about three to four weeks you can find them on our YouTube channel we aren't using confreaks TV much anymore we will still direct videos from there to YouTube so if you use that site you can still find them there but they'll just directly go to the YouTube channel we didn't want to break any links and that for the old videos from different conference and I also just wanted to give a couple of tips for those that speak so when you're a speaker one thing that you can do that will greatly help not only those that might be recording but yourself so that you're calm and a little more relaxed when you first talk is to always test your laptop at the venue you're at every venue has different equipment there's different projectors there's different recording equipment there's different just different equipment and if it worked at the last venue you were at it might not work at this one so if you can take a few minutes and test your equipment your laptop ahead of time it will make a big difference and it's just when you can walk in and set up and know that your laptop is going to work it's easier to give your presentation and it makes it easier on us and then not all laptops oh that's not right our act not all laptops act the same so it's really good to bring your adapters and plug them in to power some of them now actually if you don't have them plugged in even though they're full power will start to flicker depending on how many transitions or how heavy your transitions are and that so if at all possible it's just best to plug your laptops in even if you're full power plug your laptops in or full battery that's why mines plug this is not my laptop by the way Heather with Ruby central was so great to let me borrow it because mine's live-streaming so and then always repeat the question and this is during your presentation and during Q&A because sometimes conferences can be a little bit smaller or there's less people and you might be talking back and forth during your presentation and not everybody can hear and we don't always have the privilege of having sign in that in all the rooms so it's really good to repeat what someone has asked or even repeat what someone has said or commented and then questions at the end of your talk if you don't repeat them if it's being recorded they will not be on the video because someone watching it it's not gonna make sense most of the time so always try to repeat just to be kind to those that can't hear or maybe don't understand what's being asked so I'm with confreaks we love being here we love this community and thanks hello everyone I'm Michael Hartl and I'm here to tell you about a text area on the internet also known as do you learn enough scholarship program learn enough is my current venture it's a an educational product company that I and a couple of friends founded a few years ago among other things we make a series of tutorials on programming and related subjects starting with learn enough command line to be dangerous and going through things like CSS and layout JavaScript and Ruby among other things these tutorials provide sufficient background for the Ruby on Rails tutorial which I think maybe some of you in this room have read before so by the way I am planning to update the rails tutorial for rails 6 that's in preparation all of these tutorials are available as ebooks as downloadable offline videos and as more structured courses and one of the things you learn when you put these kinds of products on the Internet is that people will email you saying hey I'd really like to use your product but I can't afford it you'll get students people who are between jobs maybe people from countries where the exchange rate makes the cost prohibitive and so my co-founders and I thought well you know maybe we'll run a scholarship program the only problem was we didn't know how to run a scholarship program so we thought well what's the minimum viable scholarship program we thought well how about a textarea on the Internet [Laughter] there are a few fields here but the heart of it is literally just a text area that says tell us a little about your situation so we put this up there and we've got just a wave of people there are so many people who are interested in learning these things who are just limited by this one factor and one of the things we discovered is that even though the situation might seem ripe for abuse people don't abuse it there when you give them a chance to share their story in confidence they're honest and they're really inspiring now one of my co-founders had the bright idea to ask people who received the scholarship if they were willing to share a picture not everyone has to but quite a few people have shared pictures we also gave them a learn enough logo in case they wanted to incorporate it into the pic and so I want to show you some of the kinds of people who show up to this sort of program and I'd like to note that these are not cherry picked examples these are literally just the most recent people who've submitted pictures so we start with Kevin Kevin lives in Cape Town South Africa he noted in his email that that's a table mountain in the background two local landmark this is a it's a little dark here but I think you can see this as dawn he tells us that he's 76 years old he lives in the US and he's learning to code he sees a lot of opportunities for people with technical skills in his area this is Gabriel I he's from Nigeria and he didn't really know where to start so I said start with the command line doesn't even assume you know what the command line is you can use a computer you can start with the command line and so we did this is Vincent he's also from Nigeria you might see in the background there's kind of a local decor going on there but if you look closely there's some America going on too that's the New York Yankee shirt this is ava from Texas she actually submitted two photos this is kind of the the this is kind of the regular photo and then kind of the glamour shot this is Hussein from Togo which is a West African nation between Ghana and denene you can see he's got the second monitor there he's got the headphones he's got the Samsung developer conference t-shirt if you look really closely so he's dialed in and ready to go now this is Linda from Australia Linda wasn't comfortable sharing a picture of her face which is cool that's that's that's perfectly fine but you can see she's also there completely ready focused and she's good to go to learn I counted up for this talk and it turns out that we've actually given out over the past few years almost a thousand scholarships so almost a thousand learning up scholarships just based on this one thing yeah thank you and so this this is really testament to what you can do with the text area on the internet again I'm Michael hurdle you can find me at M Hartle on Twitter and other places my websites are loon enough comm real tutorial.org thank you very much for listening alright hey everybody my name is Lee Richmond and I run a project called graffiti we are a graph UL competitor and in my opinion the best way to develop rails api's you can find us at graffiti dev and to give you an idea of what graffiti is I'm gonna walk through a an existing rails app and a graffiti to it you now graffiti to any existing rails app we have some model set up for us we have an employee has many positions positions belong to a department and I'm gonna run a resource generator just like I would a model generator I'm gonna say I want to employee resource with a few attributes I'm already up and running with an API and I have a UI that I can check out my API behavior I can see that we can filter those employees by all their attributes first name we could say the prefix is the letter A age greater than 30 we can add sort and multi sort we can add pagination all of this stuff comes out of the box and it's also agnostic to active record though that's our default it's also able to give you sparse field sets so only request the fields that you want in the response nothing crazy is happening here this is just a normal HTTP call returning JSON you can even curl this directly if you want and use all of your existing HTTP toolchain and of course graffiti where the pH graph is right in our title so we'll have to add some other models to our to our graph we'll add those positions and the department's so the same way I say has many and belongs to inactive record I'll do the same thing here I'll add a filter for the employee ID because that's how I'll fetch the positions and you can see now that I'll use that same UI and I'll be able to fetch all of that data in a single request you can see everything loading on the left-hand side and our UI is showing all the data that was fetched you can fetch all of this in a single request or you can lazy load it in multiple requests and you couldn't get it in a nice little JSON snapshot like that or you can be rendering to the JSON API specification which adds a lot of great stuff to normal JSON just adjust the content typing you change this up on the fly we also have a schema with backwards compatibility checks we have end-to-end integration tests that come by default as part of that generator error handling patterns so that you're always rendering the right payload with the right response code and again this works with any datastore we work with active record where we work with net Asia pea or whatever your favorite elasticsearch client is and we do this with pretty simple code we do this because we're honoring the concept of a restful resource we're making that a first-class citizen this is what you actually care about with your API you care about your domain model you actually don't care about the request and response as much so those are kind of implementation details that you could always generate from this configuration and we're gonna be left with code that still feels rails II we have a controller we have a route nothing is really different here other than the word resource and we're essentially just saying hey rather than fetch the model directly let's go through this resource concept which is a abstraction around your API the same way that a model is an abstraction around your database now to understand all this from a conceptual we have to talk about rest because I think it's a misunderstood concept this is how I envision rest it is a graph of data we don't need something like graph QL to model a graph of data we already have that with rest the green lines here are hypermedia they're the links between resources and they allow you to lazy load data across separate requests so you don't have one really slow request you can break that up however you'd like clients just need to follow those links and the problem is that craft QL introduced an entirely new paradigm we kind of went back to soap and we went back to RPC and we got rid of rest and we had to fill in a lot of gaps and we're kind of experiencing a lot of the lessons that we already learned number of years ago rather than getting rid of this concept of what we need to do is build on top of it we need to add eager loading to rest and eager persisting we should be able to load a single entity or multiple entities in a single request and we don't need to change paradigms to do that with a simple post resource like this that's just declaring its attributes we're able to have an adapter and our adapter is active record by default but that adapter is going to give us a number of different things we're gonna have the ability to fetch everything in a single request we're gonna be able to say fetch me the posts in the comments but only the active comments and sort them by created at we call that deep querying you have automatic queries because again you just write that adapter once you have overrides you have the ability to customize but you can get all that out-of-the-box support for any ORM or datastore and an integration test the ability to select only the fields that you want a backwards-compatible schema lazy loading eager persisting validation errors a lot of these things are things that you're gonna have to build yourself if you go down the route of graph you well they come out of the box with the graffiti micro services to micro services hello everybody almost ten years ago I stood up here and I talked about big world problems such as corruption famine disease in the ecological crisis and a dream of a concept that could solve them all that concept is the Utopia of a participatory democracy today I can say that this concept is no longer utopia a dream this is a reality in my country in Spain I work for the government in Madrid and during this last four years we've been building an application in Ruby on Rails open-source with what we consider the basic building blocks of a participatory democracy application one of the main features of this application is a participatory budgeting no with this module we've already spent four hundred million dollars in ideas that the citizens have proposed how this works is we open the process every year a hundred million euros and the people start giving ideas I want a park I want a hospital however nursery room and then the government gives a monetary value to everything no you want a part that's 20 million euros when a hospital 50 million you want a skatepark 1 million and then similar to a shopping cart you have your hundred million euros and you start selecting what you want no I want the hospital and the solar panels bicycle lane few others and that's it money you have you 100 million good choices thank you very much and then the most voted projects they get executed every year more or less 300 projects win the participatory budgets and start the process of getting executed when they're done we put lots of pictures on the website and we went describe chronologically how the project went from being a winner in the participatory budget to becoming executed and reality in the city fantastic projects Collective Intelligence works another couple of modules the collaborative legislation module also known as crowd law is ook when people get involved in the participation of our law every law the magic wants to post they put it on the website and the people get all nervous oh this is crazy voting down paragraphs sentences start suggesting new things and these comments are taken into account in the next drafts of the law special one two three four until you have a final law with the participation of the people which is always better a great modular referendums anyone can propose a referendum in the city and if enough people think it's interesting 1% of the population then we set up a whole show with hundreds of volunteers public workers with physical ballots where you go and you vote this idea that someone had no and then the government does whatever the people have decided this ideas of participation are catching on other governments are liking it these are all the government's in the world that are using console right now from New York when Osiris Paris Mogadishu Somalia lots of places a hundred governments in total in 33 countries giving access to modern to 190 million people to use software school universities prices from the United Nations for Coke Awards etc etc and consumer Keshe Foundation just found it to make sure that we stay on the right lane and we keep growing so if you liked this ideas please check it out with a dia from day one the hot pursuit goes around Buddha rate mm thank you very much my name is Vladimir and I gonna tell you fairytale about one poor request history I probably know what I gonna talk about so once apon time in January and the year was the year was 2016 I open a pull request to Rails this great feature I thought those days you know action cable testing so let me kind of navigate you for the history of this pull request a few months later the car spawning issue has been open in r-spec rails oh we need this feature if rails got this kind of testing we also need this kind of testing it's still open but we're gonna fix it till tomorrow I think we want it at least so one funny thing about this pull request it has visited rails two years before our first time did this in 2016 it took part and Justin talk and rails and our spec for rails 5 so that's the first time I wasn't staged at railsconf it was pretty cool and well in June 30th this same year rails 5 was released without action cable testing the pair was moved to a 5.1 we need more review we need to sound kind of traction for it mate I'm five one released without action tester 2017 actually the same year I decided well we need something to do with this we some people might need this feature and extract it into a jam but haven't closed the pull request another fact I never used action cable I've actually even even nowadays I'm not using being doing a lot of stuff related to it I never used it in real projects even bad projects anyway let's continue the story April 9 rails 5 to yeah now he knows the time lay on the rails releases without action cable and here seems that and actually a week ago rail 6rc one has been released wheeze action cable testing so yeah that's I'm not here to kind of a tell you about oh I was suffering all three years now actually I can tell you about different stuff about why that happened what has changed maybe that's because I'm mad do you change asking about this pull request you know once now that's oh I thought it's true that's not the reason why it has been merged eventually nothing has changed the thing is even rail sends an open-source project doesn't mean that every especially major change major feature would be merged right away even if it's kind of complete but if it has hundred of lines it needs some to go through some process it takes some time because contributing to Rails is actually contributing to thousands of applications running rails that's why it's a little bit different we can't just merge everything right because well even if it's useful and I here to tell you not be afraid actually contribute into rails even if it can take a lot of time because well that's a process that's a great framework it was a long history that's how it should work rejections doesn't mean that's not something useful you just can't express the idea in different way and in a jam chased whatever and proposed it later again when it's got some attention by the community just don't give up do what you think you doing right because there are other stories you know of much longer time to get the public was merged for and something years but I'm not gonna recall it here because I already wrote about it so thank you for those who contributed or I also gonna contribute don't be afraid to do this thanks for having such a great community [Applause] hey guys my name is John Emerson so I created a tool called ship lane and I think a number of you have actually at least seen the logo because I put out hundreds of stickers yesterday on this tables and they were all gone so I had to refill them this morning I have more stickers so if you like them yeah I can get you some so no sweat so ship lane has a story like many things it was it was inspired by rails because well a lot of things in my life I've actually been inspired by about a decade a little over a decade ago I actually backed into a job accidentally they were on Rails one oh I needed a way to pay for college my last year and started working for this company and I've been doing rails ever since and it's been good to me as husband I hope to many of you as well and it's just been valuable one of the things that I've always liked about rails is it kind of lets me have my cake and eat it too in a way it promises that if you basically allow if you go along with the rails way so to speak if you stay on the rails then you get these per you you're amplified as a developer you you just gain a lot of productivity that way and I've always loved that and I want that in basically everything that I do now because now that I've had it in one place I feel like I should be able to have it everywhere and so you know some things have happened throughout the years you may have noticed a thing called docker happening a lot of people using it we keep talking about it occasionally and you know for well I wasn't an early adopter of docker even but then you know they came out with docker for Mac and I tried it and I was like wow sweet so now I'm not up till 3 a.m. trying to solve some random problem having to know all the stuff about docker looking it up on Stack Overflow it just freakin works and so it's really cool I started putting docker compose animals and like every repo I had and that was great because now basically any developer could you know they could know nothing come join the project create their environment and boom they were like working day one in a couple hours of course there's always some caveats but for the most part that was true that was really cool but but I've always worn a DevOps hot and basically every job that I've been in and so one of the things that I ran into quickly was okay so I have this docker compose llamo I did all this work for it and now I have to rebuild my entire environment in production and it's actually a bit different and that was frustrating to me I hate repeating work I like to have my cake he needed to so I started I started going down the road of building ship lane and it took a long while docker has been a bit of a Wild West there's tons of tools out there you're probably using a few of them and you're getting stuff into production but it isn't good enough for me so what I wanted to do is I wanted a developer to be able to push and commit and I want their stuff to end up in production in fact you defined your production environment in that docker compose um oh maybe you don't want that my sequel to be replicated because you have AWS as my sequel but for the most part it's the same so I wanted you as a developer to never have to touch that and you shouldn't need a team of developers that's almost the same size as your own developer team just to make that happen so all that going what is what a ship link do so ship lane like rails the goal is to provide you a sane and secure default out of the box but you should be able to change that as much as you want and it needs to be able to amplify you so that you as a developer actually feel more productive so that you're not just moving your dirty laundry out of one room in your house to another room in your house right you're actually cleaning up your stuff and putting it away so that's what ship lane can do is doing today I'm looking for I just want to tell people about it I'm looking see if people want to contribute want to try it out want to give me feedback positive and negative and you know if you don't like Blaine go make something cool because this is the thing that I want and I will get your thing if it's you know better than mine I guess so thanks for listening this is me you can find me on Twitter I would suggest you you DM me I respond much faster to that I'm an email all that stuff there and I have lots more stickers if you just want to chat with me about ship plane or if you like scotch I like scotch just whatever come fine hit me up [Applause] hello railsconf my name is Luis I'm from Bristol in England and I work on a rails app called cut pad and I like to travel so when I arrived in Minneapolis a few days ago I thought to myself I wonder what's going on in the Ruby community right here in Minneapolis who's using Ruby what's happening about six weeks ago while I was in another city I thought the same thing and about five minutes after that I registered a domain name Ruby matcom so today I just like to show you a Ruby map this is it it's a Google map each pin is a location of an organization or a meet-up that uses Ruby talks about Ruby but I've got a problem I would love it if there were more pins on this map so who wants to be an open-source contributor fantastic great so this is for you yes so now's your chance I would love it if you could add your meetup or your event or your organization to this map click the link in the top right corner what's this all about and then there's a link there to through to the github repository a Yama file where you can enter your details create a PR right there in the browser thanks to github and so that's Ruby map and WWWE matt calm thank you very much hello everyone and MGE from Amazon Web service I woke up in a blast SDK for Ruby you can OS DK is open source and available on github you can find me on github as well so today I'm going to talk about a new API usage pattern that our SDK supports which is a Seng streaming API over HTTP 2 I'm not going to spend five out of five minutes talking about - two benefits is that I'm what well works through like a live demo of like a script that calling one single bi-directional API to show a real use case so Monson's ago amazon transcribe streaming service launched this feature that allows you to send an audio stream and receive a stream of tax back in real time similar to the conference notes so to play around with this a little bit I will go to peak an audio file on a the blasts podcast purely randomly I will choose this one they are talking about new lambda runtime experience including Ruby yeah I'll go that's not yeah does this work let me see I wonder if these mountains are computer-generated maybe they get crazy with that now I'm not computer-generated just so you're clear cuz I had to go to the bathroom computer-generated person went have to go to the bathroom alright cool so I'm going to round the demo and go back to the code use past usage pattern in minutes what this crib do is just based making a single API call and each do the bi-directional streaming for audio stream and get back the transcripts in the real time hopefully conference network doesn't break me looks like it is okay let me try it another time okay looks like oh yeah it's working okay one more so what's going on there is actually doing bi-directional streaming that you are signaling those audio chunks and it processing those response event in the real-time Amelie when they received so I'm perfect fine like sitting here like watching this like certain minutes audio trying to be completely transcribe but like I believe Super Mario will give me alert so I'm going to kill a here and go back to code usage so when you are thinking of making an API request you need to have a client even if you have never used this ticket before that's totally fine we are introducing a new client interface is called a Singh client so that you can do you need directional or bi-directional streaming in order to like sync no events into the input streams after you study the a sync requests we introduce this input handler that you can just go sing no signal like sing know like your audio files in order like to proceed like response events email when they arrived we introduced this output handler that allows you to register callbacks so that you don't need to wait for for response or completely response than to literates through the result you can process events in Milly when they arrived similarily sings we were making an async request and a sink response is returned immediately we are providing this Wade Messer and a sink response so it can help finalize a synchronized response eventually since it's five minutes so there's more details in the blog post for worked working through code examples usage scenarios and either glass developer blog if you are interested currently they're owning two api's that has a sink streaming over edge to you right now the other one is Amazon Kinesis which allows you to subscribe to Kinesis data stream which has enhanced affine out it has really cool performance enhancement that we recommend to try out if you have touched Kinesis one last thing tomorrow morning we are having this workshop going service with Ruby and a diverse lambda please revive you have an in your trust thank you I'm going to talk about how to reach huge open source code easily let's get started oh sorry my name is Yoshi Lana from Japan I attend West come for the first time have you ever read thank you will be a rare source code do you know the request response lifecycle of the rails application do you know the steps of the tip records create update birth date and destroy do you know the processing or the initialization of the rails application I do not think many of them actually do to tell the truth I have not too I guess we don't have much time and the patience by the way yesterday I was impressed by skylights Massa talk the design of the rock application is very elegant and I want to read the code of its lifecycle of rails application but I don't want to spend much time to trace the code I want to read source code easily what would you do finally I've shipped them new ruby gem this morning the gem name is tres location this is demo at first built rails console and set request environment and execute rails application called inside the trace location trace block then it generates rock fire it's twisted locations about rails applications call for example at first it caused by leaving rails engine RB 5122 coal method next it called Lee blaze application 607 build request method we can understand the processing by these location the cold and returns it helps you can get tracing the processing of the lifecycle of rails application easily how it works use trace point and that is a ruby standard API and the Third Point AP a-- is one of the pragmatic in ruby this is implementation point Tracey's old cold events and all return events next it corrects rods inside trace point Brock then before a block call it enables trans point and it resents twist events white brach car and it disables when it finishes soon in making this gem I used the first point for the first time it makes me really really fierce or good amazing thank you well it helps you get deeply understanding Ruby on reds it's my pleasure to help you enjoy Ruby on Rails my name is Yoshiyuki she ran a freelancer from Japan I'm a related contributor number 62 and I'm a chief organizer of race DM in Tokyo and I've raised community we are going to how the new ruby day already conference this name its latest crikey [Music] we hope you join with Heidi 2020 in Japan thank you so much okay hi I'm Steve and I'm not a rails developer so I thought what could I do in five minutes I'm going to talk about computer vision are there anybody here anything like that thank you we get down oh there we go okay so I'm gonna do this in the concept of talking about a magic trick so I'm sure you're all familiar with card magic magician asks you to pick a card you pick one they do fancy hand movements they hide your card it reappears it's your card you confirm it with them they walk away you can get back to enjoying your dinner and hopefully they never come back but which part of this trick is actually the magic is the magic the fact that somebody who's practiced this over and over and over again is able to reproduce this trick or is the magic something that we all take for granted every single day that I can look at this card and almost immediately know which card it is where it's in the frame and confirm that it's my card I think that's the more magical part now this is really a two-step process we have to think about where the card is in the camera or in our visual field but we also have to then look at and see what card am I looking at so if I have a picture of a card for example shout out to Heroku for having cards that I could use so I can look at this and I can say well it's the Queen of Spades and I can do that almost instantaneously and I can even see here it is in the frame but getting a computer to do that is kind of difficult because computers are dumb and it's software engineers basically what we do is we teach computers how to solve problems that we don't really want to solve ourselves and that's where the concept of computer vision comes in this is where we're trying to Train computers to understand the visual world around us and this has applications in the automotive industry you talk about self-driving cars in a are you know there's applications to help blind people determine what objects are in front of them so it's really kind of an incredible field and I encourage you to get into it if you really want to make that kind of difference so I'm going to show you just some code samples and some process that you might be able to do to implement computer vision in your own time me I chose to implement it at two o'clock in the morning last night this morning and we'll see how far we get with that so I have this card here this is the ace of hearts and the idea is that I need to remove as much noise as possible from this image so the computer can then process it and one of the things I can do is get rid of the color because I don't need the color to determine where the card is once I do that I can apply some blurring now I'm using Gaussian blur here and the reason that I'm blurring this is because there could be some noise in the image like there speckling because it was low light because again I did this at 2:00 o'clock in the morning I was tired it was a dark hotel room there's not enough lighting please find me a better one but this is also that that same idea of where we're softening the image we're removing some of those imperfections and the reason that we're removing those imperfections is because we can do what's called canny edge detection Candie edge detection is really just a fancy way saying I want to find all the edges in an image and it does this by comparing similar colors or similar black and white grayscale values in an image and drawing a line around them it's way more complicated than that luckily Python has a library that I can just bring in and call the canny function and you can kind of see the card image starting to take shape it's that rectangle there that has a heart on it but there's some gaps in the image so one technique we can use to help improve the the gaps or get rid of them is to do what's called dilation where we make the lines thicker now the values that I'm putting in here if you look at where it says kernel and iterations these are important numbers that determine how this image is going to get processed and I have no idea how to find the ideal ones I just plug in numbers until it works which is also how I develop software so it might surprise you but playing cards are actually rectangles I know right and so if I highlight all of the rectangles in the image the playing card is one of them but there's so many that I need to do some sort of filtering so that the computer system can try to narrow down which one the playing card is really what I'm looking for here are shapes that have four edges kind of I'm actually looking for shapes that have up to six edges because my thumb gets in the way and adds an extra edge now remember this is only half the process and I know what you're all waiting for you want to see this person 2:00 a.m. in the morning videoing themselves holding cards up to a camera so that's where we're at so hopefully this works you can see it's detecting ace of diamonds there that was cool it really worked this is really dependent on the lighting system the Jack of Hearts it also worked I was impressed I may have been drunk - Wow there you go I'm Steve find me the next bill booth thanks hi everyone my name is Ben greenberg I'm one of the advocates at NEX MO and I live in Tel Aviv in Israel just a couple hour of flight here to Minneapolis so this is about the telephone game reimagined as a rails app if you don't know what a telephone game is I first Rhian countered this game when my five-year-old on kindergarten came home describing this really cool thing they did in school where they all stood in this circle and one whispered in one's person's ear the message and it went around and round it around and he said guess what dad the message was different when it came back at the end and I'm like really that's so cool I've never heard of that before you have to be surprised and excited when your five-year-old tells you things but ultimately what's really cool about the telephone game is that it is a great metaphor it's a great example of cumulative error especially inaccuracies around gossip and rumor it has some great intrinsic moral lessons to it and I thought it'd be really fun to recreate this in some version as a rails app and things that I work at a company lets me do cool stuff sometimes and so I did this for a little bit and essentially what we're doing is we're using three different api's the next male voice API to make a rails app the Google speech-to-text API and the Google Translate API so what's going to happen is the caller will call this application the phone number they will speak a message the message gets recorded made into text with the speech-to-text api from google cloud and then will be run through the Translate API through ten different languages and back into english again and played back to that person that's kind of like playing a card game by yourself telephone by yourself telephone for extreme introverts telephone when you're just bored or I just want to do something and so let's take a quick look it's a small example of the code you can find the entire code at that URL next mode dev slash rails - telephone so quick caveat it was written really quickly I'm sure there's some things like critique please critique gently I put it out there and so very briefly in the controller we're accomplishing just two really basic things at top level one is we wanted to liver instructions to the caller to welcome them to record their message and to keep the call alive while it's being processed and the second thing is we want to check when it comes back from the API the status that the calls engaged in if there is a recording then we know we want to act on that recording and so we want to do a couple of things you want to save it locally we want to transcribe it with the speech of text API from Google and we want to run it through a random selection of ten languages and then play it back so on the first right hand block is what's called an XML call control object it's a JSON object and instructions that you're sending to the next mode API in this case this is just a tiny snippet of the record instructions we want to record it that's our event URL I say the actual URL it's an end grok URL it's great when you're doing development work to have an externally accessible URL for your local servers and we want to say that we want to start the recording with a beep we want to save it as a WAV file we want to end it on a pound and we want to timeout of some note and says anything after 30 seconds and then just a little brief snippet there what we do when we want to play it back so I little bit of a messaging to the to you in your console and then the closing message itself your message a translated through Arabic Hebrew Hindi Kurdish Russian Turkish and Yiddish because why not and comes back to you in the following and then we make a call using the next note ruby gem to next MODOK calls doc dot start passing in the call ID with the text the message text and we I picked this random voice name it's a pleasant voice there's a lot of pleasant voices I happen to pick that one you can pick whatever you like and and at the end of the day you can actually try this yourself you can call not in this room because that's disruptive you can call on this phone number I think that's a Minnesota area code I just got it and so you can call on this phone but it'll be alive as long as my computer is open and when I close my computer it will be gone because it's running locally and you can also download cloned the code from github itself at next mo dev slash rails - telephone I would love to hear what kind of messages you get back I had a lot of fun with it and you can find me on twitter at rabbi greenberg thanks so much everyone okay hi my name is Andrew Neely I work at flywheel in Omaha you might know one of my co-workers Michael Herold I'm a practicing stoic it's helped me immensely and I'm about to talk very quickly because this is stoicism in five minutes or less for developers stoicism is a philosophy of life it describes how to live a good an ethical life that is worth living it provides tools for facing challenges great and small you might break your coffee mug you might be struggling to grow yourself or a career you might definitely be gonna die someday so practice with these tools I'll tell you about can create a sense of calm in the face of these challenges it's a powerful personal benefit but it's actually not the point the point is to answer three important questions when to act do what you can and should do except what you can't control such as what happens next for whom do we act for ourselves mostly to maintain her character for our friends colleagues and loved ones to be useful to them for broader good of all people the human Cosmopolis and how to act you practice behavior that is good under all circumstances as DHH pointed out in the opening keynote market-based approaches have gaps in who and what they serve because individual selfishness is not good under all circumstances so the first tool is the dichotomy of control when we act we only have control over ourselves specifically our actions and reactions we accept everything else is either preferred or dis preferred indifference for example javascript is the most popular language in the world and there's nothing I can do about it except to accept it the next tool box is the four virtues how we act and for whom justice treating people with fairness and dignity let's back up a minute that crack I just made was very indicative of an earlier stage in my career and it felt clever and good to say those kinds of things but it's actually not helpful at all a lot of underrepresented people in our fields come to programming through CSS and JavaScript via design marketing and content strategy maybe all over what they're good at and enjoy doing isn't helpful to them javascript and CSS are in fact part of the most broadly adopted freely accessible computer human interface in history I should be celebrating this for people it is benefited and using them to build powerful software and not controlled by a single vendor actionable hold yourself accountable show up for others you can choose to be inclusive rewatch yesterday's keynote for lots of good ideas and useful things to do and consider courage courage basically feeling fear and doing the right thing anyway fear is a powerful signal but it can lead us backwards towards the right approach so actionable speak up for others even when you have something to lose apply for companies you think might not hire you dive into projects where you don't feel like you're ready to tackle things just yet in fact a great way to get started is to do what I'm doing give a talk at a conference or at a meet-up it'll give you a chance to conquer your fear and you'll know something you can share with somebody else temperance discipline Epictetus said first ask yourself what you would be and then do what you must do self-control is a habit it gets easier with practice just try withholding judgment from the other people in your life when they do something you don't agree with it's harder than you think but you can strive to improve yourself so what's actionable well as far as your personal skills at the end of the every day review how did it go what did I do well what did they do different you know what should I do differently and then just try a little harder tomorrow as far as improving your skills as a developer form a practice routine even 20 minutes a day will snowball exorcism dad I Oh Justin Weiss is wonderful practicing rails book a little goes a long way as long as you do it every day wisdom is practical knowledge it's impossible for a person to think to learn something they think they already know so when you're facing a challenge nature gives us reason to ask what's actually happening right now what vertical virtue is critical in my situation right do I need to keep facing the same battles or should I change my circumstances so I can fight more important battles right struggling what don't I know what's the next thing I need to learn am I wrong failure is always an option but this can be a good thing it's one of our greatest teachers your obstacles are often your best opportunities so resources for more Massimo Pigliucci is wonderful how to be a stoic is a great audiobook William Irvine's guide to the good life these will give you history and context and for a daily practice try Massimo's daily stoic meditations podcast Orion holidays daily stoic book or podcast these will help put these ideas into you every day and they take no more than 5 minutes to get started but I guarantee you if you try and think about this stuff you'll keep thinking about it and it'll improve your life I would love to talk to you and I appreciate your attention thank you so much hello my name is Andrew way I work for InTouch health I like Ruby and dogs and I hope you guys like some dogs too so this is filled with bad jokes and good dogs rails new so when you type this into your terminal you get so excited like there's so many possibilities but little do you know what terrible things can happen another fun rails association is one has many dogs what a great association snake case this is a rails convention that we all know I loved finding this photo it was a great one filter yes one of these is not a cat so please filter all the cats I'm sure tenderlove would love this one - rise so here we have a - ow you know I really wish that we could replace all those dashes with - hounds I'd be really happy fat models we like fat models keep her controller skinny but I like fat dogs empty this is actually the saddest sight for me as an empty dog park there's just nothing in it read maps party tonight my birthday is on August 20 oh no I don't want to tell you duck typing no I hope you can all sleep tonight many of you might be feeling like this right now so thank you so much for being here but I'm not done yet oh oh I am done all right so yes Doc's are developers best friend dogs are also my best friend thank you so much for being here and go explore the docs I had a really good time looking at the docs and find all this dog stuff also feel free to talk come up talk to me about dogs share your dog memes I love that stuff so my name is Andrea thank you very much hi guys I can barely see over this I hope you can see me so hi I'm Trish ball I work for Ted conferences and I want to talk to you a bit about diversity and the app the applicant pool I already had a slide deck put together from a previous presentation and I figured I'd narrow it down for this and then I realized I had a lot of info for only five minutes so I decided to forego that but not really because I couldn't get away from it because I'm it's kind of a crutch so hopefully it's a little down enough for my five minutes I'm gonna start with an apology because this talk focus is mainly on women in tech and I know that diversity is way more than that but the statistics that I needed for people of color and other and underrepresented groups was not easily found to be honest I had a hard enough time finding the stats that I needed about women so anyway I don't want to give fuzzy numbers about those areas so they're left out but not forgotten it's worth noting that I did see some similar trends between these groups so diversity like many here Ted is looking to add more diversity to our team of engineers like many here we're struggling with this we all know that the stats aren't good according to the Bureau of Labor Statistics only about 25% of people in tech are women and of those women only 36% are women of color now many people say it's a pipeline issue not enough women are joining the industry but it's actually more than that I had a hunch do these statistics remain constant across all experience levels what I found no they do not this is a question I read recently brought up at Ted and is something we're currently discussing when determining our hiring requirements according to the National Center for Women and information technology 56 percent of women in tech leave by mid-career and another study shows that 50 percent of women in all STEM careers leave within 12 years and are more likely to leave within the first few years compared to other women in non STEM fields and some people ask well aren't they leaving to have babies or to stay at home well no according to the same study non STEM careers only 20% of women leave during the same time span and most of the women leave the STEM fields are leaving for careers in other areas not to stay home so as a side but important note these statistics are only looking at buying it gender is binary not having non-binary people represented or marginalizing them even more I hope that the data gets better in the future looking at the numbers 25 percent of people in tech are women but 11 percent are mid to late careers that are women and of those you know how many are knowledgeable in your tech stack a blind guest let's say 1/3 of them have knowledge in your tech stack and that drops your numbers of eligible females for your applicant pool to about 3.7 percent give or take a few and so the takeaways from this is it's not about why women are people or I'm sorry why women and people of other underrepresented groups are leaving or what we can do to prevent that those would be two completely other different talks but this is to point out the possible issue that maybe hasn't been considered when creating descriptions for job openings so what to do about it if you're struggling to find diverse applicants in your pool maybe you're unknowingly narrowing your diversity in your pool with your requirements if you only hire senior devs what would it take to bring on a junior dev or maybe hire interns take them on and teach them to be the senior devs that you are looking for value everyone on your team and their contributions especially those of different backgrounds so they don't become a part of these dropout statistics I don't like spouting off numbers without anything to back them so here are my citations I'd be happy to share them with you if you reach out please feel free to reach out to me at Trisha ted.com with any more questions or if you have additional data for me or if you're looking to changing jobs because again we're looking to expand our team and hopefully diversify or just grab me if you see me around and thank you for coming to my TED talk so my name is Dylan Andrews I'm a rails developer at an awesome company based out of Nashville called gonoodle we make mobile apps and web apps for kids in the classroom and at home and it's all about getting them moving yeah it's awesome anyway so today I wanted to talk to you about a couple just cool r-spec tools that we learned about it go noodle that helped us get to the bottom of some erratic order dependent test failures that kept showing up in our CI oh yeah I got you I got you is that big enough for you one bigger yeah I don't have that bigger or smaller it's good bigger all right and big in that that's the wrong way you're printing now print should I print it I want to print it okay all right all right yeah so we were having these erratic or dependent test failures and our CI we used symbol for just a preface in our test movie is configured to run all our tests in random order which is awesome because it fortifies the test suite and I recommend that but it does make it difficult to get to the bottom of or dependent test failures because if it doesn't run in the right order it doesn't fail so that was tricky and it was driving us nuts obviously because it was very annoying and disconcerting to have a build fail and then you would rebuild it and pass and you'd kind of just feel like I think it's okay so anyway I'm just going to sort of talk you through how we got to the bottom of it and if you've ever wanted this problem hopefully you can use it too so what I'm looking at here is our build in semaphore just for some context we've run our test suite across four boxes in parallel just to speed up the suite and so you can see right here I've got a test failure on this box and if I can y'all see or is it still too small bigger bigger all right all right so you can see it's failing here I mean I scroll to the top it basically shows me the test that it ran on this box and then the critical part that was a deal breaker that was a game changer for us is leveraging the use of this seed output so basically with this seed what I can do is ensure that when I run these tests it runs in that unique order every time that caused the test failure so if I just copy all this stuff and then I copy that seed and then I come locally and I basically run those tests and as you can see here at the bottom I'm passing it the seed argument with that seed number and I run it it's gonna time here ignore that for time all right yeah yeah so it runs randomized that seed however that's a lot of tests so to get to the bottom of it by running all those tests is going to be super freshening and time-consuming and that's where this bicep command comes in so if I run that exact same whoops thing but I pass it the bisect argument what that does is a binary search through that test suite running and it gives me an output that's gonna be the smallest number of tests in the correct order that's gonna replicate that failure so this can take anywhere from whoops so this can take me from like five minutes to an hour and a half to actually give you the output but it still gonna be way faster than not using by sex so I'm not gonna obviously have you sit here and look through that but as you can see it's saying running your suite to find failures after that output it outputs something like this it'll say the minimal reproduction command is blah blah blah you just run that and it's going to replicate that erratic or dependent failure every time super quickly and just make it a thousand times easier to debug so hopefully that's helpful thanks so much [Applause] [Music] you 