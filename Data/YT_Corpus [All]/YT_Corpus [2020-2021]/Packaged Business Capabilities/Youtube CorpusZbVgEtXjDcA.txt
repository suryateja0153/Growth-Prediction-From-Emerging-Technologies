 hello and welcome to building deploying and managing custom apps and teams I'm Joey Glock I'm a senior program manager on teams I work on the platform team where I think about the hat model and the Hat lifecycle and I'm joined today by my colleague by buff hi everyone I'm vaibhava Griffin I am the program manager with teams admin center high tea protein and Microsoft teams Oh so most of the agenda for today is going to be really running through what the app lifecycle is describing why it's important to think about what the value comes in the tools we're building over the last year that we're about to release we're gonna cover that end to end from where we're at today to where we're going to be very shortly and what we plan to do in the future be lots of demos and resources as we go through so we're very excited to get surveyed on this topic and I really wanted to start at the very beginning with just framing what I mean when I say we're talking about the lifecycle and teams again like why is this important why she care about it as primarily a developer and specifically its lifecycle is how we connect all of the dots from taking an app from the hands of a developer to the hands of an end-user when they're ready to adopt it and when you're building custom apps for a specific organization or a specific tenant there is typically a lot of tools and processes and personas involved with passing the app along that line so you have a developer developing in some environment you have decision-makers IT admins that do some level of validation and then ITM and of course operationally are in charge every organization of packaging publishing setting up those apps managing them before an end-user can actually discover and use them so they're there they're a little bit nuance to tour them toward organizational specific processes rather than a submission typically to a global app store where users do a pull model to discover really all these people need to be in place first in order for an app to actually get a time to market too close to zero so these tools are really important and I think they're worthwhile and it'll be the framework for this topic to discuss so to start I really want to touch on where teams platform is at today and unfortunately we are pretty fragmented at the moment we have this if you go through each of these pipelines we don't have a lot of connective tissue developers develop and test a team's app in their own environment somewhere where they do some level of their own testing and validation at a technical perspective and then when they're done we have no processes and no help at the moment to get that app packaged and in the hands of decision-makers for or any organization and they have no tools to run validation and that how to make sure that it functions the way they wanted to and provides the value they need and decision-makers have no tools to then package that app and publish it from IT admins point of view and we really only provide tools starting at that point and it's very manual process today and as you can see at the bottom here it spans a few different UI surfaces from the developers environment to the team's admin Center where we have a couple of different functions for all of this and then finally the app gets to the end user but it's fragmented it's all over the place and we spent vibe and I've spent a lot of time this last year thinking about how we can improve this entire process from beginning to end to change this from something that looked like a fragmented mess to something that's super streamlined and straightforward and that there's connective tissue from the developers hands in the IDE all the way to end users actually using that and again we think if you if we can build this right you could take advantage of this and get your app from the path of development to production really quickly and if you could reduce that time we think they'll be more advantageous towards building updates and towards getting users to adopt these apps in a simple way so everybody wins when this whole pipeline is built out and this is really the framework of what I'm going to discuss going forward today and so when we looked at that at level it started to drill into all of the features that can help build all those little arrows and improve those little check marks and check stops there these were the goals we sought to improve and this is primarily what we'll talk about in today's conversation number one like I mentioned we're streamlining the process from developed to validate publish to manage the apps to get the apps into the hands of end-users we're making sure as we streamlined that process that everything that we built is programmatically available to make sure that you can you as an organization all of this can be automated from the developer to the ite persona all the way down to the end user and along the way you know it's not enough to just build automation and tools and api's and features as the team's team were always thinking about collaboration so how can we make sure that the human element is thought about when an app is moving from the developer the decision maker to IT to end users how to improve collaboration there and then the last couple of points you know the second to the bottom there is primarily you know we recognize that apps are evolving in any organization from a place where somebody needs to be highly skilled at software development and they choose their favorite IDE and they stand up their own web service and then that those endpoints get upgraded through environments you know that's one way to build apps but a new emerging way to build apps across them 365 is the power platform this is low code no code development investments and we want to make sure as we built out this pipeline that we accounted for that platform and that the same tools we're building this whole way through can connect for instance power apps all the way to end-users and so you'll see what I mean as we go forward and then again as I mentioned before ultimately users will use these apps more these tools are built correctly as the right people can validate and publish them where they need to go so as I mentioned earlier this is kind of another view on this this is the framework for this conversation we're we're improving every step of this process from developer to end-user and we're going to start with the developed base so these are two that we're building in IDE s to improve the development and testing of teams out before they actually get packaged and just as a footnote here I'm only going to spend a couple of minutes on this because you'll see in the reference section at the end of this talk there are dedicated sessions to just this step all of these tools are building out to help developers you'll see sessions that build to discuss them and I'll bring that up at the end of the talk if you want more information on this so let's give you an example this is a look at Visual Studio and this is a new view we have a new tool set to help you really start developing and apps we were talk about that blanks like we're talking about the very beginning so these are tool sets that we built up to set up a project and help scaffold out the the development of an app and as you're writing the code more than that you'll see as we go through so when you're starting instead of understanding all of the platform concepts that again you'll see in other build conversations like what is a tab what is about how do we integrate the framework you know how do message extensions work we now directly in the IDE help get those codes Kathleen out the door from here and when you're writing your code you know there's help with creating the manifest which is all of the metadata that packages and defines the team's app that helps the team client understand you know what to render and where but up until now we really have stopped helping they're like you write your code as a developer and then you figure out whether or not it's working correctly on your own and then you figure out how to package it well we change that with some of the new tools we've we've been talking about your building we've we're about to launch we're very excited about and specifically we have a manifest validation phase here we're gonna run a bunch of checks that internally the teams team uses when we build our own apps and when we vet apps for the global app store so not just for custom apps where you take these same tools and we put this in the hands of developers and in our IDE to help develop these custom apps this is run a bunch of different checks again there's a whole topic of conversation on this it's very exciting stuff and actually one of the advantages we get from this is a click to run experience so right from the IDE you can hit f5 and your app will start running in the team's client which is really powerful and exciting but more relevant to this conversation is the ability to take all of those tools that you've used to develop that app and package them up automatically and just submit them right to the production environment that they need to go and then sounds really magic and exciting it also might sound frightening like there's a there's very few IT departments that would just trust developers from the IDE to go to production that's crazy that's that we build a built connective tissue that helps set up the approval process again we've thought about all these personas along the way so let me show you what I mean when I talk about that so we were in the IDE and normally from the IDE you package your app and then from there it's up to you to ingest it into teams to adjust it in a production environment figure out what to do instead we've built a very generic submission service so this is a new workflow and we're working very closely across Microsoft with Visual Studio vs code our own internal app app studio which helps you develop teams apps to all call this API and what that'll do is take a nap package of the IDE that you're working in will help package that as the team's app and it will submit this app directly to an idea so what this gives is IT admins ability to instead of going out to all their different development sources and packaging all these apps together themselves they can go into the team's admin center and discover all of the why have business apps available to them at their organization they don't have to do any packaging on their own anymore the developer does that for them and they can then discover and more importantly approve those apps so we're not putting this right into production this is really a submission for an IT admin or a decision maker to validate the apps that approve them going forward and I want to pause on this slide because you know what I'm talking about is not just again the fully fledged deep understanding of software development support for building teams apps but because we're building this in a very generic way we're also working with partners across M 365 to call this same so if you're building if you're developer building an app and power-ups or power virtual agents or the SharePoint framework if you're in any of those services this API will be available to them and actually natively be embedded into their UI so that when you're done developing a power app you can click Add to teams and it will actually submit this app to the admin for approval in a quick and easy way so it's a really powerful robust generic API set to egri in all of these line of business apps from across your organization into one place and so you know what we've thought about how that submission API work and primarily what we're going to talk about today is a single step approval a really easy way happens to discover apps click approve click publish and the app will be published for their end users but we're also thinking about you know the complexities of of that process it's not always easy and giant enterprise to just have an admin click approve there's business decision makers people with high visibility there's a whole process around app approval and we're thinking about that along this pipeline but simultaneously on the flip side of that coin with this submission API we're also thinking about you know has the degree of trust to to what a developer is building so let's say you trust a source from an organization like like power apps and you know where that data is stored you know that that app can't do something nefarious if an organization trusts it how can we get that approval process down to zero how can we get into that a developer can submit and the APIs approved and we're thinking about all these services but in this conversation today we're primarily going to talk about that single step brutal workflow and so let's see what that looks like I'm gonna show you an example in Visual Studio but again this is exposed across all these n 365 platforms and services it's in power apps it'll be yeah across the board support it let's just look at what that could look like Visual Studio so this is back to that view where we were helping you create your manifest help you validate your app as a developer you know basically helping your app function but now you're done and instead of making you export that thing as a package that teams understands we'll give you an ability to publish directly from an IDE so this is this is in that submission process and this isn't publishing something directly to production it's publishing it in front of an admin space so that they can approve the app so there's an experience here that says much like you have the ability to submit your app to the public App Store globally for teams you also will now have the ability to submit your app to your organization so you click this button you sign in with your user credentials so the admin understands who's submitting and publishing this act and from there we take care of that packaging process for you there's no files that files you have to deal with manifest the heidi he's just going to do that so here's the metadata of that app version 1 and it's going to publish company news articles and that's where you can hit submit request and from there this is the same UI that you come back to check that request to make sure you know an admin is notified and that they've actually approved your app and you can view the status of that at any time so here's somebody that's maybe submitted a couple of apps and saw that one was approved and another one is is actually awaiting approval here so again this this is this connective tissue between the developer developing and building an app all the way to publishing out to the I t's hands and it's just kind of the first half of this workflow and I talked a lot of about a lot of different little UI screenshots and features but I wanted to show a quick demo of what this would look like why so let's play video here and this is really going to showcase how quick that whole experience is inside the team's console so here I am a visual studio I'm creating a new project there's now this quick start wizard I talked about we have teams as a dedicated presence in Visual Studio and you know in our project we can help you scaffold out your app we can help you build tabs with food opponents and you've done all that that's great you then defined your app manifest as a developer which is the metadata and understand with the app is you validate the app you click Play and again would put you directly in teams to test and validate your app on your own whether that's on mobile or desktop and then finally we have you in that publication step where you can either publish globally if you're a third-party IDE but more than that you can publish a custom map directly to a tenant up catalog and that's that submission that we built out so somebody clicks that button adds a note and submits that submission request to their admin so it's a really simple straightforward process all laid out in one way a very seamless workflow from here so everything I talked about is really exciting we have a lot of different services Visual Studio Visual Studio code but you know we do recognize that not everybody uses what Microsoft gives guidance to use and so we wanted to make sure this whole pipeline and solution was extremely flexible or any organization to adapt and one means to do that is to not lock this down as a tightly coupled feature between the submission service or the IDE and the app catalog why but rather expose this over a generic graph API endpoint so this is this is a submission API so you don't have to use any of the ideas that we're suggesting you don't have to use any of the em 365 platforms like power apps to build your app however you want package it however you want and submit it directly to an ad then using this API and that gives us that real robust a flexible nature that can adapt to any organization so if there's processes in between here they can be checked off the list and then programmatically submitted through this API so it's a really powerful mechanism to get apps into the App Catalog that you know we haven't had up until this point we've vetted this with some early customers people are excited I've heard a couple of customers talk about unique ways and using it that I hadn't thought of building out their own internal app stores for developers and IT admins to discover apps it's an exciting time for you know what would a most be a very straightforward simple flexible feature and we're excited to release it to you guys so up until this point we've been talking about how you get the app from an IDE and the developer persona all the way to the IT admin and to talk about what that looks like to the IT admin and how they could take it forward from there I'm going to pass it off to my colleague back up now thanks joy so now let's continue the flow and look at the validate process on how the decision-makers and IT admins in the company would be able to follow their own companies business processes and any best practices they have on how they can quickly validate those apps which were submitted from IDs and take it forward further in the process so here is the manage apps page in the team's admin Center you may have already seen some of these functionalities as an example upload new app which is already generally available from which admins were already able to manually upload the custom apps but now with this new workflow all the apps which were submitted from IDs would automatically be available in the team's admin Center so here you can see onboard app with the app status has blocked so this was an existing column as status which is for byte status has allowed or blocked but now we are introducing another column has publishing status so you can see those newly submitted abs in the submitted status beyond that we would also add features around having the ability to notify admins so those notifications also widgets on the top you see pending requests so admin can easily filter all the apps which are in submitted status here so beyond that as part of validation on the About tab admins can easily see all the details for this app manifest and they can also download the manifest of that file from this page so now once admins and mediums have done the validation how they can go ahead and publish those apps in their tenant so that end users can easily access those so let's look at that flow so here once the validation process process has been done on this app details page from the publishing status field admin can go ahead and change the status from submitted to published once the app has been published those users who have access to that are based on policies which I am going to talk about the users would be able to see those apps independent app store so here you can see build 4.0 so these are the different custom apps which are available in the tenant so now let's look at the demo for the newly submitted apps here admin can easily filter all the custom apps to see in their tenant we have the employee pulse app which was submitted from IDE on the about page admin can see all the details of the app and once the tab validation has done they can simply go ahead and change the status to publish so that this app could be made available to the end-users so now you can see that the app publishing status has changed from submitted to publish and the status which is the all-white status has automatically changed from block to allowed so similar to what Joey earlier talked about the graph API is similar to observation API even for the tenant teams admin center the graph ApS would be available so all these actions instead of the UI can also be easily taken up from the graph API itself so that way you can easily integrate this whole whole end-to-end flow in any of your own integrations any custom workflow you may already have now let's look at the flow diagram of publishing status what we saw in the demo initially when the app is under development and submitted from IDE it would come in the team's admin Center in the submitted state then admin can either publish or reject it up and all the rejected arcs as part of the initial plan would disappear from the team's admin Center this developer can then resubmit if need be now let's look at to the next segment on permissions and consent I am NOT going to go deeper on this topic here but at a higher level you may already be familiar there could be delegated permissions or application permissions for delegated there are some highly privileged permissions which would require the admin consent as an example the ability to read all groups in an all Directory groups dot read at all and all the application permissions the end-user if they want to access that up in the team's client they will see the message as you see on the screen need admin approval so especially when in ad admins may have configured as user consent disabled then the end-users would run into this dead end they cannot move forward and cannot access the ABS so how we can smooth in that story oh we are working on on the next slide we are working on to enable resource specific consent rse permissions where instead of asking for in case of delegated use of groups toward read that whole like having the ability to access all the groups in a tenant how you can make that resource specific permission so here with the access as let's say channel message dot read dot group we would be able to provide the consent to a specific team and with that team owners would be able to consent to the use of their own team data and admin consent may not be required the developers can easily declare such RAC permissions in the app manifest and on the right hand side you see in the team's client when team owner would go to install that hub in their team they can see all the RC permissions for which they're granting consent to now let's also look at how we are enabling these features in teams admin Center so we would have this new Tavis permissions with four different sections so admin would easily have the visibility to all the different permissions that app is asking for and then further with integration to Azure ad global administrators can easily consent to those permissions right within teams admin center instead of going to a different interface beyond that we are also working on to add this feature as I had to team so once that validation has happened have publishing status you see in the published admin can go ahead and install any specific team in any team they would like to so with this add to team this app can be easily installed in a team scope now let's look at the demo on how this permissions RAC and install scenario would come to life let's take an example of priority matrix third party app here admin can go and find that app on the about page they can see all the details of the app and with permissions with is a Jew AD integration admin would have visibility to all the permissions this app is asking for and provide consent to those so here admin is going ahead and accepting those permissions so that was the person area we talked about ground permissions now let's go to the next scenario for RAC permissions and let's take another app as an example by PA which is the custom app you can see a new column as graph or its permissions as yes here again admin can see all the details of the appearance about and the DiPalma shion's here all those permissions as an example read messages in this team are visible to admin and bonds they have done the validation they got the information from the end-users today this is the particular team where they would like to install this app with this had to temp feature admin can go ahead and search for a specific team let's say digital initiative in this example so they can go ahead and choose that team and add the dot this particular app has been added to this team now to close the circle we can see in the team's client dismisses that admit has added by PA to the team so all the end-users would be able to now access this app in this team now let's move on to the next scenario of update we are thinking it holistically so once any app which are already existing in the application as an example it AQ + tab which you can see as version 1.0 now whenever any update comes from IDE those would also seamlessly flow to team's admin Center so we can see the publishing status has update submitted for this app and the update available button which gets highlighted where admin can go ahead click on that update available button to see more details of that updated next here admin would be able to review all the updated details of that app and once they are cut with it they can go ahead and publish the tap next now let's look at the demo for the updated app when that submission comes through in teams admin Center you so here with the publishing status column we can sort all the apps and with FAQ Plus app we can see the publishing status as update submitted and here admin can review all the details and once validated they can go ahead and publish that so now you can see the earlier version was 1.0 0.0 now the updated versions of the app 1.0.1 has been published in the tenant now let's look at the flow diagram for the app update scenario on the bottom left you can see the app which was already existing was would be the published status now in developerworks on it and somewhat updated version it's a version 2 in teams admin center that app would be available as update submitted status and then again similar to a newly submitted app admin can go ahead or either publish or rejected updated version v2 in case they rejected updated version v2 the previous version v1 would still remain in the published status so so far we covered the publish scenario now let's look at how all those published hub can be easily managed and apply any policies in future we would also have some hub configuration settings around that so let's go deeper on what all those different setups and management can be done host publishing the apps and beyond that once that management has happened the end users would be easily able to discover and use those apps which have been provided by the theme our body teams admins so this is the permission policy which is already generally available using these different kind of three kind of apps Microsoft apps third-party apps or tenant apps admins can apply what kind of access they would like to provide on these apps here is an example of set of policies so the new employee pulse app which was published by the admin if let's say you want to promote have higher visibility of this hub that can be penned so all the users to which set of policies has been applied they would be able to see employee pulse app in the a bar in teams blend now what we are working on is having the ability to install this app in a personal scope so what I showed you for permission section that was the ability to add the app in a team scope but let's say for any specific set of users who want to use it in a personal scope where this installed app feature we can go ahead and add that from the team's admin Center now let's look at the demo of how different apps can be installed from the team's admin Center so for the install app scenario in the personal scope admin can go ahead and create a set a policy let's say for this demo purpose so let's name it as installed Trello where we want to demo on how Trello app can be installed to a specific set of users here we can go ahead and search the specific app and add that in the installed app section so now the admin has added Trello up in the set of policies let's go ahead and save that so there could be different ways on how this set of policies can be applied to different set of users in this demo let's take the example from users page and for this specific user we can see all the policies which has been assigned to this user in the policies tab and admin can go ahead and change it say for testing purpose so we have this subset of policy as global by default and we can reassign that to the new set of policy we just created so once this policy has been assigned to this user now we can go to Tim's client and see that in the app bar this particular user can easily see this which has been installed for him so with that we covered the end-to-end flow for the custom app lifecycle you saw how easily from the a different IDs developers can create and submit those apps to how decision-makers and IT admins can easily collaborate validate those up and be able to publish the apps for the whole tenant and thereafter apply policies with that end users would be easily able to see all those added apps pinned apps and can make best use of it to be more highly productive and collaborative in their day to day life so there are many of these related sessions there's one on the team's platform all up capabilities there is one is a streamlined app management where we will also talk about the licensing features we are coming up with and many more sessions on how developers can easily build apps on using these different tools and also on lo code no code power platform based tools here we have shared some of the resources which are already available on dock site for you to learn more and as we release these new features over different iterations we will keep our docks up to date that's all I got so you you have anything else to add I do not thank you for your time and be safe out there everybody thank you thank you [Music] 