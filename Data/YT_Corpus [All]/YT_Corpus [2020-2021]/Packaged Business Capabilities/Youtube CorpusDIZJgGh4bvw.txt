 hi my name is bill bliss and I'm the platform architect from Microsoft teams and one of the original founding members of the Microsoft teams team today I'm going to talk about how you can build modern enterprise-grade collaboration solutions using Microsoft teams here's what we're going to talk about today first I'll talk a little bit about digital disruption digital transformation and the digital feedback loop second I'll briefly discuss the capabilities of the Microsoft teams platform many of you have heard this before so I'll make that quick third over the past year or so our team has built a rich collection of ready to deploy apps that we call the Microsoft teams app templates these apps were created based on what our customers told us they needed as part of their digital transformation journeys I'll go through those briefly lastly and since this is a technical session I thought it would be fun and interesting to look at two of these apps under the hood the first one is quick answers in this design to quickly find and pass on answers to common questions the second one is request a team and it's a ticketing and workflow system for creating new teams for companies that want more control over the team creation process we believe digital is the fourth Industrial Revolution the digital revolution is expected to disrupt organizations and how we live just as steam electricity and IT did for example steam revolutionised transportation electricity revolutionized both work and life in the digital age we are moving from transactional systems and systems of record to systems of intelligence what does it mean to say we're in the middle of the fourth Industrial Revolution what's different about it one is that we're moving from an old world where information was scarce are hard to find to a new world that is information abundant and easy to find similarly static networks of people products and organizations are giving way to dynamic networks siloed productivity is evolving to collective value creation as collaboration becomes par simpler customers are becoming fans or brand ambassadors instead of focusing on planning ahead the idea of experimenting learning and responding rapidly is taking shape last but not least we are moving from transactional systems and systems of record to systems of intelligence the organization's who are embracing digital transformation are reaping real tangible rewards organizations are finding efficiencies lowering costs while having higher return on investment deploying products to market faster and getting the opportunity to innovate more here are some numbers that illustrate what organizations are saying on the positive side 91% of business leaders see digital transformation as a way of sparking innovation and finding efficiencies 68% say digital transformation is increasing profits on the negative side 85 percent say they must offer digital services or become irrelevant 64% of business leaders say they have less than four years to complete a digital transformation or they may go on a business and all of these questions were answered before the Cova 19 pandemic recently Satya Nadella said that companies have completed two years of digital transformation in just two months Microsoft as a company is going through the same digital transformation when I started my career at Microsoft we designed built produced and shipped a product and then customers bought it more accurately IT bought it and deployed it and only then could customers use it for us shipping was the end of the cycle and we started all over again with only indirect information from customers on whether the software we built was being used or how well it worked now with cloud-based software such as teams we have a virtuous cycle of continuous innovation and customer feedback more generally we see Microsoft's digital transformation divided into the four pillars you see here engage your customers we think of this as leveraging our technology to change the way our customers talk to their customers customer engagement begins with a Oh understanding of customers enabled by our ability to collect data representing a 360-degree view of the customer which we then analyze and turn into predictive power that can be used to constantly deliver personalization at scale wherever however whenever the customer prefers empowering our employees to help us transform digitally it's all about enabling them us to be more agile and productive successful businesses use the power of mobility to support employee productivity and collaboration while mitigating the risks that come with providing freedom and space to employees in this way managing security doesn't have to come at the expense of productivity at Microsoft we're thinking about investments in automation that make us more efficient and smarter not just an IT but across the company for us that means doing things like moving from three-year licensing and packaging models to subscription models along with much more frequent and agile updates to our cloud-based products and services so when we talk about optimizing our operations we're talking about streamlining processes removing unneeded steps making connections and moving fast the last area of digital transformation relates to transforming products and services and business models using digital content consider this if every company was effectively a digital or a software company how would the nature of their products and their overall business model shift with their gross margins shift from things to types of services delivered because of digital technology with this in mind we want to transform our products in ways that create new opportunities for our customers and create opportunities for our customers to create new opportunities for their customers we want to do things like help the company transition from license revenue to usage and consumption models track and analyze daily weekly and monthly active users incentivize the Salesforce and partners on products and services used by the customer instead of products and services sold now those four pillars do not exist in a vacuum by putting data and intelligence in the middle and connecting everything together we can create what we call the digital feedback loop by empowering our ploy ease to engage with customers we can transform the products to serve them better and optimize our operations to do so more efficiently quickly and effectively this is an overview of the team's platform basically you can think of it as a set of capabilities the first one our flagship feature is tabs basically that's a big HTML canvas to host your UI the second one is BOTS which enable you to create smart chat skills for your users to take advantage of the third one is message extensions that allows you to share rich cards with other people so when you're composing a message you can actually behind the scenes query a database and create a rich representation of data from any kind of system you like next there's message actions this is a way to take action on an existing message to use the contents of the message to prime the pump for something else either to transform it in place or to kick off a task the next one is tasks modules which is one of my favorite features because I designed it and that is a way of creating dialogue boxes for tasks tasks modules that you open up a dialogue from bot cards or tabs when you need to do a little form entry or look up or keep a one-on-one interaction out of a channel pop open a dialogue and last but not least our notifications and these are ways for your application to get your users attention you can use toast app mentions or just posting to a channel and then users will see what you want them to see from your application now when you publish an app you have a number of choices you can publish to the store and that everyone can take advantage of it you can publish it to your tenant your tenant app catalog and then your organization's employees can use it and lastly you can publish it just to a single team or just a few teams so that they take advantage of it so what exactly is a team's app the capabilities of an app that I just talked about are defined as a metadata in a JSON file which is then packaged with app icons into an app package during the development process developers sideload the app package for testing once it's done it can either be submitted through app source to appear in the team's app store and on the outsource website or uploaded by the administrator into the tenant app catalog the screenshot at the bottom is Microsoft's app catalog so what are these Microsoft teams app templates well the first thing to understand is that they are not sample apps these are production ready apps and they are ready to be deployed on Azure there's no code needed you don't actually need to know anything about code to deploy them but if you want all the code is up there on github all the instructions are there including the architecture installation scripts etc and last but not least I think you'll see why in our opinion these apps are great examples of digital transformation creating a virtuous feedback loop among customers employees processes and products with data intelligence in the middle celebrations is a team's app that allows team members to celebrate birthdays or anniversaries or any other recurring events it allows people to create their own events and then they can specify where they want the notifications for these events to be sent and this allows team members to feel noticed on their special days the company communicator app is one of the first apps that we created we did it because our customer said we want to be able to use teams for sending out broadcast announcements for example you could use teams for things like announcing a new initiative new employee onboarding or any other kind of organizational announcement instead of using email like most companies do today so what we did is create an app for corporate communications teams and other authorized users to create messages collaborate on them before they're sent have a review and approval process and then send the announcement out of her team's the FAQ Plus bot is one of our most popular apps we created it because you would think that a bot is a great way to do yone and that's true except if the pot doesn't have the answer in its database that it fails and then people stop using it so what we said okay what can we do to fix that well we built a bot where you can ask it a question and if the answer is in the database then of course you'll get that answer but if an answer isn't in there you can look you can ask for a human to look at it and then that message gets posted with a special team with people who have volunteered to answer these types of questions they answer it and then the person who asked it gives their answer lastly the answer also gets added to the knowledgebase the age of our support BOTS is a lot like the FAQ pond except that it's been tailored to support human resources teams like the FAQ bot you ask a question and if it knows the answer that it will give you it is a special knowledge of HR support policies and so forth so it will send links to those if that's appropriate there are a few other special features for HR support teams that aid in answering and addressing HR issues using the HR support bot HR teams can partially automate the processes for supporting team members in their organizations the SharePoint list search app is a great way to interact with SharePoint lists SharePoint lists are great for storing information but they can be awkward to use for team collaboration without this app if I want to share information from the list with someone I have to navigate to the list find the right list item and then copy paste a link to it when that person receives it when they click on it they have to navigate to the SharePoint list in a new browser window that is an awful lot of context switching so we said is what we said is wouldn't it be cool if you could directly search for information as you're in a SharePoint list and insert the information from that list as a formatted card directly within a conversation you don't have to navigate to the SharePoint list itself and you can get value from SharePoint lists lists with less complexity and fewer clicks the custom stickers app is a way for teams and organizations to create their own sets of custom stickers and gifts we believe that self-expression is a healthy part of team culture which is why we invested so heavily in it as part of teams the default set of stickers and gifts can be extended by an individual but there's no way to do it as a group or as an organization so we created this app for organizations and teams to be able to collaborate on their own sets of self-expression content gifts and stickers and images the icebreaker bot is based on a bot we created when we noticed that as the team's team started to get larger there were a lot of people that had never met each other so it randomly pairs two people up every week it coordinates with their calendars and then they get to meet each other offline and it keeps track of who's met whom it's a great way for people especially in larger teams to get to know each other the scrum status bot is a simple bot that can be used to coordinate asynchronous stand-up meetings in development teams instead of having to get together in a physical location at a particular time the bot can coordinate the process of gathering individual status reports what they're working on where they're blocked it said are a typical stand-up things everyone enters their own status and that a couple hours later by the end of the day or what have you everyone can see what everyone else has been up to the crowdsource or bot is another question-and-answer bot but this one has a twist it's designed to be used in the context of a team the way it works is you ask a question and of course if the answer is in the database then you'll see it there are also some tools for keeping the questions up to date updating them to lead in them etcetera the crowdsourcing part kicks in if you ask it a question that doesn't have a satisfactory answer you can ask the team to help you and when they do their answer is recorded and put into the database the expert finder bot is interesting because it's kind of a hybrid between add your active directory and SharePoint you search for a person in your organization that has a certain skill a certain interest I went to a particular school since a lot of this information isn't typically available in Active Directory there's a secondary table this kept in sync with Active Directory where this information is stored so users can update their profile information and populate it with this type of data so that other people in the organization can use it the book a room bot is a bot that you can use to quickly find an available conference room for a meeting starting at the current time for 30 60 or 90 it's the attendant spot is a power app that runs inside a team's tab it's used for recording presence and attendance at certain types of events for example corporate training events and so forth you can edit your presence or attendance for up to 30 days in the past and then managers or instructors can see summary reports from power bi associate insights is a power app that's designed to be used by frontline workers gathering information from customers at the point of contact information regarding sentiment positive or negative feedback on the product or the company and in general whether they're happy with the product or the company this information can then be aggregated in a power bi report for an analysis by managers the incentives app is an interesting one we found that a lot of our customers have employee programs for say training and change management and they want to be able to track and incentivize participation this app does just that the admin defines things like the skills and the activities we want you to engage in and how many points you get when you do participate in them and then employees use the app to track their progress and to enter completion of the skills activities and then and then to see their progress towards their goals open badges is a team's app that allows users to earn digital learning badges and then share them with others it integrates with a third party badging company called badger so users can see their badges in their badger profile and allows them to to participate in lifelong learning journeys the coop activities app makes it easy for team owners to create activity groups populate them with users and then associate a set of activities with those groups users see what groups they've been assigned to and they can also optionally get reminders for completing group activities remote support is an app that coordinates support requests between the people who have problems they need help for and an internal support team that is responsible for handling those requests assigning prioritizing and resolving them incident reporter as you might expect given its name is a way to manage incidents completely within Microsoft teams there is an automated way to capture incident to configure the data associated with the incident and to send stakeholder notifications in short it's an end-to-end incident tracking solution now you've seen almost all the app templates but if you were looking closely you may have noticed that there's two of them that we skipped and that's because we're gonna look at these two in more detail let's start with the quick responses app template here are the actors in our story Adele Vance is a retail manager for gonzo so Isaiah Langer is a sales rep for contoso Adele was traveling on business and met someone from a Canadian company who asked whether her company could place an order with Adele Adele wasn't sure how this worked so she set up a chat message to Isaiah to ask him if he knew hey Isaiah what's our policy again with respect to taking orders from customers outside the US specifically can I accept such an order Isaiah thought that the answer might be in the quick answers app that contoso whitey installed awhile back for the US sales team to use so he looks it up and paste the answer into the chat with Adele he searches for international orders and there it is he clicks on it and there's the answer and he sends it back to Adele Adele thanks Isaiah for the answer Adele hadn't seen quick answers before but thought that was kind of cool she decides to add one of her own for a question that she's asked a lot whether retail store staffer paid extra for working on holidays she clicks on the icon and clicks on the plus sign your responses and there it is and she's done a little while later Adele also decides to suggest an answer for contoso now let's go back to Isaiah's machine Isaiah is in the general channel of the US sales team and he can see that a notification has been posted by the quick answers bot that a new suggestion has been posted by Adel Vance he can actually approve it reject it or chat with Adel if he wants to clarify some of the details right here looks good to him so he approves it and here he has a chance to edit it inline and now this answer is in the database now that you've seen how the quick responses app works from a user perspective let's see how it works from a technical perspective let's take a little bit of a closer look at what's going on with the bot on the right you see Microsoft teams the app the quick answers app is loaded and on the left you haven't seen this before perhaps is the end rot debugger now an grok is is what i mentioned earlier is the thing that Forge requests from my app that's running on my local machine to and from the internet but the cool thing one of the cool things about in grok is that it gives you this debugger it lets you see a log of what's going on everything that's sent to and from your bot okay so let's do that let's actually use the message extension I'm going to search for a company response just see some things on the left we'll come back to this in a second and and like I'm going to type International and you see the results on the right and we're gonna stop right here let's make this a little bit bigger this is what was sent first and this the initial run query and then second came I guess another initial run and then there's the search text this is what I typed in the search query and this is what the bot sent back that's the information that is then received by teams and formatted and shown in this list here so that's basically a little bit more about how the bot works let's take a closer look at the tasks module so to invoke it as you recall we've got teams on the right here we click on the message icon the envelope icon and we click on a little plot on the plus button I'm gonna do company responses and now you see the results so let's look at the code for this so as I mentioned earlier this is in the client app so here you see the source code for the client app and if you recall I mentioned that it's built in react and so you see the API for delivering the data things like the company responses the resources user responses all the stuff that shows up here and then this is the UI that for for everything that you see over here for beta for basically it's a it's a react web app now the other interesting thing let's take a look at end Rock so let's see what's going on in and Rock all this time so when you bring up n grok you can see the interaction between the team's UI and the app that's running on my machine so this is the first one here API messages and you can see that it's a compose extension query that's what you saw that a second ago that's just what makes the compose extension and show up let's go for the next one now this is fetch task this is the invocation of the task module and you can see here if you go down to the bottom that if this is invoking the task module with the command company company response and the come command context of compose etc this is all defined by the app and this is what and this is what the app returns and this is what tells teams what to do next now here you can see here what's being loaded from the web app this is just a web app running on my local machine so all that stuff gets loaded to a lot of the stuff was in the cache already so you see 304 not modified etc and you can see the resource strings as well so now you actually can see what's going on with the task module let's see what happens in the code when you use a messaging extension in teams so on the right I've got teams just as before and on the Left I have visuals to you but in this case I've set a few breakpoints so let's see what happens okay so notice that the event is captured there is the breakpoint is hit in the canned responses activity handler now this is the the activity handler for messaging extension events that's how it's been wired up in the bottom and you can actually see the structure the data structure of all the local variables so you can actually see the query is called your responses and you can see the activity this is the raw bot framework event that you see that we saw earlier in an grok it's a complicated data structure as you can see and you see on the right teams has timed out because that's we're messing around in the debugger so that's what happens so we're gonna continue through this it's gonna hit another breakpoint and we're gonna try this again so in this case we're going to go right through the first breakpoint so we hit the second one in this case the bot has actually gone to the database and retrieved some results now again it's going to timeout in teams but you can actually see the default query just as before and in here you can actually see at the list of attachments so at any rate though you can see everything that's going on here now I'm actually gonna let this happen here when it tries something else or to try the company responses tab this is a different query notice that the query here is company responses see because that's actually how it's modeled that the tabbed is actually one of the parameters in the query to the bot okay so again it's timing out on teams do it again now I'm actually going to type in a query so now you can see over here you can see it's the the query that I type that's exactly what I typed and then you can actually see the list of things that the objects that are returned and if I if I was to actually have continued in time I would actually see this in the UI on the right so now you know how a messaging extensions work inside the code you next let's look at the request of team app templates in action first let's set some context Microsoft teams obviously has a built-in way to create new teams and this is the way most customers do it however some customers want to have more control over the team creation process and/or want to ensure that most teams are created based on a set of predefined templates controlled by IT it's always been possible to turn off the ability for end-users to create new teams but once you do that there needs to be a way for end users to request new teams and there needs to be a way for IT or their delegates to process team creation requests you can use an IT ticketing solution for this but that doesn't make it any easier for ensuring that most teams are based on predefined templates requested team is a team's app for this scenario and contoso has recently deployed it and installed it in their tenon App Catalog now that we've set the stage here are the actors in our story Adelle Vance is a retail manager for contoso and she's been deputized by contoso YT to process team creation requests for the sales and marketing departments Isaiah Langer is a sales rep for contoso he wants to create a new team to collaborate with his co-workers at the Chicago store Isiah clicks on the dot menu on the left rail and notices the request of Team app contoso could have also pre pinned it to the left rail using app setup policy he decides to use a template and he fills out all the specified information so he picks a template he's gonna pick retail store he goes to the next phase then he goes to privacy settings he wants us to be a private team now I was gonna give it a team name so now he has to check the availability the team name is available great so it clicks next now he's going to start adding some names we want to get this done quickly so he's just gonna add one person Lynne Robbins and he's gonna skip the members and he's going to be an owner himself so there he's looking at the summary of the information that he specified and he says submit he gets a notice saying that has been submitted for approval let's switch over to Adele's computer now I mentioned earlier that Adele was one of the people that was deputized by contoso IT to be able to approve teams requests there's a special team that's been created for this purpose the request a team admins team right here and we're looking here at the general channel you can see here that Flo has posted a message from the app Isaiah langurs request to create a team now she can actually approve it or reject it right here or she can actually click on the tab that was added when the app was added to the team and she can actually click over to approve requests here's the pending approval that was triggered by Isaiah submission and she can look at the details and she can say okay that looks good I'm going to approve it and then she can confirm the approval with a note and there we go and then we'll go on to the next step okay some time has passed let's switch back over to Isaiah's computer and you can see a couple things the most interesting one is that the Chicago retail team is there there's a general channel a Learning Channel and a shift hand off channel and there's a message from the surface account which is the account that was creating the team in the logic app which we'll see shortly and there you go that is the request a team app now that you've seen the request a team app let's see how it works behind the scenes these are the building blocks of the requests to team app of course for the user interface there's a power app for storage it uses SharePoint lists for app logic it uses a logic app it uses a number of power automated flows and believe it or not it actually uses something I had never seen before but it's actually pretty cool a powershell run book and last but not least there's what I call the systems integration components which handles things like authentication and knowing the API endpoints and the API service and so forth for various subsystems let's walk through each of these of course the process starts when the user fills out the information in the power outlet next remember the button that we pressed to see if the team name was available that's actually powered by a flow called check team availability we'll take a look at it in more detail in a second the successful requests are stored in a SharePoint list along with the actual configuration data for the for the app overall next there is a the team request approval flow and that's what detects that there's a new row in SharePoint it switches it over to pending approval and then a post an adaptive card in the channel the admin channel using flow the requested team admins approve or reject the request using the power app or using the buttons on the adaptive card the SharePoint list item state is updated there is actually a logic app that is looking for changes in the SharePoint lists and that's actually the heart of the process the backend process it walked it walks through a long script I'll show it to you in more detail it takes about seven minutes to execute and that's the process that actually checks for all the team's availability now there's an interesting part in there which is actually a PowerShell script it's a Azure as your automation run book and what that does is it checks to see if the team name is still available and that's because the team could have been created with the same name in between when the request was made and when the read and the request was being processed and the team's actually been created so it has to actually check that twice this is the powerup it's your typical user interface centric development tool on the left here you can see the various screens the landing screen the template the person's the users personal requests this is the connectors this is what I was talking about earlier the API logic this is what connects it up with office 365 groups you can see the three SharePoint lists they're used for configuration and for the template request for the team name requests etc these are the two flows well as I mentioned earlier one of them is the is the flow that actually initiates the team request approval and the other one is checks the team availability let's take a quick look about each of them so let's look at the check Team availability one first so here's some of the properties it's run history etc so basically the the first part is a bunch of variable definitions the actual meat of it is actually the calling the SharePoint API it's calling the team app and looking for some information about whether the site URL exists that it parses the JSON that comes back from the Microsoft graph call from the SharePoint API call and then it checks to see if whether the answer is true or false and then it responds with the answer to the flow but the result of the flow this is the flow that initiates the team request approval so the first step is when the team request is first submitted it detects that state and then it initializes a bunch of variables and then it calls the settings and as I mentioned the settings are actually stored in a SharePoint list too so that's how that's how it's retrieved it loops with the setting items there's a switch statement this actually controls some various app logic around you know the team's app ID whether it's upper lower case that kind of thing and then it loops through the members of the the members of the new team to be created the owners of the new team to be created and then it updates the status to pending approval and then it checks to see if we're posting the team's I haven't mentioned this before but there's also a way for the notifications that this has been completed to be sent over email and sort of via teams but at any rate what this is really doing is populating the SharePoint list and since we're talking about the SharePoint list let's actually take a look at it this is the SharePoint team site that is used to power the request a team app and what you're seeing here is the list of requests this should look familiar this is the actual request that was stored when Isiah made the request to create the Chicago retail team but you can also see the team's templates this is all the metadata for the team's template and this is just the metadata for the app itself and as I mentioned earlier this is the heart of the back end logic this is the logic app that actually creates the team okay so here's here's what we're looking at here so first of all you can see the run history which is pretty cool you can actually run it right here you can simulate the trigger action right here by saying when an item is created or modified and something else that's interesting you can see the API connections these are kind of like the connectors in a flow you can kind of think of a logic app as a cross between a power app and a flow except without the UI because of course it runs on Azure let's take a look at some of the logic in the logic app this is the structure of the logic app so at the top you can see it starts with when an item is created or modified that's the trigger that actually kicks this thing off it's updates the status to team creation that's the first thing it does because the script runs for a long time and so if you look at the list in the meantime you want to be able to have something that looks rational so it initializes a bunch of variables then he gets the service account user profile when you initialize this application you create a service account so that you're not running with the context of our logged in admin user this is where you check to see if the SharePoint site exists let's actually look at this real quick this is what I was telling you about the PowerShell this is an azure run book and if you look at what it is and if you know anything about PowerShell it'll look really familiar it's basically just a powershell script that's running automatically on Azure and it's checking to see if the site URL has already been used okay back to the logic app so if the if the site doesn't exist it means it's okay to create it that's what this thats what this logic does here it then loops through the members and it loops through the owners and it then calls Microsoft graph for each of those and adds those to the newly created team actually it doesn't add them to the team right away it's actually creating an internal data structure to do that later here's where it creates the team he checks the template type and the template operation and so forth it set some variables and here's where it posts the message the welcome message to the general channel of the newly created team it sends a new team created email if it's been configured to work that way and then it updates the status and SharePoint to be team created and that's it so in just a few minutes you've seen how a pretty interesting app has been stitched together using power apps and logic apps and flow and it also sharepoint it's pretty cool and I think it's one of the more interesting teams app templates that brings us to the end of our session today thank you for watching and I hope you've enjoyed learning more about digital transformation and team's app templates and a little bit more about how they work under the covers on this page you can see more information about where to find latest videos our developer program more learning how to get certified to developer and more and more information about Microsoft 365 developer build news you 