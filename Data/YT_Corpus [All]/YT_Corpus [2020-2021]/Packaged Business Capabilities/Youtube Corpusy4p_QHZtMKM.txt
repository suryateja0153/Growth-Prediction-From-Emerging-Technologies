 [MUSIC]  So hey, I'm Sohum and I work on the Microsoft Edge product development team. With me I have Judah.  Hi, everybody, I'm Judah. I work on PWA Builder.com and also PWAs in general at Microsoft.  Today, we are going to be talking to you about building rich app experiences with progressive web apps. So today, let's start off with a really brief introduction to progressive web apps. How Microsoft Edge based PWAs can meet your desktop and cross web app development needs. Next, let's take a look at emerging web standards that we're working on, which aim to bridge the gap between PWAs and native apps. Then let's take a look at improvements we're making to Windows to really light up these new capabilities in your or PWAs. Finally, you can learn more about how Microsoft Edge and PWA Builder can help with your app discovery and distribution needs. All of the resources, by the way that we share in today's presentation will also be available to you at aka.ms/pwabuild2020.  So let's start with a brief introduction to progressive web apps, or PWAs for short. So PWAs are websites that are app like and they integrate into the OS and behave more like a native app. PWAs can do things that traditional websites can't do, such as work entirely offline or have a badging or unlimited local storage and more. We'll cover some of these things today in our talk. PWAs are progressive, meaning you progressively enhance depending on the device you're on. So you might imagine if the device you are on has some new web API capabilities, your PWA will take advantage of those, and if not, then it falls back gracefully where those APIs are unavailable. So let's look at the technical aspects of what makes up a PWA. So what we've built here is a simple website called mappslist, where we're listing products here on left, and we're showing those products in your vicinity here in the map in the center. This is just a plain HTML, JavaScript and CSS site, nothing magical here. But we've turned this website into a PWA. In fact, I've actually installed this here as a progressive web app. So it's in my start menu. I'm going to launch that now. You can see here it's actually running in a stand-alone window. There's no browser frame, there's no address bar, etc. So this is the PWA, it's still HTML, JavaScript, CSS under the hood, but it's now running as if it were a native app. So how do you do that? How do you take a website and change it into a PWA? We do that with three things and I'd like to show you those now. So the first thing is you have to serve your website over https, which we're doing here. Second thing is you need an app manifest. So I've loaded VSCode here with our website loaded in. Here I'm going to open up my manifest. The manifest is just JSON file that has metadata about your app. So things like the name and the icon and so on. So that's the second technical requirement of PWA. The third and final one is the Service Worker. The Service Worker is like a background script and it intercepts requests from your PWA out to the network. It can do some magical things there like interact with a cache or even enable total offline support for your PWA. So these three components turn your website into a progressive web app. So PWAs contain the best of web and native, traditionally, native apps have had all the power. They have the access to all the resources on the host machine, whereas web has the greatest reach being indexed by search engines and so on. So PWAs are position between these two. We want to take the best of the web and the best of native. We see this trending towards more engagement for PWAs because PWAs can be faster, and faster results in more user engagement. The reason they're faster than traditional web apps is because they interact with the service worker and the cache. They don't have to go out to the network for every request. Also, PWAs can work on a variety of devices with responsive design. So you'll build a PWA and your users can use it on mobile all the way up to large screen on the desktop. PWAs also gives you more reach. Of course, PWAs being web technology under the hood. Of course, they're indexed by search engines, you get deep-linking for free, that thing. But in addition to these things, PWAs can also be packaged for app stores. Again, something that native apps have done in the past, but hasn't been available to web apps. Finally, PWAs offer a lower depth costs. We think this is a big win for developers. The fact that you don't have to build native apps for all the different platforms. You don't have to build an Android app, an iOS app, or desktop app. You can actually build your PWA and publish it everywhere.  You may know that we introduced the new Microsoft Edge based on the Chromium Engine earlier this year. At Microsoft, we are not only adopting Chromium to make Edge better on Windows and cross-platform, but also becoming a significant contributor to improve all Chromium-based browsers and framework. This transition to a Chromium-based Edge actually has some exciting repercussions for PWAs, in particular. So with the new Microsoft Edge, your PWAs will now run in a browser-based host and access native capabilities only through web standards. This actually addresses a major developer [inaudible] that we've heard from you over and over again, from our prior version of web apps based on the Legacy Edge HTML platform. This means that your PWAs are now firstly available across all versions of Windows 10. Also available down-level to Windows 7 and 8, and also available cross-platform on Android, Mac OS, Chrome OS, and coming to Linux in the near future. Now, one of the things that developers really liked in our prior iteration of Edge HTML-based PWAs was the ability to distribute them through the Microsoft store. With the new Microsoft Edge, PWAs will not only be distributable through app stores like Judah just mentioned, but also, directly installable from the browser itself. So we're partnering closely with app developers building a range of rich app experiences to understand their needs. From mobile-first, social media, and media streaming apps like Hulu and Twitter, and Instagram, and Pinterest, and Reddit, to enterprise and productivity apps that have a powerful legacy of desktop usage, like Microsoft Office, Outlook, OneDrive, and SharePoint. Working closely with PWA developers like you has helped us identify key gaps between what web and native apps are capable of doing today. to dress this gap, we'll contributing to open source projects that evolve web standards. So that your choice between web or native, rich or poor is no longer a dichotomy.  The contribution to the open-source projects that Sohum is talking about is primarily Project Fugu. This is a collaboration between Microsoft, Google, Intel, and you the web developer community to make the web more capable and more capable app platform. So what we'd like to do is just show you some of these advancements now, some of these new capabilities we're pushing in the web. First one I'd like to draw your attention to is, file association handling. So imagine you've got an image editing app and you want to build that as a PWA. There's some problems today on some blockers for that. First, imagine a user downloads a JPEG file and they open that file. What's the problem? Well, right now, Windows would only open with a native apps, so you couldn't actually build a PWA. So we're changing that, so that your PWA at install time can register as a file association handler. So the user downloads that JPEG file, they open it, and now, it's going to open with your PWA. Also and related to that is this idea of URL handling as well as protocol handling. Your PWA can register as a handler for these things so that maybe if the user clicks a link in an e-mail, rather than opening a new browser tab to your site, if your PWA is installed, it'll actually just open that URL inside your PWA. So we're prototyping all these things in Project Fugu, we're rolling them into web standards, implementing them in Edge and Windows. So they all play nice together with a benefit that your PWA can now take advantage of these things and light up on Windows. We're expecting file association handling to be released in Edge86 later this year. Native file system access is another area that we're pushing innovation in the web in. Imagine that same scenario where you have that PWA that is an image editor and the user downloads a JPEG, they open it, and now because of file association handling, it opens up in your PWA. The user makes some adjustments to that image inside your PWA, make some tweaks to the image, and now click "Save." What's the problem? Well the problem is traditionally, the web hasn't been able to save files back to the original location, the best we could do is give you a new file download or something. So what we're introducing now is that PWAs will be able to read files that the user grants access to that they opened in your PWA and then you can write back to those files. We're pleased to announce that this is available in Edge Canary today.  We also recognize there's a class of apps that need to either always be running or at least run as soon as you log in to Windows. There are some, you might think of some apps in this vein, things like admin dashboards or real-time data displays, even productivity apps like Teams or Slack that always need to be running and run as soon as you log in to Windows. So this was a capability that was available previously only to native apps. Now we're extending the web platform to allow PWAs to do this, to request this permission at install time. What this looks like is when a user goes to install your PWA, you can request that your PWA auto starts at OS login. The user then can opt in to that, and then opt-in that gives the control back to the user, so the user still has control while still affording PWAs the new capability of the Web and run on OS login is expected to launch in Edge Canary the summer.  So along the same lines of capabilities that were only available to desktop apps. So today, all desktop PWAs have a default window title bar region at the top, as is illustrated on the slide right now. Now this really does work in most cases, but there is a category of applications,which have dense user interfaces, to provide our users with a lot of control over every single pixel really matters. So for these apps, introduction of screen real estate really degrades the user experience in the presence of other complex UI like ribbons or tabbed navigation and search bars and so on. So we're currently working on a proposal that would allow PWAs to customize and replace the default window title bar. This would give app developers more control over visual layout and also allow them to reinforce their apps brand to build productivity experiences that are just as compelling as the desktop counterparts. On native sharing, our native apps have been able to participate in the operating systems share contract, which allows users to switch contexts and share information between different apps. Now, this OS kinetic share experience just feels much more natural than any custom in-app implementation that you can think of. This enables seamless transition between apps that really does maximize ease of use and product Id for end users. Now, PWAs will soon be able to invoke and participate in the native share experience as well. In fact, sharing from PWAs is already available in the public stable version of Edge and sharing to PWAs, which is making PWAs a share target, is expected to land in Edge Canary in the coming weeks. Already available in Edge Canary though is the ability for PWAs to provide app shortcuts or what we call a jump lists. You can use these shortcuts to provide users with a quick and easy way to access frequently visited pages in your apps domain or perform certain key functions. This is accessed typically by right-clicking on the desktop or long pressing on mobile. Out of the PWAs is manifest, doesn't have custom shortcuts. Now, the Jump List is actually automatically populated with the users most recently visited pages on the Apps domain to tailor their experience based on usage history.  In addition to the improvements to the web platform itself, we are also working on the tooling for the web, specifically for PWAs. So a few examples of this were introducing new tooling for service workers, cache, storage and more, with the goal of making your PWA development easier and faster. All of these tools are rolling out an edge F12 DeveloperTools, but it's also available for VS Code. If you do development in VS Code, we haven't VS Code extension called Microsoft Edge for VS Code, and what that does is it brings the F12 DeveloperTools right inside of VS code. So if that picks your interests, check out the build talk listed on the slide. Here SK120, Microsoft Edge DevTools for Web Developers. So all of our work that we're doing in the web platform is done out in the open on GitHub. So we encourage you to check out aka.ms/edgeexplainrs to see what we're working on and to give feedback on our designs. You can also participate in Edge Origin Trials. What these are, these allow you to experiment with these new capabilities are even before they become publicly available. So if you're interested in that, check out the build talk, moving the web forward with Microsoft Edge Chromium, 20 more.  So in addition to adding new capabilities to the web, now we also want to make sure that the user experience for PWAs feels truly at home on Windows, and we're committed to improving Windows as well as edge, so that your PWAs are tightly integrated with the operating systems features and usage patterns, resulting in increased user engagement and satisfaction. So to this effect, would be made numerous refinements throughout Windows. For instance, PWA does not show up in OS app listings with their own app identity alongside other Windows apps, which means that they're integrated in all the places where you'd manage your applications, like the settings app or Start Menu or Cost Manager. User can manage individual app permissions for PWAs like a camera, microphone, or location access from the privacy settings page and PWAs are listed in the start menu today from where you can un-click actions like search or pin or uninstall. Now some of these changes are already available in the stable release of Edge and others rely on up model improvements in the mid 20th, they'd to Windows 10. To preview these changes all you need to do is enable the web apps identity proxy flag in Edge Canary. Now our project full contributions that we just mentioned earlier are also complemented and completed by improvements that we're making to Windows which light up those features. For instance, your app shortcuts will show up in the start menu with the app listing, as well as in the taskbar when you right-click on your app's icon. When PWA is a registered as file association handlers, they'll be listed in the open file with prompt in Windows, and PWA is registered as shared targets will be listed in the Windows Share user interface as well. In addition to these app identity refinements, PWAs can integrate with Windows features like notifications in the Action Center to reengage users. Now you can use service workers to invoke push notifications, which allows users to be informed about changes to your app even when it isn't running. Now, notifications can also be surfaced in subtler ways without interrupting the user workflows. PWAs will soon be able to Badge notifications in the apps icon in the taskbar. This is a great way to condense actionable information for your users in very few pixels. Now used commonly to show say, account of unread messages or visual indicators regarding the state of your app and so on. Our data from our app partners indicates that Badge, when used thoughtfully, is one of those seemingly minor UI features that actually leads to a very significant spike in grids of user engagement. Finally PWAs can now blend them with the ambiance of Windows by having their app resources, such as icons respond to user teams. This allows your app to respect the user's preferences in case of light or dark mode, or even assist them in increasing usability for those who require high-contrast, and none of these changes, whether it be the richer capabilities that we're adding to the web platform for projects Google or the complimentary Windows improvements at remaking should really feel revolutionary to you. In some ways that is the point. Using these richer capabilities doesn't require you to rewrite lots and lots of code. Our goal is to provide PWA Developers with small incremental changes that require minimal effort on your part would provide great end-user value. So let's take a look at how you can create richer experiences with some of these improvements.  So we've shown you a lot of new capabilities in the web platform, and we want to demo a few of these for you today. We're going to demo three of them are. The first one is Badging, and you may be familiar with Badging from apps like Facebook, where you have a new unread notification, Twitter, and so on. Since we're on a Teams meeting, we thought we would show how Teams actually uses this today. So if you see at the bottom here, I've got this one unread the count 14. So that's what Badging is and we want to bring that to PWAs. So let me show you how that works. I'm going to jump over to my JavaScript file here, and we're just going to write some simple code. We're checking for the existence of navigator.SetAppBadge. This is this new badging enabled in the web platform. If it exists, then we're going to pass in 42. So I'm going to save that and we're going to run our PWA again. Now, you'll notice here at the bottom of our PWA, we have that badge here for your PWA. Very simple to do, very little code as you just saw, but with the benefit that you can re-engage users. Couple of things to call out with this App Badge. One is we're experimenting with more than numbers. So as it stands today in Edge Stable, you can use this right now and it will work for installed PWAs. But we're experimenting with more than just numbers. So you might imagine if you have a weather PWA and you want to set the app badge to say a thundercloud emoji, to say, "This is the forecast for today." We're looking at that, we're experimenting with that. That may be coming down the pipe soon. Another thing though with app badging is this can be done from your Service Worker. So let's jump over to our Service Worker here. Imagine we've got a push notification from your server. So this is our Service Worker. Keep in mind, maybe you'll remember this, but service worker can run in the background, meaning even if your PWA isn't running, your Service Worker can be executed by the browser. So you could get a push notification from your server, your server side pushes it down to your PWA. Even though your PWA isn't running, you can do stuff in response to that. So here we could say "Navigator.SetappBadge", set it here in the Service Worker. This is a great way to reengage your users to say, "Hey, there's something new here." I'll launch the app and see what's new. One other final note about badging is Microsoft is experimenting with a new server side event that would be pushed down to your PWA. So you might imagine in the future there will be an events like Update Badge, and in here you could do the same Navigator.SetappBadge. The reason for that being while we can update the badge during a push notification, push notifications are pretty heavyweight, they're pretty intrusive to the user's workflow. Whereas just updating the badge is something a little more subtle. So that is badging in a nutshell. That's one thing I wanted to show. For the second one, we want to show you app shortcuts. So app shortcuts, again, I'm going to use Teams as the example here. I can right-click on "Teams" and you can see out of this Context Menu, we have a bunch of places we can jump to in the app. These are things that you often use in the app for Teams. It's things like New Chat, Settings, so on. We want to give the same capability to the web platform, so your PWAs could take advantage of it. So let me show you what that looks like. We're going to jump over to our App Manifest. Again, this is the JSON document containing metadata about your app. We're going to add a new member here called Shortcuts. Now, shortcuts is an array of shortcuts. You can have more than one, of course. In the interest of time, I'm just going to paste one shortcut here. As you can see you can give your shortcut a name. You have a URL. That's the place that your PWA launches to when that shortcut is clicked and you give it one or more icons. So I'm going to save that now, and we'll go ahead and launch our PWA again. Actually, we don't even need to launch it come to think of it. From here, I'm going to say "Mappslist" and just bring it up here. You'll notice now that in the Start Menu we now have this Sell New Items. So this is the shortcut for our PWA here. So I'm going to go ahead and do that, and it's going to bring up whatever URL I say. This also shows up in right-click in the Start Menu. So I can right-click on our PWA, and as you can see there, it's also Sell New Item, and of course, it's in the taskbar as well. So I could right-click on the app icon in the taskbar and we have Sell New Item there as well. So that's app shortcuts in a nutshell. It gives your users a quick way to jump to common locations in your app. Third and final thing I want to show is native sharing. So Sohum mentioned in the previous slide how native share is a great way to make your app fit in with other apps. You can receive shared data, you can send out shared data. Let me show you what that looks like now. So we're going to jump over to our JavaScript. Even before I write the code here, let me just show you in the UI what we want to happen. So I'm going to launch our PWA again. You can see here's a list of products on the left and next to each product is this Share button that currently does nothing. So I want to change this so that clicking that will invoke the native share functionality. So that should bring up the Windows native share dialogue. Let me show you how to do that. We've already got this function here, ShareClicked. We've got the product that we're trying to share. So now what we're going to do, we're going to say if navigator.share exists, then we're going to actually use that. We're going to pass into that share an object that contains the title of the text and the URL. So in this case, the title is the product name, the description for the text, and the products URL. So if I save that and we're going to come back to our PWA. Now, if I click "Share" on this Grand Piano, you'll notice now that the Window's native share dialogue is popping up. What this is is Windows knows what apps I have installed that I'm going to share to, maybe I've shared to in the past. Also, people that are connected to me in my organization that I can share to. So I can click any of these share targets, these are apps that can receive a share, Twitter, Mail, and so on. I can copy a link to the Grand Piano. I'm going to go ahead and do Mail and we'll see how Mail handles that share. Here you can see it took the title of the share and put it as the subject line of an e-mail. Put the description here in the body of the e-mail and appended the link to the bottom as well. So now, you might be wondering, okay, that's great, we can very easily, with just a few lines of code share out from our PWA. Can we do the other way? Can we receive a share from another app? The answer is yes. Let me show you how to do that. Just to be clear, what that looks like in the PWA is when we do share, we want to be listed. We want our PWA to be listed down here in the list of apps that can receive that shares. Let's have a look. We're going to go over to our "App Manifest" again. Here in the "App Manifest" we're going to add a new member called "Share Target". With "Share Target", you specify the URL that's going to handle that share, whether it's a GET or a POST and so on, the perimeter names. Then your app can handle that however you see fit. So once we do this and you install, the user installs your PWA, your PWA registers as a share target. So those were three things I've shown. All three things that we've showed in this demo are available in public builds of Edge today. So we encourage you to try these out in your PWAs and take advantage of the new capabilities in the Web platform.  So one of the strengths of PWAs is their ability to be discovered and distributed in ways that combine the best of the web and the best of the native. With Microsoft Edge and open source tooling, we want to help your PWAs reach even more users. So as we mentioned earlier, Microsoft Edge based PWAs are actually install-able from the browser itself. This means that when a user navigates to your PWA enabled website, Edge provides a user with an installation prompt to your PWA directly from the browser's omnibox. This acquisition process has minimal friction taking less than a couple of seconds, and is a great way to up-sell the web experience to users who navigated to your website either from a search engine or via deep-linking from other sites. We're also in the process of redefining this in-browser install experience based on user feedback. So stay tuned for improvements to Edge in the near future. Additionally, we also know that different users have different patterns and behaviors for acquiring applications. While some search in a browser, others prefer to use app stores. Inside from insulation data that our app partner share with us, demonstrates that listing your PWA in the store could be a great strategy to grow your apps addressable market. An app store listing is a great way to supplement your web traffic, allowing you to reach completely new demographics who may not have discovered your app through just the web. We're committed to helping you grow your user base, while minimizing the effort it takes you to distribute your app on different platforms. Whether it be the Microsoft Store on Windows, or the Google Play, or Samsung Galaxy Store on Android, or the Mac Store. So we've created a powerful set of open source tools available at PWABuilder.com. Which can help with getting you started with PWA from scratch if all you have is a website; or incrementing, adding web components that enhance the capabilities of your PWA. Finally, help you with packaging your web app for distribution on various platforms. So let's take a look at PWABuilder.com from Judah.  So I'm going go to PWABuilder, and PWA Builder, as Sohum mentioned, can help you get started with PWAs if you don't have one and you want to just get started, you want to play around with it. That's this section on right here. You can download a PWA Starter template and also clone it from GitHub. Second feature I want to call out here is in PWA Builder, we help you build a richer PWA through different web components. I just want to browse these very quickly and call attention to a few. So you can have a web component that offers sign-in with federated services like Microsoft, Google, Facebook, and Apple. Inking on the web, I'll touch on that in just a minute. Install your PWA. So this would be like giving a branded experience to your PWA. Your PWA itself can trigger that app install and show a branded installation experience. Inking too, so if your app does anything for mouse, touch and pen to do drawing, we have an inking component for that. All it is, is you're just taking little code snippet and dropping that on your PWA. Then you can use it. I'm just showing it off here. Also the other thing we do is we have a bunch of "Graph Components". So the Microsoft Graph lets you connect with other people in your organization. So you could imagine your PWA has a Graph component that lets you have a "People Picker", could choose someone from your organization. So if you're looking to just enhance your PWA, please check out the future store on PWA Builder. Final thing I want to show with PWA Builder is the packaging story. So Sohum just mentioned that you can take PWAs and get them in app stores, how does that work? Well, I'm going to show that now. So as you recall, we have an existing URL for our PWA here. It's this one here, so Mappslist. I'm going to take that URL and I'm going to put that right into PWA Builder and do "Start". Now if you don't have a PWA, that's totally okay. If you just have a website and you want to see what, what are the next steps for turning it into a PWA, this will help you. So I'm going to go ahead and click "Start" and PWA Builder is going to analyze that PWA and see what do we need to do to actually turn this thing into a more full fledged PWA? In this case, it seems that I already have a manifest, I already have a Service Worker served over HTTPS. If your app is missing any of these things, we'll help you get it. Like if you're missing a Service Worker, you can just choose a Service Worker here. So I click this guy and that's going to show you a bunch of different Service Workers that you can use to enhance your web app. Once we do have that PWA, then we want to package it and get it in App Store. Again, the reason for that is we've trained a generation of users to look for apps in app stores. So maybe getting in the app store will bring your web app a new audience. So we're going to go ahead and do that. I'm going to click "Build My PWA" here. That takes me to this page where I can download different packages that can be submitted to the store. So I'm going to download the Microsoft Store package here. What's going on is it's sprinkling some magic on your PWA and turning it into a thing that you can just submit to the app stores. This works with several different ones, including the Google Play Store for Android, the Samsung Galaxy Store, MacOS, and so on. So that's the file downloaded. I can actually take this thing and submit it to the Microsoft Store. Now, if you do that today on PWA Builder, if you take your PWA, run it through here and submit to the Microsoft Store, you can get in the store. The engine that's driving your PWA will still be the Legacy EdgeHTML based engine. But I'm glad to report that today we are working hard heads down on this, so that very soon this year we will have a Chromium-based engine for your PWAs. So you can get it in the store today, and in the future we'll update this so that your PWA uses the chromium-based engine. So you can use some of the new bits that we've talked about today. We've actually ran through all this ourselves. So given that we built a PWA for this talk and run it through PWA Builder we actually packaged it for the store. So I want to show you that. I'm going to launch that here. It's opening in the Microsoft Store app. Here is our Mappslist App in the Microsoft Store. So in summary, you can use PWA Builder to do three things. Get started with a new PWA, enhance your existing PWA with rich web components, and also package your PWA for the app stores.  So that brings us to the end of all the content and demos that we have planned for you today. However, we do want to reiterate one more thing, that all of our investments in PWAs are driven by your needs and directly shaped by your feedback. Especially now, more than ever, with many of our experiences from the social to business critical. From the individual to the communal, moving online, we want to make sure that we are listening to all of your feedback. We started on this journey of building and shaping the new Microsoft Edge by listening to developers and users like you, and we're committed to partnering with you make PWAs more capable, more native, and more discoverable. So here, are some ways in which you can work with us. Firstly, all of our documentation for PWAs including how to get started using tools like PWA Builder that we just demoed and much more is available at aka.ms/pwadocs. Now if you're developing a PWA or even just use PWAs and have features and improvements that you'd like to see, feel free to reach out to us either through UserVoice or from the "Send Feedback" button in the Microsoft Edge browser, or even the three.drop-down menu inside any Microsoft Edge based PWA. Or just tweet out to us @MsEdgeDev, if that's your thing. All of the resources that we shared in today's presentation, including ways to collaborate with us on new web standards and participating in Microsoft Edge Origin Trials. Details and timelines about the particular features in Fugu and improvements of Windows that we spoke about are all available at aka.ms/pwabuild2020. So we hope that you reach out to us and thanks a lot for joining us today.  Thanks, everybody. [MUSIC] 