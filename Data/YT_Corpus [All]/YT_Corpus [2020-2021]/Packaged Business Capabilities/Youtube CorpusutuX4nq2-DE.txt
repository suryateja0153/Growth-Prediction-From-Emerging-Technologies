 hey folks welcome to this session today i want  to talk to you about an exciting topic for   application developers which is about cloud native  application development with azure kubernetes   service to introduce myself my name is Wely Lau  i'm a cloud solution architect in one commercial   partner group in microsoft apac before we get  started i want to set the expectation that this   is not a docker container basic 101 session but  rather an intermediate topic for you which have   a good basic understanding of docker container  and kubernetes i want to elevate to the next   level particularly developing container apps on  azure now however i understand that not all of you   are familiar with the container basic and as such  i'll be spending a quick crash course to get you   up to speed now regardless your expertise  level i still encourage you to check out   this kubernetes learning guide and this is a  comprehensive interactive learning guides to   turn you from zero to hero about kubernetes make  sure you check out this link after this session   without further due let's take  a quick look at the agenda on the session we'll start by demystifying the  term cloud native and as spoken previously we   will then do a quick crash course on the  container basic we'll then talk about   kubernetes on azure including the top scenario  and the typical reference architecture moving on   we'll talk about some best practices to develop  and running kubernetes application on azure   we'll then discuss one of the frequently  asked topic about scaling apps on aks   we'll spend a bit of a bit of time to talk about  the recently announced capability or new updates   on azure kubernetes service to wrap up i'll  briefly touch on what you will be expecting   on the next session finally i'll show you all  relevant links which will be discussed throughout   the sessions so that you have a slide that compose  all reference that you can refer to and learn more all right let's start with the first section  demystify the cloud native the rapid rise of   new digitally digitally business has  disrupted traditional business model   and the stabilized and established companies across  industry the ground for competition have changed   enterprise are increasingly defined by the  way they build software a lot of challengers   to the banks to the online health care provider to  e-commerce and other startup companies are   winning customers by providing new and more  agile application now all of these new trends   have yield a new paradigms of building software  and that's what we call cloud native now even   though it is a new paradigm we actually still  leverage some of the existing good application   practice such as the concept of the 12 factor- apps idc predicts by 2020 there will be over 35   of our production application will be on cloud  native which is compared to about 10 today so the question is what exactly cloud native  this so cloud native is actually an adjective   that describes the application architecture  and platform or infrastructure that together   make it economical and possible for us  to quickly respond to change landscape   and growing customer needs now in simple terms a  thing about an application state making use of api   and are typically composed and packaged into container   developed with the microservice architecture and  eventually making use of devops as a process and   tooling so the combination of a bunch of terms  actually defines and data means as a cloud native and then the question is well why cloud native  what's the benefits you expect from cloud native   well the first one is the speed of innovation we  strongly believe that cloud native development   model like microservice and default practice  emphasize on the speed of software delivery in   a structured yet agile process second it's about  reliability the application which cloud native   approach in mind can help you get most out of the  clubs which means increase availability resiliency   scalability and low latency freedom from redundant  task operational tasks and thirdly about security   now between the agile and security there  shouldn't be any trade-off with the tech cloud   native technology you can pretty much automate  the security checks running intelligent track   detection and so on to increase the level  of security now obviously though all of   this benefits that i mentioned about is not  organically you you're not inherently getting   that you still have to put quite a fair bit  of practice into your software delivery model we talked about the benefits in the  previous slide however a customer   who would like to leverage cloud natives who  also needs to be aware that they are additional   drawback on top first is typically the cloud  native technology which make use of open source   change very fast and which means you also need  to keep up the changes ensuring your apps it's   on the supported release second related actually  to the first point it enforces you to change your   development and deployment phase to much rapid  model and this is something that your development   team needs to adjust accordingly third don't  be surprised if they are some of the feature   or summer product maybe the decommissions are  deprecated if there are some directional change or   root net change and as such your team needs to be  agile enough to adopt and make change necessarily now let's talk about the benefits of azure for  building cloud native applications so azure can   help you realize the benefits of adopting cloud  native application a first point is according   to forester a research company azure offer a  very strong developer experience and pretty   much complete tool change we also have a number  of capability which just like a managed database   that can serve a high level availability and  we also pay very close attention to security we   spend over a billion dollar invested every year in  research and development on that particular area   we have over 90 compliance certification  today all right so we we we finished the   section number one and let's move on to the crash  course about container docker and kubernetes   now for the folks who are familiar with this uh  please bear with me for a few minutes and we'll   come back to more advanced topic shortly so first  of all let's talk about container so container is   the application packaging and deployment mechanism  and to make it easier to explain let's compare   it with the virtual machine which i'm sure  all of us knows about that so both of them   container and vms are very portable but if you  consider traditional vm think about it as a result   of hardware virtualization okay however container  is actually an operating system virtualization   right containers share the operating system while  the virtualization actually sharing the hardware   the host eventually so one main different  difference between the two is vm hosts   its own operating system so you decide what  operating system to be installed within the vm   while um container does not so container will  leverage whatever they have on their host so what what are the few benefits of container  first of all it is very very efficient the fact   that it has a lot higher density than virtual  machine and secondly containers generally are   very lightweight and that enables you to ship  software a lot more faster a third lift and shift   so you can pretty much pour any container image  and such that you will avoid the login experience   fourth dependencies such as the package are  defined typically in a docker file and that   also provides a mechanism to ensure that  the right consistency across a multiple   environment now first last point even  though you can run container anywhere   including on-premise or even your local  machine the benefits of container really   shine when it is running on the cloud  simply because of the elasticity okay let's talk about docker next so  docker is the de facto container runtime   it's by far the most popular container runtimes  and not only that docker also provide a set of api   and tools most of them are open source and  managed by the company called docker inc   it started with linux but later also available  on windows including windows 10 and windows   server 2016 so docker have two edition a  community edition and enterprise edition   with dockerfile along with our application  code we generate or we build a container image   and then with the container image we instantiate  the running we call a running container right   now the question is is docker alone enough  sufficient for us to build and run contain   rice application pause a second think about it  well the answer is yes and no so the answer is yes   if it turns out that your app is relatively simple  and such as we are fine with even just a single   container right because we manually operate it  you manually hit docker run command and if it   goes down it's your responsible to start it again  and in most cases we actually need more than that and that's where we need to have  orchestrator and that's the job of   orchestrator to ease some of the tasks away  from us an orchestrator provides several   capabilities as you can see on the screen to  automate and operates our app on behalf of us   so while most of the case we still need to  define the rules and configurations right it   is then the job of the orchestrator which do they  have a listing listing for us so that for example   scheduling and deploying the apps on available  nodes um scaling the apps when the demand increase   restart or recreate the container when when one  or more of the container goes down and yes that   the orchestrator can help us to do this thing so  that we have a peaceful sleep at night hopefully so there are many orchestrators  available in the market such as stock   swamp dcos service fabric and so on however  kubernetes in the last recent years has been   the most popular option amongst the others mainly  for the three reason first of all portability   which you can pretty much run kubernetes anywhere  second reason extensible so kubernetes being one   of the most actively contributed project  in github it is very extensible so that the   contributor can build any additional extension  on be on top of the kubernetes and turn most   if not all the capability that we mentioned  earlier in the previous slide are available   in kubernetes and that tells that kubernetes  is actually pretty powerful orchestrator all right let's talk a little bit more about the  kubernetes itself now you may have seen somebody   refer as k k8 s right or some people just call  it kfs and that's because well kubernetes itself   is quite a lengthy word right that's because  there are eight characters between that word   right so between k and s eight characters  that's the reason why people call it afs   the same the terms kubernetes come from the  big greek word which means health mems or   ship pilot all right kubernetes was highly  inspired by google park system it was then   released as open source project by three  founders uh joe brandon as well as great   kubernetes was donated to cncf and actively  contributed by many organizations including   microsoft google red hat ibm and so many  many more the primary way to interact with   kubernetes cluster is with the command call cube  ctl though you can make use of dashboard or api or   you build any layer on top to interact with  kubernetes and that's perfectly fine as well kubernetes on azure was designed with the  principle of enterprise ready so on the platform   level we uh you can see that we have a number of  azure service to empower container and kubernetes   experience on azure we also have other development  tools such as visual studio github to enhance the   developer experience now the azure team also  constantly make community control contributions   to the open source project as you can see on the  right hand side so that we all grow with the open   source community so aka is definitely one of  the area that plays a significant role in the   containers on azure strategy okay let's move on  to the next section talking about the aks scenario   and architecture so now if we double click on the  aks aks is a managed kubernetes offering on azure   where we use the upstream kubernetes to ensure  the consistent experience with the open source the   control plane aka the master node are hosted and  managed by the azure platform at no charge the aks   used a vm skill set to provision worker nodes  where docker runtime is also installed and that   is actually the home of the kubernetes object  where our application will be installed including   the parts deployment and so many more so since  kubernetes is an open source project there are   no extra cost of using aks a customer is actually  only required to pay compute for the worker nodes   kubernetes on azure are more suitable on the  following scenario first lift and shift container   and in which you could achieve substantial saving  cost saving or without refactoring your amp   second micro service application in which you  would achieve faster application development   and agility a third a machine learning and  in which you could achieve high performance   and low latency machine learning training model  fourth iot scenario in which the same container   image can run on kubernetes or any other  environment including an iot devices let's take a look at one example architecture with  aks the microservices look at the back-end service   are deployed as individual service in aks and each  of the servers can choose its preferred database   engine such as cosmos db or azure sql database  nginx is used as an ingress controller for   traffic routing or load balancing we can also use  azure pipeline to perform the cicd dev op solution   azure container registry is used to store  container image that we have built we also   have azure active directory for user to  perform authentication and authorization   azure keyword is used to store sensitive  information such as secret certificate   password and so on we can also leverage  azure monitor or even a third-party open   source monitoring solution such as primitives for  monitoring and please be reminded that we will   have another session in which we'll discuss this  microservice architecture topic in greater details you can also find the azure the other architecture  about container on azure in the azure architecture   centers each architecture typically consists  of the explanations of the data flow   the network topology architecture and  design considerations and components used alright let's move on to the aks best practice  they are best practice both for cluster developer   or cluster operator or administrator and also  for the application developer so we will be   discussing some of the developer best practice  in this session now before i move on to the each   best practice in more detail a gentle  reminder that the general application   development best practice that we have known  for years still applies here for example for   application developer perspective a practice  such as writing secure application to prevent sql   injections cross-site scripting they also  applies and then practice such as writing   applications which use memory efficiently  closing the connection object after use   they are all pretty much still valid however  if you need some refresh on the best practice   feel free to check out the two reference link  provided on the right likewise for the kubernetes   operator feel free to check out the general  kubernetes best practice on the left all right with that let's talk about the first  best practice make sure that you set resource   requests and limits of the pot now let  me give you an analogy to explain this   i bet most of you have ever made reservation  for a restaurant for dinner or lunch   so look at it for example for example let's  look at the conversation goes like this   i'm making a phone call and then the reception  will ask you how many people would you like to   reserve for a table well what about if you say  well i'm not telling you or i don't know right   the reaction for the attendee will be what what do  you mean right and that is exactly what happened   if you don't set the request limit and limit so  kubernetes will use the default request and limit   which most probably not the most efficient  way because simply not every application   requires some amount of resources and for the  same reason you might experience performance   degradation and as such we strongly  recommend you to do so and here's an   example in yaml file in which you tell kubernetes  to set requests and limits of cpu and memory right   so um the request is basically define a set  of amount of resource in which memory and cpu   that port needs on the regular basis  right limits at the other hand it's   the maximum of the cpu and memory that  a part can use as the stretch all right   while i mentioned about the importance of set  that requires a limit the best practice number two   is actually the enforcement and the detection to  the previous one so for enforcement you can use   the limit range object in kubernetes to explicitly  define the default when activated the user must   specify the values or else kubernetes will reject  the port creation for detection you can make use   of cube about advisor tools it is an open source  project that can be used to scan and report   different issues one useful check at the moment  is exactly the purpose of reminding you to set   the requests and limits of default and i would  i wouldn't be surprised in the future that if   we add more capability to the quick cube advisor  so moving on to the best practice number three   which is the development tools for aks the first  one is the kubernetes extension for vs code   it works with any cluster it requires dependencies  such as cube cdl and docker to be installed in   order to function so it provides very convenient  way to view your cluster in explorative review   give you intelligence for cube resource and so  many more another tools that will be very helpful   is called bridge to kubernetes this  allows you to develop microservice   architecture very conveniently now i'll talk  more about this tool in the upcoming session so   stay tuned and with that let me show you the  demo of kubernetes extension with vs code all right now i have my vs code available  here right the first thing that you need to do   is to grab the extension if you haven't done so so  you go to the x extensions and look for kubernetes   right so notice that i have  already one installed here   right otherwise you will be prompted to install  it so make sure that you hit the install button   okay so once you have it installed the  next step is basically how do you authorize   your account your azure account to the vs code and  in this example i have successfully authorized my   account over here and you notice that i've got  my subscriptions enabled and integrated to the   vs code here so when you have that install the  extension installed you notice that there's   a section on the left hand side shown kubernetes  and over here what you could do is to hit the tree   dot and either add an existing cluster if you  have one and um just to remind you this tool runs   in any kubernetes clusters not just aks that runs  on that runs for google that runs for aws it runs   for the local kubernetes right so you can add an  existing or you can you can also hit the create   new cluster and with that you can then add a new  cluster with the wizard so it's pretty convenient   so moving on once you have added  your cluster you will notice that   i have two clusters shown here and then  what i can do is drill down into a little   bit details and you notice that i've got a  few different kubernetes objects shown here   so what i'll do is hit name space or drill  down the namespace and you notice that i've got   a different name space right and as simple as that  what i can do is right click and say use namespace   and what it does it will change the default  namespace to that particular one okay now   obviously i can change but again use namespace  here okay um the next thing that i'm going to show   you is to expand the note so the notes actually  it's the virtual machines uh that was created by   the vm skill set to host our application so this  is the worker nodes here so i can expand further   of the node and you'll notice that there are  all bunch of parts ins installed and deployed to run my application okay uh what is cool is you can  right click on one of them and notice that there's   an ability for me to boom click the terminal  all right and the moment i hit the terminal   let me do one more time you'll notice that  i can perform it automatically allow me to   perform an ssh into that terminal so if i keep  ls if i could top this terminal is basically   um within the container right not not just my uh a  local terminal that's pretty convenient so moving   on um if i were to click workloads you notice that  i have a subsequent a different object here what   i'm going to do is expand the deployment and you  notice that i have wordpress install here okay   and what i can do is right click and click load  okay and the moment i hit load namespace what   space what it does load that deployment what it  does it will show you a yaml template okay now   remember kubernetes has a lot a lot  of object and some possible for us   to write to recognize every single details  definitely you can check at kubernetes.io   but what this um this extension allows you  to do is the moment you hover to one of the object here you notice that it gives you the  detailed description about what each of this   attribute is okay um now if i were to let's say  change the replica from one and i accidentally   hit one um a one a one uh what it does it it  will prompt you that we are expecting an integer   in the replica right um the sort of performance  intelligence or validation for us to make sure   that we enter the right object so over here  what i'll do is change the replica into two   and click ctrl s as save i'm gonna save it so um  as i save it nothing actually happened yet i need   to make sure what i can do is uh compare this  modified replica with x with the previous one   so what i can do is click ctrl c p which bring  up a palette right so this is called obvious   chord palettes so um i choose the kubernetes  div and the more i do that you notice that   this vs code extension will highlight  what's changed on the previous and after   okay um and if i'm happy with that what i can do  is also do the same thing ctrl c cp and this time   i say apply right kubernetes apply eventually what  it does is say hey are you really want to apply   the new updated kubernetes yammer file right now  internally no magic what it does is called cube   ctl as apply minus minus f this file okay but  you see that vs code helped you to do all of   this thing very very easily now i can close this  default and the moment i do that you notice that   when i expand this wordpress press file you notice  that this was my previously created part which is   successfully running in a screen and we also have  these things uh we also have this thing in the   red and that's actually it's been created the one  that was created when i change the replica to two   okay now what i can also do is perform a right  click and describe okay obviously i can click show   logs and follow logs i can click describe and it  tells me that oh right now the status of this part   is still pending right because it's still waiting  for container creation and that will take a little   bit of time okay uh pretty convenient so uh what  i'm gonna do next um and i'm not gonna wait this   to be created what i'm going to do next is to  drill down to the network section and you can see   that i have a different service here and one of  the services that i have is wordpress okay so um   a very convenient way for me to perform a port  forward to my local as you notice that this   service actually run as cluster ip so it's not  publicly accessible but what i can do is perform   a port forward okay so um let me show you that  right now my local host port 8880 has nothing   okay let me hit f5 um i still don't get anything  now what i can do is right click on this and click   port forward all right and the moment it hit  portfolio is actually ask you about what is   the port are you expecting let me hit portfolio  again over here okay and i'm going to set it i   just go with the default one which is 8080 and  the moment i hit yes 8080 it will perform a port   forward to my local file if i were to switch back  to my browser let me hit f5 on my browser boom all   right wordpress has been successfully forwarded  to my local though the real deployments on the   aks i managed to port forwarding so you see that  how much thing that this extension do it for you all right i think that's pretty much  all for this demo let me move on to my   deck again and let's switch gear to talk about  scaling application in aks so we have seen a   similar diagram in previous slide explain the aks  architecture so you can scale the applications on   the port level or the note level okay and there  are some cases where you actually need to scale on   both level and regardless which level you choose  you can either do it manually or automatically   and that's what you can see on the um table over  there so the mechanism of scaling nuts in the kubernetes it's referred as cluster autoscaler  right or ca in short this is this can be done   via azure portal in the node poll sections  or via aks notepool update command   all right and the mechanism  to auto scale the pot level   is called horizontal port autoscaler or hba in  short and you can do it via cube ctl auto scale   command or you what you could do is create a hpa  horizontal auto scaler object which described   in yellow all right and that's where you define  the minimum the maximum and it will perform the   outer scale for you all right so those those  are pretty standard common scaling mechanism   in aks another thing that i want to show you  is pretty interesting one it's called scaling   with virtual notes all right again similar  architecture you have seen earlier except now   well the aks control plane can also interact  with virtual node right true or a concept of   virtual couplet and what it does it can allow  you to burst to aci azure container instance   and with that we can flexibly scale  through a number of different instances   output and then as if we need more it can scale  instantly but the benefits that you are getting   with the virtual node is you don't have to set  and specify how many worker nodes you need but   you rather focus on a number of ports and you let  the aci virtual node scale accordingly with you   now how to enable or how to use the virtual nodes  so you can enable it during the cluster creations   by make sure that virtual node is focused enable  or you can also enable it on the existing cluster   with the az aks enable add-on command once it is  enabled and you do a ctl get notes you notice that   this one shown as virtual not aci linux shown over  there okay all right let's move on to the last   sections which is what's new or what's new update  in aks in the recent months like 12 months or so   a gentle reminder that this might not represent  every single new update but rather some of the   capability which i personally find it very  useful and interesting the first one hey now   you can view the kubernetes object resource  directly in the azure portal without have to   do it manually with kubectl and definitely you  still can do that or go into the cube dashboard   well this is actually in addition to what i showed  you earlier that you can do it very conveniently   with vs code extension for kubernetes um the  other cool thing is with the same extension   you can view the ammo file you can modify it you  can save it and it pretty much perform a lot of   automations and deployment for you a second one  is the ability to perform automated deployment   from the deployment center this is  basically a capability to embed a so-called   ci cd devops in with the github action and  so on so what you need to do is go to the   deployment center on the okay section and  the couple of steps that you need to define   start from you define the source where  you want to store your source code   and then you can choose um the specific repository  and um eventually do you want to use the   where you want to deploy your aks to and so  on and what it does it will upgrade for you the next one is azure monitor for container though  it is not a very new feature um there's a lot of   improvement has been made including now the fact  where you can drill down into a very granular   detail object on the cluster of your kubernetes  and pretty cool you can in fact toggle the   live data right just to be reminded that you  definitely still need application monitoring   like application inside if you were to monitor  your application detail lock that specific   to your application so this azure monitor for  container pretty much monitor your infrastructure   your cluster you know your port on the cluster  perspective or the infrastructure perspective   another big announcement is we made the general  availability of windows server containers in aks   and this opens a lot of opportunity for customers  to live and shift their legacy when windows   application like dot net framework based  asp.net application to aks um and in fact i did   a simple um example here where i have a very  old application i was called nerd dinner   i think was developed as an  example code in one of the books   of asp.net mvc 1.0 somewhere between 2009 so what  i did was containerize it as with a windows server   container with docker and visual studio and then  i push it to the docker container registry and   then eventually push all the way up to kubernetes  and boom there you go so let me show you a quick   example demo with that okay so over here as you  can notice that i can go to the kubernetes service   and then the um the contoso sport so what i have  is the note pool which has the windows container   okay so notice that the operating system time is  windows and the moment i hit in service ingress   and this is actually demoing the previous  slide that i mentioned to you that you can see   the kubernetes resource in the um in the port  azure portal right away here and if i show you   this example of this public ip address and in  a few seconds there you go you should see that   this application although it doesn't look very  sexy now runs on aks um as a windows container   all right let's move on um definitely you  can look at much more detailed roadmap of   the aks uh what other things are in the backlog  what are the things that have been committed   uh what are the things that recently shipped  general available and so on feel free to   suggest and comment if you have any particular  feature which you definitely hope is available   um all right and with that we are reaching um the  end of the session give you a little bit of tips   in terms of what you will be expecting in the  next session we will be talking about the micro   service architecture concept the critical success  criteria of building microservice architecture   what a few azure service that will help you build  microservice architecture and then we'll spend   quite a bit of times on showing you the demo of  bridge to kubernetes which i think is pretty cool   right i know that there was quite a  lot of links which i showed earlier on   but if you need to take a screenshot this is  the average single links that that i showed   in throughout my session and with that  thanks a lot for attending this session 