 (upbeat music) - Hello everyone, and welcome to navigating the Teams app lifecycle. I'm Joey. I'm joined today by my colleague, Vaibhav. We're both program managers on Teams. And we're gonna talk about all things Teams apps, and the tools for managing those apps. So, our agenda today, as I mentioned, is really just gonna walk through the entire lifecycle end-to-end. And we're gonna talk about the tools and processes in place for managing any kind of Teams apps. So that means we have custom apps. So these are tenant-specific line of business applications that each organization can use and inside of Teams. But we also have a robust library of third party apps and apps built by Microsoft running inside of Teams. We have a ton of features that are specific and unique to each of those types. And we'll clarify all of that over the course of this conversation today. And we have a ton of capabilities that are actually shared across any of those app types. So you have one common method for managing all apps inside of Teams. And we'll cover all of that throughout the lifecycle. So, let's jump in. So to start, I wanted to back up a step and redescribe kind of what an app inside of Teams is because it isn't always a totally clear definition. So we really have kind of three categories of apps that run in Teams that I mentioned in the agenda upfront. We have Microsoft built apps. There's 45 plus of them available. A lot of them are native, kind of pre-installed inside of Teams, and their capabilities you may be using without even realizing it. We also have a catalog of 600 plus third-party apps in our ecosystem. So these are built by ISVs, and they're globally available to every tenant, which means that every organization has a different definition for how to manage these apps. And we'll talk about that in our conversation today. And then a big part of our conversation will be about how to best create, package, and manage the lifecycle of custom organization specific apps. So this is bringing organization processes, productivity tools, employee services, approvals, workflows, all of that good stuff, whether they're built from scratch, created from some templates we have available in Teams, or created by a citizen developer or maker using the Power Platform tool set in Microsoft 365. All of these things are kind of packaged and brought into Teams app lifecycle in a common way. And I'll be talking about that shortly. But a good framework for how we're gonna go through this conversation is shown here where we're gonna be talking about the app lifecycle from the time that an app is being developed to the time an end user discovers and adopts it. And in between there, most importantly, we have a unique set of personas for helping to validate, publish, discover, try, buy, set up and managing apps. There's a lot that goes in between the development of an app and the deployment and adoption of an app. And, you know, in the purple font at the top, you can see some of the core tenants we have, which is everything we're building is to increase the level of trust, transparency, and to ease the level of management of any of these types of apps. Microsoft, third-party, or custom built apps in a very common way. And so hopefully at the end of this conversation today, you'll have a good feel and idea for the tools and features we have available for you to do that in your organization. But I'm gonna start this conversation with the tools we built for custom apps. So again, when we say custom apps, we're talking about organization specific line of business apps. And you can get a better look here for what we're calling the app lifecycle of those apps. So, they start with a developer developing and testing the apps themselves, but then we're gonna move in to the tools we built to actually move those apps from the hands of the developer into production, into the hands of IT in a standardized fashion, through submission and approval process. And then Vaibhav is gonna come in and talk a lot about some of the tools for publishing, setting up, managing those apps over the lifecycle. So, let's start with that developer persona in, at the very beginning. Someone trying to create custom apps for your organization. And this can actually apply for third party-apps as well for my SPs. And I'm gonna talk a little bit about here the Microsoft toolkits available in Visual Studio and Visual Studio Code. So this conversation isn't specific about developer toolkits. So I just wanna talk about this at a high level. There's a couple of other sessions, which we'll be going into deep detail about these capabilities. But it really does kick off the app lifecycle in Teams. And here you'll see a example using Visual Studio to help build the Teams app. So we now have an extension available from Microsoft Teams apps, and this really helps you get started and start to scaffold out an app as you prepare it. So apps can consist of tabs, of bots, message extensions and connectors, and all of that can be confusing to piece together without a common framework and guideline like the one you're looking at here in your screen. And so for that reason, we released these toolkits very recently, and they're generally available now. And so I just wanna give you a couple of peaks as to what that looks like. You can see here, these toolkits can help you set up your project. So again, creating that tab, that bot, that message extension, it's very simple. It's straight forward. There are tutorials and guidelines for that. And once the development is complete, as we start to get into the app lifecycle here, we've also built validation tools in our toolkit. So these are the same validation procedures that Microsoft uses to vet and approve globally available apps made by ISVs. We've now exposed those tools to you, to organization specific pro developers as well. So that at the end of your app development, you can make sure that you're confident and successful the app will function as you expect in Teams. So this is a validation tool that will go through your app metadata and make sure that it's set up and looks and feels good for end users to help you test that app out without, you know, doing all of that manually. And, you know, again, I don't wanna go too much more in depth in this session on these developer capabilities, but a key point here is that at the end of that validation step, the next set of tools I'm gonna talk about is what connects the app from a developer's hands, from a testing perspective, to IT being able to validate that app for production. And so I'm gonna move to the next phase of the custom app lifecycle in Teams, which is the submitter tools. So, as a developer, we wanna make it easier to submit apps into production. And in order to do that, we're really talking about app ingestion here. So this is how, what tools have we built to get productivity solutions into Teams easier to make that understandable and make it a seamless end-to-end workflow. And we've really built four workflows that I'm about to talk about here, which is tools for packaging custom solutions into apps that Teams understands. Tools and APIs for sending those apps into the Teams production context. And then finally installing those apps in the right context as end users. You'll see some of the work we've done for that. And through that whole process, if we're making this pipeline easier to package, send, approve, and install apps, we've made sure that IT is at the forefront of manageability and control of that entire pipeline. And so everything we're gonna talk about has an IT management component. And in this next slide, you'll see, these are really the four principles we used to make app ingestion into Teams easier. So number one, those who make the app should be able to add them into Teams with zero friction. And you'll see some of the awesome stuff that we've built that does that. But just getting your processes and applications into Teams is the first step. We also wanna make sure that those makers have control over who can and can't use their app in Teams. So we don't wanna just expose it to everyone if that's not the intent. And finally, you know, points three and four here, as end users, if we're making it really easy to build custom processes and allow you to complete workflows inside of Teams, we wanna make sure that not just the makers have control over how the app appears inside of Teams, but rather end users, when they discover these apps, they need to be able to trust that the app does what they think it should do, and, you know, delight in using them. We want them to actually be effective in finishing workflows. So you'll see kind of the tools we've built to enable that. And then finally, as I said earlier, we want admins to have trust, visibility, and control over all of these pipelines. So let's jump right into it. And let's start talking about some of the features we've, we're launching here at Ignite today. So, this is kind of a complicated slide, but it really shows you the power and robustness of what we've built. We have a set of features for app ingestion that are generically built in our handling a bunch of colors upstream from the app lifecycle. So this is our App Studio app, Visual Studio, VS Code, our own Teams Client, Power Platform. All of these places are places that you can introduce new workflows into Teams with admin approval to make it easier to use an app and start bringing it through its lifecycle. And so I'm gonna start with this next slide showing the very first tool set that we built. And this was, is generally available now, and we're calling it the app submission API. And in a nutshell, what the app submission API does is it allows developers and makers, whether, regardless of their permission, it allows them to submit an app into the production environment. That app is not yet available for end users to discover until an admin actually goes in and approves that submission. And along the way, there's audit records, there's identity trading. So basically the admin will be able to see who is submitting the app and facilitate a conversation afterward to help them make that approval. And once the app is submitted, once the admin is decided that they approve it, and they discover it, the app is available in the Teams Client for users to discover where they want it. And so, to get a better feel for what I'm talking about here, let's launch into our first demo of the day where I'm gonna show you how the app submission API works across a bunch of different colors. So, the first one I wanna showcase is our Teams toolkits that are available for Visual Studio Code and Visual Studio. So I'm in VS Code here. I'm not gonna show too much about the toolkit itself. There's other Ignite sessions that are demoing that. But the most important thing is I've already made my app say Ignite 2020 at Contoso app. And you'll see that in our ID extension, there is no published app. And that's what calls the submission API. So I can choose where to publish my app. In this case, I wanna publish to my demo tenants app catalog. And so if I go in here, I can see the app that I just created, some metadata about it. And this is where I'll come in to actually complete my submission. Once that's complete, I can come back here to check the status of the submission, and you can see that here. And that's where I'll go to also cancel the submission and view the lifecycle before an admin either approves or rejects it. And now we're gonna move on to the second surface for integrating with the submission API. And that is the App Studio app. So if you are unfamiliar, this is an app that helps package your web app as a Teams understandable entity. And I've already created one. And you can also see there's links to Visual Studio and Visual Studio Code, but I've created one here in App Studio already. So in here, I can manage some of the metadata about the app. And once again, very similar to the last experience. If I go to the final step, test and distribute, I can install it directly for myself. I can download the package. But most importantly, I have an option to publish it. So this is a very similar workflow as what I just showed. I can publish it to the demo app catalog. In this case, I have my little Budget Tracker app, something a little bit different. And very similarly, I could submit my app for IT to review. And you'll see here, this is where I can come back and view the status of the app, you know, when I submitted it, I can cancel my request, things of that nature. All of the same as Visual Studio Code. And finally, the last surface that has integrated the submission API workflow is the app store in the Teams Client actually itself. So if I come into my app store for my organization, I can see apps that were built, line of business apps, but I have an option down here to actually submit my own apps. If I go into this experience, you can see, I have the option to submit an app. And what I'll do is actually submit the same Budget Tracker app I just demoed. And once that upload completes, you could see the same thing. I could see that the status of this app is pending for approval, and I'm able to kind of cancel or delete my submission request. And this is where I can come back and check for the status of all my apps admissions over time. And finally, we showed you all the places where you can use the submission API as a developer, but I wanna show you what it looks like for an admin to come in and actually approve and discover these submissions. So, I'm in the Microsoft Teams admin center, and I'm in the manage apps page where you could see that we have a new widget here that shows you where your submissions have come in as an admin. And if I just sort by publishing status, you can see, here's a couple of my apps that I just submitted, my Budget Tracker, and my Ignite 2020 at Contoso app. So here's the identity of who submitted this app, some metadata about the app. And if I'm all clear to improve it, then I can just click publish, and publish the application here. And now that Ignite 2020 app will be live. And I'm just gonna go ahead and also approve the Budget Tracker app as was submitted by a different identity, and we'll publish both of them. And if I come back in to the app store of this tenant, and I refresh page, you'll see that both of those apps have come through. Here's my Budget Tracker app. And my Ignite 2020 at Contoso app is over here. So, you saw there how easy it is now to build, package, and submit apps into the production environment in Microsoft Teams. And you saw examples from Visual Studio, VS Code, our own App Studio, and even our Teams Client for how to submit those apps into production and how admins can approve them. But we recognize that every organization is unique and not all of them standardize on those surfaces for building and deploying apps. And because of that, we built that entire pipeline that you just saw on the Microsoft Graph API. So this includes the ability to submit apps and the ability for admins to approve those apps all over the Graph API. And so, if you didn't use any of those UI surfaces that you saw in our demo example, you have the tools to automate that entire process from beginning to end in any organization. And that's a pretty powerful, flexible approach. So I wanted to bring this slide back up again. You just saw that the app submission API follows these principles of making the ability to bring apps is you have zero friction from the maker to IT persona. Makers have some level of control over who can and can't see their apps, and end users can then ultimately discover those apps in the Teams app store. But that API is designed to be very flexible and generic so that it can fit any organization's needs. And for that reason, we don't quite meet our goals for all of those principles with that API. We think we can further reduce friction and give more discoverability tools on certain platforms that IT already trusts. And to that end, I wanna talk next about our new one-click sharing features from the Power Platform team into the Teams Client. And so what I mean by this is, as you just saw, to get apps built anywhere into an ecosystem using the app submission API, the developer develops it, they submit it, and an admin approves it. But we think that on certain Microsoft 365 platforms where there's already a level of trust built into the platform itself, such as where the data is stored, what the app can and cannot access, we can do a little bit better about bringing those apps into Teams. And so what you'll see here is a new mechanism for a user to directly install an app from Power Platform into the Teams Client itself to any scope that they have permission to. So this is a one-click button that allows somebody who just made a Power App or a Power Virtual Agent to send that, package that app, send it into Teams, and install it directly in context. Again, to a resource that they have permission to. So that might be a team that they own, a chat that they're part of, or just their own personal scope. And we do all of this in one click. So all of that packaging, sending, and installing happens under the hood by this new feature. This is a really powerful, flexible way to bring Power Platform apps into Teams and allow end-users to share and discover them super quickly. And to that end, let's take a look at what that one-click sharing experience looks like right now. All right, let's showcase our one-click, easy sharing experience from Power Apps to Teams. So I'm gonna show you a demo here where in my environment, I have four Power Apps that are available to me. This test user. So, a couple of them here. You can also see I have other apps available to me from the Power Platform suite. So, for instance, I have a Power Virtual Agent or a chat bot available to me. And if I wanna bring any of these into Teams, previously, you'd have to do the work of packaging one of these apps over here, and you'd click and add to Teams button, which would download the app, then you'd have to figure out a way to import it into Teams. But none of that is necessary anymore. So if I move into my demo tenants, so this is obviously Teams. If I go into my app section, under Built for Contoso, you'll see that there's a new section here. And what this is is a list of apps that your colleagues have shared with you, the user, that you yourself have built, or an app you recently used. And what we do is we take and we aggregate all of those sources I just showed you from power automate, and we display them here. These are all apps that can be used inside of Teams. And so we wanna make sharing as easy as possible, again, with one click. So if I discover one of these apps, like this Budget Tracker, on the fly, what we've done is we've went, we've packaged the Power App, we've brought it into Teams, and now we're gonna let the user install it. So this app didn't actually exist in Teams until I carried out this workflow. And now with one click, I've discovered the Power App in the Teams app store, and I've installed it. So to recap everything that we just talked about, we have a very generic Graph API focused submission feature set that allows you to build an app using any technology or framework you choose and ID extensions, or the Power Platform itself, submit apps into production and allow admins to approve those apps to the Teams Client. So this satisfies scenarios for apps built anywhere and intended to be used by the whole organization, or apps built on Microsoft 365 development platforms like the Power Platform. And after that, I talked about a new one-click sharing mechanism, which is relegated to just those trusted platforms on Microsoft 365, like Power Apps and Power Virtual Agents. And this is a quicker discovery and installation mechanism driven by end users alone. So admins don't have to get involved with approvals. And that one-click sharing is a great way to bring Power apps that are intended to be used by just a subset of users in an org into Teams. And users will have the ability then to install those apps, again, to a scope that they are, have permission to install to, whether that's a team that they own, a chat, or their own personal scope. So we have a really robust set of solutions there for bringing apps into Teams easily. So with that said, I wanna stay on the topic of custom apps, but shift gears just a little bit. So, we've talked about how we're making it easier than ever to bring new workflows into Teams, whether that's from Power Platform or other sources. But to that end, we've had a lot of requests to be able to customize and brand our custom app store, so that when an end user goes into the Teams app store and goes to the section of apps that's built for their organization, they'll have a bit more trust and confidence that those apps are specific to those organization and they'll use those accordingly. So to that end, my colleague, Prem, was generous enough to create a video and show you what our new custom app store branding feature looks like. And we'll play that now. - Teams users go to the Teams app store to browse and use the line of business applications the company has published. Here, there is a separate category where users can see all the line of business applications. This category looks and behaves just like any other category in the Teams app store. Companies can now include their brand logos and brand colors to make this experience uniquely theirs for their users. Let me show you how this works. A Teams admin can customize their LOB catalog from the Teams admin center. Here, under Teams apps, we have added a new option for admins to be able to customize the store. Clicking on this, the admin will have options to change the logo, logo mark, and colors of the LOB store. Here, I'm going to provide a large logo. I can select a small logo mark. I can select the text color. And I can also select a custom background. I have options to both select an image or a background color. In this case, I'm going to just select a background color. Once this is selected, admin can quickly see how this will show up in the store experience. Here, you can see that the logo mark shows up at the landing page of the store, and the banner shows inside the category. Once confirming that everything looks right, an admin can save these assets. Once saved, in just a few minutes, the users of the company would start seeing these logos and the brand colors in their LOB catalog. Now, as a user, when I go to the Teams app store, I can now see that the company's logo mark is grabbing my attention to this category. And when I click into the category, I can see that the company's logo and the company's colors are available at the top of the page. Now, not only is this helping to grab the user's attention, but it is also providing a sense of trust to the user that they'd be more increase to use these apps in the LOB catalog. - Okay, so there you have it. We've talked so far about a ton of new features for making it easier than ever to develop, submit, package, publish, install, approve, and use custom apps in Teams. So you can see we've kind of built this robust lifecycle process around custom apps. And the last point I wanna mention before I pass it off to Vaibhav is that as of now, custom apps are now available in GCC environments. So this isn't just relegated to the commercial cloud anymore, but GCC now has access to deploy those custom apps in that environment too. And with that said, I'm gonna pass it off to Vaibhav for our next session. - Yeah, thanks, Joey. That was great to know about amazing capabilities we are bringing for custom apps. Hi, everyone. I am Vaibhav Agarwal. I am part of Teams IT pro engineering work, and I focus on IT admin persona on how admins can easily discover, try, and buy apps, and how they can be more confident to provide secure and compliant app, and be able to easily manage those apps in their tenants. So now we gonna focus on Teams app lifecycle beyond custom apps to focus on the new capabilities we are lighting up for third-party apps, for Microsoft apps, and some of the capabilities which are applicable across all the types of apps. So here you can see for discover, try, buy, and set up and manage, these are the capabilities I am gonna provide an overview now. So let's talk about the Microsoft 365 app compliance program, which has been developed to increase the transparency, security, and trust of the Office app ecosystem. This program is comprised of two tiers. Publisher attestation is when an app publisher does a self assessment of their applications by answering more than hundred questions about the security data handling and compliance and security of their integrations. The data is then published, and a link is provided to data assessment from Teams admin center and AppSource. Currently attestations that are accepted for Teams, Word, Excel, PowerPoint, and Outlook integrations. The app publisher will then be invited to participate in the Microsoft 365 certification the second year after they complete their publisher attestation. So the second year involves an assessment of the application and its supporting infrastructure against four security domains, the application security, operational security, data handling security, and privacy, which involves a review of at least design privileged principle, data retention, and more. And then finally the external compliance frameworks such as SOC 2, PCI, and ISO. Once these four domains are satisfied, then the app publisher is awarded a badge for Microsoft 365 certified, which is also reflected in Teams admin center and AppSource. So you can see on Teams admin center manage apps page, admins can easily discover apps which are part of any of these two compliance tiers and go to doc site to learn more. There's an example of how the information from the publisher attestation is reflected on our docs page, including from MCAS, Microsoft cloud app security team. And the information is laid out in a consistent format, making it easier to understand the security and compliance posture of an application. If an IT pro from a hospital is looking to enable a specific app, they can easily look at if the application is HIPAA compliant. Similarly for financial and government customers, they can figure out if the app is FINRA or FedRAMP compliant, which are requirements for those specific set of industries. So, currently, we have over 85 Teams apps, which have completed any of these tiers. And moving forward, we will soon be expanding the program to accept Word, Excel, PowerPoint, and Outlook and SharePoint for the second tier. And then we are also integrating the compliance program with Partner Center, which will make the compliance process more streamlined and user friendly. We encourage participation in this program to increase confidence in the security of Office add-ins and make app adoption an easier process for both the app publishers and the IT admins. Now let's look at the next topic on purchase licenses, on how our customers can easily purchase licenses now within Teams admin center. So we have been working closely with our developer ecosystem to integrate their software as a service, their SaaS offers with the fulfillment API, and how they can easily create those SaaS offers in Partner Center. To take the journey forward, now we have provided the capability in Teams admin center. So IT admins can easily purchase licenses of those different third-party apps in Teams admin center. To begin with, we rolled it out in US, and now we are expanding it globally across all the different countries. We have plans to further provide more richer capabilities for enabling this purchase license experience. And now let's look at a demo. - Hi, I'm here to demo the Teams admin center purchase experience. First, I'll go through the admin experience. In the Teams admin center, the admin can go to the manage apps page, and select a Teams app that has a SaaS service powering it. In this case, ContractZen. After clicking purchase now, the admin gets navigated to AppSource. Here, the admin can enter his or her credit card number, and the number of users. And then from this page, the admin can click on configure now. This button navigates the admin over to the ISV page. In this case, it's ContractZen. Now the admin goes and clicks on add user, and enters in a user that the admin wants to assign the license to. In this case, it's Alex Wilber. Cool, so now Alex has a license. Now, we'll see what Alex Wilber's experience is. First, Alex checks his email and sees that he has an invitation to ContractZen. This email was sent by the ISV. On this page, Alex can then sign in with Office 365, accept all the, you know, the terms and conditions. And now Alex has been assigned a license to use ContractZen. Now, how about using it in Teams? From Teams, Alex can install the ContractZen app. In this case, it's a tab app. And in the tab configuration page here, you can see that a ContractZen has done SSO, and has seen who Alex is, and assigned him a license. And now he can use the app. Thank you. - Let's look at the next topic for app configuration, app settings. So there are several apps which customers do want to configure it at their own tenant level. So they can really personalize the app to feature, to provide more announcements on, to have the look and feel specific to their own unique needs. And that's fair. We have been working on app configuration, which enables app developer to expose the configuration of an app across under a consistent framework, which will also enable the admins to manage all those different configurations for an app right within Teams admin center. To begin the journey, we started with Praise app, which is a Microsoft first party app being leveraged to provide kudos feedback to your colleagues. And now admins have the capability to create custom badges. So can it really provide the configured personalized experience to their employees based on the company's unique culture and needs. For that, moving forward, we will be expanding this across many of the Microsoft and also third party apps. So let's look at the demo on how our admins can provide app configuration for Praise app within Teams admin center. - Hi, today I'm going to demo the app configuration feature integration with the Praise app in the Teams admin center and Teams Client. I'm logged into the Teams admin center as a tenant admin, and I'm going to select the Praise app to configure it. When I go to the settings tab, I will see the settings that are configurable for the admin for this application. I can see several badge sets I can turn on or off, and a custom badge feature where I can add new badges. Today I'm gonna add a new badge. So I'm gonna go ahead and enter the name for the badge, select an image for it. I'm going to put in the foreground and the background color for the badge. And then save it. So now when I go ahead and submit the badge, this badge is gonna be submitted to this tenant for the Praise application so that the users of the Teams Client Praise app will be able to use this badge now to send praise to their colleagues. So I'm going to go over to the Teams Client, where I'm logged in with a user under this tenant, and I'm going to send praise to a colleague. So now the custom badge I just created as a tenant admin is now available for the user to choose. So I can pick that. I can go ahead and pick one of my colleagues to send praise to, and submit that. Thank you for watching. - Now, let's talk about the new feature for app permissions and consent, and also about the resources-specific consent permissions model. So the objective of this specific feature is about how we can enable admins the capability to review all the app permissions, and how easily they can grant consent to those permissions based on their organization needs. Which ultimately would unblock the end users, because in some cases end users are blocked. They are not able to proceed if the app is asking for permissions, and they are, they don't have any way to grant consent. But with this feature, our end users would get unblocked to address that we have integrated this feature with Azure Active Directory, the Microsoft identity platform to provide or buy permissions in Teams admin center. And we have further expanded that with resources-specific consent permissions model, and we are working on to provide a more role specific feature. So how for a global admin versus a team service admin, the experience would be slightly different based on which role has the capability to grant consent to those permissions. We've also added the privacy policy in terms of use, which would now be available in Teams admin center. So when we talk about the app permissions model, we should look at in three different scenarios as what happens before the permissions are consented to, what's the experiences to grant consent to those permissions, and then what happens post consent or after consent scenario. So let's look at the problem our end users run into in case they are not allowed to consent to apps, accessing company data on their behalf. End users look at screen like this. It says need admin approval. And they may not have any easy way to reach out to their admins to grant consent to these applications. So that's what, in now, in Teams admin center, we have added a new tab as permissions from their global administrators would be able to review all the permissions the app is asking for, and then grant consent to those. Let's look at demo. In manage apps list view page, we have added a new column as permissions, where admins can easily see all the different apps which are just starting in Azure Active Directory and asking for any permissions. So let's look at the example of Template Chooser app. By clicking on view details link, it takes us to the permission step. Here, on clicking the review permissions and consent screen, admin can see all the different permissions the app is asking for. As in this example, this app is looking for full access to all files, the ability to read and write all groups, and some more. As admin accepts these permissions, it would be able to grant permissions on behalf of all the users. And then end users won't receive any prompt to grant consent in future. Now, once these permissions have been granted, admins would also be able to see a new link to be able to navigate to Azure Active Directory, where they would be able to look at these details in future. So whenever, after granting consent, admin wants to look at what all those permissions are, they would easily be able to navigate to Azure Active Directory. So to highlight in the demo, we saw the experience for global admin, but for team service admin role, as those are not allowed to grant consent, they would see the grade outbox. So the TSA role would not be able to grant consent, but they can still go to Azure Active Directory to look at, to only view the details of those permissions. Now let's talk about the Graph RSC permissions. And before I go there, to level set on the granular permissions on how we have expanded the scope of Graph API. On the left hand side, you see only and Group.Read.All, and Group.ReadWrite.All, which provides the access to all these different permissions on the right hand, you see. Now, if any app developer is leveraging Group.ReadWrite.All, it provides access to all those different set of permissions across all the teams. So the app would be able look at team name across all the teams. Whereas by leveraging the granular permissions, they can be very specific that if app needs access to the channel names, the app would get access to the channel names across all the teams. Now that RSC specific permissions, that access is further limited to a very specific team. So if the app needs access to channel names, but only in a team where it is being installed, by leveraging resources-specific consent permissions, the app could get access to only, let's say, team two, where the app is being installed. So that really provides higher trust to the IT admins that the app is getting access to the data only in a limited scope where it needs to be. So now we have further integrated this experience in Teams admin center. So in the permission step, any third-party apps or custom apps, which are leveraging the RSC permissions model in Teams app manifest, all those different set of permissions would be visible in Teams admin center. Now, moving on, let's talk about the app install feature, which is applicable across all the different types of apps. In past few months, we had already launched the app install in a personal scope. So by leveraging the app set of policies, admins can install the apps which are available in the personal scope. Now with a group policy assignment is also available in PowerShell. So admins can easily specify any group, and provide that access to a specific app setup policy. Now, what we are delivering is the ability to install these apps in a Team scope. So in the manage apps list view, you would find a new button as our two team, from which admins can easily install those apps which are available in a Team scope. Let's look at a demo. Let's look at how using Teams admin center, admins can now install any app in a Team scope. So we have Priority Matrix app. And let's say admin wants to install this app in a specific team. So they can go ahead and select a specific team in which they would like to install the app. And now you can see a message that this app has been added to the specific team. And if we go to that particular team, here, you can see the message that this particular app has been added, Priority Matrix app has been added to this particular team. Let's look at the next topic, which is one of the most common asks to us from the admins on how admins can easily look at the app analytics in their tenant, which users, across which teams, which apps are being used. So now they have released the app usage report. To begin with, it's available for all the Microsoft and third-party apps. Their admins can easily filter the app report. Based on the date range, they can look at all the active number of users and number of teams, and some other metadata of the app. Moving forward, we will be providing more drill down usage analytics of each app, and also add this capability for the custom and sideloaded apps. So let's look at the demo on how it looks like in Teams admin center. Teams app usage report gives comprehensive information about apps getting used inside Teams. This report can be downloaded over the period of seven to 90 days. When you run the report, it gives information about different app which are getting used inside Teams over the period of time. It also gives information about different apps, how many active users and teams does it have, and which are the developers and publishers. It gives advanced capabilities like sorting, searching, and export of these reports as a downloadable CSV. You can go ahead and download this CSV file and use it for the applying purpose. Now let's look at a very special topic on managing and deploying apps in Microsoft 365 admin center, and how we have integrated that experience with Teams admin center. So a lot of our customers do really need the unified experience. So from a single pane, how easily they can discover apps which are in Microsoft 365 apps ecosystem, be it a web app, a Teams app, or Office 665 add-in, how admins can easily discover, and deploy, and manage these apps across these different Microsoft 365 hubs by leveraging M365 admin center. Now admins can easily deploy all the hubs, all the apps across these hubs by leveraging M365 admin center. This feature was initially rolled out to all SMB customers, and now we are expanding it across all the different customer segments. Let's look at demo on how this looks like in 365 admin center. To give an example, if, let's say, you have Priority Matrix app which is blocked in Teams admin center, but once you deploy that app in M365 admin center that app would get auto allowed at an org wide level in Teams admin center. Let's look at the demo. In Microsoft 365 admin center integrated apps page, this is where admins can see all the apps which they have already deployed, or can deploy more apps. So with get apps, this navigates to AppSource, where admins can easily search any specific app they want to deploy. Let's look at Priority Matrix. You can see the app as a Teams app, Outlook app, and a web app. You can also see the M365 certified badge. Let's deploy this app. So we can agree to the terms of use here, and then go ahead and deploy now. Now you can see all the three different web app, Outlook, and the Teams app, all the three options. Let's select all three. We can specify if it's a test deployment, or to which specific set of users we want to deploy this app for. Now admins can also see the different set of permissions the app is asking for. And then they would also be able to grant permissions here. So with accept permissions, now they can look at all the permissions the app is asking for here, and then grant consent to those permissions. You can also see the M365 compliance certification status. Now this is just reviewing and finishing the deployment that all the three apps for Priority Matrix are deployed in this tenant. Here are all the resources of managing apps. On doc site, you can learn in depth about these new exciting features. Thanks a lot, everyone, for joining us. Hope you had a fantastic time, and start leveraging these features now. Joey, you have anything else to add? - I do not. Thank you for your time, everyone. Hope you learned something today. And stay safe out there, and have a good morning, afternoon or evening wherever you are. Take care. 