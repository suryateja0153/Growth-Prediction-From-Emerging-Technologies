  [MUSIC PLAYING] Hello and welcome to SAP Intelligent RPA simplified bot building. In this session, we'll present you the new Intelligent RPA 2.0 low-code/no-code bot-building experience. I am Alexis Naibo, engineering lead of SAP Intelligent RPA, and I will jointly present this session with Christophe Puget. Hello, my name is Christophe Puget, I'm a dev manager in the SAP Intelligent RPA, and my team is especially in charge of the development of the premise components that we will show you in a few minutes. So in the agenda, first we will come back to what is robotic process automation, also called RPA. What is its business case, as well as how our customer are using it. Then we'll review the new SAP Intelligent RPA 2.0, and especially, explain what are the new features and its new architecture. Last, we will review the main topic of the SAP Intelligent RPA 2.0 that is low-code/no-code in Cloud Studio with an example of application capture, design of automation, and of course we will explain how to test and run all those. But first, let's talk about the custom arguments case and how to use RPA. RPA is all about automating repetitive human manual activity on IT application with digital bot. There are two types of RPA bot. Unattended bot that is managing fully automated processes, where bots are autonomous, working without human. Here, human only monitor and supervision bot executions. The other type of bot is attended bot. This type of bot is for managing automated process, but only partially. Humans works with bots providing, for example, input and decision why bots run. Let's now review our SAP Intelligent RPA, delivers business value. SAP Intelligent RPA can help to improve operation by mobilizing the workforce to high-level task, and have bot executing repetitive actions. It can increase service quality, as well as, since it's fully compliant with your infrastructure, it works on the underlying IT landscape, and it remains untouched. RPA helps increase process compliance, but also reduces human errors. Last but not least, you can get a quick return of investment as RPA projects are razor fast to complete. So, as explained previously, RPA is all about application automation. On the left side of the slide, you will find SAP application you can automate, such as S/4HANA, SAP Customer Experience, SuccessFactors, Ariba, Concur, Fieldglass. But in fact all SAP applications with technologies such as SAP GUI or SAPUI5 could be automated. Of course, you can also automate non-SAP applications like web applications or Windows applications. On the left of the slide, you can notice that all RPA project have in common the design of a bot with Studio, the run of the bot with Agent, and the monitoring of executed bot with Factory. Studio, Agent, and Factory has evolved quite a bit with SAP Intelligent RPA 2.0, and Christophe will talk now about those features and how their architecture. OK, thank you, Alexis. So let's get into the details of what is SAP Intelligent RPA 2.0. So, as it was mentioned, we have three main components. The first one is a studio, which is used to design the bots and the automations. What is very different between 1.0 and 2.0 is that now we have completely rebuilt the design experience. In 1.0, it was a desktop studio which is a premise component, while in 2.0, it's now a cloud solution, which is hosted on the cloud factory. Well, the cloud factory is a cloud component, which is a hosting the project, managing and monitoring the agents, and now it's also embedding the cloud studio for the design. And the last component is a desktop agent, which is installed on premise, so either on server or desktop, which is here to execute the different automations that you will have distributed on your machines. As it was mention, we can automate all the SAP portfolio, but this solution is very a generic toolbox, it mean that any kind of application, like office applications, Excel, Outlook, Word, any kind of web, emulator, Windows application, Java application, and so on can be automated with this solution. So what is new with 2.0? As we explain, this is a complete new cloud experience for the design. All interactions will be executed inside the browser, you don't need to install a dedicated studio. And in fact the browser will interact with the local agent in order to capture the different pages that you want to work with, and also to test your automations. But most of the experience and all the design will be inside the browser. It was also to co-work with different people, working on the same project. Each one, they've been working on a different part of the project simultaneously. So except the fact that it's now a cloud solution, the concept of the design have been completely restarted with 2.0. The approach now is a really simple and intuitive experience with a low code approach. Most of the stuff can be designed graphically, without any technical knowledge or expertise on the system. It's really the main difference between the 1.0 and the 2.0. What is also new, and a great improvement, is the fact that now we provide what we call an SDK, a software development kit, which is a set of components, of packages, that you can add in your project. So they can be downloaded from the store, in which you will have a set of available packages, and it will allow you to embed extra features in your automations in order to provide some dedicated usages. What also is real new is the fact that now the priming is very modular, you can reuse a lot of things, and for example, you can do some automations and reuse these automations in other project in order to mutualize and to reuse different components. Even if it's conceptually graphical, you also have the ability, if you want and if you need, to make some JavaScript code, if you have some advance usage that requires some kind of algorithm or something like that. You have the ability to design it with native JavaScript. So let's first have a look to the Design Studio. As explained, we have two different generations on the studio. We have the Design Studio 1.0, or Desktop Studio, which is a premise components, which is installed on the customer machine, in order to design your project. And with Design Studio 2.0, or Cloud Studio, you don't need to install it anymore, as it's a pure cloud solution. What is common in term of concept? In both cases, you'll have to capture the different application screens that you want to automate. They can be web, they can be Windows, or other technologies. Then you will graphically design your automation. You will be able to test and troubleshoot your automations, and when it's ready, you will be able to package your project so that they are distributed on your agent for production uses. Quick focus on the Desktop Studio 1.0. So you have the ability to capture the different pages. You will make a graphical design, then the graphical design will generate some JavaScript scenarios that are used for the runtime execution, and then you will be able to edit your JavaScript scenarios for advanced usage. You will have the ability to test. Locally, you can make some debugging with step-by-step watches, and so on. And you even have a kind of recoder replayer, which allows you to replay remotely some executions, for example, that fail, in order to understand why they fail. And as it's a premise application, as soon as your project is ready and well-tested, you can package it, and then you will upload it on the factory so that it's distributed. So this is very powerful, but it's a too technical. That's what we addressed in 2.0, to make this experience really simpler and more intuitive. So we have completely redesigned everything, as it's now a cloud solution, but the main concept remains the same. So you still have the ability to capture the different screend that you want to automate, to declare the object that you want to automate, the buttons, the edit boxes, and so on in your different pages. Then you will design your automation, and you will be able to test and validate everything. Now everything is integrated, so let's say the co-working or the packaging, everything will be completely embedded inside the cloud experience, which make it really simpler and more powerful. Other topics that we have is the cloud factory. The cloud factory is a control room, let's say, of the solution. It allows to monitor all the project, all the packages that are ready, also all the agents that are the client of systems. So you can have hundreds or thousands of agents working with your factory, installed on premises, for attended and unattended. And then you will declare some populations of agents, and you will associate these populations with different projects. And so the distribution, the different projects, will be distributed to these agents to be executed in attended or unattended usage. And, of course, all the activity will be monitored. Just an example, here you can see that you can set some triggers to schedule the distribution of projects or the execution of jobs on different populations of agents, and you will have the activity monitoring of all your agent executions. Last but not least, with the factory you also have a public SAP RPA store, which is used to retrieve some content. So first you will find all all the SDK 2.0 extensions. So for example, you will have a core, which is the basic services with a lot of activities, and then you will have some optional packages that you can add in your project if you need it, for example, packages for Microsoft Office, for coding S/4 API, machine learning APIs, PDF, and so on. So you will have a lot of option packages that you can add in your project. Every month, we will deliver some updates on the packages as well as new packages, so it will, of course, evolve a lot in the future. And we will also provide a set of predefined content in some posts. We have now more than 100 bots that already available for you, as well as samples that you can use to help you build your own bots. A quick view on the agent, so the agent is executing the automations on customer premises. They can be installed on desktop, both Windows desktop or Windows Server. They work with different technology, UI or API, ro web, or Windows, Java emulators, and also REST and SOAP APIs. It is the same product, and same skills, whatever you want to build, attended or unattended bots, our solution is really, let's say, renowned as being very fast and very robust. And, of course, as it's a hybrid solution, with cloud and premise components, we have very secured connectivity with a system of secured web sockeds in order to have communication between the different agents and the factory. The agent will be able to execute project, whatever they have been built, with the 1.0 or 2.0 studio. And the main difference between both is that with the 2.0, we are now based on a nodeJS engine, which make it very powerful, as it's best of breed JavaScript capabilities inside your agent in term of evolutivity and standards, and security also. So for those who will know the 1.0, you can see the difference with a very, very simple example between 1.0 and 2.0. So first, the design easily more intuitive in 2.0. And second, the generated code will also be really simpler, which make it, of course, faster and also simpler. If you want to do some advanced JavaScript coding, it's very, very simpler compared to the 1.0. OK, so that was a general presentation, now let's go into the detail of what is the new studio design experience with the 2.0. So first, general overview of what is design. You will find all your project the same steps. The first step is a capture step, so step one. You will capture the different application screens that you want to automate, and you will let what we call declare the different screens and different elements in the application, and screens that you will need to automate in your project, so step one. Second step will be to test that your declarations are correct. So you would close the agent in test mode in order to validate that all your declarations are correct. When your declarations are correct, then you will move to the design of your different workflows and automations. So you will do everything graphically, and then you will test. So this is a step four, you will test and troubleshoot the execution of your workflows. And when everything is OK, the last step will be to package and deploy the project so that it can be distributed on the different agents. So to illustrate what we are working on, let's take an example. We have designed a small demo in which the purpose is to automatically create a list of sales order inside SAP ECC from input data from an Excel file. So in the middle, you see the main automation. The first step of this automation will be first to open Excel, so it's what you see on the left top. You will open Excel and read the different data in the worksheets, then you will launch SAP ECC, and log on inside SAP ECC, so this is the left button. And then you will start looping inside the different screens in order to set and to create a different sales order. So it's what you see on the right, you have a first loop, and then inside the loop, for each screen, you will set all the values inside the different screens. And at the end, you will just of course just close SAP ECC so that it's ready for the next job to be executed some seconds or some minutes later. So first let's start with the first step, which is the capture. So here you can see in the middle the screen that I have captured. You can select different elements in this screen. On the right, you will see the criteria that have been captured for each one. So it can be IDs, or if it's web, it can be classes, tags, and so on. So you will add some criterias that are automatically captured for all of the different elements inside the screen. And you have, let's say, a smart algorithm, it's what we call smart declaration, that we automatically propose you, some criteria that will be selected. And so these criteria are, of course, crucial, because they will allow to dynamically recognize all the screens at the runtime. And on the left, you can see the different screens and elements inside screens that you have already declared. So let's see on a short video what it looks like. So as I open my project, so the Cloud Studio is open. Here you see on the left the different artifacts, so the applications, the automations, etc. Here we focus on the applications, so we open the SAP logo and application that have been captured. On the left here, you'll see the different pages and the different element, for example, this is a home page. And you can see is that any element can be declared if we need for the automation. On the right, you see the capture criteria and the automatically-selected criteria. And so it can switch between the different pages that I have captured, and declare in my application. OK, so as soon as your declarations are done, you can test them in order to check that everything is fine before you start to build your automation. So let's see a short video on this. So here, I click on this test button, then the agent, the agent is starting, and start to test everything is working well. So here you see the application tester UI. And so I just bring to the foreground the SAP ECC application, so obviously it's a real application, of course. And then you can start testing it. You can see that the different object are highlighted, it means they are correctly declared, and I can even try to set the value to check that everything is fine. And so, as soon as you have tested your different screens, you're done, and you can now proceed to the next step, which is the question of the workflow. OK, and now let's move to the next step, which is design of the automation. It's for you, Alexis. Thank you, Christophe. So let's talk about the automation designer, that is the new tool to build the digital bot. On the left of the slide, you can see the artifact you can create in Cloud Studio. First, you have data type, that is the way you set up your project data. You also have application, that Christophe just demoed, and in the middle of the pane, you can find automation that I will discuss about now. In the center of the screen, please notice the automation flow designer, where the user compose a sequence of steps. Those steps can be in the form of automation, in yellow, SDK activity, in red, as well as screen application, data variable of control, like the conditions here. On the right, find item user with drag and drop in the automation flow to create a new step. Here, are display automation, also called sub-automation, that are in yellow, below application in red, as well as the SDK activity. As you remember, Christophe just demo how to capture a running application and declare its screen. What you see here is the application screen usage in the Flow Designer to automate the screen. So say differently, here is how to use what Christophe has just captured. And with this, you define how the bot will click and input the value inside the element, declared in this screen. On the right pane, you see the red SDK activity, automatically filter based on which elements are defined in the screen. The filter helps end user to get only the activities compatible with the element and its technology. This way, user can quickly drag and drop the right SDK activity on the screen element. Important for business user, similar to Excel, SAP Intelligent RPA 2.0 has a formula language to transform your data. Formula language is very easy to use with visual indicator and IntelliSense. Of course, if you are a developer, you can build custom scripts step in JavaScript. In this script, you can call all SDK activities by developing code in the JavaScript editor. While this specific feature is called developer, note that for the rest of the feature, there is no need to know about JavaScript. They are all provided via no-code fashion. Now focus on a no-code feature to help user to transform an Excel spreadsheet to a data type. It's very simple, since all is done visually via drag and drop. If you need to manipulate detail feature for Excel, Word, Outlook, or PowerPoint, you also have SDK activity defined in their respective package to automate them really in a very fine, detailed way. And let's now move to the demo. So in this video demo, we will demo an existing project that has been already built with several automations. Let me open the main automation. As you can see, its flow is composed of a list of steps, in yellow, that are sub-automations. Let me open the first one, get all their data from Excel. You see here a list of steps in red that are SDK activities to manage an Excel spreadsheet. User has visually-defined mapping between Excel and data type. Let's come back to the main automation. And you can notice the next step that is launch sub-automation. Let's open it. We have two screen applications in its flow. We have, in both some SDK activities in red. If you open the screen activity, you see the SAP GUI capture. On the left, you will see how you can map their simple drag and drop SDK activity to the screen application and the declared elements. It is straightforward. Let's come back to the main automation. Here you see the foreach loop on the list order header to send the current line to the create sequence. Let's open it. This automation is composed of a condition the "for each" loop, as well as some custom scripting. Let's open the custom scripting. Here we push with this script a item on the top of the list. And now I will let Christophe talk about how to test an application. OK, thank you Alexis. So let's move to the next step, which is as soon as your automation is designed, you want to test it. So you have a powerful debugger which is embedded inside the studio. It will allow you to put some steps to visualize the execution and to see the input/output of each activity, to really well understand what is happening. So visually, you can set up some breakpoints inside your workflow in order to make some breakpoints and step by step during this execution of your automation. Let's see a small video to see what it looks like. So here I reopen my automation. I launch the test, click the test button, and just have to set the Excel pass, pass off the Excel file, and then it will start. So the agent is starting. It's downloading the automation, and then it started to execute. So you see that it opened the Excel, it opened the worksheets to collect the data, then it will now switch to the SAP logon. So this is SAP ECC starting up. We are logging and the automation is starting. You can see that we are creating the different cells order inside the system. So here I just show a complete execution, but I could also, if I want to investigate a specific point, I can set up some breakpoints in order to break and to see exactly what is happening in a given step of my automation. So obviously the third sales order, and as soon as it's finished, then we will switch to the last step, which is to close SAP Logon. So remember, we have captured the application, we have tested our declarations, we have designed our workflow, we have tested our workflow, and so now everything is OK. So the project is ready for deployment. Then we just have to generate a package, then in this step, the system will generate some JavaScript. That is the language that the agent will understand, and it will be packaged in a component that is available in your different packages on your system. And then you will be able to distribute this package to some given agents. And this is the complete chain of design that we have seen here from the capture up to the deployment. Now let's switch to the conclusion, for you, Alexis. Thank you, Christophe. As a conclusion, let me share the list of innovation coming in SAP Intelligent RPA by reviewing our road map. As you can read, we continue the low-code/no-code topic by enhancing the Cloud Studio. We also add a process recorder for capturing application. We will integrate process-mining as part of our tool. Last, we will add more and more templates in the SAP Intelligent RPA store. Next topic is artificial intelligence. We have management of unstructured documents, as well as surface automation and other AI features. Last, will heavily invest in entreprise-grade automation, first by merging with SAP Enterprise tools, like SAP Analytic Cloud. But we will also provide integrated monitoring, which CAM. And we will continue investing in the product infrastructure. The great thing is that you can get started with SAP Intelligent RPA with our trial landscape now. This trial landscape, you can use it to test your SAP Intelligent RPA for free, and build your first bot. Notice also that we have a strong community on SAP Community Network, where you can find feedback, receive feedback, and also ask questions. Last, we have several channels on the different social networks. Even if it's not displayed here, notice Christophe and I are on Twitter and LinkedIn, so if you want to connect, don't hesitate to follow us there. Last but not least, there are quite a lot of session talking about SAP Intelligent RPA in TechEd. You can see the list in this slide. I recommend, especially, the all hand ones to build SAP Intelligent RPA 2.0 bots, as well as the other one to automate Ariba. Please find more link to our topic, public site, and especially noticed the open SAP training site, where you can find quite a lot of information to get started with trainings. This slide is to know more about the SAP Learning Hub platform. Thank you for listening us. We hope you enjoy our session. We wish you the best in building your first SAP Intelligent RPA bot. And, as I explained previously, don't hesitate to ask question in the sub community or the social network channels. Thank you. Thank you. [MUSIC PLAYING] 