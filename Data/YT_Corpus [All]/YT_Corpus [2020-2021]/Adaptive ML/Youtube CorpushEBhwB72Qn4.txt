 Hey hello everybody thanks for joining us in this video without adaptive cards I am David Clos we have some exciting stuff for you today and I'm bad hiding here yeah thanks jump we'll jump right in we've got a lot to cover today so here's the agenda we're going to run through we're gonna start out give you a quick recap of adaptive cards then David's gonna walk you through all the latest and greatest we have with templating and some designer updates then we're gonna switch it over to adaptive cards v2 the first time you'll have heard that where we talk about a new feature called universal actions and then we're gonna wrap it up talking about our roadmap v3 a very early glimpse of v3 and beyond so with that adaptive cards if you're not familiar well this is the first time we've got a video opportunity so you could press pause now go to adaptive cards that IO and you'd be fully up to speed because we are gonna jump into some pretty cool stuff but to make sure everyone is somewhat on the same page adaptive cards are platform agnostic snippets of UI authored in JSON that apps and services can openly exchange so any platform they can exchange them because everything speaks JSON and ultimately when that card is delivered to a specific app the JSON is transformed into native UI that automatically adapts to its surroundings so it's cross-platform but it's always native on the app that it lands on and it blends right in and will give you a look glimpse of what that looks like as well so when we set out to build add app of cards we wanted to build them because Microsoft 365 apps like Outlook team's web chat cortana windows timeline all had these same set of requirements they wanted to allow third party extensibility people to plug in UI but they wanted to make sure their users had a consistent look and feel so that outlook looked like outlook and teams look like teams but we knew with the new open Microsoft we didn't want to make it just for those apps so we delivered the SDKs that you can that are apps that our platforms use you can use yourself to render a tap of cards in your own apps and people have taken that over the years to do some pretty cool stuff so what the heck are they here's a card in teams the is the github and DevOps a bot within teams that helps bring you your content into the apps you are already using so from here I can easily manage pull requests I can see it builds failed and github and DevOps use the DAP of cards to bring these things you know into my workflow without me having to have a bunch of tabs open how it looks another fantastic canvas where you see adaptive cards things like approvals expense reporting submitting time off you can do it all right from your mobile phone right from Outlook there's a rich suite of third-party apps that have extended outlook using adaptive cards and this just means so much so many fewer hops to click and approve very simple things we also saw a third-party company called teamwork use adaptive cards to build a BS code extension so that card that you see on the right that blends in with the S code that's actually the latest tasks that that I happen to be working on as I'm a software developer and closing out issues all integrated directly into the S code also not just Microsoft properties cisco webex a huge conferencing software uses adaptive cards to power their extensibility platform as well so we knew we wanted adaptive cards to be an open standard and this was a very exciting announcement once they made that so everything we're gonna be talking about today is really gonna be centered around this overall roadmap if you will and it's really we're taking a good look at the lifecycle of an adaptive card you've seen them in apps you just saw them in teams and outlook but how did it get there and the workflow is something like this we typically have card authors and hosts there's usually two different parties exchanging cards whereas in a traditional UI stack you own the pixels you're writing your own UI your you own them whereas adaptive cards is usually two different parties exchanging content and we call those card authors and hosts so the way it starts is the card author usually goes to a card designer and they say hey maybe I'm github and I'm going to build the pull request card so I go to a design tool build what that card will look like it creates a bunch of JSON I can copy that then into my back-end and then deliver it into teams or outlook in the most appropriate way these dotted lines here or we say copy JSON those are actually important and as you'll see this talk evolve will give you a glimpse at how we're rethinking the overall lifecycle of an adaptive card and trying to streamline a lot of these processes to make it a lot simpler for you to just get your job done so take a you know take a mental image of this picture as we'll be referring to it quite a bit to start in the first topic right here at the card designer and back-end that little black arrow just turned into an orange one and it became two-way that's what we call adaptive card templating and it really helps card authors design these reusable card templates and use them in their back-end David could you give us a lap around what the heck is adaptive card templating of course thanks Matt so templating is essentially a more efficient way to design your cards the typical card as you author it today is a JSON payload that is ready to display you feed it to one our SDKs and it renders natively in this particular example we have a stock ticker that is designed to represent the Microsoft stock ticker at one particular time okay that works but it's not ideal there are plenty of stock tickers out there and I might actually want to reuse the exact same layout to represent other stock symbols so marrying essentially the layout and the data in one single payload not always optimal that is what adaptive card templating is meant to solve that payload that we just looked at can actually be generated from what we call a template that's what you see on the Left associated or bound to a data object now that template is basically the same as what you've seen before except that the data in the text properties of those text blocks has been substituted with binding expressions that make it possible for another SDK to pull the data from the data object dynamically insert it into the JSON payload of the card and produce the fine result that you see on the right which is basically the exact same as what we've seen before of course the rendering of that payload that final payload is also exactly the same but now if you actually apply that principle to multiple data objects all representing different stock symbols you can replicate the same layout over over and over again in a very efficient way without having to author the card and different times and so that's what templating actually allows you to do but on top of that we really wanted the template engine or the template language to make it possible to do some more complex layouts that can you know react or adapt to certain conditions in the card that's why as a collaboration with the bot framework team we are releasing with support for what we call now adaptive expressions which is a rich set of functions and basic language features it remains entirely entirely declarative there's no code behind which make it possible for you to do complex things you can see here the text property of that text block is actually authored using an expression that has an if statement the if statement will output one particular character over another depending on the condition if the change is greater or equal to zero the same way we can format a number as a dollar symbol an actual currency and if you bind that particular card extract of a card payload to the data that you see below then that stock ticker can now have as you can see on the bottom left of the little screenshot some green text when the stock has gone up associated with that green arrow that's pointing up at the beginning so again very complex well not that complex to author but very complete set of functions we have a couple hundred if I'm not mistaken that allows you to do templates that go beyond just simple field binding expressions and I think now is the right time format to actually give us a demo of all of that including through the adaptive card designer okay so everything templating and everything adaptive cards is gonna live at adaptive cards i/o that's gonna be your landing page for everything if you want to start rendering cards using the SDKs if you want to see our latest releases or a roadmap this is your place but we usually refer people to the samples page to really get started and see some sample cards so here's a great activity update we can see a great restaurant card maybe you're building a card to show restaurant reviews and of course the famous stock card so what you're noticing from the slides David showed is that well this slide works really this card works really great for Microsoft stock as of September 19th probably a couple years ago it's clearly baked in the data is right in there so what we added recently is this big toggle switch so you can turn on adaptive card template and you're gonna see the payload goes from one to two now we have a separate data payload and we have a separate JSON payload with the template so it has all these binding expressions so I can bind to the data separately and no self-respecting interactive developer tool would be complete without a try it yourself button so we click try it yourself that's going to load up the adaptive card designer for some of you this is the first time you've ever seen it so I'll give you a quick tour we've got the card payload editor and we've got sample data this makes it so your design time experience is pretty solid you can see what this card is going to look like with some sample data knowing that later on in reality you're gonna populate this card with data and we allit we will actually show that in just a minute so here I can see what this card looks like I can click preview mode and now if I change this to some other company you'll see instantly the card designer update right there we also added in this release of adaptive cards that I owe a handful of really cool binding UI so now I can select an element here I can click bind it's showing me all the properties of my sample data so maybe I just really want to ruin this card and put the company name here or something makes it very easy to have a design time experience that aligns with the data so let's take this card and actually build a really quick web in a matter of minutes so what I've got here in BS code this is a completely blank dotnet new Web API blank project that I got from a basically asp.net Web API and they provided all this stuff about the weather and blah blah blah so what we're going to do is at a very quick method to give to get a card out of this so the first thing we need to do is make an HTTP GET at the slash card endpoint we're just going to get the first forecast out of there that's all is pretty straightforward now what we need is to build our card so here's the data models they had this is a weather forecast so it has properties like location date the temperature in celcius and a summary so let's go back to the designer and I've created a JSON version of that date temperature summary it's freezing and location now I've got my sample data next thing is we need to build a card we've got a very simple drag drop interface to build cards so you know use this element and build your own but to save you some time I'm gonna go ahead and paste in one that I've previously made I've got that over here I paste that in and look at this I've got a pretty good-looking weather card that now I can see as the temperature changes yet the card is reflecting a runtime now you'll notice what's really neat is I'm typing in Celsius I'm typing in zero you think zero Celsius well that's 32 fahrenheit this what you're seeing is adaptive expressions in action and I'll show you what that looks like if I click on this 32 this is a complicated expression I'm writing that's converting the Celsius into Fahrenheit so I'm saying format number take the temperature Celsius multiply by 1.8 at 32 whatever the crazy formula is the convert Celsius to Fahrenheit but this is pretty cool I've now got a template that's massaging the data and displaying a really nice-looking card based on the sample data so now let's hook it all up and make it all work so the first thing to do is from my dotnet project I'm gonna do dotnet ad package adaptive cards templating and I'm gonna add version 10.0 and in this case I have to do - zero because at the time of this recording it's a pre-release package so while that's installing you won't have to do this you just have to do dotnet ad package adaptive card templating now what we're gonna do is head up here while that's loading and do the standard using adaptive card stock templating cool the package is installed I add my using and now what I'm gonna do is paste in a handful of things because what do I need well first I need a template and that's my adaptive card template and that takes in my template JSON we're not going to paste that in just yet so we're going to take the template we've got our data object so we're going to expand this template and to do that we're going to template dot expand passing that forecast object that we had Furman this can be any just C sharp object and then because this is a Web API we're gonna return this JSON so we're going to return the expanded content and its application sized JSON right there now the final step is we need to pass in our template JSON so because I created it in the designer now all I have to do is put it into a variable so let's do that we simply by our template JSON and we paste in this string here whoops didn't copy right paste in this and then all we have to do because of the fun-ness of string encoding we have to replace these quotes with these quotes hit OK okay so all I've done is taken that JSON that template that we created from our designer paste it into my c-sharp variable i've instantiating an adaptive card template object that has a method called expand and this takes the template and expands it with data so this would be data i happen to be just randomly getting one because it's a simple demo this would hit a weather api this would get the data from wherever it needs to and now let's go ahead and run this and if all i need to my colon right there let's restart and if all goes well we will see a very simple adaptive card return from a web api that would make it very easy for us and I'll send this team send this down like actual messages and now people can interact with your service directly from their own apps so now that's loading let's see we've got localhost here and within any minute hopefully we'll see the card populated with our weather forecast and there it is there's our JSON that's our adaptive card filled with data that we needed now I've got this API that I've built and I can actually do whatever I need to with it and so that was a look at building a very simple asp.net app that takes advantage of templating makes it much much faster to build cards and then fill them with data we've got one last thing to show you while we're here so what I've done is switched over to the v-necks designer and that v-neck started app of cards that I oh this is where we do experimental stuff and all sorts of fun things I've got something really neat to show you there's two things first is this target version selector this makes it so if you accidentally use features that were provided in adaptive cards 1.2 but the hosts you're sending to doesn't happen to support those now the designer you'll get a really nice design time experience telling you that hey you're using features that might not work on this app maybe teams or an app is is waiting to roll out the latest version so there's that oh there's always that little gap between rolling out updates there's also a whole new open card picker so we have a new starting ground and get a new card all the samples are right here that's really great if I want to load up a sample what's really neat here at v-necks that adaptive cards at i/o our friends will read imagine imagine a ax bill this really cool thing they had all these designers working with adaptive cards and well we think that is the app of car designer is great it still is building JSON and you do have to have some ability to know what you're building it's it's a little more limited and restricted than a full on you know editor like maybe Adobe Photoshop or something so they use machine learning to check this out at the very bottom you can click create from image and what this is going to do is analyze an image using machine learning pull out images pull out text plot inputs and create an adaptive card from it so without me uploading a file which could I could totally upload a file on my own they have a sample a set of sample images that let you experience the feature and I'll just pick this one right here this grand buffet spread and so this is an image I want to stress that these are all PNG images created with an image editing tool when I click convert to adaptive card the image is going to be processed in the backend we do have a privacy policy you have to acknowledge by using this that analyzes the image finds the text creates these inputs these are actually a choice set input you can actually interact with this card I mean this is a pretty neat this is just like just it's it's you know it's early it's why it's in a preview they're committed to it will get the source code out at some point but what's really neat is you know you can play with this and just create images and just create a card from it at least as a starting point and then start tweaking it so we think this is really cool congratulations and kudos to that team hopefully you now have a better understanding of what the heck templating is and how it can save you a bunch of time and as a quick recap of everything we just saw we've got three major initiatives to really close on the first is adaptive card templating and we're very excited to tell you that the release candidate is now available for dotnet and JavaScript so you can get started today and hopefully in the next month or so we'll have everything you need to really start using templating in production there was a minor breaking change in the syntax we added a dollar sign to be a little more standard with some other binding languages and there were some minor API changes in the SDKs but they should all be pretty find/replace to fix adaptive expressions as David mentioned is a new standard for writing platform agnostic expressions that can be evaluated directly on multiple platforms if that's something you'd be interested in check out this learn more link and last thing you saw the adaptive card designer got a pretty nice new set of features with a rich data binding UI as well as a version selector UI to help see what apps might be hit what cards might behave like on maybe down level platforms we also saw a really cool pic to card feature as its codename that automatically generates an adaptive card by uploading an image and cout two physicists Besant and crew from imaginaire they've been huge friends and family with adaptive cards and that was a really exciting announcement that we're hoping to polish up and get up and do adaptive cards that i of shortly as always the dab of card designer you may have seen from previous videos can be embedded into your apps and you can check out that link to get started with that so that was a lap around tab loading now we're gonna look at what we're calling adaptive cards v2 and the major feature coming with that is universal human and versal action so David why don't you tell us what that is so thank you Matt yeah universal actions when we said that adaptive cards work across all those platforms were designed for outlook teams timeline and even your applications we we really deliver it on that like you can use our SDKs you can display cards natively wherever but the problem is that this is just rendering that we're talking about as you probably know adaptive cards can include inputs and actions and there's currently no standard way to actually run actions from an adaptive card what that translates into is a little more complex view of the diagram that Matt showed you before so on the left you see a card that might show up in teams just a super simple scenario to close the tickets in some external system on the right hand side you see the same card but displayed in Outlook really the exact same thing with a slightly different style under the covers though the payload for teams looks like this a body with a text block super simple and an action whose type is action that submit however in Outlook the same exact card is defined with the same exact body but not the same action here you have to use the action that HTTP type what that means is that if you author your scenario for Outlook it will simply not work in teams and the other way around we want to solve this with universal actions so here is what we're doing this is an accurate this is a more I say I was going to say accurate but it's a more deep dive into the die that was shown to you earlier in this deck the reality when it comes to the card authoring experience is that you don't just author one card if you if you want to target multiple hosts you have to author a variant for Outlook a variant for teams and you might even want a variant for your own application sure there is a common layout but the action model is not the same similarly in your back-end you might want to expose the services that handle the actions differently actually it's not that you might want that you have to when it comes to outlook actionable messages you need to have a web service it might be any web service for that matter the interface that you choose and that needs to be available for Outlook to call directly into when you're authoring a service for teams that is a but well you need to comply with the way bots are typically authored you will probably use the bud builder SDK and when you're authoring something that works in your custom application you're basically on your own we have no guidance that means that you have to implement multiple things multiple times even though there is a command card layout I want to break that chart that diagram back to what we showed you at the beginning so here is how we're doing it as you can see at the bottom of this payload there is a new action type called action to execute essentially a card authored with that new action that executes is basically guaranteed to run in outlook in teams and probably more microsoft properties in the future just the same they can work in your own application on top of that action that executes has a semantic model where the backend can return an updated card that is meant to replace the one that the action was taken from this way you can very easily implement step by step scenarios like is already possible to do in Outlook today so we're bringing this feature to teams as well on top of that were also introducing an automatic refresh model as shown at the top of this card with this you can actually have the host initiate a card refresh model by calling in to your back-end so as to retrieve an up-to-date view of the or even to craft just-in-time a card that is tailored to the particular user or to the particular user role for the user who is viewing the card so really that diagram that I was just showing you at that point we are simplifying to this next one a comment card that you now have to use to author using the action that executes action type a command back end no need to have variants for teams for Outlook or your own application and a common protocol that makes it possible for Outlook teams or your application to talk to that back-end but then you might have questions how am I supposed to implement that back-end and what is the protocol that runs between the backend and the various hosts well the answer to that is that we are standardizing on butts and the butt activity protocol why are we doing this well so happens that the bot framework and bot development has a lot of engagement we have plenty of developers out there using the bot framework currently there's a great set of tools including SDKs for easily building those BOTS and the bot activity protocol is very well defined so we are standardizing on that hoping that a lot of developers will actually be able to reuse skills that they already have and that outlook developers will find it extremely easy to move to that new model and of course when it's when it comes to hosting those little applications those little adaptive card v2 in your own applications implementing a but should be just as easy for you as when it is when you want to integrate within teams and with that I'm gonna go into a demo so this is a very early sneak peek this feature is not shipping immediately but you're gonna see a universal action model run in various hosts with a single back-end implementation and a single card payload I'm actually going to show you Universal actions in in action in three different environments the first one is the one that's on the screen right now and that's the web chat control which is the control that the bot framework provides so that you can embed communication with a bot or interaction with a bot into your own web application so this is a very very simple scenario it's about catering and my ability to place an order for food do not expect to see something that's like in real life this is really a proof of the technology more than anything else so in that particular but I'm gonna type the worst start I could have typed anything I wanted this is just a way for me to invoke the bot and have it send that initial card so here you can see I can order chicken or beef or even vegan or do a customer order I love beef so I'm gonna hit beef as you can see that card has been refreshed in place so what happened under the covers is that there was an action that executes encoded in that card that went to the butt and the butt responded with a new card that makes it possible for me to now order a drink I'm gonna order water click that button the card has refreshed yet again summarizing my order and allowing me to confirm I'm gonna hit the confirm button and now I see that my order has been confirmed and I can even click that button to see recent orders now you have a card here that shows what's been recently ordered as you can see in right now the card updates itself automatically and it's going to do that three times and then it's gonna pause okay so this is a scenario that shows action not execute working in the web chat control and the ability for a card to be refreshed as a result of an action being executed as well as the card automatically refreshing itself great but what we really want to show is that this exact same scenario works in the context of Outlook and it so happens that I have done that earlier on I have actually sent a card to that account actually this is the exact same card that I was interacting with before so it's it's actually not showing what I want I'm gonna go back there and I have a little utility here that makes it possible for me to send another email to that account to show the scenario in action I'm gonna wait for it to arrive click on that email here you see that exact same card and when I say it's the exact same card the code in the butt is really the exact same one so I'm gonna order chicken this time I'm gonna order tea I'm gonna confirm that order and I'm gonna see the list of recent orders and you can see my order is there and if I go back to this one and start over that refresh process you can see now there is chicken and tea that's been ordered just a moment ago so this is the same exact scenario working in two completely different environment web chat as well as Outlook but what about teams teams is a huge hugely important client here is the exact same scenario again working in teams this time I'm gonna order custom I'm gonna say fish hit that custom button wait for the card to refresh I'm gonna order coffee I'm gonna confirm that order and again I'm gonna see recent orders this is again yet the exact same so now you're working in this is not where I wanted to go I wanted to go back there to just show that again if I restart that thing you can see the order so a little proof that we're actually running the same code this is the code of the but I'm not going to go through it because there's more than just this portion but this is the method called on invoke activity async that actually runs my but this is the exact same code and the exact same card payloads are are being used throughout without the but ever checking which end point actually called it it doesn't know that it's webchat or outlook or teams it just behaves in exactly one way and that way is compatible across the board a single implementation now makes it possible for you to target multiple hosts seamlessly we hope that's actually solve going to solve a lot of headaches and completely streamline the development process as mentioned before why we're using the but framework and standardizing on that well a lot of developer skills that we want to leverage and developers should be able to reuse what they've learned a lot of SDKs plenty of great tools that you can leverage I've also mentioned that you'd be able as a developer to host adaptive card v2 in your own applications for that we're gonna ship a set of SDKs for all the platforms that adaptive card supports those will either be separate as decays or extensions of the adaptive card SDKs they will make it super easy to pass in of an adaptive card V to fellow payload and have the SDK handle everything for you including running actions when will this be available is kind of an open question we hope to have something available in preview by the end of this calendar year but it's totally possible that it we actually slip a little bit into 2021 and that's it for universal actions I'm gonna hand it over back to Matt great thanks David we're really excited to see Universal actions come to be now we've got another early preview on something we're calling card offers services and it's one of those features that the easiest way to understand it is to switch right to a demo so card author services the best way to understand it is we've got a designer we've got a set of back-end templating SDKs but there's still that manual step that's somewhat kludgy i had to copy paste this you saw me escape these quotes I have to paste it into a variable maybe I'm in a bigger organization that has a designer that's separate from the developer and they're used to the design tool so now they have to what either email it or send it via onedrive so there has to be an exchange of this card from one party to the other card author services is dying to be a turnkey integrated experience and the way that looks right here we've got it rolled out for Microsoft employees at this website it's an integrated dashboard where I can click on new card and you'll see the adaptive card designer that you're familiar with all integrated right here I can make a card I can say hello world I've got my sample data editor I can save this card and because it's demo this is probably demo card what takes 704 23 I can give it tags I can do whatever I do with this save that card and this is the cool thing now I can publish it and when I publish this card I can see who's the author whose collaborator I can see how many people have used it and what's really neat is now I can just take this ID and now back in my net project I'd add a project called adaptive card authoring services and this isn't quite available yet but to give you a glimpse at how simple this code is let's make another endpoint called card author services we'll grab that same data object we'll add on using statements adapted cards authoring services and with card author services I can say buying template and I'll paste in that template ID that I previously had so the template I created with this data so now you'll see instead of that payload being pasted directly in here now I'm just giving it an ID that's going to be mapped up to that back-end and if I hit f5 here we'll see we'll see this actually render that card dynamically from the front-end which is really neat because now if I ever want to go back to this while that's building let's see if I want to make a new version of this card because cards you know any good one it's going to have multiple versions I click on new version the card designer comes in I can add a new text block called v2 hit save and I can publish v2 let's actually see if this works card author services with any luck we'll get our card that we created there we go we got an adaptive cards at hello.txt v2 now what's really cool let's just close this yup let's edit and designer let's go from be - we're gonna go all the way this is going to be v3 of this card and in v3 the the text got huge you know we really want to emphasize it so we hit save we hit publish and now as I go over here and refresh look at that I've got a whole new adaptive card from my web aid guy didn't have to change the code didn't have to copy and paste any template and if I have a designer on board they can simply come in this really nice portal edit this card I can see the different versions that have existed from it I can go back to previous ones edit the designer I can see it's actually had three requests hit so it's live showing me which are my most popular card templates there's a whole bunch of stuff in here that we're not going to get into but what this really offers is a very rich integrated way for organizations to manage card templates and we'll have a link where you can get started and when to expect card author services later on so we hope you like that look at card authors services it should really streamline the process of card authors just using these cards rapidly using them to the back end and just getting through it here's a look at what this looks like what we're planning on shipping as we get to our roadmap we've we showed you the card management front-end and an early sneak peek at a dotnet back-end and the way this works is very simple you just install the SDK and you now have full access to all of your own internal templates to your organization but if you're not necessarily a dotnet back-end developer we didn't want to leave the power automate folks out and we'll have a custom connector that you can use in your flows to have a true end and no code experience for creating cards using them within business processes and actually displaying them to teams or Outlook or whatever you whatever else you want to do with power automate without writing a single line of code so the summary of cart author services is we're really positioning a turnkey solutions for card authors it will be self hosted also I showed you our version of the website that we have deployed for Microsoft but you would deploy this and host this on your own there's a REST API to manage the templates the integrated front-end that you saw it has configurable storage so you can store the ten it's in sequel github a SharePoint list onedrive and it has a configurable authentication with whatever authentication provider you haven't used and as mentioned a power automate connector so you can just automatically use these templates from within your flows so here's a look at what the world looks like with templating universal actions and card authors services we have a much tighter card author loop where you can design a card and take advantage of it in a very integrated way and you know the standardized way for your back-end to handle actions from teams or outlook and maybe refresh that card with up-to-date content and so David why don't you give us a look at the roadmap and when we can expect to see some of these things absolutely we've talked about a lot of things today rendering actions templating card designer and author services when are those coming to you guys well version one point X the next release of the one point release which we expect to ship in the next few months will address accessibility we've had a couple of issues with accessibility with cards what we want is for them to be accessible by default right out of the box so we're gonna pay a lot of attention to that in the next release similarly we've had a very requested feature around input validation right now inputs you just type stuff in it and as actions are executed you might get an error from the server saying that the value doesn't match what it expects well we're gonna have client-side baked in input validation in that next release which will make implementing scenarios a lot easier we hope we're also going to introduce introduced scaleable glyphs if you've ever designed an adaptive card payload you know that if you want little icons in your cards you currently have to use images and while that kind of works on high DPI screens it's not ideal you never know what dimensions you need to author your imagine and sometimes it gets shrunk down sometimes it gets blown up it's not ideal so we're gonna fix that with a set of glyphs that scale nicely across all screens and we're also going to address a set of platform inconsistencies that we've identified so that the JavaScript SDK behaves the same as the u w WP SDK and the same as the dotnet SDK etc in the world of templating we've already mentioned that our SDKs for dotnet and JavaScript are coming in this next release and in terms of the cart designer we're also going to look at accessibility to make sure that it's usable by the majority of you out there and the version selector will also be made available as alongside the templating support with a bind feature now post one point X we're going to introduce the first version of the two point X release plan that's gonna address the universal action feature that we just mentioned a few minutes ago and as far as templating goes we're gonna push the boundaries a little further by offering native SDKs for the mobile platforms iOS and Android 2.0 is also when we're gonna start working on the card author services hopefully we can get a lot of help from you on that and a lot of you know insights as to what you'd like to see in there and once we're done with all of that which should happen during the year 2021 and by the way the universal action as I mentioned earlier we hope to have some preview a little earlier within the 2020 so once all of that is on the way we're gonna start thinking about our 3.0 or 3 point X release and in there we need to we want to take templating even one more step further by by introducing what we refer to as live data binding so essentially a way to have a single card bind to a data object and be able to react to changes in the properties of the data object without fully reran during itself this will enable great scenarios like you can currently achieve using react ORS mo for uwp and on top of that this is when we're actually gonna probably release the card author service so the 2021 timeframe with all the features that we hope you're gonna let us know you want to see in there so that's it for the roadmap Matt yeah thanks David so this is really where we're getting to this is how we see the world with finally getting to a world where we have true industry supported card exchange between different apps between different backends with live data binding with card author services and a real world where you can start exchanging these cards and they're actionable and updating in the real in real time we showed you a whole bunch of stuff today so we'll close out with the resources slide if you're interested we'd love to see you every month at our monthly community calls they take place on the second Thursday of the month at 9:00 a.m. Pacific time so you can join us see myself and David and see what's up with the latest and greatest for everything templating take a look at this link learn more about adaptive expressions I if you really want to help us build card author services and get it earlier than we see in the roadmap that link will help you get started you can get started with the code today and really let us know what features to invest in at the AC roadmap link that's your opportunity to help steer the course of this project and of course you can find us on Twitter we'll do our best to reach out to you you can find me at Matt Heidegger then you can find me that d close actually why do I say that I'm French D Clos and that's that's all we had thanks everyone for joining today yeah thanks very much for attending [Music] you 