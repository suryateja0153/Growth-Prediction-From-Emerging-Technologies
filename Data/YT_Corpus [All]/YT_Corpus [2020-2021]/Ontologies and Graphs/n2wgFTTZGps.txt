 everybody and welcome to the intro to neo4j for developers training good morning lou uh it's morning for us but maybe it's afternoon for you so we are uh yeah happy to have you here on this training uh in this um yeah late november day good morning good evening good afternoon where you are i mean by all means pop put in the chat where are you we'll do some shout outs why it's not why not whilst we carry on so we've got some we've got some from paris we've got poznan we've got newcastle cologne cologne wow you're in munich i'm in munich you're in london exactly absolutely so good morning everybody good afternoon good evening i'm i'm really excited to see who else has joined us right yeah i guess we should get cracking we can get cracking yeah i think maybe just a little bit of a quick introduction so we will give you uh an intro obviously uh lou is our developer relations advocate here at neo4j and she will give you today a quick uh quick and easy overview of how to get started with neo4j uh what is the graph basic basics 101 sort of good is good graph scenario spotting so i think that's an important uh key learning of this session today and then obviously hands-on with the sandbox so i think lou also posted the links already and there's in the in the little blue box sticky note up there as well or down here in the in the screen go to neo4j.com sandbox and and start your free sandbox you just need to uh register with your with your email address and then you're good to go absolutely absolutely so i'm just i'm going to quickly do a few more locations and then we're diving straight in so yes hello we've got bangalore so hello bengal i've got a few more from india as well good afternoon good afternoon we have got uh australians i'm from sydney so good evening sydney we've got ellsberg as well good afternoon oh wow because japan as well um so yes good evening japan as well wow that's great as well and vienna wow my goodness we have got a very very global attendance today this is going to be fun so right let's let's do this we're going to have good fun this is a code along so i am going to get you all from uh understanding what a graph is so we are going to the bare bones what is a graph as alex said we're going to look at the anatomy of the graph database we are going to be talking about how you spot good situations where a graph database makes sense why do we need graphs i am going to then give you a crash course crash course in neo4j cipher and what we are going to do we are going to take that knowledge and we are then going to use the neo4j sandbox so we are going to be using the neo4j browser so yes somebody mentioned are we using it yes we will be so we're going to be using the neo4j sandbox and we are going to be writing some cipher we're going to be doing some queries against against a graph database so we're going to be using the movie database so we are going to have a huge amount of fun and at the end of this you will have had a go at doing a kevin bacon number you will have had a go at building a recommendations engine so we're going to be covering a lot of ground we're going to be moving quite fast but don't worry you'll be able to then at your leisure go through the sandbox and have a go at your own pace so we're going to be covering a lot of material it's going to be great fun if you have questions pop them in the chat and we will uh i'll pick them up as we go along so this is also being recorded so if you go i need to go over again don't worry this will be available in our youtube channel so that's youtube.com neo4j so that will be available okay right let's do this so what we're going to do in this session we are going to be covering what's a graph and where we need them spotting good graph scenarios property graph database anatomy and an introduction to cipher we are then going to do the hands-on element so we are going to be working with the movie graph data set on the neo4j sandbox so sandbox is completely free so you'll be able to join in just a quick shout out if you want to get ahead of the curve you'll spot at the bottom of the video we have a link to the sandbox so you can go on there now and register so that you are good to go and start a sandbox you've got the address there and then i'm going to talk a little bit about how you can continue your graph journey so where can you go to get more material and so forth okay so what is a graph a graph is a set of discrete objects each of which have some relationship with each other so commonly when people think of graphs maybe they may think of something you get in excel you know those pretty diagrams so those are charts so strictly graphs um graph theory it's a branch of mathematics and it's all about discrete objects and how they relate to each other and this comes originally from the seven bridges of colleen's book so konysberg which was in prussia now modern day russia so calling grad so you may remember callum brad calling grad from the recent world cup so originally it was colleensburg and in this uh town of coneysburg they had these you know two landmasses so the mainland either side of this river and a couple of islands so you have you see there on this diagram you had these four land masses and they had seven bridges connecting these land masses together and zombie thought you know what that would pose a really interesting maths question and the question was was it possible to visit all of these land masses so the two parts of the mainland split by the river and the two islands crossing these seven bridges but you had to cross these bridges once and only once and you had to cross every single one and this was posted in a newspaper and famous mathematician leonard euler saw this and thought oh that's interesting and what he did was he said well actually let's take this let's simplify this problem because actually what we're interested in are these four discrete entities these four landmasses and the different ways that they're connected to these these bridges and effectively what he did was he said well let's take those four land masses and we're going to say these are this discrete objects and let's take these seven bridges and we're going to say these are the relationships that are connecting these four bridges and thus graph theory was born and absolutely anything can be a graph so the internet can be a graph and there's lots of different ways if we think about how can the internet be a graph because remember we're thinking about discrete entities and how those discrete entities are connected how are they related to each other so for example if we think about how we're connected on the internet so we can think about different entities so for example i could be a discrete entity alex is a discrete entity we think about how the different ways we communicate those could be the relationships maybe i send a message to alex on slack that would be a type of connection maybe i send an email to alex maybe alex sends me a text message you've got all these different in you know intricacies of how these things are connected the internet could be referring to actual physical components of the internet and we we think about how we connected internet we've got our computers maybe we're using our mobile devices maybe we're using tablets we've got internet i think devices so we've got our smart hubs we've got our smart light bulbs and we think about all of the underlying infrastructure so the fact that we're connected to a wi-fi router we've got cabling that connects to fibre we've got routers we've got servers we've got the bare tin and metal and the wires that connect everything so that is a graph there are many different ways that that can be a graph what about chemistry a water molecule can be a graph so if we think about what water is so water is oxygen and two hydrogen atoms but it's not just a case of well we have these three atoms it's how they are connected that gives you a water molecule so here we look at it and we say well actually we've got an oxygen atom and it has a relationship with two hydrogen atoms so two at two relationships connecting to two hydrogen atoms so it's a water molecule so absolutely anything can be graph anything where you have connections and we we're interested in how discrete entities connected to each other is a graph so okay we've touched on what is a graph we've looked at a couple of examples of graphs so why do we need graphs and if we sort of take a step back and we think about a problem that we might be solving where we may be using technology and i.t to solve something generally problems are best understood with the representation of reality and if we think about how we're representing this reality when we're solving a problem inevitably we are going to draw a diagram we're going to maybe draw some arrows we're going to draw some circles and we're going to provide a representation of this reality and inevitably it's going to be about things connected to other things so if we think about this picture we've got a person here who's drinking a coffee and we wanted to represent that reality we'd have a person we had the coffee and we have that connection between them so they're drinking coffee and explicitly here they're drinking coffee in store but if we dig a little bit further so let's say what we're trying to understand here are the different ways a customer interacts with us in a coffee store so we're going to be looking at what beverages are they purchasing in store we're going to be looking to understand what was that action so did they you know get a takeaway so did they come in get their coffee and take away did they pre-order it so we have many coffee apps now where you can pre-order your beverage and it's ready for you to collect did they drink in store so we think about various things we're looking at here and if we think about the more traditional ways of how we'd be capturing that data and storing it we'd be looking at a relational database we'd probably be doing some kind of normalization to that data and we're going to end up you know with mapping things and this isn't very represented this isn't a a reality that we started off with when we started trying to understand what's going on and if we dig a little bit further what happens is if we've got a very huge amount of data here so we've got like you know a chain of coffee shops all over the place they're probably going to have discrete databases that's storing this data and again we don't stop at these these data sellers we don't go right well that's customer here and that's product here we were trying to connect these different things together and what's really great about working with a graph when we're dealing with connected problems is that it allows us to have a better approximation of reality so we can have these these nodes these um vertices that are able to capture this discrete entities the discrete entity of customer the scrutiny of the product this beverage coffee and we can show how they're connected and that and that allows us when we're working with grass to store that as that representation of reality so this will make more sense when we start to work with some examples and i'm going to give some higher level views of things about why i get excited about graphs and the first example i'm going to work with is trainers and this is following the flow so what happened about this story about when a pair of these trainers this product here so this product here it's a product type of trainers it has a price of 89.99 90 of your chosen currency and what we can see here is we've got three uh notes three person nodes three person vertices and we've got one here first node we've got the name of jane and jane buys these trainers and she buys them at a certain date uh allison and in also by these trainers and what we can see is that these events happen to this so jane first bought the trainers then alison then ian so we can do that by looking at this property on the relationship between the person and the product and i think there's a bit more going on here and let's dig a bit into this and i i think there's a bit of a bit of influence going on here so in this theoretical example let's say i'm going to pull in various social media media data sources so jane bought these trainers and it turns out she was very happy with those trainers so she tweets about them that she loves her trainers and it turns out that alison follows jane on twitter she reads that message and that that's influenced her to buy these trainers anderson's also very happy about the trainers so she posts an update on facebook and my trainers are brilliant ian is friends with alison on facebook ian reads the update buys the trainers he's also very happy with these trainers so he puts uh posts a picture up on instagram of his trainers and so forth and this is a very simple example but you start to see the power of understanding the relationships between these entities because we've got we've got people here we've got a product here and what we can start to see is we can see is there influence going on and we understand potential influence based on behaviors that people have and how they interact with each other another one panama papers a simple model powerful outcome so many of you may recall the panama papers the paradise papers the swiss leagues and so forth and this was done with an underlying graph database and what i'm going to do is i'm going to just quickly talk through the model and don't worry too much we've got a lot of relationships here we've got a lot of entities here i'm going to talk through them but the basic gist of what's going on is this was the data model and we have got separate nodes here but these are some nodes can have more than one label don't worry we're going to touch on the anatomy of a graph database shortly but what i'm trying to highlight here is we've got a very simple model going on here so we've got an officer of a company so you know an officer might be a director they're a significant shareholder so forth we've got an entity so entity can be our company and a company can own another company and so forth and we've got an intermediary so these intermediary companies that may have some kind of management or directorship or ownership and that kind of thing and what you'll see is that they all are connected to an address so we're effectively looking at either an entity that maybe owns a company or as a shareholder of a company or director of a company or an intermediary company and they've got a registered address and why this was so powerful when we think about the panama papers and what happened is because as soon as we know that something is connected so as soon as we know that an entity owns another company or entity is a director of another entity entity is a shareholder of an entity and so forth we put that connection in so we understand that they're connected so we put that connection in and we can also have a look at their address and why this was so powerful i thought i had my other slide in here so the reason why this is so powerful is when we think about who was connected to the panamanian law firm where people are using it to be tax efficient tax avoidance that kind of thing is all we need to do it's like a christmas light we start at the start point which is a prominent politician or a business person and then we just keep going well do you have a connection at some point to uh panama yes you do and this is the beauty of it we get to get to an example of this when we work with the kevin bacon numbers later is that it's very easy for us to see if there is a connection and it doesn't matter how many hops you have to go through it doesn't matter how many entities you have to go through because as soon as we know that two entities are connected we put that connection in and then all we have to do if you think about it like a chris array of christmas lights we just need to follow that line and it doesn't matter how long it is we just follow it until we hear connection next one so if you think about facebook if you think about linkedin and you know when it pops up and goes hey you might know this person and the reason you know that that happens is we can start to infer connections based on the existing connections that we have so if we think about friends of friends so if i'm friends with anne dan zane and jane and bob is friends with anne dan zane and jane we can go well we've got four friends in common so it's probably a really high likelihood that i know bob or if you think about it from a different perspective maybe bob and i should be introduced because we have so many common friends or common connections so you see that as friends and friends it's a great way to spot influences in a network as well and one example that we're going to be looking at later is going to be co-actors of co-actors so this is what we're going to look at in the movie data set so these are really great examples of where we see graphs oh my goodness i've just spotted we've got somebody from las vegas here wow yeah that is that is insomnia okay so let's quickly have a look at some good graph scenarios before we dive in and learn some cipher so i've got four scenarios here to help you quickly spot what a good graph scenario is because not everything is a good good use of the graph database but there's but there are some really compelling ones and i just want to give you some hints and tips to be able to spot them so the first one is does our problem or does our graph challenge involve understanding relationships between entities this is a really obvious one and we had a quick look at one with trainers so we got the idea here that you know lisa buys t-shirt which is a part of a specific t-shirt which is part of a t-shirt category and we've got jane who buys another different type of t-shirt but it's part of a t-shirt category so this is really useful if you want to try and and create recommendations so if lisa also went on to buy a category of type um sunglasses and a category of type shorts and a category of type flip-flops and jane also buys flip-flops and sunglasses maybe we can infer that they're both going on holiday so we can start to create some holiday product recommendations fraud detection if if things are starting to behave in certain ways people are behaving in a certain way if they're sharing the same addresses phone numbers and other details we can start to predict if there's something interesting going on find fraud rings and do something about that finding duplicates so we can use graphs to and graph structures to help rule out duplicate information and data lineage just understanding how our data is being used how it's being transformed and so forth another scenario does the problem involve a lot of self-referencing to the same type of entity so for example um organizational um charts so who manages who so everybody in this example here's an employee but employees manage other employees and this is something that can be really hard to try and query in a tabular database in a relational database this can be hard a lot of these self-referencing joins going on but in a graph database these tree structures are very graphy and they're very easy to query so organizational hierarchy is access management so if you are managing permissions to various documents and files and folders and so forth you know these are really nice ways that you can go around and use these structures access management so social influences so we have touched an example of this where and we think about who's influencing who and we start to look at those connections and the depths of those connections so can we identify who's more influential network than others and friends of friends so we looked at that example can we can we make recommendations about you know who could be friends with who or new connections icebreakers that kind of thing let's look at another scenario does the problem um explore relationships varying or unknown depths so the example here let's say we have three organizations here we've got pencils or us we love stationery and we sell wood so we style stationery buyers pencils from pencils there are so pencils or us are a big producer of pencils and they sell pencils to stationary companies such as we love stationery pencils are manufacturing the pencils so they have to buy some raw products and they buy wood and they buy wood from we sell wood so we sell wood are a are growers and processes of wood which they then send sell on to companies that use wood for their products and resell good buys pens as part of their office function from resale stationery and the point here is we can start to understand different connections here and what are the impacts so for example here if we if we sell wood went out of business then that's going to have a knock-on problem for pencils or us so where are they going to source their product from uh restaurant stationery may have a limit you know may have some sort of unlimited impact from resell woods because they're no longer selling pencil but there may be a bigger problem in the fact that they can't source pencils anymore from pencils or us so this kind of this kind of connections because as soon as we know things are connected if we can explore those connections can be really interesting in things such as supply chain visibility so understanding you know where products are being sourced from what what are the potential disruptions if something or some company goes out of business what's the potential impact if there's a new business that comes in what are the impacts if there are seasonal issues so let's say um for whatever reason if you are dependent on a certain crop so for example cabbages if there's been a very wet summer there's going to be reduction of cabbages so what's the knock-on impact in the supply chain with regards to supermarkets restaurants that kind of thing full of materials same idea if we're trying to understand the components of where different things are being bought and different components put together so you think about a car different wheels you're going to have certain configuration dependencies and the graph is a really great way of being able to manage that and network management so just being able to understand that if a router goes down in a certain part of your network what impacts is that going to have on your applications on your servers on your users and last but not least does our problem involve discovering lots of different routes or paths so this is probably the really classic graph challenge if you think about it so last year as an example so i'm based in london and i went to a conference in edinburgh and on my way up to edinburgh i decided to go up the east coast of the uk so i went from london and the stops on the way were york and newcastle and then on the way back i went down the west coast of the uk so i went past lancaster i went past crew i went past rugby and where graphs could be really powerful is determining the most efficient route across a network and the efficient route across the network could be by cost so is it cheaper to go down one route so maybe the train tickets are cheaper than one route or the other maybe it's my mileage maybe i want to do a weighted shortest path i want to do it by minimizing the number of miles maybe the cost is going to be speed so maybe it's quicker so not relevant here but if i'm driving maybe it's longer to go down a motorway with regards to mods but because i can drive at 70 miles an hour down a motorway whereas on residential roads i can only drive down at 30 miles an hour maybe i want to do the route planning there so great examples of this logistics and routing so routine could be in roads routing could be on networks so you know what's the most efficient way of sending a packet of data down your network infrastructure management so again if you're planning your infrastructure do you need to put in more dependency routes and do you need to put in more parts so again with dependency tracing so if you've only got one realistic route available or something happens how do you manage that so if we talked enough about the identifying scenarios why graphs are powerful why they're useful and graph shape problems let's have a quick look at the anatomy so we've talked a lot about this theory so let's start looking anatomy and let's start looking at some syphon so i've mentioned it a lot i mentioned this word node a lot i've mentioned vertex a couple of times so this is one of the main components of a graph so a node which is what refers to the in neo4j or a vertex in graph theory that is our main entity that's our discrete entity from which graphs are constructed and then we connect these nodes these vertices these entities with a relationship or an edge so they're also known as edges within graph theory and this is the link between two nodes and with property graphs that's what neo4j is it has a direction and it has a type so we can see here we have a relationship between these two entities it has a type of owns and it has a direction which we have shown with the arrow and something to mention here is that you can have nodes without relationships so you can have orphan notes so we could have a j node and jane could be connected to nothing but you can't have a relationship without nodes so we couldn't have that owned relationship floating on its own we have to have two nodes to connect them with okay so i mentioned that neo4j is a label property graph database and what that means is we have labels and labels are a way to define a category for a node so these are optional but in practices you will pretty much use them all the time and they are a super useful way to be able to say what our node is so for example we've got a person node and we have a car node so we can very quickly look at this picture here and we know that we have a person owning a car that's our concept that's our representation of reality as we mentioned before and you can have more than one label on a node so this is really useful if we're trying to look at different viewpoints of our data so we may look at a viewpoint of a person owning a car and that may be relevant if we're thinking about you know information about that car but what if we're looking at this from a assets viewpoint from an insurance viewpoint and you're going to be insuring your television you're going to be insuring your car your your computer and other equipment your bike maybe some jewelry so these are all assets and whilst there may be you know amazing whilst we may be interested to say you know a type of jewellery a type of uh computer from an insurance perspective maybe we want to know that their assets as well their values and another thing we can do is add properties and properties we can add on both nodes and relationships and they're a really great way for us to enrich our notes and relationships to put more information and perspective about them so for example with a person node we probably want to have a property of name and j because we're going to be dealing with person notes or if we look at the car maybe we want to know about the make and model and what we can do as well we can add relate uh properties and relationships so here it makes sense for us to know when did jane start owning that car so we've got a property here since and the value of 2018. so you'll see with properties we always use this key value pair setup and the thing to point out with this setup is we don't need to worry about nulls so maybe for person node we have a property of a twitter handle so maybe james on twitter so we could have twitter handle colon jane one two three maybe we've got another person node of dan maybe dan isn't on twitter we don't have to have the situation of twitter handle colon null we just don't add that property at all so it's super flexible and we don't have these sort of sparse matrices filled with nulls we don't need that in a graph database that is pretty much the anatomy of a graph database pretty good so far so let's start looking at how we'd go about querying it so we use cipher neo4j cipher and that is a pattern matching query language make for graphs and some of you may have come across open cipher so that's one of the projects that we're working on and gql which is again where we're looking to do you know sort of standard graph languages but standard query language for graphs right quick question will the slide that be available yes we can make it available okay so cipher and we'll see why it's a pattern matching query language when we have a go ourselves shortly but it's a declarative language so we we need to ask what we want and cipher will figure out how it's going to respond so what do i mean by that so if i want to know if it's raining outside and i ask my husband i don't need to tell him to you know give him explicit instructions about going outside opening the back door looking up at the sky you know is there water coming out of the sky yes therefore it's raining i i say you know i could say to my husband you know is it raining and then he can choose how he's going to answer that question maybe he's going to choose by going outside and having a look maybe he's going to look out of the window maybe he's going to go and have a look at bbc weather so he's got a number of ways and in this declarative form you know in this example cipher is going to work out how to answer your query for you it's expressive and pattern matching and what do i mean by pattern matching we use sql it's brilliant great fun it's easy to see the patterns so let's do this so if we want to retrieve nodes if we want to retrieve our entities we use this concept of match so match to retrieve nodes and then we return something so let's talk a little bit about what's going on here so we represent notes we're using our ascii art and we represent nodes with round brackets so you can see here playing around brackets represents our notes and here we're putting in a variable a container to catch the result of our match so here i'm calling it n we could have called it anything and then we return something so here we're returning returning our variable of n and what this will do it will match every single node we've got in the database and return n but we might go oh hang in a minute i don't want to return every single node in a database what i want to do is i want to return every single person node in my database so what we do is we're going to use our label so here anything following a colon in a node or in a relationship is going to specify either the node label or the relationship type so here i'm saying match and so here's my container my variable that's going to store the results colon person so match all nodes that have got the person label return n and that's going to return all of my person labelled notes if i go well i actually know i don't want to return every single person node in my database i want to return uh my all my person labeled nodes that have a property of name with tom hanks value okay so what we can do here is we say well we're getting round brackets because of matching nodes match n are variable with the label of person and then we represent property variables with the curly braces and this is same for both relationships and nodes so open the curly brace we've got our key key name here of name colon top hanks at which tom hanks is a string return n and that's going to return all person nodes within our database that have the name of tom hanks so something to mention here is when we do the property name like this with the curly braces and tom hanks this is an inline this is an inline property and this only works with an exact match so what i could do as well i noticed i've changed my variable name so it could it was end previously i've changed it to p now so what i could do is i can say well actually i know in this example i want to do an exact match but i can use the where clause and the where clause allows me to do um non-executive matches so here i'm doing an exact match so a bit like a in sql i use where so here i'm saying where p dot name so if i want to access the property of a node or relationship i use the variable that i'm referring to and i do dot name so we know we've got a property on there property with the key of name so i do dot name equals tom hanks returns p so this is the equivalent query to the one above if i want to return some nodes that are movies and specifically i want to return movies that were released between 1991 and 1999 i can use the where clause now because i have the option to uh to do a range match so there you go i'm matching a movie because i'm interested in those with the movie label let me just move this mass out of the way where m dot release so we're accessing the released property here is greater than 1990 and m.release is less than 2000. so very similar um similar should be recognizable syntax there i return them and that's going to return all of my movie nodes that have a released year property between 1991 and 1999. okay so we've been talking about notes it's now time to extend that pattern that we're looking at so everything to the right of the match is the pattern so we were looking before at patterns where there were just notes we're now going to start returning notes and relationships so if i wanted to find out all of the movie nodes where tom hanks has acted in them then what i would do so we know how to find the tom hanks notes we've done this before so we do our round brackets because those are our notes we have our person label we have uh the property for tom hanks and then what we do is we represent relationships as an arrow so if i didn't if i wanted to know about all of the tom hanks movies uh irrespective of whether he acted or directed them i could just do an arrow so you can see here i could just do hyphen hyphen arrow to movie if i wasn't sure about the direction i could just do hyphen hyphen movie so that's a relationship if we want to specify a relationship type then we use the square brackets so relationship information is represented with square brackets so here we're saying match tom hanks acted in to a movie so movies unload remember so there you go we were back to the brown brackets represent movie we've got our container of variable for movies we've got m and then we're specifying the type here so colon movie and that's going to return movie but we said we wanted the title of the movie so what we do is we turn m.title and that's going to return all of the the values for the property of title if i want to text a bit further and actually what i want to know about are all the movies that tom hanks has directed it and ordered by the latest movie again very similar principles we've done before we've changed it to directed because we want to know about the movies that tom hanks has directed in so that relationship and then we're going to return the movie title we're going to remove the release overturn the released year and we're going to order it by the release g descending so very similar to similar to sql their similar kind of setup and syntax if i wanted to know about all of the characters that tom hanks has worked with then what we can do here is at match we're going to do this so quick question got some questions coming in i'm going to answer these whilst we're doing the the activity so i'm not ignoring your questions i'm just going to wait until we start um doing the exercises and i shall start covering them then so uh hold tight so if we wanted to find all of the co-actors tom hanks has worked with and what we would do is we match uh tom hanks so we know how to do that notice here i don't care about whether tom hanks has acted in that film or directed that film i just want his relationship with movies so here i've got the um hyphen hyphen arrow to our movie note and then we're going back out so i want to know about his co-actors who you know the actors that he's worked with so there we go i then go back movie so i want to know about actors not co-directors or anything like that and then i go to person node so i've now got a variable name of characters and here i return characters.name pretty good so far we're going to have a go at this hands-on so it'll make more sense when you when you do the doing okay so we can create nodes as well and what we do here is we swap match for create and then we use exactly the same syntax before so if we want to create a person node with the name tom hanks we do create if i want to if i want to create a relationship between two existing notes i've got an existing person node of tom hanks i've got an existing movie notes with the title of apollo 13 then i match those two notes so i bring a match and i've got a relationship between those and then i do the create and now i'm creating that relationship of accident between those two existing if i was going you know what i i don't have a person node of tom hanks i don't have a movie node with the title of apollo 13 and i certainly don't have the relationship between them because remember the relationship cannot exist without the notes i could create the entire pattern to remember anything to the right of create anything to the right of match is a pattern i could create the entire pattern in one one single motion and i could do the create person with the property of name tom hanks acted in oh i've missed the curly brace now i'll fix that in the slides later acted in uh movie it's a node of the label of movie title apollo 30. so i could do that in one go right okay i have been talking for way too long and it is now time for all of us to have a go with this we are going to be working with the movie graph we're going to be going through these problems together so if you only get any questions and you get stuck let me know i am keeping an eye and we should go through those so we are going to use the sandbox so you have got links so either sandbox.neo4j.com or neo4j.com sandbox they all work the same they will get you to the same location so what you need to do is if you i would prefer if you do this sandbox because it will get you there straight away so you're going to go to the link i'm going to quickly fire that in the chat do that you're going to sign in and then we're going to select blank sandbox and launch a project so all good so we've got the let me just got the link i think being fired out so let's do so just use that link and we're going to go so we've got a quick question here about updating node property and relationship properties so let's have a go with that whilst we whilst we do the exercises i've not specifically done an example here but it's super easy so we will do an example and we'll update maybe tom hanks's name right so let's let me uh let's do that whilst we go for example so if you go to sandbox neo4j.com if you've not already done it you'll get a little pop-up that says sign in so if you you have some options you can sign in with social media so you can sign in with your google account i believe in your facebook account if you want to be more traditional you can click the other tab to create register in your account and you can supply a password email address and password so you can use that approach as well and once you've locked in so once you've logged in you will be presented with this screen and then we will select a sandbox so i'm going to give you a couple of moments to make sure you've gone on to the sandbox and you are logged in and you've got the same screen as me so whilst we wait for that let's have a quick look at some questions we've got a question here really take us from through from beginner through to advance so this is very much going to be beginner at the moment so this is a very short session there's only so much we can cover in 90 minutes but we do have a huge amount of material and i'll put you to we've got free training we've got webinars we've got all sorts to progress you through that we've got a free certification program as well so we've got a huge amount of material that you can use to help you through this process and we will look at those links as well and what i would suggest as well is we have uh regular twitch um streams as well and for example i've got my colleague laurent who's going through ghosts of building an application with go my colleague will is doing a lot of stuff on grand stack and reacts and building applications with neo4j i do a lot of stuff working with cipher and data wrangling and that kind of thing so we've got a huge amount of content so i'll point you to some of the links at the end if you want to take your graph story further okay so hopefully you are all looking at the same screen as me now so what we're going to do is we're going to click on the new project button and you'll see we have this option here blank sandbox so that's we're going to use but let me just quickly talk you through the other sandbox options so sandbox is completely free and you can have it running from three to ten days and you have options from bringing your own data so you've got blank sandbox or the spreadsheet rather to if you're like well i want to have a play with neo4j but i'm not entirely sure i've got data set i haven't got a project in mind we have a load of pre-built data sets so we've got movies this is a more in-depth recommendation example so that's if you want to do the more experienced stuff network and i.t management you can have a play with that and work with dependencies we've got a subset of the panama papers data set which was released by the icij so you can explore with that uh crime investigation graph data science fraud detection you get the ideas we've got a huge amount of different examples with pre-populated data and a guide that will walk you through those examples so that's something you can have a play with in your own time and you can launch these at different points and relaunch them so you have a lot of good fun with that but what we're going to be working with today is the blank sandbox so if you click on the blank sandbox and click launch projects that will go away and start getting that set up so that will take a few moments so let's have a look at some questions whilst we wait so what have we got so how does graph how is graph database different from an er model diagram of conventional databases so that's a really interesting question because if we think about an entity relationship model that's all about describing how your you know how effectively your tables are related you may include extra information about keys and so forth from that so what i would say regarding that is that's a modeling convention that is being used to describe how you're going to set up your original database traditionally and the argument that i would say is you could theoretically adapt an er model to describe your graph data model but what i would say there is that your graph data model is going to be different from your relational base model so if you normalize it with your mapping table so i think that's sort of a mix of terms so what i would say is er er modeling is a tool it's a way to describe and annotate your data model which is traditionally used for relational data models and what i would say is it theoretically could be used to annotate your graph data model but the takeaway message here is how you go about modeling for graph and how you go about modeling for a relational database is different especially if you're looking at the physical data model itself that's going to be different so hopefully that helps answer that okay i'm going to pick these up as we go along so we've hopefully everybody's got their sandbox now launched so what we're going to do i'm going to quickly talk you through what's going on here before we continue so you'll notice we have this little down arrow here so if i click the down arrow we have a number of options here so i mentioned that the sandbox will last for about three days if you do nothing and you see here it tells you when it's going to expire if you are working on your sandbox you go i need a little bit more time what you can do is you can press this button here and it's going to add another seven days to your sandbox so the maximum life you can have in the sandbox is 10 days so don't panic you can spin up another sandbox afterwards so you're not limited to the number of sandboxes that you can spin up but you are limited to how long they lost so this is very much a play area please don't do anything in there or bring up any data in there that you don't want to uh you know don't want to lose don't don't need processing or at least take a copy of your data before you um you know if you end your play with the sandbox you can invite collaborators to your sandbox and if you're finished with this sandbox you can terminate it what you will find as well here is if i click on connection by drivers so for those of you who are who have a a favored language to work with what you'll find here is instructions to pull the relevant neo4j driver for that language and you will also get a code snippet we which you can copy and it'll handle you know have the what address you need to connect to to get to your sandbox the password which can be very entertaining because these are also generated the name of your neo4j database and a sample query and you know how it's going to return the data from that so that gives you a nice little snippet to get you connected and pull something from the database so that's something you can play with and you can pick which language you want so there you go okay right so what we're going to do now is we're going to jump straight into the sandbox so if i click on open with browser this is going to launch the neo4j browser so we should do that and whilst that is firing up let's have a look at another question how is the performance of high cardinality joining queries in neo4j so that is very much an it depends question so i assume here you're talking about a huge number of relationships off of the node so that is very much it depends so if you've got high cut if you've got um high uh dense snow so if you call them denser nodes if you've got node many many relationships coming off of it so if you've got dents noted dense node to dense node and you're doing queries that traverse through those nodes then you're going to you're going to need to think about refactoring your beta model to handle that if you've got one dense node that you refer to that's then connected by lots of low density nodes then that's not potentially a problem so that's a very much it depends question it's going to depend on your data model it's going to depend on the questions that you're asking and what i would recommend you do is have a look at our modeling training course and it talks about that and ways you can refactor your data model and you know how do you spot those things okay so hopefully we have all got browser up and running and what you'll see here is you will get this welcome screen so i'm not going to go through it but when you go back to sandbox in your own time uh this guide will show you the different components of the sandbox and what they do so i'm just going to close that for now and what you will see i'm just going to close this first one here is what you'll see you'll have this menu here now this will always appear irrespective of how you've launched neo4j browser so i've launched it off the sandbox if you download neo4j desktop and launch browser you will have this option if you use neo4j on out and if you use browser or nifj aura which is our cloud offering and start browser you will have this box irrespective of how you launch neo4j this will always appear and the reason why i love this example that we're all about to do together is it is always available and accessible it doesn't matter how you've launched neo4j you will always have this menu that pops up if you accidentally close it go oops i've closed it that's not a problem i mean if you can't remember the place starts all we need to do is close the browser window open browser again and like a faithful friend as soon as browser launches it will be available and waiting for us so if you accidentally close it not to worry you just it close that frame just just open browse up again look at there you go it is back it is available for us so the example i'm going to be looking at is this one here it says jump into code so if you click on write code you'll have this pane that pops up and we've got this one here that says moviegraph so moviegraph is what we're going to be looking at so let's click on create a graph and this is going to pop up the plate moviegraph so let's talk a little bit about what's going on here so the first thing i recommend that you do is press this pin so that's going to pin that frame in place and it's going to stay at the top of our screen and this play movie graph is what we call a guide it's a browser guide and i i'm going to assume a question might pop up you can create your own one of these but these are guides and what these guides do and you'll find these in every single other sandbox that you look at if you explore some of the other use cases it will give you a set of instructions about what this example is all about what you're going to do and so forth so here we've got the movie guide and it tells us we're going to be inserting some data into graph we're going to be retrieving movies and actors we're going to be doing various queries and we're going to be doing a kevin bacon number as well and what you can do is you can navigate back and forth through the guide using these arrows and you'll notice that sometimes we have these grey boxes and in these grey boxes what that means you can click on it and it's going to send the code up into this part which is the query part of the browser so you don't even have to type much which is in these examples this is great so you can look through the code and experiment a little bit so uh experiments you can see that so that's going on there so let's start diving in you know this is a crash course we're hands-on so let's do this let's expand this so what you can do is you may be sitting again ah this box is really tiny i want to see more if you press the escape key when you're in there it will make the crew window you know big it will maximize it to the size every window if you go i'm done with this press escape key again it'll make it small so let's just expand this and have a quick look at what's going on here so you notice we have lots of creates so if you remember we're going through cypher that means we are going to be creating some data and let's have a quick peek at what's going on here so we have got a create we've got a round bracket so that means we're going to be creating a note ah we've got a colon and movie so we're creating a node with a movie label we've got a variable here called the matrix and if we have a look at what's going on we're creating some properties for this node so we've got a property with the key of title and the value of the matrix the string of the matrix you can use single quotes you can use double quotes that's fine just be consistent so if you start with a single quote end your string with a single quote if you start your a string with a double quote end it with a double quote so we've got title of the matrix we have a released yes that's an integer we've got a tagline welcome to the real world okay so we're creating uh a move a a node label movie we've got some values here and we've given it a variable matrix so we create some more nodes so here we're creating a person node with name and a year of birth and if we go down a little bit further we can see we are then also putting in a relationship between those two nodes so here we're now taking the variable which we know has you know keanu reeves now we've got a variable named matrix here which we know is our movie node and we're then creating a relationship between them so the relation here is the accident so piano acted in the matrix and we're adding some properties as well here to the relationship and here we are adding the role so what role did that person play in the matrix and here we've got neo you some of you may be going well hang in a minute why have we got a square bracket so this is just basically saying we've got a property array so this is going to be an array so rolls property here has an array and this is going to be an array of stuff so it's going to be a bit of strings here because you will find one of our persons in the databases more than one role okay so all of this happens so we're going to create loads of data and create load nodes and create the relationships between them and then at the very end we have this query here and what's going on just quickly explains we've got with so with basically says hey um i created loads of variables and they're going to get forgotten but i need to remember specific ones because i'm going to do something with them so here we say with tom h so tom h if you look further up is when we created a tom hanks node and we gave it an alias a variable of tom h as a so as is now saying well actually i had an alias of tom h but i want to create a new alias of a so with tom as a so remember the tom hanks tom hanks note give it a new alias of a i'm now going to match on to match a which we know is in tom hanks node so acted in so give me um the acted in relationship off of uh tom hanks node in m so we know that it's always person movie person so we can assume that this is our move you know so acted in this node here which we know it's our movie now so we've not given the label but we have a variable here of m and then we want to know the directed in that d so we know here because we know it's a person moving person this here is going to be a person note we don't need to specify the label we can if we want to and that's a conversation for another day directed in d then we turn a and d so we're going to return a which we know is a tom hanks node we're going to return m which we know is going to be the movie note so the the movies that tom hanks has acted in and d where we have we're going to get the director of those movies that tom hanks acted in and then limit 10 just says please just limit to the first 10 responses right let's do this let's run this query so i'm going to make it small again we're going to press the play button and that's going to create some data for us so i'm going to scroll down now i'm going to press this button here so on the frame you see this this uh bottom two arrows this is going to expand it out so if i expand out you can see we've created some data and we've also got an answer to our question which was what are the directors and the movies of the films that tom hanks has acted in so we've got tom hanks we've got all acted in we go to the movies so our movies are in blue and we've got the directors here and what you will spot the sharp eyed amongst you will spot but there's one where tom hanks acted in the movie and he directed it so good so far there we go we now have some data so i'm going to minimize that so if you just press the arrows a little pointed together it'll minimize it and i think it's time for me to be a little bit quiet and time for you to have ghost and query so what i would like you to do is i would now like you to go through each of these queries i'm going to give you about five minutes because we've got we've got about another uh 28 minutes so i'll hang around a bit long so for those of you who've got a bit more time i'm going to answer all the questions that i don't get to during this session uh i'm going to give you some exercises so what i would like you to do now is to go through these give it about five minutes and i would like you to look at each one think try and guess what the query is going to do and then run the query so you've got these these queries so have a think about what's going on and whilst you're working through those i will answer some of your questions so we've got about five minutes let's let's do this okay so got a question here when using label newnode with relation or property edition child for jane yes you could you could create that so as an example there somebody asked that so what you could do is if you wanted to have your person noticed maybe you're using a graph to describe a family tree so maybe you may you may want to um if i've answered your question correctly you want to describe maybe uh specific specific items and then yes you could add additional labels on there so got a question here is there any best practice for modeling relationship directions if both are possible and makes sense for a human perspective so that's a great question address and what i would say about that is again i would again point to the the modeling class and you know maybe i'll run a modeling session on twitch soon as well so keep an eye out for that well i'd say that is you don't really want to do the recursive relationship so i know that in uml cluster diagrams for example if you've got for example let's take jane and the and the car for example so you have jane owns car and then you probably have reflective car owned by jane you don't do that here so that's poor modelling practice you wouldn't have any situation where you could infer what the uh infer what the relationship meant between entities you don't repeat it so an example you've got jane owns car you would have an outbound relationship from jane to carl so we know that jane owns car and the fact that if we looked at carter jane that it's an inbound direction from the relationship of car to j then we know we can infer that because jane owns car we can infer on that existing relationship that that car is owned by james so we did wouldn't put two relationships in there now if we wanted to recognize so let's go back to a simple example of we're looking at insurance maybe car insurance and we wanted to understand not only who owns the car but we want to know who drives the car so let's say we've got jane and we've got dan so jane owns the car jane also drives the car dan drives the car now example we could have more than one relationship between two nodes because the we're now capturing different relationship conditions so jane drives that car we need to know about that for insurance purposes we also need to know who owns that car but that owns relationship is different from that driver's relationship so we saw that with the tom hanks node where we had tom acting in the film and he also directed that film he's got different relationships with that node so we have to capture that so that in that situation we do have more than relationships so hopefully that answers that question what have we got next uh predrag asks what about updating the no property related properties right okay you can do that so we don't have an example of this here but it's pretty simple so let's see how we get on so towards the end we can have a go at doing that but you use it you can use a set clause so if you don't have a property that exists you can do something actually four of them you could do something like a match p person named tom hanks and then we could do set p dot name tom hanks jr and that's how you could update the property and use the same convention for relationships as well and you can use that to set new properties too so it's pretty powerful and let's let's see what else have we got is it possible to create data with bloom as well uh so at the moment not and not yet so you can duplicate relationships and notes but you can't create new data with bloom yet so that's out of the front so one thing you can do which is a bit hacky at the moment is you can do search phrases and within a search phrase you could create data because you're writing cipher but i would hazard against recommending that but that would be an option and let's do one more question before we we continue um what facilities does neo4j have for concurrency control so just a quick thing to mention so neo4j is an acid database which means it does so it's not uh it's not a eventually consistent basis it is an acid database so you have mechanisms in there to deal with um with right so that you don't end up um you know having issues with with writing and and causing issues with your concurrency and you do have strategies for parallel rights if you want to do high speed rights where you hit different parts of the graph so i probably a bit advanced for what covering today but it does it's an acid database which means you don't have the the potential issues with an eventually consistent data source and i would suggest you have a look on our website for further technical details about that right okay so let's let's continue so hopefully you have found that interesting we are now going to start adding some relationships so let's have a bit of fun with that so again i'm going to give you another five minutes so the same deal as before please look at each query try to figure out what that query is going to do and then run it and see if your expectation matches what came out of the results and so same idea so again i'm going to give you about um we're going to give you about five three to five minutes with this so again have a look at the queries try and figure out what's going on and again i'm going to answer a few more questions and then we're going to start doing some really fun stuff so let's answer some more questions whilst you work through those what have we got can you explain the i assume that's the licensing situation with other tools okay so at with neo4j desktop that is a useful developer tool so you can use you get enterprise edition in there but that is for educational evaluation and development purposes so you can't create um you can't use the database you create the fjo desktop for production that kind of thing so i would recommend you go and have a look at the website and the license details around that we do also have if you're a startup we do have a startup program as well we do have an educator license as well if you're looking to teach neo4j in various educational establishments so if you want specific data about that um ping me directly and let's talk about that uh that's a quick look can we combine python or php with neo4j we have an official python driver so that you can use and we've got examples of people using that either in jupiter or your various other flow favorite ides a php there is a community php driver which is unfortunately doesn't is not up-to-date maintained as it used to be but you have got that for the 3.5 point x version of the databases that you can use and you've also got you can use the um http driver and they access it by http let's see what we've got next um getting some questions on restream so let's have a quick peek at those as well um is cipher the only language that we can query the neofj database so um cypher is the main one that we use but we do have a traversal api that you can use as well so that's not cypheresque that's more of um the more sort of implicit talking to the database where you talk about how you're traversing and things like that so what i would suggest you do is if you search for the neo4j java api and that's a different way to talk to database so that's what you're going to use if you're a power user and you really want to specifically talk to the database how you are going to you know how you want it to run queries if you want to be very specific about how it expands knows if you want to go depth first over breadth first and very specific and how it goes i think so yes you do have that fine grade level of control available to you so that's through the uh the um traversal apis if you just search for that on google you can find more information about that okay right let's continue hopefully this is all making sense and you're feeling comfortable with this so what we've done we have matched individual nodes so specific nodes we have been then querying nodes and relationships so we're now starting to query uh person nodes to movie nodes and yep so having a good bit of fun and we're starting to do some detail things here so let's quickly talk about this last query here because we have something that's a bit new and you notice we have this type and what this type function does it's a cipher function and what it tells you is as you may have spotted when you run the query is what is the relationship type so if i just scroll down here oops see daisy you can see here it is returning what is that there so you can see it's there's an active relationship between tom hanks and accident and you find all the information about that relationship so there you go so that's what's going on there so that was a new one okay uh which is a good question is there a way to help with typing the correct node or relationship type so uh rob could you provide a bit more context around that question i don't think i quite understand and let's just quickly see one more question okay so uh marvin asked a really really good question which was the statement match cloud that let me just copy the question and paste it in so everyone can see it so the question here is the statement match cloud atlas returners doesn't make sense to me why wouldn't you have match movie title cloud atlas okay so let's just quickly explain what's going on here so they are both things so what's happening here so both cloudless and movie in this respect are both aliases they are both variables how can i tell that they're variables because i don't see a colon anywhere so i don't see colon movie here i don't see how long movie here you see what i mean so because we don't have that immediately i go and go oh this is an alias so what's happening here is a variable names being picked called cloud atlas because the title of the title of the node so here it's looking at all the nodes and it's looking for nodes that have a title property and a title property that matches cloud atlas here just using a different using a different variable name the variable name here is movie and it's again looking for a node in the same properties so what's going on here because we've not specified a label what the engine will do is we've not specified the labels i'm now going to look at every single node and i'm going to check whether any of these nodes in the entire database has a property of title with the value of cloud atlas now if i take this if i change this query to include the node label of movie what i've basically said to the databases i'm only interested in nodes in the database that have a label of movie and what the database what the and you'll go okay i'm not even going to bother looking at the person though i'm just going to ignore all of those i'm only going to direct my search at nodes with the movie label so it's a movie label and i'm going to do that so the reason why so you can not especially don't need to specify label when you're doing a query that's completely fine but what happens there is it will search the entire database of all of the nodes so if we're working with a really small data set here that's fine it's going to come back pretty quickly if you've got a database of millions and billions of nodes that's going to be a slow query can you imagine if you've got a million nodes and you're not using the label it has to search every single node check its property and see if that property matches by putting the label in the movie i've helped out the engine i've made that query that much faster because it knows it doesn't need to look at any other labels apart from movie so hopefully that makes sense so that's a great question okay let's have a look at the next one so this is this is where the fun starts to this is where it gets exciting we're gonna do some fun so we are now going to have a look at some kevin bacon numbers so i'm going to quickly explain what's going on here because we've got some new stuff coming up so let me explain the new stuff and then i'm going to give you a few minutes again to have a look at these okay so let's have a look so we are doing here so we recognize this stuff so we're matching a person node we're going to give it a variable of bacon and we're interested of the property where name is kevin bacon okay that's good so far we know that we're looking for a node um we're looking for a node some nodes we don't know what it is and we're going to give it a variable name of hollywood that's fine we can do that so we've got some new stuff here going on in the middle and this new stuff here is star 1.4 so let me explain what's going on here so up until now we've just been looking at nodes that are one hop away so literally there's one relationship between two nodes that's what we're looking at what this syntax here is saying well actually i want you to go out up to four hop so from one hop one so that's what we that's what we used to i want you to go up to four traversals out four relationships out and hit those notes so this star so this this context of start one dot dot four says go from one to four hops out and match all of the notes that are up to four hops out from me and then you're going to return them and because we're going four hops out now bearing in mind that we have the pattern of person movie person some you may spot we've got person person but the point being if we do person movie person that's um so that's that's now two hops so we don't know the labels that's why we're not specified label because the label could be movie the label could be person but we want to catch them we know they're notes so we've got hollywood here so that's fine that's what's happening he's gonna match movie and personal notes are up to four hops up from kevin bacon good so far and we're going to return hollywood now the reason why we've got this distinct and this is probably something to have a play in your own time is what you'll see is we have many different parts and we can have lots of recurring parts so we can have um the same result but different paths going through it because you're going to have same co-actors with different co-actors working for the same film and so forth so that's why we've got distinctiveness that's just saying just bring me back the first one of that that happens so that's what's going on there so that's the one so i'll let you have a play with that in a moment and then the next one this is great fun shortest path so shortest path as the name suggests is going to try and find the shortest path between two notes and what's going on here is we're going to match p equals shortest path so this is a function so this new thing here this p equals so p is our variable name and this syntax here when we do match p equals and then our pattern basically says this is a path a path consists of a single node a path can consist of nodes relationship notes so that's what it is and you'll see it when we run it so i'm going to go into too much detail here and we're going to run this on this pattern here so again we've got kevin bacon we've got another node here first node meg ryan and then we've got that star again we've got that syntax we've got our relationship we've got the square bracket and we've got a star and what that says is go for that's any number so star means everything so if we return start we're returning everything if we with star we are carrying everything along with us so star here means everything unlimited and what's going on here is we're saying match every single path between meg ryan and kevin bacon and this is saying find the shortest path now warning just imagine big red triangles of an exclamation mark warning warning warning please do not ever run this star in a relationship unless you're running it within the shortest path and the reason why i say this because you're thinking well hang on a minute we've only got and if i click on this little icon here it's going to give us information about the database you go but lou what are you talking about we've only got 171 those we've only got 123 relationship between those 171 nodes what's the worst that can happen so remember we are looking at every single unique path between relationship and notes but a unique path can have many cross-back traversals so if you think about a film so let's take apollo 13 for example so apollo 13 you've got tom hanks and you've got kevin bacon now tom hanks and kevin bacon have stores have starred in many films together and if you think about it about the different paths that are joining them they're going to crisscross again get across the films that they've acted in together they're going to keep repeat criss-crossing against the same co-actors they've worked with so you're going to end up with potentially millions or billions of different paths between them and this you know and so this is this even with our tiny little data set we could be looking at millions of different parts that connect these two nodes so we have to be very careful about how we use this very powerful function that we have because cipher will let you cipher is cipher will let you do whatever you like cipher's not going to go whoa hang on a minute do you really want to explore potentially millions of paths so i forgot no no you go for it so you have to be very careful so this is okay to use within shortest path for example so be very careful about how you use this so i've given you the warnings i've spoken enough we're running slowly out of time so what i would like you to do here is have a go at running this see what happens have a play change kevin bacon to another name so if you want to get some ideas of different actors names or person names what you can do is if you open up the database icon press person here and what that will do is it will bring you back 25 different person notes there you go you can find the names if you want to swap kevin bacon for um carrie anne moss or joel silva or chelsea thrawn to see what happened go for it have a bit of a play same i'll do it here try changing through different names so again i'm going to give you about five or so minutes to work with this and let me answer some questions whilst you work on that okay so question i've got clarification from rob which was is there a way to help with typing the correct node or relationship name like personal accident so what you should find rob is when you start typing so maybe this is a good one to have a go with with the person nodes if i start just typing my query as soon as i know i open a bracket it's going to suggest a label for me based on what's already in the database so it'll do that so let's say i'm looking for a person and i can continue this query and as soon as i open the square open the square bracket it's going to suggest available relationship types to me okay so let me select this and if i open the back it's going to suggest property names to me so yes you will get that helper available in there how can i make the results near asks how can i make the results return indistinct uh you've got an example that you've got return distinct hollywood if you wanted to return distinct property names you can do the same so you could do hollywood dot name and that's going to return the names of actors and it's going to return nulls for the movies because we don't have a name property on the movies but yeah that's how you do it how can i use a graph database to store history records eg the sales history for a company okay so that's very much going to start moving into a modeling uh discussion and i don't think that's quite the remit of this this session today but i think that that's a great question and what i suggest you do is have a look at our modeling course i'm going to have links for the various trainings and things up at the end of this session also our community community forum is a great place to go as well so if you're looking at different projects or if you've got specific questions about how to do things i would recommend you go and post your question there so that's community.neo4j.com let's answer a couple more before we continue so i hope you're having good fun with the kevin bacon numbers uh have a go at changing kevin bacon to tom hanks you know who who's got who's got a better bacon numbers in our data says is it kevin breaking nothing thanks have a play with that let me have a look at what else has come up so uh question off of um free stream can i contain can i constrain my path search to go through specific nodes search for a way to go from a to x but i know i want to pass through a b c don't care between x reason because okay yes you can you can do that that is that is possible so um again that's probably a little bit more an advanced side for side you do have that option so you've got things so you can use labels so if you if you use a specific label if you're doing your path popping you can so let me pick this example here i mean this would be uh actually i did that i could do this i could do something like this i could say colon acted so if i only cared about the active relationship i don't want to know about directors i could constrain how i expand that path using accidents so i can specify type here also we've got apoc which is a helper tools that give you more uh helps provide more advanced functionality in conjunction with cipher you can tailor patterns within your relationship so there's a lot of power in there that you can do i have a question from fountainhood has ever ever recently really acted in matrix no he hasn't but he's unsurprisingly he likes that film okay right let's see what else have we got do you have a pre-built quality assurance routine to discover any di statistical disclosure control issues within the data i think you're going to need to provide a bit more context around that question nigel ah a question from is it possible to create stored procedures and functions like sql yes yes you can so we've got we call them use defined functions and procedures so uh have a look so what what there's two flavors to this so you can create really tailored really controlled ones uh as uh using something based on the java jvm so in java in scholar and so forth you create a jar you drop it into the database and you can then call it within cipher and another option you have as well is within apocs i mentioned apoc before is if you know the cipher you want to write and then parameterize it and create that into a functional procedure you can do that as well so you've got a couple of options around there um how to drop delete certain relationships or entities yes you can do that we're going to do an example at the end so hold that thoughts um and we will look at that in a bit and how do i limit to get only one option of the shortest path so at the moment you should only get one path so let's just quickly run this query because i think do we get multiple paths okay yes you'll only return in this example here it will only return one path you can you can return more than one paths but that's beyond the scope of the chat today so uh one more question before we continue our journey here so anirba asks can i change the default ball and stick display of the fj to something else how hard is this right so probably something to mention about neo4j browser this is a development aid so this is very much what you have here but you do have options you can use library so you've got for example people go off and implement their own libraries to change how this looks so you have the option two we've got bloom which is beyond the scope of this session but that's our neo4j visualization tool again you can search uh neo4j bloom you'll get a bunch of stuff there i regularly do stuff with neo4j and bloom so if you're curious about that um have a look i think i did if you look on youtube i just monday did a session on working with neo4j bloom so if that's of interest if you look to our developer guide so neo4j.com developer and you look around there we've got a whole section on visualization with neo4j okay so one more question before we continue from marvin which is how come a query like this match bacon person named demi mer et cetera et cetera which distinguished i don't see even the person over there but that's because this is a super tiny data set and i don't think we've got a demi moore node in here so the best thing i would do is if you want to have a play with the different uh actors is i would get a list so let's take this query here so i showed you how to get the person note so you can click on this and it's going to generate some notes if you want to make a bit easier and you want to get l1 people nodes in here and we want to get their names i could do not end up name and i want to sort them alphabetically to make my life even easier i'm just going to do order i n dot name and this will give me a list of all of the persons within the movie database and if i quickly scroll through i don't think about them yet oh we have got to be more notes so so what might be happening in your example here is that demi moore might not have many links so because it's a really tiny data set not everybody's linked in there so it could be happening that our shortest path uh just doesn't have a connection between um may not expand beyond those two notes so let's we can do that quickly together so let's do that uh so what i can do i'm going to do some recycling because you know recycling is good so match p person name anymore i'm going to return that node and what you can do within browser is i've returned them in more node and if i double click on that note it's going to bring it out and i can double click again okay so there are some connections there so i will probably have to look into that korean vibe and i'm not sure what's going on there okay so let's continue because we we have much to cover we're already over time so apologies for those of you who have to drop off please come back to video the video will be available pretty soon at the end of this session so you can catch the last bits again the sandbox is always available so you can come back and and spend a bit more time and at your own pace explore them as you saw it's really easy to get this up and running so let's do the recommendation engine for those of you who have got a bit more time so i'm going to talk through these two queries because they're a little bit exciting uh and i know i'm a bit scary because they've got a lot of text there but don't worry it remember cipher is a pattern matching language so we just step through and see what's going on so these are our two recommendation queries so the first query is going to find co-actors this is where it gets exciting because we have a lot of code being used here so what we're going to do extend the tom hanks co-actors to find coco actors who haven't worked with tom hanks so let's step through the crew and see what's going on so we're going to match a tom hanks note and we're going to find all of the movies that he's acted in and then we're going to find all of the actors that were in the same movie as him i'm going to call them co-actors because they are his co-actors in that movie then what we're going to do is we're going to take and we can do this we can do a comma and continue our match that's what's going on there we're then going to take all of those characters so we're going to match we're going to match all of those co-actors that were in the same movie as tom hanks remember we're then going to find out all of the movies that they have acted in and find their co-actors hence they are tom hanks's coco actors so that that's that's where the cocoa actors are coming in so we're gonna find their co-co-actors now bearing in mind because that's a separate match from our previous one so we've effectively got two matches going on here what might happen is that what makes sense is that this these co-actors coco actors could be could well be tom hanks so what we're doing here is we're saying no we don't want tom hanks to come back as one of the cocoa actors so where not tom acted in actually coco actors and notice here some of you go hang on a minute we've got like round brackets with nothing inside that's okay so because it's round brackets we know that's a node and what we know here is we just because of the data we know that that's going to be a movie node but we're not interested in bringing back any movies we're not interested in any specific properties about the movies so we can just leave it completely empty that's fine that's completely valid so we're not tom acted in we know that's a movie node going out to co-actors and tom is not a coco actor so that's what's basically happening so we're trying to rule out any existing links that link tom to that coco actor based on another movie that they may have done and we're saying make sure that the tom node is not the same as the coco actors note so that's what's happening with those two so that's the not equals for those of you who are curious about the the two the um less than greater than symbol next to each other and then we're going to return return the coco actor's name as recommended so these are recommended new coco actors that tom hanks could work with in a new film that he's not worked with before and we're using that remember that friends of friends pattern we were talking about earliest we're using that as the mechanism to find these new coco actors new co-actors for tom hanks to work with and what we're doing we're doing a little bit further because you don't want to just any order no no no we want to order them by strength so we want to say which ones are probably the better ones you know we're going to list them in preference and how we're listing the preference is this concept strength and this strength is the number of times that that coco actor this new coco actor has worked with tom hanks's previous co-actors and notice we've got that star so remember i said star means everything so in this context count so count is a function it counts stuff for us as the name suggests it's going to count the number of different um sort of common paths between tom hanks and that coco actor via the different existing co-actors that tom hanks has worked with and then we're ordering by strength descending so that's saying from biggest to smallest so that's what that query is doing there and let's have a quick peek at the next one then again i'm going to give you a few minutes to have a go with this so here we've got uh find someone to introduce tom hanks to tom cruise so so this is a different flip side so what we're saying here so we're assuming here that tom hanks and tom cruise we've never met before they don't know each other but what we're doing we're looking at friends of friends so we're looking at common friends between tom hanks and tom cruise and we're going to figure out which one again this strength idea we're gonna try and find out so um which of these because they've got common friends could introduce them two together and the same idea so let's look up so we're looking for our tom hanks note acted in movie acting characters we're finding all of the characters that people have worked with tom hanks before again we're doing our second match queries the same idea we've got our tom cruise note acted in movie accident and we've got our anchor points all of the co-actors that we found here previously we're using them to find um those who have been in the same movie as tom cruise and returning uh with top returning tom hanks returning the movies that um those characters mean the co-actors the people who worked with tom hanks and the movies that they worked with tom cruise so that's what's going on there so i'm going to give you a few minutes once again to look at that and then we are going to start wrapping up so let me look at some of the questions that you have asked whilst you have a go with those and again if you want to change the actors please do have a bit of fun with it so let's have a look at what has come up so we have got a question here does bloom allow visualization such as histogram bar charts etc so bloom is uh is specifically just on visualizing uh nodes of relationships and it's all about effectively query free exploration of your data so i think the best way to to get that is to have a look and i have have a look at my my video from monday so look on youtube.com neo4j and you should should see it as a fairly recent video there we my colleague adam has recently created a new graph app that allows you to create charts so do check that out let me see if i can find a link on that and let me have a look at what we've got up on restream we have is there a way so fountainhook asks is there a way to use the syntax like one to three in the co-actors example at reason if what if you want to go three or four levels deep i find the coco coco co-actors uh that's a great question i think you can do things like that but i guess the questions that be what probably trying to solve so in this example here is we're doing a simple recommendations engine and we're doing our recommendation recommendations based on who's already acted with whom and i think what you're trying to ask is something different so yes you can do what you're trying to do but my question would be that's probably not going to solve the on that's not going to solve the question looking to answer let's have a good look does neo4j have a database procedures and triggers so you can create uh procedures and functions so we talked about that bit earlier so you can either uh write your own so we've got apis for that and then you create a draw and then you can call them within cypher you can use apoc if you've got a cipher-based one uh with regards to triggers yes apoc also provides database triggers so if you search in your favorite search engine neo4j apoc triggers you will get documentation around that uh question from rodney do you have any specific sections to avoid any section to void supernodes and traversals so i think that comes back to modelling and what questions you're looking to answer so super nodes are are only bad in certain situations that are only good in certain situations sometimes you don't have to worry about them sometimes you do that is very much a modeling question and beyond the scope of this session but we are going to look at doing some modelling sessions so keep an eye out for that and do we i think we are we do a session on modeling yes absolutely of course i mean i ad hoc do a lot of modeling sessions on my usual twitch stream on mondays at 4pm utc so definitely historically i've done that and i'm definitely keen to do an ask me anything session on modeling too so keep an eye out for that okay so hopefully you've had a lot of fun with this so let's look at the next section so the next slide and this is all about cleaning up so let me quickly explain what's going on here and then i can dovetail one of the questions that came up about deleting those and relationships so uh this year before you run them let me talk through what's going on so this is going to delete our entire graph so remember we do match n so if you recall at the start that means because we've got no label in there we've just got our variable that's going to match and that's going to match every single node in the database now because there may be relationships connecting them we have to remove those relationships first before we do something with the nodes so here detach means it's going to detach all of the relationships and then delete n as the name suggests is then going to delete everything now we had a question earlier about how we did delete specific relationships or notes you use the delete keyword so for example if i wanted to delete all of the relationships from my let's pick anymore because i've already got that in there so what i could do i could do something like this and i want to delete all of the relationships between demi moore and any note that um remember it's connected to i could do delete and that's going to now delete as you can see here deleted one relationship completed because that's deleted that relationship between demi moore and movie so if i come back to my demi moore node so if i press that hourglass it just refreshes the query we run the query if i double click on every more there are no more relationships now because i've just deleted them if i want to delete say all of my person notes as an example so what i could do is i could do match and person then i could do detach delete and that's going to delete all of my person mode so if i go back into my database i've only got movie notes now you get the ideas there you go so that's a quick uh quick segue into deleting specific relationships and nodes a quick thing to mention as well this works really well if you've got a relatively small database if you've got millions of nodes and millions of relationships you do need to iterate that so that's beyond the scope of this session but that's how you can clear your graph okay i know we have covered a huge amount of content today it's been a while winter don't forget you can come back to this at any time you saw how easy it is to run this example so as a quick reminder if i want to run this session so let me clear my database if i want to come back to this movie graph and spend a bit more time on it so let's say i've closed the browser just go back in launch a blank sandbox open with browser i'll give it a few moments and our good friend the right code guide will be there waiting for us i've got a question how can i delete property keys so you use the remove key keyword so unfortunately i've got gotten rid of my data but you can use remove so remember we did set separate set n.name equals joe blogs you would do remove end.name and that would remove the name property from your specified uh nodal relationship so remember our good friend is there look the plane is there so to get back into the media graph example we click on write codes and then we click on create a graph and there we go we are good to go once again and like that you can step through at your own time test the queries have another go change names have a go to create we didn't do any great examples so try creating your own name note so i could do a create p person p column person open uh curly braces name colon lou and i maybe i could be an i could have accident the matrix so have a go with that in your own time so let's get back to the slides i appreciate we've run a bit over time hopefully you've had great fun with that i will hang around at the end so if you've got any questions just fire them in i'll keep an eye out we can answer those so we'll run a bit longer so how do you keep going so hopefully you're all super excited you're like you know this has been great i want to play more with graph so let's have a look at some content that's available to you so first of all there's a really great database graph database book here so if you want to learn a bit more about modeling why would you use graphs and a bit more um introduction around cypher so it's a little bit dated but it's still a really good book so it's the graph databases book and that's completely free you can download that as a pdf if you'd rather have the physical copy you can go to your favorite online book retailer and order a physical copy there we've also got the graph academy and we've got a huge amount of content there so we've got things like learning cipher graph data modeling administration with neo4j all of it is free content and what you can do as well is you can become a certified neo4j professional so you can get a certificate as well so you have to you have to do the study it's not easy you have to do the study you have to learn the material but you can get a certified neo4j developer certification so you can go do the exam get the certificate so that is available for you as well we also have the neo4j community forum so if you've got questions so if you've got questions like how do i do x if you're not sure how to do something if you're working on a really exciting project and you want to share it with the world are you doing are you doing something open source and you want to get people involved are you building a new community driver anything like that come join us in the community tell us about it ask your questions we are there so you've got some of the links up there and we've got a bunch of other stuff as well so like i said uh me and my colleagues we do regular live twitch streams so you can come come talk to us bring your questions so i'm currently working on the wine data set at the moment that's been great fun so if you want to come and join me in that adventure please do so you can find out more on neo4j.com developer slash online hyphen meetup so you can find out about a lot of the great stuff we're doing there we talked about youtube so a lot of our videos are going up there as well so youtube.com so check out that stuff so oh yes last but not least so this is a little bit dated if you want to learn neo4j with a lot of fun uh we've got some of those so this was a competition that alex and i ran over august so yes i know we are fast approaching christmas it's still valid it's still fun we had four challenges so we had beginner challenges and we had advanced challenges and the beginner challenges we start learning about modelling so you've got hints there you've also got the solutions there you can work through it exploring a museum collection so you go and you start having a play with bloom and looking at pictures solving a murder mystery uh using route planning in central parks you've got some really great stuff there so if you want to have a bit of fun whilst you're working with neo4j i really highly recommend you check out those challenges so that's r.n.j.com forward sun hyphen week one do check that out okay and if you want my contact details so you can find me on twitter so i'm at el lazal uh you've got my email address there so lju neo4j.com and you also got the community forms also community forum's super super useful so thank you very much for joining me i'm going to hang around so i'm going to hang around for the next few minutes so if you've got any questions let me pick up those questions now so we'll wrap up in about five or so minutes thank you very much for joining me sorry we ran a little bit late and have fun don't forget have a go at the sandbox play with the different use cases and join in with the fun okay so let's have a quick look at what's popped up so is this session going to be available yes it is are going to be available on youtube super soon so keep an eye out on youtube you will find it there if you follow if you're on twitter have a look at uh neo4j have a look at me oh alex we'll make sure we retweet the link for that video as well so you can keep an eye out for that is there a truncate equivalent to quickly delete a complete table like in sql uh yes you can you could you can basically delete you can delete you saw the example there i did it with the person though so i if you think of the group so you know we only had 176 person nodes but you can imagine we could have huge number of notes so yes i can delete by label i can delete a bunch of labels i can delete whole relationship type so yes you can do that you've got ways just a flip of changing it yes exactly marvin absolutely so there you go so you've got summer of notes now in in the southern hemisphere so now it's timely so maybe russian northern hemisphere we're probably thinking what summer that was a long time ago yes there you go so there you go for all of our friends in the southern hemisphere now is a good time to check out summer of notes and you can start thinking about your barbecue planning okay so yes we're going to do a session on modeling uh so i think that is that's everything that's what those are all of the questions so i'll keep an eye on the chat we're going to stop the video stream shortly thank you very much everybody for joining i hope you've had fun please do you know tell us about your graph jones i'd love to hear how you're getting along what fun projects you're working on so it doesn't have to be just for work if there's a if there's a fun hobby or something you're working on i'd love to hear about how you using grasp that so thank you so much over to you alex thank you very much lou i can switch on my camera i guess here we go thank you very much um yeah i think we're done um thank you for answering all those questions thank you everybody for joining thank you for for on asking all those those questions i think that makes it all more interactive and more fun um and like you said i mean everything will be available on demand we will share the links later um maybe early next week or later this week and um yeah we hope to see you all soon yes absolutely come join in we've got we've got a bunch of exciting sessions coming up we've got online meetups happening at the moment we've got uh you know certainly playing some really exciting stuff yeah so keep an eye out keep keep watching and come join us we absolutely love it as alex so when you come and interact with us it's great and it's really exciting to see people from different countries came along brilliant i love that yeah perfect all right thank you very much all and uh see you soon okay bye bye 