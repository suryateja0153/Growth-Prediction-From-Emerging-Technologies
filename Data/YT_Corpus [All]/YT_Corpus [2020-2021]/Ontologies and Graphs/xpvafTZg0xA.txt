 okay so good morning everybody assuming you're in the same time zone as me my name is Johnny Cheatham I'm based in New York Jays office in London and I'm just gonna take you through a short tour through neo PJ and Carib with the assumption that you're not yet very familiar with the product that this is one of a series of webinars we do one every week covering various subjects and I hope this will intrigue you and that you'll come back for more so let me start by just saying a little bit about neo PJ the company so near PJ has been around for what nearly fifteen years and we are kind of unusual for a a venture capital backed graph database in that the the guy that wrote the first line of code and m/l Efrain is the CEO today so what that means is that although we have borrowed money from venture capitalists we've always kept our promises and ml has been supported by the by the investors to to keep the company going and that's actually quite unusual so what has he built what have we built so first of all neo PJ is a database so it's a database in the sense that Oracle or MongoDB databases it's a place to store data and to process data but it has some very special characteristics and the first word I'd like to draw your attention to on the slide is the word native so it is a native graph database and what that means is that we control everything about it right down to the storage format on persistent disks so we are we're not sitting on top of somebody else's data storage we've written the whole stack ourselves I'll come to why we did that in a moment but let's just talk about what the thing is it's a high performance it's an acid what acid means is it's transactionally aware so if you if you write something you're sure it's written and it's got the opportunity of rolling back things if you decide to abort a right in the middle so it's a kind of traditional database in that sense but it becomes different from a traditional database they're more like other knows sequel databases in the it's got a very flexible schema and that means it's incredibly good for modeling real world problems without the issues of transformation that you see with some other other platforms now the the next thing to say is it's being developed by engineers for use by engineers so it's a very friendly easily managed easily maintained environment that anybody who's worked in a DevOps environment will feel very at home with the next point is if we talk about hardware efficiency so we've got an example customer which is Adobe who were running an application which they first implemented on Cassandra and that that application required a hundred and thirty servers to deliver the functionality to their user population and they then thought this is ridiculous we can't use a hundred and thirty service but for something as simple as this let's see if we can re-engineer it and they chose another tool they chose to re-engineer it in MongoDB and it took 50 servers to do the same job and they were pleased for a moment and then they thought well this is still costing us far too much why why is it requiring so much hardware they reengineered it in neo4j and it's running today giving better performance on three servers so I'm not saying you'll get that level of efficiency from ever every application but near PJ is a super efficient high-performance database we talk about global scale so we're represented everywhere in the world and we talk about graph adoption and and near PJ I think whatever else you say about it has been very instrumental in getting graphs onto the radar we have a community edition of the product which is extremely popular and very widely used so let me just talk a little about NiO PJ the company so we're just under 300 people now the company was really founded in Sweden and all the engineering is in Sweden or in London but the headquarters now is is are in in in Silicon Valley in San Mateo and that's where the sales leadership are based but it's still run by by sweets so it's got some Swedish characteristics and as I said it's a venture capital back company so most recently we were in we had a big investment from from Morgan Stanley which we think is a significant not just as an investment but from an endorsement from one of the markets that we we attempt to address and if you look you can see that we have been very successful with financial firms and in the ones that are using the acreage a very very often they're using it for multiple uses so there's lots and lots of me every day being used are also drawing attention I don't know who in the audience is is from a software vendor rather than a user but near PJ is used in an OEM context so it's built into lots of other products so products from HP for example products from Ericsson for example have got neo4j built into them and if you look over further if you can see some of the users that are talking that using the APJ today and hopefully you'll recognize those names right over on the right some of the partners and I'll just draw your attention the fact that we're we're available through Google cloud platform Amazon Web Services as you are and other of the the standard web platforms that Pete everybody's using so why why did neo PJ come about well if AJ came about because somebody had a problem organizing a hierarchy it was kind of a product hierarchy they mentally first on a racial database and it was terrible performance and very very difficult to code they then implemented it as a graph model on top of a relational database and that was much easier to code and quite delightful but still gave terrible performance and then they thought well wait a minute this is a problem that everybody's seeing all over the place let's build a tool for the job so that's why they started building the a PJ and at that time there were a few other significant things happening in the world so Google was getting his act together and other big graph based applications like Facebook and Twitter were getting their acts together so the world was moving towards graph and it's really interesting to think of all those huge companies that have changed the the landscape so much who are which are based essentially on the graph technology that we're making available to people who don't want to do as Google did and don't want to write their own database so what we're doing is saying that the secret sauce that made Google a successful company is something's going to be valuable for lots of applications not just for social networks and we're making it available kind of as something you can download and get using very very quickly and and that's driven really by the fact that not only as everybody knows is is data exploding but if you look slightly harder that data or look at in a bit more depth you'll realize that it's the connections between the data that are really really significant so when we all started carrying mobile phones around and using tools like whatsapp it wasn't just that there was another mobile phone for the wats app developers to worry about certainly they had to worry about all the connections that that person had with all the other whatsapp users in their various groups so each individual device is growing a huge rates contributing lots of data but also massive connection issues our or connection opportunities we would say are being are emerging because of the way in which technology is enabling communication in every sense so I'll just give you a moment to look at the networks of people business processes so we see a lot of people who are using it for example for data lineage type of applications but also for fraud detection and things like that we'll talk about those in a bit more detail so from this slide just take away the idea that there are lots of the proliferation of data also leads to a proliferation of connections between data and neo4j is a tool that helps you to deal with that so what weird so we're talking about those connections between data so near PJ is designed for dealing with that connected data so what this slide that you're looking at at the moment shows us is that different databases have got different levels of ability to cope with this challenge so traditional databases or when we talk about traditionally relational databases have got the ability to to do what we call join operations so you can traverse data within the database but realistically you can't do that for very many and if you're writing a high-performance application on a relational database the first thing you learn is don't do joins if you are if you if you're not in such a challenging environment you may use joins but you won't be able to get very far if you want to do if you want to traverse very many and if you think about a telco network or a social network or many of the other networks out there three joins is not very many at all but of course the world's change not just with graph databases but lots of other databases so that the data Lake family of technologies for Duke based but also the document databases and the y-column databases they're all they're all relatively new but they don't actually help with this particular application because the database itself doesn't know about the connection that exists between the elements in it so all of the referral across between elements has to be done at an application level the database doesn't help you at all which means you get poor performance and also your application program is very complicated with a graph database what we're looking at is something that can cope with literally millions of hops between data elements and that's results in some in some fantastic user stories so at the bottom there you'll see one of our users of eBay Armijo suggests our neo cjj neeraj a solution is thousands of times faster and the queries alike require 100 times less code so nepo J is very very efficient and fast it's also very efficient from a code creation point of view so your queries are short concise and easy to maintain so what is a graph database let's just talk about the graph model for a second it couldn't be simpler a graph model consists of nodes so you can see these the person and the car here they're nodes or the two people in the car are nodes nodes connected by relationships so there's the married there's the drives there's the lives with these are relationships and both nodes and relationships can have properties associated with them so you can see the property is like the brand of the car and so on so this model is very very simple what it's basically saying is things connected to things and if you're a data modeler you can't you can't imagine any problem that cannot be easily modeled with a model that supports things connected to things the world itself the real world is made of things connected to things or things related to things and our model allows you to do that so so the difficult exercises of normalization and and trying to map the real world problem onto tables with rows and columns just disappears and all the compromises that the designer has to make in dealing with that they disappeared too so we've got an extremely simple data model it comes with a query language that reflects the data model we call a query language cipher and that makes it extremely simple to query and to get very good results out of the out of the database so how's it working how people using it what works you're doing so there are three classes of application that I'll draw your attention to there's there's the the data journalism or what we call graphs were good what people are doing so for looking at Panama papers for example Panama papers you'll you may remember being a major public a news story in fact the journalists that worked on it won the Pulitzer Prize and it resulted from the best impact of some data which I'll show you in a bit more detail later on which resulted in the resignation of the prime minister's not just of Pakistan and Iceland but the investigation of politicians across the world for defrauding their populace and and we'll talk about a bit about how that happens so also on graphs are good NASA is a big user of make J and it's not it's not us that say this it's NASA that say this but NASA say that the benefits of the data that they've put into the Neo PJ database will put a man on Mars two years sooner than they would otherwise been able to do and I can talk about how that has been achieved but we'll have to do that offline because we haven't got time in today to do that but what not what NASA have done is build a very big database of all the things that have ever gone wrong with any of their missions which is searchable in a way that means that they can anticipate and avoid problems in future planned missions and finally neo4j is very heavily used in in in life sciences and biology molecular biology and genetic biology for modeling genes and phenotypes and for working out the effect of different drugs and different molecules on different diseases that affect different types of people so it's really at the height of personalized medicine and of drug discovery and there are a large number of people doing about using it for that and I'll talk a bit about a diabetes project that is using the same type of approach okay moving on so there there are three big value propositions Fournier PJ the first is real-time transactions so neo PJ as I say there's an acid database it's a high-performance database that's often used behind complex applications which you've got thousands or millions of end users and it's got to give lightning response to queries so the problems where you see this are real-time fraud detection real-time recommendations i OT to have applications and so on so that's using neo PJ as a as a real time a transaction orientated database but it's also an analytic database so it's used for things like customer 360 and single customer view it's used for as we said with NASA and knowledge graphs but also for data lineage and other data analytic type of problems so there are a number of use cases where people are using the FPGA for making sense of the data that they've in that they've moved to their data lake so that they can begin to leverage the investment in Hadoop and and finally for business process and some of these are also real-time so maybe not so identity access management is a big one where you need to very quickly when somebody logs on be able to work out what resources they're allowed to access network management is is clearly a graph type of problem so people are using it some of the biggest telecom telcos and Teleco equipment manufacturers are using the echo j4 service assurance for capacity planning for inventory management and things like that and and similarly if you think of a supply chain of supply chain ease is a linked graph and neeraj a allows you to do analytics there are a number of people doing carbon budgeting and a supply chain reporting for ethical compliance using the a PJ nephew Jase gathered a fair amount of attention so I won't read this slide in detail but if you look at the Bloor report at the bottom because we've been around awhile and because we've got the most momentum of all the graph providers Laura able to say that we're the Oracle the sequel server of the graph database world well I talked to lots of people who wouldn't like us to be the Oracle we don't behave like Oracle but we are certainly the kind of the the solid choice I think the the quote from William Blair which is financial analyst is interesting as well but of all the no sequel models the graph is the one that offers the most distinct value and therefore is the one that's most likely to survive and prevail so and just at the top from Forrester the FE J dominates the graph market so let's just talk about the graph platform what is it so if you look in the center you see the blue disk that's the database itself but it has two aspects as we've talked about before so it's got a transactional view if you're looking to the left the blob you see graph transactions and that's usually sitting behind api's and drivers with your end-user applications and you is hitting it to provide a kind of OLTP type of service but on the other side we can see graph analytics so that's got graph algorithms and data scientists and people who are trying to explore data so the use cases with this and maybe forensic investigations forensic accounting or forensic policing or also data analysis that so we've talked about data lineage and those sort of problems where people need to explore the graph manually and we've got tools to do that so we've got visualization and discovery tools for helping that and we've also got a lot of analytics tooling for automatically detecting patterns in graphs okay so that's basically what we're looking at and just to position it against some of the other databases you may be aware that relational databases use the concept of data normalization so trying to separate out different concepts and store them in different tables so that the data related to different concepts in different tables and that's a very clean way of modeling but often gets compromised in implementation where you denormalized in fact the people the reason people do that is to avoid joint operations and then it gets closer to no sequel databases which basically aggregate based they're just storing lumps of data with different levels of access and different levels of fine fine granularity but the FPGA is completely different the Epogen is super normalized there's no there's never any need to repeat anything in the air for J it's all each data item is stored individually with no repetition no null values and the relationships between us between the concepts is very cleanly represented so it gives you a very clean model with very high performance and very efficient so where do we find it being used well people do just load up data from relational databases if they get they find that their queries are running too slowly and they can't necessarily do the queries they want in reasonable time people will often load data where you're where you've got recursive queries or multiple multiple joins just load the beta engineer 2j for answering those specific queries and then what we find is that people start doing more and more of the work in there for J so that's a perfectly legitimate use case and we see that not just from traditional tools but also from spark and other tools where the which are designed correct analytics but the basic view is tabular and sometimes you want to have a graph view of the tabular data so that's a very common use case and that's often included in a larger version of that where you're actually looking at days at neo PJ as an integration layer either either copying the data also into the graph that's very common or just holding pointers into the source systems within the graph so the graph holds a kind of dictionary for helping you to access stuff in in the lower level that's common use case as well and finally and I've mentioned this before it's providing a way of helping you to get value out of your data Lake so I mentioned before using neeraj as a dictionary in today's lakes but also where your data Lake has got too much latency and you need to start doing real-time operations against it the FJ is a great way of finding the patterns and then building a almost a cache or doing real-time transaction serving I mentioned if you remember the picture of the the overall schematic of the system there was the analytics area on the Left we're very proud we just published a book which has had an extremely high rate of downloads you can get it for free on our website graph algorithms by Mark Needham and Amy Uggla and that's these are server-side algorithms that you can run against near PJ or against Patty sparkle or in combination and if you look at the the main part of the slide there are 35 algorithms that are grouped into complex weighted path finding centrality so things like PageRank and other centrality algorithms community detection so if you're looking at a large number of transactions you might be able to buy that by analyzing the way the transactions are linked to each other and to other data items you might be able to detect that actually within your community you've got different demographics you might have males and females you might have people of different ages or different interest groups and by being able to analyze the connections between the data we can propose the the separate communities that will help you understand your the population you'll deal with better link prediction so that's something that's very common in in sort of crime-fighting and things where that you've got two people we've got something in common perhaps they've got a crime in common or perhaps there they've got some other relationship and you can predict that these two people although they're not previously really linked should be linked together so and because we've got the if you remember back to the model picture we've got properties that we can store in relationships we can store for example a confidence level along with a link prediction so we might be able to say that somebody is 90% certain to know somebody else for example and then similarity so it mentions they're looking at similarities between nodes even more interesting is similarity between paths so if you're looking at analyzing paths across a website that you can train the database to recognize which paths lead to happy outcomes and which lat paths lead to the no basket abandonment or other unhappy outcomes and then see what their characteristics of the of the two types of paths have and see if you can do something to increase the the number of people with that with the happy outcome this is just drawing a change to the fact that we've got an end user visualization tool near 4j when you download it comes with a browser-based visualization so you can download the community version the FJ and get going immediately with a with it with a browser-based visualization but that's really design for developers who will feel happy to to learn the neo4j query language this cycle language I've mentioned we've got another product which is called neo PJ bloom which is designed for end users who don't want to invest the time in learning the a PJ but do want to get straight in and start exploring the data and running the algorithms and and using the FJ as end users so this has got a kind of natural language interface which means that you can you can make a lot of progress very quickly okay so let's talk about how people are using a PJ so the main use cases so this is this is more of a heat map there's a lot of cross-pollination between these these use groups and there are a number that that aren't on here so real time recommendations we've talked about and you know if you're if you're a if you're operating a big retail website for example the value of getting the right recommendations on to a webpage that's in front of somebody's eyeballs cannot be underestimated if you can increase just by a small percentage the amount of the chance that somebody will act on a recommendation then you you you the value to use is immense and it's your only chance to get to sell something to somebody other than the thing they came to your website for in the first time so it really nuts the basket value and that that the the science behind that is is as you can imagine very complex and very very suited to to a graph fraud detection is another great example so I just talked about in more detail but just for the moment if you're trying to defraud somebody and you can just be brave and try and get a million pounds out of somebody's bank account but most banks and other services have got wise to the somebody knocking on the front door and trying to or trying to break in through the front door steal things so they've got basic checks now the the criminals in order to get around those basic checks decide that since it there's a point at which a fraud is to low value to be worth pursuing so they try to do frauds that are too low value to be detected by the basic detection the trouble with that is course is that if you're if you're a fraud ster you don't make very much money out of these low value frauds and it's not going to pay for your yacht so you then need to start paying well okay I'm gonna have to do this at massive scale and it doing you that massive scale inevitably involves building some connections so you might be thinking about fake identities but those often need to have some real identity so there was a case in the news recently in the UK of a house which had over a thousand people apparently living in it because it was being used by fraudsters as a as a false address and actually that's a very good example because that's exactly the sort of thing that you can detect using a craft because that means there's a pattern between transactions that apparently are unrelated so all these low value transactions that are going under the radar of the normal detection they're leaving a trail and that trail is a graph and the foj can help you to take that so I won't talk through the rest of these examples and a lot of detail but we haven't got very much time but Marc master data management is a good one that that's where you've got multiple products multiple channels multiple multiple offerings and you need to form a single view of your customer or alternatively where you've got a complex product hierarchies and you want to have a uniform product hierarchy and if we have time we'll talk about eBay and using the everyday in that way the knowledge graph is a great example and behind that we probably place most of the the very large life sciences examples so we'll talk a little bit about those going on and identity access management we've talked about so these are some of the people who are using neo4j for these types of use cases it's our cannot familiar with it is that it's the biggest bank in in Brazil so I said I'd come back to the Panama papers so this was as I said it's a Pulitzer Prize winning effort it resulted in some pretty big real world news stories a scandal around the Messi the footballer but even more significantly big political scandals in a number of countries and so the way these people what were ham was a disc was stolen and that contained all sorts of things so it contained fragments of databases log files bank statements emails PDFs all sorts of things and that left the journalists scratching their heads to say well I'm sure this is valuable but what's it telling me so they used some scanning software and they started to identify looking for names and from names they were then because of the nature of the data able to identify bank accounts and banks but then they were also able to start looking at street addresses and that's gate began to give them some clues as to who else was there so in this case the the the the story of the prime minister of iceland prime mission of iceland was at the time of the great financial crisis in the late 2000s iceland said have a disk distressed asset holding company and he knew which of the distressed assets were very distressed in which ones are less distress but he knew he couldn't act on that because it would be it would compromise his job however he made the mistake of telling his wife about it and he became clear that his wife who lived at the same address had a different name but lived at the same address could be linked to him by the neo4j database and that gave them the clue that they needed so she had a holding that was was investing in this distressed asset company so that was the way that that fraud unfolded and there are similar examples all over the place so this is you know near PJ is is doing a little bit of magic and creating relationships between things that you didn't necessarily know we're related so sorry I skipped on so we built the data model from that so you can see in the database the model these colored blobs are very like those real world entities and we've got the nodes and relationships that that we described before so this is an example of the the physical model being exactly the same as the conceptual the business model so that's that's a huge advantage for anybody who's trying to explain the system to a business person or trying to maintain it or try to maintain some sort of the fidelity between the business problem and that on the day and the technical solution so we're running out of time but let's just look at some other use cases rather quickly so we've talked about real time recommendations and this is Walmart so the the point I like there is that it's that these are complex transactions 22 hops in some cases they're extraordinarily fast so very low numbers of milliseconds which is fast when you consider the number of number of transactions 35 million a day maybe and as a result of this because because IBM WebSphere e-commerce server was unable to do these real-time recommendations in this case the company's target and another big-box retailer in the US are using a DJ for their recommendations Mariotti using the APJ also replacing a big very expensive Oracle database to do real-time room pricing so this is a sort of room pricing that when when Madonna announces that she's doing a tour or when some real-world event happens a flood or a strike or something that the number of people visiting a city you need to be pretty fast to get your pricing right or you could miss some revenue or you could be left with a lot of unsold rooms so there's a lot of effort and thought goes into this sort of pricing and it turns out that a graph structured algorithm is the best way to do it and finally we talked about DHL so this is impacting Germany where near PJ is used for routing all of the parcels and so this is a very real-time application routing all the all the parcels that are shipped around the country and by airports around the world and this is dynamic as motorways snarl up or airports get put out of action or flights get canceled real-time routing of very very large numbers of packages just the last few slides now we're just talking about a couple of detailed use cases so this is a internet of things use case so xfinity from comcast is there intelligent home hub which is carrying also as a data so it's not just your internet and voice over T over IP but also cable and maybe home security and video and and your nest implementation and so on so all of this gets implemented it gets stored in a year PJ database which gives content recommendations and helps Xfinity to understand its customers better or Comcast or understand its customers better and to get them a better service next we'll look at something from the financial world the the Thomson Reuters knowledge graph I think it's now called Roof Inn ative which is very interesting so what they're doing is providing a service to investors which helps investors to understand the supply chain of the companies that they're investing in so if you have a news event so this is scanning news stories and creating a knowledge graph based on the news stories you have a news event that affects a company you you and all your other competitors in other investment companies we'll get that new story at the same moment more or less but the person that understands the implications of that news story in terms of what it means for the competitors of the firm or for the suppliers or the firm or for the customers of the firm will be the ones that are ahead and that's what Thomson Reuters have macked in this knowledge graph so it's kind of an impact analysis use case which allows you to understand the way in which a news story might affect your investments we're going to talk about the eBay shop bot so this is something that's been running for a while first on Amazon but now sorry first on Facebook but now on for their Google ecommerce so near PJ is providing a tool for natural language understanding and if you think about a sentence in any language that sentence has got a subject and a predicate it's got potentially adjectives and all sorts of things as part of a predicate so that is a structured thing and in fact it's very commonly modeled as a graph so any mpj can help you to structure and understand input sentences whether it's text or voice or whatever and they're secondly there's a knowledge graph so we're not only helping them again with the understanding but also with finding products in their catalogue that match the requests and that there's a very nice video if you want to spend some time on our website showing how how obey are using neo4j to improve searches so I think this is finally this is another fantastic story this is a cooperation between a lot of research centers in Germany who are using neo4j to pull together information from from dozens in fact over 50 databases all across Europe helping to form a more and more complete picture of the different forms of diabetes and the way in which they react to medicines and different therapies so that that's a great story and again there's a very good video on our website that we're and the the scientists who put this together talk about the the reasons they've done it and why neo4j has made it possible to do things that they they couldn't do with their previous graph implementation ok that is the end of the presentation so so most of the time allotted but we've got a few minutes left for questions if anybody's got any questions 