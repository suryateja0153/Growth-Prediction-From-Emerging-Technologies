 I started using neo4j back in 2013 and I've kind of a bunch of the conference's since then it's really cool to see the growth and see how many more people are attending these now and it's it's really cool to see so my name is David and I'm a software engineer at Adobe and I'm still kind of sad from the results of the of the worst out of format from this this morning so my kind of goal now it wasn't originally I kind of to win back the audience so I'm gonna I'm gonna try to do that so I I work for a part of Adobe called behance and I'm gonna tell what that is in a minute but I was responsible me and a team that I worked with for bringing neo4j into B Henson Adobe as a whole and I'm gonna talk about our our introduction of neo4j to our tech stack to production to user facing features and then kind of talk about what life after initial implementation has been and how I feel how I feel it's really helped us in terms of innovation and in terms of really opening our product to to a new level and so I was looking at kind of my title last night a new wave of innovation I was thinking it's it's a bit loaded because innovation is kind of relative I think to to what you're working on so I've come to the realization and there was great talks this morning there's gonna be great talks later that you this isn't gonna be the coolest use case that you see there's some really cool ones but what I think the value I could provide is talk about kind of the framework we've used to innovate on our product and and show how it directly impacts our users and their and their lives and their experiences on Behance and I'm gonna show a bunch of features that we build on top of neo4j at any point you could pull out your phone you could pull out your laptop and you could go use it and you can hit our neo4j database just like our millions of users do so I also encourage people to do that it's kind of drives home the point so this is a little bit what is what is B hence we are a social network for creative people to post post photography work graphic design really any visual kind of content we have over 10 million members we have millions of visitors each day and we operate it at a really big scale we're kind of the de facto visual social network and and we kind of feed back into the Adobe ecosystem by showing when people post work what kind of visual tools they they used to create it also one thing I forgot to say on my opening slide is if anything I show isn't likely and you have questions you could just put your hand up and I kind of like to do questions when the content is on the screen or if it's not clear so feel free to do that and I'll try to spot you yeah so that's kind of that's kind of what we do and you know we operate at that at the big scale we're also kind of getting into learning so teaching people how to use Adobe products we have ways to do that yeah and that's that's kind of what we are so back in 2018 is when we brought neo4j in to be hands OB and this was our initial use case and sorry I'm using a laser pointer I can't hit both screens but there's a few things I'm going to need it for so this is our initial activity feed and what this is this simply lets users follow these things we have called curated categories which are categories of content that are curated by our professional curation team you could also follow other users so when they create a project it shows up in your Activity Feed and you could also follow some other stuff one of them is I'll called mood boards which is actually a group of content that's curated by specific users so they can make their own mood boards and they add they add content to it so back in 2018 this was fully powered by Cassandra and the use case where we kind of decided to bring neo4j in is uh is our Cassandra architecture was kind of faltering for this use case and I've kind of discussed this in previous talks and discusses a lot but I'm just gonna quickly highlight kind of how this came to be so our our Cassandra architecture was using a strategy called a fan-out strategy for the Activity Feed so it means for every activity feed item for every user we had to have a row in Cassandra and this would be kind of similar for any relational database in MySQL you you would probably structure is that exactly the same so it's not to say this was a Cassandra issue this was a data modeling issue which is kind of important to to drive home so what did our actual Cassandra architecture looked like this this is what was powering that Activity Feed 48 Cassandra instances very high-powered machines around 50 terabytes of data so what do those are neo4j system look like this is what's powering that Activity Feed right now it's also powering about five new features and it contains about 10 times the type of data that our Cassandra architecture did and this is in production operating at scale so basically kind of going back to what I talked about a lot of the bloat there was due to the the actual fan-out model that we used we cut our data store when we switch to neo4j from 50 terabytes to 50 gigabytes lots of cost savings on infrastructure obviously when we did this our user facing features became even more compelling because we had this new data with the we could easily surface easily manage we didn't need big back fills like we did in Cassandra for instance when a user signed up we would have to populate their Activity Feed on the fly we didn't have to do that anymore we could just connect that connect them to the data that was already in neo4j so it was really easy to do that basically this is going to be the crux of my talk the model that we had was very rigid and the neo4j model is flexible and what I've kind of come to realize is that has allowed us to innovate after initial implementation this was a big success but it wasn't clear for us what the next steps were we had neo4j running we had it we had this Activity Feed running how it was before so we kind of wanted to see really where we could take it so shortly after our actual launch we derived this new feature from our product team and it seems pretty simple and it really is it's a different view of activity it's projects just from people you follow so it eliminates all the other content I talked about on the feed because this is a piece of content that we really wanted to show people so we kind of built this little section right after and this is something that was super simple in neo4j but we couldn't actually do when we had Cassandra we couldn't query the data to produce this view and this is something we were able to do in about a week in neo4j and bring it to users so this was really cool for us an immediate kind of win-win from it so so what's looking kind of how neo4j a graph made that possible so you have a basic model as you kind of probably would have expected where a user could follow various entities that I talked about before so you have these curated categories which are like motion photography and tons of other categories they can follow other users and they can follow these entities called mood boards so if we want to surf this just content from from other users all we have to do is pick out this branch of the rule follows relationship and we could easily produce that view without adding any additional data or needing to scale anything out so let's look at kind of what the cipher queries might look like yeah so just let you look at this for a second this is a kind of simplified we we have a bit more complicated model but you could see here if I just want to get the general Activity Feed I just look where they follow anything and where that did in action on a project but then if I just want to where they look at other users stuff all I have to do is hone endless on this label user here and I could produce that brand new of you so this was kind of the very first super simple example of how we were able to add a new feature this isn't too compelling but our users like this this is it gives people's work more exposure to people who want to see it and this was an important addition so cyber's flexible most people probably knew that but but what how does that relate to product and what and why is that important first of all it's not just flexible we've proven that it's flexible at scale in production as have a lot of other customers so being flexible is one thing where you could kind of experiment and play around with it but we take that with very few changes or no changes and show it to our users at a high scale so that's been really cool it it's encouraged innovation because product realizes that we have this data that's already available in neo4j that we don't have to run a long process to to kind of migrate or you know figure out how to get it into and usable yes so when we were using Cassandra we had basically no Activity Feed or improvements in that area of the site for about a year and this kind of leads me to the point to this last point here and it's kind of a question do rigid data structures create a mindset and lay culture of not innovating and I really think they do because what happened with us in this case is we were just trying to keep our system running we were just trying to keep our Cassandra cluster functional and we kind of lost the ability for product to say this is something we want to build on top of it this is something we want to give to users and that's kind of how I you know came up with this that this has really helped us so now I'm gonna get into think one of the cooler cooler features we built on top pretty recently so this is back in 2018 we introduced this thing called work-in-progress it's similar to features on other platforms where you could post ephemeral content which is content that only lasts a certain amount of time so this content will appear disappear within 24 hours what you do is you post projects that you might not feel comfortable having last forever mainly because the quality might be lower so creative people don't want to kind of share work that that isn't isn't finished so the idea with this strip up here on our homepage is that you will it'll go away and you can see you can follow other users we also have categories that show up here that that might be interesting but just show quickly it's it's a cross-platform experience so this is this is mobile you can see here this is one of the kind of cooler parts about it you're able to give feedback to the person who created the work-in-progress and you're able to react to it and tell them tell them how you how you feel about it and we found that creators really lights out getting that on their projects also I got to say before just to be clear this part yet is not a neo4j this is a feature we we just built so what kind of happened here is we launched this feature and products like we have a lot of these floating around how do we drive more of these to users who might not see them so what they wanted to do was build a recommendation algorithm to to show works in progress to people who we think would be interested in that kind of work in progress so there was a number of challenges in in that process that I just want to highlight and the main one being for those who have done pipelines before for machine learning recommendations is building an entire pipeline for a content that's only there for 24 hours is problematic because you might come back we you have to build a model you have to have the model update and then you might come back to the user with works and progress that are gone which is kind of useless so that was one of the one of the problems that we had with that approach we had used spark in the past to do a recommendation pipeline for our actual projects which is I'll get into in a second but here that wasn't going to work we needed something that was near real-time so this seemed like a really good use case to build on top of neo4j and kind of take advantage of the data we already had so for this project we were working with an Adobe remote research team that had actually built our other spark pipeline for recommended projects and they did really good on that project but for this one they were a little hesitant to use neo4j that were heavy algorithm people they had never used neo4j before and we wanted you know produce something good so they were a little they were a little worried so how do we kind of execute this what we decided to use neo4j for this for this process we were able to use a lot of the data we already had since cypher is intuitive this team who would pretty much just done Python when accessing spark they were able to pick up on it really quickly one of my favorite parts about this is in the end they wrote a 61 line cipher query to power our web recommendations and one of the coolest things there I think is it runs on demand so you could download our app you could log in and you will see our whip recommendations powered by neo4j and this is something we couldn't really do we couldn't even think about doing with our with our old model in Cassandra or in an 8 - anything else yeah so just to show what what this kind of looks like you can see in this strip now we have this recommended section and then on the actual website you have the recommended part and this shows up really forward in the feed and you'll see why in a second we've kind of bumped this to the front and it shows all works and progress that we think you would be interested in I'm not going to get too into the algorithm but it uses kind of some collaborative filtering and it uses your tastes based on other projects you've liked and the creative fields that those fall into we have kind of different categories like photography motion that users can set on their projects and then we only look at the pool of works in progress that are currently available so you're not getting stale work so that's you can see it's on mobile too right there right here on the front of what we show works in progress and part of the thing that I really want to drive home with this is sure this this seems cool but how do we know this made our users life better we're very into metrics so I kind of showed earlier about whip reactions for users that had access to whip recommendations we saw a 20% increase in the amount of reactions they gave on work and it works in progress so that was a huge bump in one of the main metrics that we use to measure the success of this feature so it told us that we were able to use neo4j and kind of bring this this recommended content to users and they were they were loving it they were seeing more content they wanted to see and and it was real it was really good for a future that we worked very very hard on so we were happy about that so just a quick kind of summary of this actual feature they built this algorithm with no neo4j experience we were able to do rapid prototyping along the way which is something that I really liked about neo4j and it was it's kind of been discussed in like the previous talk you could build proof of concepts really quickly and that's definitely something that I have I picked it picked up on to the key here is no pipeline these are all generated on demand so it's it's much more much more efficient we saw our metric rise and kind of oppose here's something that I've learned when taking advantage of our graph is the most complex algorithm and pipeline might not always be the best solution if we'd built a full pipeline to figure out a way to do it we could have potentially gotten slightly better recommendations probably but we wouldn't have been able to iterate quickly we wouldn't have been able to bring it to users within about a month or two and we wouldn't have been able to show progress as the research team was working on it so this was really critical to making it successful so kind of going back to the point of this having the graph available gave our product team and gave our team the ability to actually create this this feature ultimately easily so going back to our main experience so this is what it looks like back in 2018 we kind of started building on top of this more with with neo4j and some other stuff and I mentioned so this is recommended projects and this is also built by our research team and this is the one that uses a spark pipeline to get in here so this is actual projects not works in progress and then down here you'll see we have this that little little section new projects where people you follow then we also added this which is just content from galleries you follow and this this started to become really fragmented we were adding all these little views of the dado because now we could so it was it was kind of cool but part of the problem was we started getting all these different sections and a really kind of fragmented experience Minh that regard so the the thought from product was what if we put it all together into into one kind of integrated feed where we called it like a smart feed where we would be able to strategically decide how much content shows up for each each type of following relationship we have so yeah so the so this was something we wanted to do for us in the past any large scale like data view change would kind of be avoided at all costs by product because they knew it took a ton of time it required migrations it required a lot of load testing it generally required more database power so a lot of there were a lot of dependencies there used to be to doing a massive change like this for our main user experience logged in but now based on the other kind of features we had we had built there was there was this feeling that we that we could deliver this based on the graph and based on the ease of implementation we've had with the other improvements we made so what we wanted here was a consistently scrollable kind of API with all three of those types in it and we wanted it to be cross-platform so we were going to use it on web we were going to use it on mobile and the idea is we'd be able to tweak that feed in one place and show results everywhere so kind of where this went is how we would we would use neo4j to kind of execute this with with our with our data model and the main goal here was we wanted to show more of those newly published projects or people you follow because that's kind of the the bread and butter seeing seeing projects from people that you want and a lot of them and the other experience that became really fragment and they were getting missed we also we also wanted the ability to iterate really quickly so we wanted a tweak slight prioritization of content and we thought neo4j would allow us to to really do that and then future flexibility I'll talk about this in a minute but we want to be able to this is our main experience this is this is our biggest logged in page so we want to be able to really take this to the next level in the future and we thought that it would give it to us and kind of like I said before the data already in neo4j so most of it was so not very difficult and then kind of cypher really gives you the ability as you've seen in previous presentations to really write queries in the way that you want to you want to write them and be able to really make it algorithmic with with the query language which is which is what I love about it so as it might be expected performance is extremely important on this page it's our home page for logged in users so it needs to load really quickly and caching it is really really hard because the data changes a lot we want it to be able to change a lot because we want when people come on the site to see fresh content so that was one of the requirements I don't think it's oh sorry yeah so this is kind of what it what it turned out as our integrative fate experience this is the actual page you see if you if you go on right now this is our up to date kind of experience so here we have newly published projects from people you follow and everything is kind of integrated so if you go here we have a project from a mood board I follow we have a project from someone I someone I appreciate and then we also have a recommended project so those are mixed in there too we don't derive the recommendations with neo4j but we're using it to to display it and to figure out kind of how to page through this this infinitely scrollable content feed so this same kind of like I said before across platform experience on mobile you have new you have featured you have your recommendations new project so this kind of like the WIPP recommendations project allowed us to kind of find a lot of success in the actual optimizations we were doing with this experience one of the things that's important here is not just that we saw this increase is 10 percent overall increase in projects viewed and we saw a 240 percent increase in views of new projects from people you follow which is exactly what we wanted but these numbers did not come right away which is the important thing to kind of realize here we had to iterate on the actual algorithm and change how we were prioritizing things how we were grouping them together and that was really effective to do with cipher queries as opposed to some kind of pipeline or something that would be really rigid and hard to modify so that was important for this this project so just a quick summary of this project success through experimentation like I just said we were able to try different things with this feed product was able to suggest different things they wanted to do and we were able to really quickly execute it this is core to our business the actual percent of projects viewed on this homepage is really really hard to move for us that's like our key metric onic and this allowed us to to do that I most of us believe that this would have been nearly impossible with our old system dividing it into such a kind of complex view that we use in the speed now so that wouldn't be the cool thing that I kind of saw here was as we were developing this our product team was coming up with future ideas as we as we put it together because they knew that we could that we could build quickly on this and it kind of became a mindset of them which was nice to see so one of the things they asked is in the future can we do prioritize already seen items so we're kind of planning to do that it allows us to do that pretty easily and then can we actually break down how much each content we show to people based on their past behavior of what they view and what they like and I think the graph one's extremely well to that so these were all things that came up during actual development and I think in the past like these are things that never would have been suggested because we just would have been concentrating on kind we even you know build some kind of crappy MVP for for the actual feature so it's neat to see that yeah so kind of what I want to get into is applying this like I said in the beginning you know this is innovative for us this impacts our end users but how could other people take advantage of this for their use cases and what's the general kind of strategy and the first one is kind of obvious and there's lots of people doing it but be open to using a prod use case for neo4j if it makes sense our experience it scales great and prod I've I've had that experience you sort of have to be open to it and it's a difficult sell sometimes to bring in a new technology so that so that's one thing the second thing is you have to take a lot of care when developing your data model pretty much all the stuff I say in this presentation is dependent on having a good data model and I think that goes in general like for any performance considerations or much you can build on top of something it's gonna depend on how how well you structure your model and how you plan ahead when doing that so it's something to really take a lot of a lot of Karen so this is actually touched on really well in the previous talk about using the o4j to build proof of concepts that's how I sold into Adobe I built a proof of concept on my laptop with a full data set of our of our activity activity feed users and it was really compelling if you can run it on your laptop it's gonna probably run well on the pretty large servers we used to run it so that's all that's always good to and then I I like to think about how we could take pipelines and turn them into cyber queries that could change an entire user experience with just a few modifications and that I think is the beauty of cipher and neo4j in general you'd be really surprised what could actually run on demand in a request we have we expect a lot of performance from our app and we're running a lot right on the request if you create a Behance account and you see your Activity Feed that's not cached we don't cash it at all it comes straight from neo4j and that's super performer and you know it's sub 100 milliseconds to load an entire infinitely scrollable feed and and it's been really really effective that and that's with fetching all like the supplemental data and although like a bunch of other data yeah so the real value kind of in this experience that I've realized with this is is it's been nice to see the product team focusing on innovating again and focusing on how to improve things for our users instead of worrying about what we can't do and whether the Activity Feed was going to topple over because of our old infrastructure which we which we did have at times when we were when we were running it like that and now it's just pure what's the next thing we could do yeah and then like I said before big pipelines they aren't always better they might produce slightly better results but then going to that there's there's a real power to being able to change user experiences that that easily yes so this kind of goes back to all the metrics that we're showing and I don't think we'd be able to show a lot of these metrics if we weren't able to kind of tweak things so easily like there's things that product kind of it was like oh can we a/b test this and the answer is generally yes because all we have to do is duplicate a cipher query and we have an a/b test duplicating pipelines as we did for our other recommendation it could be a lot harder especially if you want a kind of substantial change to it now you might be running two models side-by-side which we were for that to do a/b tests you might be running three models side-by-side so with this you're just duplicating a query and it's it's it's kind of really efficient yeah and then the last point here is a kind of innovation spreading beyond the initial use case so one of the one of my favorite things about this is I brought in neo4j and I was one of the few people who who used it at Behance in Adobe and now we have a lot of other interests from other teams and people in beheads itself are coming up with other use cases on their own independently of what we could use before so one of them is like user facing statistics we have a really bloated legacy system for that so kind of kind of bringing that as a neo4j and having using relationships to kind of calculate this data was one of the cool ones but just kind of a cultural shift to actually thinking in graph and the bigger a cultural shift is people thinking about really how we could build on top of features that we never could have before and then that's been one of the biggest positives yeah so that's all I really have if there's a there's any questions I could take them now or you're welcome to come up to me after if you want to talk about any of this I'm happy to help you [Applause] 