 by Oh Java as an open-source software project dedicated to provide Java tools to process biological data via Java as a set of library functions written in the programming language Java for manipulating sequences protein structures file parsers common object request broker architecture korba interoperability distributed annotation system das access to AC e DB dynamic programming and simple statistical routines bio Java supports a huge range of data starting from DNA and protein sequences to the level of 3d protein structures the bio Java libraries are useful for automating many daily and mundane bioinformatics tasks such as - parsing a protein data bank pdb file interacting with Jmol and many more this application programming interface API provides various file parsers data models and algorithms to facilitate working with the standard data formats and enables rapid application development and analysis additional projects from bio Java include rcsb sequence viewer vioce via HTTP vioce bus park and rcsb viewers you topic features biyo java provides software modules for many of the typical tasks of bioinformatics programming these include accessing nucleotide and peptide sequence data from local and remote databases transforming formats of database file records protein structure parsing and manipulation manipulating individual sequences searching for similar sequences creating and manipulating sequence alignments topic history and publications the bio Java project grew out of work by Thomas down and Matthew Pocock to create an API to simplify development of Java based bioinformatics tools bio Java as an active open source project that has been developed over more than 12 years and by more than 60 developers via Java is one of a number of bio asterisk projects designed to reduce code duplication examples of such projects that fall under bio asterisk apart from bio Java are biopython bio Perl bio Ruby emboss etcetera in October 2012 the first paper on bio Java was published this paper detailed bio Havas modules functionalities and purpose as of November 2018 Google Scholar counts more than 130 citations the most recent paper on bio Java was written in February 2017 this paper detailed a new tool named bio Java mod finder this tool can be used for identification and subsequent mapping of protein modifications to 3d in the protein databank pbd the package was also integrated with the rcsb PDB web application and added protein modification annotations to the sequence diagram and structure display more than 30,000 structures with protein modifications were identified by using bio Java mod finder and can be found on the rcsb PDB website in the year 2008 bio Havas first application note was published it was migrated from its original CVS repository to github in april 2013 the project has been moved to a separate repository bio Java legacy and has still maintained four minor changes and bug fixes version 3 was released in December 2010 it was a major update to the prior versions the aim of this release was to rewrite bio Java so that it could be modularized into small reusable components this allowed developers to contribute more easily and reduced dependencies the new approach seen in bio Java 3 was modeled after the Apache Commons version 4 was released in January 2015 this version brought many new features and improvements to the packages bio Java core bio Java structure bio Java strucuture guei bio Java philo as well as others bio Java for point 2.0 was the first release to be available using maven from the maven central version 5 was released in March 2018 this represents a major milestone for the project bio Java 5 point 0.0 as the first released based on Java 8 which introduces the use of lambda functions and streaming API calls there were also major changes to bio Java structure module also the previous data models for macro molecular structures have been adapted to more closely represent the MM CIF data model this was the first release in over two years some of the other improvements include optimizations in the bio Java structure module to improve symmetry detection and added support for M MTF formats other general improvements include Java doc updates dependency versions and all tests are now JUnit for the release contains 1,170 commits from 19 contributors you topic modules during 2014 2015 large parts of the original codebase were rewritten by OJ bo3 as a clear departure from the version 1 series it now consists of several independent modules built using an automation tool called Apache maven these modules provide state-of-the-art tools for protein structure comparison pairwise and multiple sequence alignments working with DNA and protein sequences analysis of amino acid properties detecting protein modifications predicting disordered regions in proteins and parsers for common file formats using a biologically meaningful data model the original code has been moved into a separate bio Java legacy project which is still available for backward compatibility bio Java 5 introduced new features to two modules bio Java alignment and bio Java structure the following sections will describe several of the new modules and highlight some of the new features that are included in the latest version of bio Java you topic core module this module provides Java classes to model amino acid or nucleotide sequences the classes were designed so that the names are familiar and makes sense to biologists and also provide a concrete representation of the steps in going from a gene sequence to a protein sequence for computer scientists and programmers a major change between the legacy bio Java project and bio Java 3 lies in the way framework has been designed to exploit then new innovations in Java a sequence is defined as a generic interface allowing the rest of the modules to create any utility that operates on all sequences specific classes for common sequences such as DNA and proteins have been defined in order to improve usability for biologists the translation engine really leverages this work by allowing conversions between DNA RNA and amino acid sequences this engine can handle details such as choosing the codon table converting start codons to methionine trimming stop codons specifying the reading frame and handing ambiguous sequences special attentions has been paid to designing the storage of sequences to minimize space needs special design patterns such as the proxy pattern allowed the developers to create the framework such that sequences can be stored in memory fetched on demand from a web service such as uniprot or read from a FASTA file as needed the latter two approaches save memory by not loading sequence data until it is referenced in the application this concept can be extended to handle very large genomic data sets such as NCBI GenBank or a proprietary database you topic protein structure modules the protein structure modules provide tools to represent and manipulate 3d bio molecular structures they focus on protein structure comparison the following algorithms have been implemented and included in bio Java fat-cat algorithm for flexible and rigid body alignment the standard combinatorial extension seee algorithm a new version of c e that can detect circular permutations in proteins these algorithms are used to provide the rcsb protein data bank pdb protein comparison tool as well as systematic comparisons of all proteins in the PDB on a weekly basis parsers for PDB and mmm CIF file formats allow the loading of structured data into a reusable data model this feature is used by the sifts project to map between uniprot sequences and PDB structures information from the RCS B PDB can be dynamically fetched without the need to manually download data for visualization an interface to the 3d viewer Jmol is provided you topic genome in sequencing modules this module is focused on the creation of gene sequence objects from the core module this is realized by supporting the parsing of the following popular standard file formats generated by open source gene prediction applications GTF files generated by jena mark GFF two files generated by janet GFF three files generated by glimmer than the gene sequence objects are written out as a GF f3 format and as imported into GM OD these file formats are well defined but what gets written in the file is very flexible for providing input-output support for several common variants of the fast cue file format from the next-generation sequencers a separate sequencing module is provided for samples on how to use this module please go to this link you topic alignment module this module contains several classes and methods that allow users to perform pairwise and multiple sequence alignment sequences can be aligned in both a single and multi-threaded fashion bio Java implements the needleman-wunsch algorithm for optimal global alignments and the Smith and Waterman algorithm for local alignments the outputs of both local and global alignments are available in standard formats in addition to these two algorithms there is an implementation of Gwon uber Bakr algorithm which performs global sequence alignment very efficiently since it only uses linear memory for multiple sequence alignment any of the methods discussed above can be used to progressively perform a multiple sequence alignment you topic mod finder module the mod finder module provides new methods to identify and classify protein modifications in protein 3d structures over 400 different types of protein modifications such as phosphorylation glycosylation disulfide bonds metal chelation etc were collected and curated based on annotations in Sci mod R is it an RCS B PDB the module also provides an API for detecting pre Co and post translational protein modifications within protein structures this module can also identify phosphorylation and print all pre-loaded modifications from a structure you topic amino acid properties module this module attempts to provide accurate physicochemical properties of proteins the properties that can calculate it using this module are as follows molecular mass extinction coefficient in stability index aliphatic index grand average of hydropathy isoelectric point amino acid composition the precise molecular weights for common isotopically labeled amino acids are included in this module there also exists flexibility to define new amino acid molecules with their molecular weights using simple XML configuration files this can be useful where the precise masses of high importance such as mass spectrometry experiments you topic protein disorder module the goal of this module is to provide users ways to find disorders in protein molecules bio Java includes a java implementation of the run predictor the bio java 3.0 point 5 makes use of Java support for multi-threading to improve performance by up to three point two times on a modern quad-core machine as compared to the legacy C implementation there are two ways to use this module using library function calls using command-line some features of this module include calculating the probability of disorder for every residue in a sequence calculating the probability of disorder for every residue in the sequence for all proteins from a FASTA input file get the disordered regions of the protein for a single protein sequence or for all the proteins from a FASTA input file topic webservice access module as for the current trends in bioinformatics web-based tools are gaining popularity the web service module allows bioinformatics services to be accessed using rest protocols currently two services are implemented NCBI blast through the blast URL API previously known as queue blast and the hmm ER web service topic comparisons with other alternatives the need for customized software in the field of bioinformatics has been addressed by several groups and individuals similar to bio Java open-source software projects such as bio Perl bio Python and bio Ruby all provide toolkits with multiple functionality that make it easier to create customized pipelines or analysis as the name suggests the projects mentioned above used different programming languages all of these api's offer similar tools so on what criteria should one base their choice for programmers who are experienced in only one of these languages the choice is straightforward however for a well rounded bio informaticists who knows all of these languages and wants to choose the best language for a job the choice can be made based on the following guidelines given by a software review done on the bio asterisk toolkits in general for small programs for beginners and for writing larger programs in the bio domain especially those to be shared and supported by others pythons clarity and brevity make it very attractive for those who might be leaning towards a career in bioinformatics and who want to learn only one language Java has the widest general programming support very good support in the bio domain with bio Java and is now the de facto language of business the new COBOL for better or worse apart from these bio asterisk projects there is another project called strap which uses Java and aims for similar goals the strap toolbox similar to bio Java is also a Java toolkit for the design of bioinformatics programs and scripts the similarities and differences between bio Java and strap are as follows similarities both provide comprehensive collections of methods for protein sequences both are used by Java programmers to code bioinformatics algorithms both separate implementations and definitions by using Java interfaces both are open source projects both can read and write many sequence file formats differences bio Java is applicable to nucleotide and peptide sequences and can be applied for entire genomes strap cannot cope with single sequences as long as an entire chromosome instead strap manipulates peptide sequences and 3d structures of the size of single proteins nevertheless it can hold a high number of sequences and structures in memory strap as designed for protein sequences but can read coding nucleotide files which are then translated to peptide sequences strap as very fast since the graphical user interface must be highly responsive bio Java is used where speed as less critical bio Java is well designed in terms of type safety ontology and object design bio Java uses objects for sequences annotations and sequence positions even single amino acids or nucleotides or object references to enhance speed strap avoids frequent object instantiation z' and invocation of non final object methods in bio java peptide sequences and nucleotide sequences are lists of symbols the symbols can be retrieved one after the other with an iterator or sub sequences can be obtained the advantages are that the entire sequence does not necessarily reside in memory and that programs are less susceptible to programming errors symbol objects are immutable elements of an alphabet in strapp however simple byte arrays are used for sequences and flow to raise for coordinates besides speed the low memory consumption as an important advantage of basic datatypes classes in strapped expose internal data there for programmers might commit programming errors like manipulating byte arrays directly instead of using the setter methods another disadvantage is that no checks are performed in strapped whether the characters in sequences are valid with respect to an underlying alphabet in bio Java sequence positions are realized by the class location discontiguous location objects are composed of several contiguous range of location objects or point location objects for the class strap protein however single residue positions are indicated by integer numbers between 0 and cont residues minus 1 multiple positions are given by boolean arrays true at a given index mean selected whereas false means not selected bio Java throws exceptions when methods are invoked with invalid parameters strap avoids the time-consuming creation of throwable objects instead errors and methods are indicated by the return values nan - one or no from the point of program design however throwable objects are nicer in bio Java a sequence object as either a peptide sequence or a nucleotide sequence Astra protein can hold both at the same time if a coding nucleotide sequence was read and translated into protein both the nucleotide sequence and the peptide sequence are contained in the same strap protein object the coding or non-coding regions can be changed in the peptide sequence alters accordingly you topic projects using bio Java the following projects make use of bio Java metabolic pathway builder software suite dedicated to the exploration of connections among genes proteins reactions and metabolic pathways dengan fo a dengue genome information portal that uses bio Java in the middleware and talks to a bi o SQL database dazzl a bio Java based dose server vo sent a plugin for the n percent suite an analytic software platform by AI DBS that unit eise's bio java by eclipse a free open-source workbench for chemo and bioinformatics with powerful editing and visualizing abilities for molecules sequences proteins spectra etc prompt a free open source framework and application for the comparison and mapping of protein sets uses bio Java for handling most input data formats cytoscape an open source bioinformatics software platform to visualize molecular interaction networks via Luca an open source biological data mining application geneious a molecular biology toolkit Masey an open-source application to analyze mass spec proteomics data strap a tool for multiple sequence alignment and sequence based structure alignment j s tax a Java framework for statistical analysis and classification of biological sequences jl s TM long short-term memory for protein classification la jolla structural alignment of RNA and proteins using an index structure for fast alignment of thousands of structures including an easy-to-use command-line interface open source at SourceForge gen beans a rich client platform for bioinformatics primarily focused on molecular biology and sequence analysis gen sambal a version aware java api - ensembl data systems musi an integrated system to identify multiple specificity from very large peptide or nucleic acid datasets by Oh she'll a utility library for structural bioinformatics topic see also open bioinformatics foundation bio Perl biopython bio ruby bio clips comparison of software for molecular mechanics modeling 