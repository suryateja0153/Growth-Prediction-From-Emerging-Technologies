 So the tool that we are going to discuss today is OpenLink Virtuoso OpenLink Virtuoso is a first cross platform universal server to implement web, file, and database server functionality alongside Native XML Storage and Universal Data Access Middleware, as a single server solution It includes support for key internet, web and data access standards such as XML, SOAP, WebDav, SMTP, ODBC, JDBC etc. Virtuoso is a revolutionary, next generation, high-performance virtual database engine for the Distributed Computing Age. It is a core universal data access technology set to accelerate our advances into the emerging Information Age. Virtuoso provides transparent access to your existing data sources, which are typically databases from different database vendors. At core, Virtuoso is a high-performance object-relational SQL database. As a database, it provides transactions, a smart SQL compiler powerful stored-procedure language with optional Java and .Net server-side hosting It supports SQL and more OpenLink Virtuoso supports SPARQL embedded into SQL for querying RDF data stored in Virtuoso's database. SPARQL benefits from low-level support in the engine itself, such as SPARQL-aware type-casting rules and a dedicated IRI data type. This is the newest and fastest developing area in Virtuoso. Virtuoso has a built-in web server which can serve dynamic web pages written in Virtuoso's web language (VSP) as well as PHP, ASP .net and others This same web server provides SOAP and REST access to Virtuoso stored procedures supporting a broad set of WS protocols such as WS-Security, WS-Reliable Messaging and others. So why virtuoso openlink is better? As a data virtualization platform, virtuoso enables fast and flexible harmonization of disparate data that increase agility for individuals and enterprises alike forexample, you have different data formats like you have relational database, linked data etc without virtuoso, you have to use different database or triple stores but virtuoso deals with it and provides every solution This modern platform ensures cost effective achievements of the goals So now I'm going to give you a walkthrough of virtuoso openlink server So let's download the virtuoso openlink server goto your search engine and type "virtuoso openlink download" scroll down and goto the documentation of OpenLink So here in the documentation scroll down to operating system's tab. In my case it's windows so i'll click here Now download it from the sourceforge and install it after installing it make sure that server is running. Now go the url and type localhost:8890 so here click on the conductor and login with 'dba as account and password so you're logged in to the virtuoso server now go to the system admin and click on packages make sure to install these packages conductor, dbpedia, rdb2rdf and rdf-mappers you can install or uninstall from here. now go to database this is basically a SQL relational database so we can use and interactive SQL editor so let's browse a local file, I'm choosing a new file which is basically a script to create new tables so let me browse in a second so I'm selecting sample.sql BTW i'll upload these particular scrips that i'm using so click on load and we can view the syntax from here now click on execute to excute the script so our tables have been created now we need to populate some data in these tables so again we are choosing file sample-data.sql loading it and after that we need to execute these script basically an INSERT INTO script so our data has been added to the tables so let's goto the database and view our newly created tables so these three tables have been added AGENTS, COMPANY and ORDERS In interactive SQL we can write an SQL query to view table ORDERS so i'm viewing all recrords from table ORDERS so executing it here we can view all the records of table ORDERS so we can use external soruces for importing as well some of these are available in commercial edition we can also upload our websites on web application server and also we can make XML queries BTW you'll find more about them in documentation it's very brief documentation we can also create some endpoints like APIs etc so here is our linked data so let's view some by default graphs that have been included in the installation package these are the default graphs so we need to upload our own graph in triple store so i'm going to upload nobel file that we used in our assignment so nobelprize.nt, you can also use resouce URL to upload it I'm giving it a new IRI Nobel uploading it upload finished. so let's view the graphs here we can see that nobel endpoint has been added so let's go to the SPARQL execution. selecting our endpoint let's write an exploratory query so it's a bit hanging because i forgot to add LIMIT so it's getting all the records that is why it is taking some time so as you can see that all records are displaying so let's map our SQL relational database to linked data so goto views and select the database that we added recently 'MYDB' and select the three tables AGENTS, COMPANY and ORDERS so we can select the primary key but virtuoso is intelligent so it can automatically select the keys also we can define the types click prepare to execute so here are the definition. it's basically a mixture of RDF and SQL here is our ontology. So execute oh, our mappings have been created you can see that all the URIs are there so let's go to our graphs so here is the our newly created endpoint 'MYDB' and here is our ontology that we just created from relational database so let's give our endpoint 'MYDB' instead of Nobel and write exploratory query executing it so here you can see that our subjects, predicates and objects we are getting these records from relational database SQL so let's write some queries, again giving our endpoint 'MYDB' and giving it, making our prefix of newly created schema or ontology so let's write a query to get city of the company so mdb:company_city so we are getting all the records with predicate company_city executing it. here are the results that we are getting from relational database so new i want to get details about an order so giving predicate order number and giving an order number to match against executing it and we are getting reference for order so getting details of the order executing it so here are the details of the order let me zoom out you can see that we are getting record of a particular order so let's go to our database and add our new record into our relational SQL database so writing an SQL INSERT query and giving an order number 112233 and giving it a description 'this is new test record' executing it so it has been added into relational database now going back to linked data and giving endpoint of our graph again using the previous query now here we are giving the order number of newly created record executing it so you can see that our we are getting the record that we just added into our relational database so this shows that there is a real time mapping between graph and relational database you can also goto the documentation it is very brief answers all of the hows, why, whats, ifs moreover, you can search about JENA that we discussed in previous lectures we can use JENA framework with virtuoso to get data from virtuoso server so mapping can be made easily between JENA driver and virtuoso server here are the details to map onto JENA and some examples are also given So that was the walkthrough Now, what's the future of virtuoso. Virtuoso is subject of extensive ongoing development this is divide into following areas RDF and Semantic Web They will extend the present RDF capability to transparently access native relational data and have more storage configuration options and inferencing support. Packaging they will introduce a stripped-down database-only configuration of about the same size as other open-source DBMS distributions Applications They plan to offer a blog, wiki, file sharing and other applications developed and hosted on Virtuoso OpenSource Documentation Much new developer-oriented documentation, concerning extending Virtuoso hosting of non-Virtuoso content, extending DAV, technical articles on using specific areas of functionality So now Reflections It's a complete package, supports SQL, Linked-data, SPARQL so it's fast and reliable. Hence, it's subject of ongoing development on RDF and Semantic Web so it have a bright future so that was all related to virtuoso openlink server. Thank You 