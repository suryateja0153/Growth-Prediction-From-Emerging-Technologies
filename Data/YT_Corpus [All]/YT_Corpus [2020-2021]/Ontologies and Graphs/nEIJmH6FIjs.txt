 hello everybody welcome to the neo4j online meetup I think this is number 51 so welcome to everybody if this is your first time joining us if you have any questions while you're watching live you can ask those on the on the chat on the right hand side I'll be I'll be watching that chats they were I'll answer any of your questions on that while we're doing the presentation there's going to be a bit of code in this presentation so you want to make sure that you've got your resolution 720p or higher so make sure I'll make sure you have that set up and what else do we need to do if you're watching afterwards we have the community site and so if you have any questions don't forget them that you can always ask those that on there as well and I guess yes if you haven't you haven't attended one of these before my name's Marc I work in the developer relations team Nia Jay and today we're going to be talking about the BBC foods graph and I've got my colleague who can't you see on there I guess to my right to the left on the camera so Lou so I guess what we do with most of the most of our guests on the online meetup is just give a quick introduction to yourself and maybe just a quick a few sentences on how you got into you in the first place yeah so guys buddy I newshour Mitch and I one of the guild engineers here at neo4j so how did I get into an FJ so in a previous life I was looking at master data management and how we know effectively the usual how do we look at the lineage how he joining the various parts of our data model and somebody suggested hey have you you know have you seen near the J and I thought no I haven't and they looked into it and it just seemed like an absolute fit but and it's basically all just been going on from there and I find it fascinating space cool yeah and so you've been I think you've been working with all the talk about two years yeah so just over a half years now so yeah it's been yeah very good very cooling yessir lutely works on our pre sales team in London and we've had like a this is about it maybe a little bit under a year ago we were talking about what an interesting data set that we could I guess I'll let you know you take care take over the story from there this is a bit of how long in there long in the making Meetup oh it's great it's fantastic yes so I mean we spend a lot of time talking about different really great use cases with neo4j and you know the really common things coming up like recommendations engine so how do we effectively based on different kinds of collaborative filtering and that kind of thing entity resolution so how can you resolve potentially similar things sounds the same well with some degree of certainty mass effects management why put into new PJ's to begin with and then we start to having thinking about things like graph analytics so what kind of clustering we can do and that one thing and it's it's always great to be able to experiment and work with these different things and I was sort of thinking what dataset could we use we can start to test out these different elements and it dawns on me that actually the Boopsie good food website seemed like a brilliant idea so you've got a number of recipes you've got ingredients because you've got different contributors you're going to the situation where things like you'll have cherry tomato tomato Tomatoes so you've got these like entity resolution options you've got ways of clustering things out and we start thinking about the algorithms side we can start to think about what the common core components of a cake for examples you've got a lot of really interesting data and interconnectedness there that you can apply a lot of these use case elements to and I thought it'd be fun dataset to work with yeah so I guess yeah maybe we'll we'll switch over to your to your screen now so when we when we first started researching the status that I guess the step one was we wondered do they have like an API like that was a hopeless I can't there's got to be some sort of API that will let us get a hold of some of this data sadly there isn't and and basically not everywhere on the internet anyone has attempted to figure out how to build some sort of or do something with this data they all end up scraping it in some way or other and so I I started working on this on this scraping approach I think it was in like May last year was when we first suggested it to me and I thought okay I'll just I'll just go I'll just like I was using pythons beautiful library as I got cool I'll just I'll just build myself a little scraper and I'll pull out the ingredients maybe I'll get the recipe title and perhaps some of the other information on there and once I started doing that I realized it was actually quite tricky to get the actual ingredient itself so you can maybe see on this diagram some of the ingredients are underlined so like for example butter and flour and dark chocolate and eggs but but if you take another example ground almond is an ingredient and that one's not underlined and so it's quite tricky to figure out okay what are the actual individual ingredients in this so I started off down a massive massive tangent where I was attempting to train a machine learning model to try and figure out what the ingredients were in this little box in the boxes on each of these pages and then Lou came up with a much simpler way to do it that actually worked so going back to you again yes so I don't know I think a few weeks ago I thought all this let's look back into this and I'm just having a look through the source code of one of the recipes so keeping seriously rich chocolate cake yeah and I spotted this rather beautiful jason object here and I went to Mike went oh hello I think we may have a nice way of being able to pull this so it's a bit small don't worry we're going to move on to a page where we've expanded this out a bit bigger but basically we've spots in this I thought brilliant and just going to shift over here so this isn't the entire object here but you can start to see we've got a lot of really useful pieces here so we've got the information about the author description of the recipe we've got nutritional information you can see here we've got the ingredient objects and this is really conveniently packaged in adjacent object so what we've done with this is we've downloaded the load of recipes and we just extracted out that JSON object and using that we've effectively just cut out the JSON objects and we've placed that into a flat file and it is a really convenient way for us to start thinking about effectively loading this into the graph yes effectively we've got a file containing a stream of JSON objects if you like one yeah one I think one pie recipe right so welcome page recipe I'll share the we'll see it in a little bit when we import the data I'll show you the link of where we've got that JSON in case you want to play with it yourself so we've got a question from Jim mal thorne how did you extract that JSON object from the code so we we've I've got a Python script that I that I wrote that does it and we basically looked we basically like X coddled HTML of the page found sort of where in the page it was grabbed and so it's it's you it's called is like a piece of JavaScript so you can see it's it's like trying to add an object so seeing permit if don't add on web and then it's sort of trying to pass in an object into some sort of function somewhere in the BBC code so we grabbed this all the effectively the second argument to this function and then we put it into a Python script and I forgot there was a library we used to like basically decode it from JavaScript to J's to a Python dictionary and then we printed it back out again into our file as a JSON that JSON object so it's nearly it's nearly Jason but it but it doesn't quote the keys correctly right because you can you can see it needs to have quotes double quotes around those to be valid jason but instead it's like it's it's literally five lines of code but this was significantly quicker than our previous attempt so i guess it'll go we'll go back again to our to our other page and so yeah so once you get there's nearly every page has those I think there are a few that didn't so we just put some some exception handling code in there and if it didn't have that we just skip the recipe but there were maybe single figures that didn't that didn't have it yeah so I guess now once week once we've got that data we were at the point where we need to figure out okay are we going to build build a graph from this and so when you when you're trying to figure that out you sort of have to do obviously like you're your goal in the end is I want to get this data into me of J but at the moment it looks and so lose now put us on a page here where you can see it a bit more zoomed in at the moment we've got it as this Jason structure we need to figure out well how are we going to decompose or D structure that Jason into something in a graph so we can't just throw the Jason at you you figure it out we're going to come up with with a graph model for it and and with any good data problem you need to think about how you going to model that data and that's very much going to be driven on the kinds of questions you're looking to ask so yes it's very much it's very much quite question centric about the kinds of questions we're going to ask and I guess it's probably worth talking about what kinds of questions were we we do ask this data isn't it so yeah so we are we had a few questions in mind and I guess the thing to keep the thing to keep in mind when you're when you're building these models is that you don't necessarily need to get it perfect the first time around so if we come up with some questions to build an initial model and then after a couple of hours of playing with the data we just actually I'd yeah I want to do some some different semantics ask some different questions in the model doesn't quite work it's reasonably easy to go and and refactor that model to do today I noticed you've got another question so is this project and github yeah we've got we've got the script that scrapes the data and github and we've got the day drink it up as well well we've actually the queries and loading it is also available as a browser guide that you can run in the near-future browser but I guess we're slightly ahead of ourselves so we'll show you where that is when we get there so what we've got on the screen now is a tool called arrows and will share the link for that in the chat as well but what we want to do is go okay so from that Jason what what graph models do we want to come up with and the first place the size we want to create some notes and so integral model nodes are representing they're kind of representing the main bits of data so like our entities so if you're used to that type of modeling uh nouns know the nouns yeah if you have you better in English than me then look for the look for the nouns and the data and so the most obvious one here is that well we know we're looking at a recipes data set so I guess we probably would probably have a recipe of some time yeah and so this whole I guess this whole thing is the recipe in some respect so let's say we've got a node for the recipe and we might say okay I'm gonna have Regents I was gonna start even something simpler so like maybe we've got a title and and so there's two ways that you can do this let's just call this job okay just so I don't have to do too much typing there's sort of two ways that you can do this either you can do the relational style entity modeling where you just model sort of the types of things or you can model actual individual bits of data and what you prefer I guess is it's kind of based on what you're familiar with that in Herman do you have any better guidance than that yeah so I think usually the purest view will always be you're going to probably be working with metadata at the end but it's really hard to work with metadata straightaway because it's it's quite a it's you know it's a level removed you're thinking quite conceptually there and it's not easier to be thinking about I've got a chocolate cake and to make this chocolate cake it's going to have flour and sugar and eggs it's a lot easier when you're starting out and you're thinking about the problem that you're trying to solve and the kinds of questions yeah it's it's significantly easier to start from that stage rather than abstracting and weighing going well I have a recipe and the recipe has ingredients and that kind of things so generally certainly when I start modeling that aspect I always think about let's let's work with the physical data that we have and use that rationale around that and then once we've drawn drawn acts example here the chocolate cake and the chocolate cake has flour and it has sugar and it has cocoa we can then we are then in that situation where we can step back and go well okay so what are the you know the actual components which are what are the entities that we're talking about so good I mean generally that's my approach so if we if we do if we continue from where Luud taking us to say hey we want we know that we want to have some ingredients so let's just copy that ingredients in there and one potential way of modeling this is to go actually I'm just going to put the ingredients onto my oats now a bit wide no space in there somewhere it wraps the line so what one approach would be to say okay I'm gonna I'm gonna put the ingredients as a property on my recipe so I can have an array probably that would be like a valid a valid thing to do and that would be perfectly fine if our goal was hey I want to just query the recipe and you show me the ingredients on a page then well that would be quite cool but as you pointed out one quite thing that we would like to do is sort of do recommendations and in here sort of content-based recommendations so hey I've like show me another recipe that has similar ingredients and that's quite difficult with this model like we can't go hey I want to find another recipe that has ground almonds in I'd have to go and scan everything a recipe and look through all those arrays to find my ground almonds so that's not such a good model for the for the questions that we want to want to try and answer so so we might back out on that suggestion quite early and instead might say okay well actually if you want to query through so we could I like to think of it as going through something's if you want to query through those ingredients to find other things other recipes that might have that ingredient I want to have it as a node and the name of that so I went with I think in our model we've called it contains ingredient but any sort of variant on that that explains what you're doing what the relationship is is fine so we're creating contains ingredient relationships and on this side we're going to put in the name the label of this note so a label is a way of tagging a note a tagging or categorizing a note it sort of yeah grouping grouping those so that we can find similar nodes if we want to using the query language which we'll get into in a minute and in this case let's just put one ingredient so we'll give it a name let's say this one's called butter and we'll save that to our model and maybe we'll do just one more just so you can see see how this process works and so on this side we'll say apparently my spelling it's not great let's have an egg so this egg took up an egg and we've got butter and then we'll put in contains ingredient on there and if we were if we had it if we had another recipe I'm it I'll make one up for this example we could then connect that so let's say we've got another recipe that has egg so I can create another relationship I'm here so let's just reverse that and let's say this recipe is called scrambled eggs I really hope there is it's a really fancy scrambled eggs if it's if it's counted as a recipe we'll see later on that I actually have no idea what I'm talking about when it comes to eggs I assume scrambled eggs is reasonably easy to make I have to rely on so now we've got so we see we got we've got a recipe we've got some ingredients so I think that's a reasonably that's a reasonably good that'll probably help us to answer our content-based recommendation question should we pick she'll pick maybe one more thing on here what would be another good thing no author you know make more fantastic recipes that they're composed yeah so again you know we're probably going to end up with an author a known representing authors so let's put one of those in so in this case I think I don't know whether than that I mean that name seems ok like it indicates ok it's an author I suppose you could you could have also gone for something a bit more generic and say hey recipe is written by or created by but I think we went with author in our in our in our domain so let's go with that we've got like a partial question I love that who was the ones the name of the author for this 100 good food ah so this is actually like one that is written by the BBC's content team I guess wouldn't it be better to have a property on the recipe many shall have to indicate which what you're referring to by and when you mean when you suggest property MIT - is ask ask a question does this have a very specific application or is it just for visualization purposes yeah so once we once we get on a bit you'll see that the actual reason for loading this this data into a graph is so that we can do certain types queries that are quite hard to do when the data is just flat and treated as Jason in terms of this tool here this is mostly users like an early prototyping on modeling tool and you can actually there is a way of actually exporting the cipher that you create here and putting that into the adjacent can actually create a graph for you from your diagram but yeah in terms of this meetup we're just using it as a tool for showing how would you go about modeling the data and it's showing we're basically giving you insight into our rationale behind the approach we used to come up with the data model how we're going to read the data engineer for J so like that so just to give an insight into that and then okay so Manish asked the second part of the question now so would you yeah so right the reason we don't put the wait seconds there's a list of ingredients as strings instead of multiple repeated contains ingredient relationship so I think you're suggesting why do we not still I think you're suggesting why do we not store the ingredients as a property on the recipe so the reason is that we want to query through those those individual ingredients to find other things that might have those ingredients so you can kind of see on the on the bottom of this diagram we've got if we want to find things that have eggs in or like we find a recipe when we say hey show me all the other recipes that have these ingredients in or show me the ones that have the most common ingredients it's much easier to do that if we have that as a node because we can just write we can easily write a query that that makes use of that relationship and sort of say okay take me from my chocolate cake recipe find the ingredients that I have now find other things I have these ingredients if we if we chose to store it as an array we'd have to write a query that said okay find me this recipe get me all the ingredients and that's an array and then kind of go through every other recipe and look through each of their arrays and check every element of their array against my original recipes array and check whether any of those things exist and it's a much more like reservoirs more computationally expensive but it's also like kind of unwieldy to write that query I guess you would say it's not really using the graph of your and I think to some extent it comes back to what are the questions you're asking and the questions that you're asking are going to dictate what that data model looks like so just to give an example if for example we were less fragment sake say we were building a recipe book or something like that and in this recipe book the things that we care about are the authors of the recipes we care about what kind of meal time recipe that is but actually we never ask about the ingredients because of the ingredients we only ever query and bring back when we actually could bring back the recipe and in that scenario it would make very good sense to have the ingredients as properties because we're never doing any queries that are ingredient centric then absolutely that would make sense but in this example here because we're looking to do some level of collaborative filtering against ingredients then it makes sense to pull these out and they become notes in their own right yeah so I guess on this one and one that we haven't pulled out as an EDD and and and didn't in this example is skill level but you could imagine if you were building like if you had like I think that they give quite coarse skill levels but imagine if you had like really fine-grained skill levels like if it was maybe it was like a set of recipes for a budding chef to learn yeah maybe that would be more interesting one you could say hey I'm actually like I'm at this level of some sort of chef training and you say hey I'll show me what recipes are in my range of ones then then maybe that skill level makes sense to fill out yeah so we've got a couple of other questions so I guess let's address those and I think that probably covers probably is enough for the modeling but we can kind of do the same exercise for figuring out okay what do we want to do with keywords do we want to do something what else if we go down their course is cuisine channel I guess yeah and so there are n collections and so you'll see what we what we came up with sir Bo asks can you handle billions of nodes and I just say yeah we've got we've got people who are who are working in databases with those sizes so so yes it is possible to do that John Gorman could you model ingredient knows the other way around node butter label ingredient no I see what I see what he's yes so I'm just the Clarence here so where you see so when you see the name inside the node inside the circle that's the label so the label here is ingredients and this is the property it just maybe it looks a bit counterintuitive and arrows but absolutely a drum what you're saying here visit the if I double-click here you'll see the caption so caption is than these the label as well synonymous so the label here is ingredient and the property here will be the key value pair of name to butter ok cool and then our last question which will be yeah we're gaining onto on the next slide is can we do an automatic import from the obtained jacent in the FJ so it's we can go from jacent in the everyday but we have as i said this is like the first that we've got to say ok what should I do with that Jason like what projection do you want me to do from that Jason into a graph model so that's what we're this is like the first step of that process so I guess I guess that's probably you probably got hopefully that's enough to get the idea if you wanted to continue this and add some more to this model but now we're going to have a look I'll let Lou talk through a little bit of the import approach sure so what we'll highlight here this isn't the complete import statement that we run to get the data into near for J so this is just a small portion and as Mark said we have the scripts both available in the medium blog post that we've put out and also in the github repository so it will talk a little bit about what we're doing here in the script so first and foremost to be able to run these scripts you will need to have multi statement enabled in your near for J browser we will show you how to do that in a few minutes so don't worry when we're going through the queries will show you where in the browser you need to set that but you get that set and then effectively what that means is you can execute multiple types of queries within browser so what we do is we're going to set a number of indexes and we're creating indexes on certain properties within our nodes and the reason why we're doing this is because we're going to be importing a lot of data and we're using the merge keywords it just means it's going to speak the whole process along and what you spot here we've got the merge keyword here and what we do with merge and what merge does is it goes away it had to look at the item that we'd specified so what is what we saying is going to be the unique constraint from the node so for example here we're saying that ID is the unique property for recipe and what we do with merge merge will basically go away it will go and have a look so if we couldn't exclude it we'll go and check the indexes to see else but does the note node type of recipe you have that ID if it doesn't exist it will go and create that new node if it does exist it will do nothing so that's why would put indexes in it speeds up that performance so we do that and the next bit of lag here is we've got we're setting a parameter here so parens JSON file and what we're doing here is we're giving a link to the where the flat file is where we've got that file of all those JSON files JSON objects and the reason why we're doing this is because when you look at the full import scripts you'll notice we ream weari important for several times and the reason why we do that is we're trying to make this query as efficient as possible and this stops this concept of verneka query and so very briefly an eager query hangs on and keeps in memory all the local references of the notes that we have when we've been importing the data because it's trying to hold on and say well I might need to keep this because I need to add the relationship somewhere I'll need to connect something in some way and we don't really need to do that for this data so this is why we've taken this approach Marc has written a very good blog about eager queries and approaches you can do to reduce the eagerness of them and I think we all sort the link out that say you've got cited that as well but that's basically what's going on here and I guess I want one question from MIT ashes is around can we explain the indexes that we've got at the top yet more details so the question is are you are we indexing it to make the queries faster if yes why are most of them indexed so in this case the indexing there is actually as part of the import process and the reason we do that is because we're I guess we couldn't we can maybe talk through one of the examples so we're using them the Merc for example this merge that you can see merge our recipe so what that's doing is merge is the clause that says hey I want to create this thing if it doesn't if it hasn't already been created and so you see on the first time we created an index on that recipe and so what it means is that when we go and check hey does this recipe exist for this ID it means that we can just go in the index and check does the recipe exist rather than having to scan through every single recipe and so this is like quite a common a thing that people sometimes run across when they eat when they're importing data because it will get slower and slower as you do more records so if I if we had no index on the recipes the first recipe would put it pretty easy right there's nothing there okay create second recipe it's gonna go in scan okay does my ID match against one recipe by the time it gets a low Trece p 10,000 I'm checking 10,000 when I get to 20,000 I got a check against 20,000 whereas if we put the index on obviously we've got a log in check time to check does this recipe already exist and so in this case all of those indexes are being used because those are the properties that we're using as part of the import more generally exam separately from the import you would put indexes on properties that are going to be used that you're gonna start your queries from so if one of our queries was hey I want to find all the ingredients of all the recipes for eggs then it would be reasonable to put like a an index on ingredient name now if one of my queries was hey find me all the recipes with the name chocolate maybe I want to have a an index on recipe title or recipe now so we don't actually have that at the moment we've got another question here the Quan or I should we've got a few questions I'll guys we'll go from there maybe we'll go from the top so John clarified a question from the previous slide could you make the label butter and the prop the ingredients so the butter is always butter even if it's not used as an ingredient so in this dataset it is always used as an ingredient but yeah if you were if you were trying to if you had a more generic data set where sometimes it could be used as Ingrid as an ingredient and sometimes it was used to something else and that would be valid so you could like one way of doing that would be to come up with sort of a more generic label so there's a more generic way of describing what butter is perhaps you define it by what family of things that comes under that would be valid equally like another approach people sometimes take is actually to do multiple labels and sort of tag the the node with each of the roles that nodes playing it's playing a role of ingredient cool well tag it as an ingredient if somewhere else it's playing the role of okay so I mean one extension we could do here so let's say for example we wanted to do ingredient families so let's take take that butter as an example so let's say we've got so we know we've got butter but actually it would fit into a hierarchy of cooking fats and within the hierarchy of cooking fats we would have I don't know olive oil sunflower oil rapeseed oil coconut butter butter etc etc and what we could do is we could say well we started off going well actually butter olive oil etc ingredients but further on down the line and maybe we've done some analysis and say well actually yes they're all ingredients but there are also all types of cooking fats and then what we could do is we can add another label they are saying cooking fats so you can add multiple labels and like this we start to get different viewpoints and slices and hierarchies based it based on the kinds of questions we're looking to ask core so Mohnish your question about the syntax of this query I think it's just because it maybe detects is a bit small but we do actually have curly brackets in there as you suggested you can't put parentheses and then Marco has a question in quantities and cooking methods are they entities or relationships so I think I think well you're you're asking really is actually are they are they properties or are the entities connected by a relationship and so in this case I think we've just set those quantities and cooking method we've just said it as properties on the node and then many shop serves that yeah we're using as you as you point out on the questions we're using the Apoc library so awesome procedures on cipher and there's a load Jason amongst many other data formats procedure in there that we can use to process in this case processing Jason but you can also load data from JDBC so you can get data from any relational database using that you can load XML documents I'm sure there are there are there are many others that I that I've forgotten and then we've got another question formation hash man is it possible to mention all properties in the merge statement instead offset yeah so that's another that's another thing that people sometimes do when they first pick it up is to put all the all the properties inside the curly brackets it has a slightly different syntax than what we're doing here so anything that you put in the curly bracket it uses every single property that you put there as effectively like as your uniqueness of this knows it will go and check can I find a recipe with this ID and this cooking time and this preparation time and this name and the description and the skill level which as you can imagine is is quite slow as you're number of recipes increases because it needs to go in check against every single recipe to make sure each of those values matches whereas in our case we know that the recipe is identified by that identify D property so there's no need to to put all of them in there so it just we kind of achieve the same thing just more more quickly and one other thing which Liu pointed out when we were talking about this just before we started was with the set command you can also use it on create and if you only wanted to apply the properties when the recipe gets created and there's also another variant called unmatch which would only run if it was already there so you might want to use that if you said okay I want to maybe I want to keep a track of when was the last time this recipe was found in my import script and so maybe we keep like a time stamp or something lower count every single time so d just search for it yeah cool styling and that's probably I think we're probably good enough to go on to the next bit and we'll share the links that Lou's described as well so yeah we ready I think we're ready to go going to go into the new FJ browser now yeah so we've were using so we're using a an instance of the neo4j sandbox here and we've made a guide which contains everything from this session in in case you want to play around with the afterwards and you can type in : play recipes and it will give you a guided sort of a walkthrough tutorial that you can follow and you so you can click on these these buttons yeah so this is this is the script so this is like the full script Lew showed a little portion of it in this in the slide so if we go to the top you can see here we define the indexes we we create a parameter to indicate our where our file live so this is where the the Jason the stream of JSON objects lives you'll notice that I we're actually like executing lots of queries all in one in one statement and so if we go down to the little cog on the bottom left you by default an able multi statements or query editor is off and so if you want to use that feature you'll need to turn on other otherwise it will tell you how your cipher has a syntax error and so you can see this is quite nice if you've got a script previous to that feature you'd have to go and figure you'd either have to manually feed your script in or you'd have to use the Nvidia driver and feed it like that or you'd have to go and use the cipher shell and feed it in like that so this is like a significant like usability improvement for hey I just wanna like this datum and I'm using this that this browser browser tool and I'll just quickly show you like what else we've got in here so we've got you can run a schema query I guess will show you how to run that so just a quick a schema query so you see so this is what Lily reference before that like the I guess the heart the proper way of doing data modeling would be actually we need to work out okay what entities relationships connected between them and you'll notice in that import group there's nowhere where we do like a hey I want to create this schema and I want to make sure these properties exist there's the schema kind of comes with the with the data so as you put new data and the schemer evolves with its if we were to create to write another import script that added in some other node labels we would see those appear on this diagram and so you can kind of see our full full diagram here so we've got a recipe recipe is basically in the center of this universe it connects to a collection a diet type and author ingredients and then I said collection so what you're saying that again and then once we've done that we can run all sorts of queries on here so I'm gonna I'm gonna hand back to Lou to talk us through but if you want to play with this yourself : play recipes is command you can run that on it on an ear for J instance anyway you either you can use one if you search for near for J sandbox I can also put also put a link there well well Lou is showing the queries or of course you can do this on on a local neo4j or it will pick it up as there as well if you run it a desktop instance you can you can do it letting so lose now gonna just take us through what sort of queries can we do on this data set so we've got some basic queries so a top tip to all what you can do if there's certain queries that you're working with or you run several times have been browser when you type your query in here you can press the star on the slide and what that will do is it will save it to favorites so for example let's do um will be be look schema let's say this is a query like to run very much so it's going to quickly give it to the comment and what we can do is you press the star here and pull save that query so when you click on the star here you'll see it's made us it's saved my query so rather than me having to type it again and again I can go to click it and I'll save it and use this approach here for today's session and I've put in some queries here on the BBC good food many of these queries again you'll see if you run play recipes that Mark showed earlier so let's start off with finding some recipes that contain chocolate who doesn't want to yeah we can tell what your your favorite food can t tell my motivation it's very simple here so we're creating pattern and for those of you who aren't so familiar with cypher what we do is we're creating a pattern so you can notice here we have this common feature of the colon both in this pot here which is the nodes and this pot here which is the relationship and basically everything to the right of the colon that will either be the node label or the relationship type and anything to left the colon if there is anything will be a variable that we're creating so basically what happens here is what we're saying is match recipe and whatever matches the argument we'll have a you know a variable placeholder for the node here of called wreck and question that we're asking here is much recipes and for those recipes that match into this variable wreck but have a relationship of contains ingredient with a node type of ingredient and inside the curly braces we're stating some print stating some properties here so here what we're saying is we want ingredient to have the name of chocolate and some of you may be more familiar with seeing so if we onto these where caused and some of you may be more familiar with something wrong the ones where I thought name equals chocolate instead of instead of using bridge spit here so either way work so this this is the equivalent of the previous query right here we're going to look for some recipes that contain chocolate and we're going to return at the name so recipe name without restoring its Roybal wreck and the identifier so if you run that we've got some recipes here now taking it a bit further what's caught my eye what did catch my eye think it was three there were some truffles look there's a trouble so there's a chocolate yes the chocolate truffle stuff it's a shame we can't we can't get pictures in the near video browser then this would be an extremely hunger inducing bit of cypher maybe they'll be next time we can write an application that we share pictures yeah we're gonna make a cake so look at this so what I'm going to do is I'm gonna take the the recipe ID for the the chocolate the chocolate truffle star cake so I'm going to grab that and I also find out what the ingredients are so if you turn a check like do I have any ingredients in my exam I in my kitchen zimit to make this I know can you could you imagine dissolve so if I go in there and discover I don't have any vanilla or something I don't know yeah let's see what ingredients we need so it's a little bit similar to before right yeah absolutely so same idea so if we're putting the recipe identifier in here as a pocket that we're interested in and then again what we do we've got the variable here I and we're going to pull this back and again what we're doing is we're going to return the ingredient names here and we're going to order them so I want them in alphabetical order so just order I order by it I got name so in this one that I that does that matter like it can be anything you won't be anything you like okay cool I could have called it Dave but I decided to be a bit mad and call it the day miss any days watching would be quite happy to see her name okay so what do we got there so we've got chocolate that's good we've got chocolate and dark chocolate and yes I guess that points out like I say and again white shop this is like I know we're not going to cover today but like I said is an interesting like future extension is like there's loads of types of chocolate and there's nothing in the dataset that indicate a these things are actually all the same like this young oh that you know they belong to a family you know chuckling they're so absolutely that's something we definitely want to look up soon before we go onto the next one let's just leave back so we got a question from leo vlogs can you explain very quickly what is an epoch library please so Leo I've I've put about two comments above the way you asked that question I've put a link to the documentation for April the epoch is a is a plugin library for basically extending near the J with extra functions and procedures I won't attempt to summarize what is in it because there's more than 400 or maybe even 500 now different different things but it kind of has stuff like data integration tools there the loading tools it has like utility functions for massaging data it has so the data cleanup tools I don't know what else it has can you think of anything else time to live oh yeah there's lots of different yeah lots of different things in there if you use the near forge a desktop a POC is one of the same not yes it's kind of one of the plugins that you can get by default so there are three of them so there's a pop graph algorithms and the graph QL plug-in and if you go if you create one a project in the NeoGeo desktop you'll be able to see in there you can just one click install the a pop library I'll send you a I'm gonna put a link to a blog post that our colleague Jennifer write right where Jennifer sort of talks through like step by step how do you install plugins and what the different plugins do so that might be helpful John asks to your point about chocolate variations is it easier to do that if chocolate is a node or property um so this was around can we figure out the hey all those things are our chocolate um so I mean I've got a bit thinking around this and as there's a couple of ways to do this so in a purist sense chocolate white chocolate dark chocolate they are all properties because we're doing that key value pair of name : and what the value is now there are a few ways we can look at this and the real fun thing with regards to that is you know we would do like this or you know you're sort of normal things where you may look at things like lunchtime distance or something like that where you see how different the words are but what we're quite keen to do and definitely this would be coming out soon when we start looking at different approaches is how can we use the graph and the relationship between at say the different types of chocolate that we can start to put the levels of certainty to say that these are all parts at the same group so you know watch this space cool and then we've got one more question I guess before we do our next one so from - can the can you explain the relationship direction so so in near vajay all relationships that you create need to have a direction so that we say goes from a source to a targeted or a start to an end note it doesn't actually matter like in terms of querying you're able to query outgoing and incoming relationships pretty much the same there's only like ones that like but you would normally want to indicate ok which direction am i am i working with the classic example of that is imagine that you're modeling the Twitter bra and you want to capture the followers relationship and let's say we're doing like a really popular person so let's say we're modeling Lady Gaga would say did he go go follows these people Lady Gaga is followed by these people we don't want to accidentally leave that direction off because there are going to be like 70 million people who follow Lady Gaga and if we're just trying to find who does an ad Gaga I'll follow it we don't want to go and have to look through all of those people in this case the way I the way I came up with that model was I just thought how was I think the recipe contains the ingredient equity you could probably argue the ingredient is in a recipe I don't know there's a seven-year correct yeah yeah cool so should we go back to our right so we've got so we've got some we've got so we've got quite a lot of ingredients we need to get get into the kitchen to make it scary but so let's take this a little bit further we start to think about and this is a very very basic recommendations query but just to give you a flavor so going back to that chocolate cake so let's say we really like that recipe and we want to find out what are the recipes it'd be all for that chocolate cake right and how we do that as you can see here we've got our reference to recipe and here's the recipe identify here and then what we do is we've got this pattern so we're going from here they were saying well the recipe was written by this author and then what we're saying is what are the other recipes has that will author written so we've always put this sort of palindrome pattern going on here and then what we to return is the other recipes that this author is written and new IDs so we've given it a start point here which is his recipe ID we're saying our pivot point is this author and then give us the other recipe so the author is written and again returning the recipe name and the ID and there we go a lot list of these since it's disappointing that this person is not like a mega chocolate cake I know you know I don't just only reviews chocolate cakes definitely look into that so I think we'll hand over to mark and we start looking at how we can be a bit more specific with the recipes yeah so video next one we're going to have a look at so this is kind of like what can I make if I've got some specific ingredients and what can I make if I've got someone who's really allergic to stuff like me who's coming around and I want to make sure I do kill them in whatever I cook so we're gonna have a look at how can we find things that contain ingredients now can we have a look at things that don't excluding or exclude ingredients so the simplest way would be to actually just do something like this so what we're saying here is hey I like stuff that has chili on so I've got very very simple taste and I want to say hey show me the ingredients that are recipes that have that contained the ingredient chili so we're doing kind of a similar thing as Lou showed us in the previous query so we this time we're just looking at finally all recipes where them so the way a cause is for a sort of filtering the results and so what we're saying in this case is I want to find it notes where there's a relationship from my recipe called contains ingredient and on the other side there should be known with the ingredient label with the name chili so ie in English find me recipes that contain chillings so it's reasonably reasonably simple I guess and we get we'll get back lots of different things so depending if this is like dinner at home maybe you get some some ideas on here but you can see we've got green apple salad we've got some Korean fried rice we've got all sorts of things so smoky spicy smoky barbecue barbecue chicken so it's really broad like this is not like I guess we probably wouldn't want just Chile as a filter but maybe we want we've got two things we want to fellas perhaps aren't fancy chili prawns this would not be for me I can't eat prawns either this is not not a great one for me but like the simplest way to do that like to extend the query would be okay well we'll just we'll just add another and statement and we'll find ingredients to contain base that works you can see now we've got things that contain prawns and chilies probably quite quite nice quite tasty if you're guess if you're in our time zone or a little bit of edit so we're coming up to dinner time disadvantage of this is what happens if I want to look for three ingredients or five ingredients I'm now gonna like my query is not very flexible but we can make it we can up we can refactor it to make it more flexible but the way we would probably want to use it is actually we might want to pass in the ingredients from a parameter and solely shave this before this is how you can set parameters in the new food a browser so what we're saying here is I want to create a parameter called ingredient so I'm gonna give it three ingredients egg onion and milk all right so let's just set those set those up so there we go got our parameters and then we can we can use a function it's an is a collection function called all and what it does is you can use it to basically iterate over a collection of items so in this case it's those ingredients so egg onions and milk and then it checks does a predicate that on though on those on each of the values in that collection is it true so every single predicate that we execute needs to be true in the predicate in this case so it's just some piece of code that returns true or false and in this case it's this piece of code that I've selected here so it's basically checking does there exist ie is there a relationship called contains ingredient from the recipe to an ingredient with the name I where I is one of the values in this list and it just goes through this list and checks for ingredients that contain that all of those things so these are things that contain milk onion and eggs and if we wanted to change that and say hey actually I want a file things that contain egg onion milk and apples I can just update my parameters and and one nice thing it's been in the news via browser for a while but you can just hit a little refresh on there and now there's anyone thinks I have to have country-style toad-in-the-hole if I want to ensure that I have every single one of the ingredients you can also vary this you could say I think it's any we'll check that it has at least one of the ingredients but what I wanted to what I wanted to finish this section off with this to show you another function called none which is really handy for excluding things and so I made like an extension for this query here so imagine we want to make something with coconut milk and rice but I'm allergic to eggs and milk so we'll make another another parameter called allergens and then this time we can find a recipe for me think of maybe so we're saying find me recipes where it contains all of the ingredients in my ingredients parameter so that's exactly the same as before but none of the ingredients in the allergens list and then and then the rest of the cruising exactly the same as before just very good so these are some of the things that that I would be able to have again with the query we could say okay imagine we had someone else coming around he's allergic to mango for example so you can see number three has mine going if we want to get rid of mango for our list so we just add mango to the allergens list and you can see when it runs these you get a little tick they tell you it's done you can have a look says hey it probably was successfully set that's great and then we can run it and now the mango will be gone from our list and so if we filtered it down a bit more so I guess maybe we have some questions and then we can we can wrap up so a couple of questions about how would you manage amount properties for ingredients and yes absolutely so it always comes back down to the kinds of questions you're asking and how they're going to be referred but absolutely you could in the contains ingredient relationships you could put a property on there and the property could be amount or quantity and impact you can specify what type so it could be for example amount 25 and type could be grams or something like that so absolutely that's one approach you could do if there was something a bit more generic so let's say for argument's sake all of your recipes are always going to be in quantities of let's say cups that's a most of the Imperial US style place and let's say for example you always have very specific things then for speed you might say well actually what I'm going to do is I'm going to change my relationship type from contains ingredient to contains three cups of contains half a cup of that kind of thing and in that way you have a much faster much faster query speed because you're not having to scan through the relationship properties that's a slightly more complex thing where you're looking for a really fast performance but absolutely you can attach properties on to the relationships for the amounts so there's definitely one approach to do that then there's a question about the pipes it's not like oh them yeah as a pipe code so we're not actually using it as a pipe operator in this case it's effectively just being used as a projection so just to show you like a really simple example of how you can use it it works on collections so if I said I've got a value in a collection so imagine we've got like a range of numbers from 0 to 10 I could use the pipe to say I want to I want to double each value so you see here I said hey give me the numbers from 0 to 10 and then apply this times 2 on each item um and so what we were using it for in the other place was to just grab the name for each node rather than so I guess that's actually we were use it this is here this here is cause a path expression and so what it lets you do is if you can take like some part of an earlier part of the query and then kind of apply effectively like a match query to that node in this case and get what's at the other end which is an ingredient and then just get the name in green and it will give you it back as an array of values and you could choose to say hey just get me like the first ingredient for example like this or you could say hey give me the first five ingredients like this so the the syntax is sort of it's a little bit based around graph QL and it's a little bit based around how Python collections work is this being recorded so Gmail as it's being coded yeah so so this is recorded exactly at the same URL where you are now I like for the for your question about can you show how to use a similarity algorithm to find similar recipes that'll be I think for pop pop to about 303 of the media blogs part to the video okay yeah and then doesn't even have a way to manage recipes in different languages that can connect say to an English equivalent a good question I think that's going to be a modeling exercise so I think generally I think looks really investigate but generally there will probably be some work probably quite akin to a knowledge graph where maybe you have eggs and then maybe in you know you've been connected to what the French equivalent is phrase which is and maybe like that that kind of thing I'm Spanish wave or so effectively you may well be you may be mapping that so that some of that will be a modeling exercise about how you want to represent that and then yet potentially you can sort of do it around that way yeah and then lien are they for your question about neeraj a three point five point three and therefore J three point five point two I guess this is probably not the easiest place to debug that so I would suggest at the top of this chat I've put a link to the community site I know I'm suggested you if you can post it post it in there and sort of show like what one error message are you getting and then something we can I live in I or somebody else if they get there quickly can can help you figure it out cat asks the pipe is a pipe similar to Python lambda function yeah I guess it is a little bit yeah so you effectively on the other side of the pipe you've got in our example in the value example that I gave you have access to to do whatever you want with value yeah I guess it is pretty similar to the lambda function what else did we have we have another question oh yes canon cipher read rules and update the database like a rules engine I would say this not not directly in cipher but in the a pub library that's linked a little bit up the the chat there's a concept of triggers so you can set triggers to apply like pieces of cipher based on something happening and I think you can you you maybe need to check have a look at the documentation of that and see whether it achieves what you want but I think that would be the closest that the effort and now colleague max de marzi has written some very interesting blogs as well when you want to write some real sort of heavy duty rules engines and things that's what he's written a lot of contents around that - hmm okay okay another question could you please add how would you go about classifying a list of ingredients to a collection or diet type so that yeah so that they're they've actually given it to you right in the Jason we already they already tell us so you see here that I've put on the screen on the right hand side they've actually already told us what is which diet type this belongs to indulge n't yeah so they've given us like I'll eat meat yes so these are the collections so all we did for this was we just took that array of collections and then we created a node connected to it oh creating a now you mean like a machine-learning type classifier that's going to be like pop for yeah I guess if you can again maybe the community side is the best place if you can describe like in a bit more detail what exactly do you want to do like it is like if you can narrow down the problem a bit for us we can now we can try and address that in the future yeah talk is there any plug-in that can do predictions of work with neural networks with the datastore and if J such as an integration with tensorflow or casts there our colleague Andrew Jefferson and David Mack have been doing some sort of I guess work around this and so I'll link to that is they've written a bunch of blog post they are called Octavian a tie search for that you'll find it but I will put a link there um I guess we maybe we can do a quick a quick wrap-up now and then if you have any other questions we can we can handle those on the community side afterwards so should I stop sharing this screen again I'll come back to us cool so yeah I guess I'll let you let you wrap up so you can we talked a little bit about some other things that we want to do yeah absolutely so I mean just of what we've shown you today we've shown you how to model import the data we've given you some insight into the kinds of questions we're looking to ask and this is pretty much going to drive you know the Beggs mullet that we've done maybe maybe the future may need to tweak it slightly and actually people talk about that and you know you would give you a very very simple idea of how you very simple recommendations engine how can you include and exclude ingredients please you've got the plain recipes guides go have a look have a play what we're going to be exploring next time is how can we start to do different kinds of recommendations that the recommendations could be for example on certain ingredients it could be on author there various elements there so that's definite we're gonna explore have a go have a go beforehand and let's see how we control some compare yeah and I guess before we end have you enjoyed the the talking you think it would be useful other people don't forget to like the video on YouTube and we'll be back again next week next week we're doing a meet-up on the Tuesday so I think it's a little bit earlier so if you and it's probably a little bit early for the West Coast in the US but it should be OK for them for other time zones and I'll be with my colleague Michael hunger and he's going to be talking about how we can build what he calls tag overflows doing like using so maybe this will be this might be interesting if you're interested in the similarity algorithms in the new FJ o graph algorithms library we're gonna be showing how you can apply those to the tagged data on Stack Overflow to sort of find like a taxonomy in there we've got final question Leonardo I'm interested in AI with new FJ yeah maybe maybe bring that in bring you a question to there to the community site and and we could talk about it a bit there I'm currently working on at data science machine learning online training course that we're going to be launching open in the next couple of months and so maybe that'll be that it would be interesting for you and give you some some ideas otherwise I think we should probably wrap up because it's probably time people to go home or get back to work so thank you for for spending the last hour with us I guess thanks to Lou for the idea and the problem all the work around building this and we'll see you all next time so thanks guys bye 