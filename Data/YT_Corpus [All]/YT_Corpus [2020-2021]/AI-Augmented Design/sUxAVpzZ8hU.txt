 Hey guys and welcome back, so in the last lecture, we spent some time setting up the prerequisites of YOLOv4, like visual studio, python, cuda, cudnn and opencv. If you have not completed the previous tutorial, then I highly suggest that you do because this lecture builds upon the steps we took in the previous video. So if you have completed that tutorial, then this lecture we are going to be installing Darknet Framework and thus YOLOv4. By the end of the video you will be able to implement YOLOv4 on an Image and on Video. Im sure you must be excited, so let’s get into the tutorial. nother thing, please don’t forget to Watch right till the end, to find out about how you can win one of 20 free enrolments to the course of your choice including this one. And, if you like this video, please give it a thumbs up, comment down below if you have any questions or any suggestions for future videos. Subscribe so you get notified when the next AI/AR tutorial is out. And feel free to share this video with any of your friends if think it will be helpful. So let’s get right into in and Roll Intro! So the full Yolov4 course will be available as a comprehensive course on Augmentedstartups.com. Im pretty excited for it because we are going to be covering a lot, from execution of a pretrained model on images, videos and webcam Labelling a new dataset in YoloV4 format Creating custom dataset from other datasets but in YOLOv4 formation and then we then train our own custom detector natively on your PC, We also Implement on a MultiGPU Develop some real application We also going to how you create a nice PyQT user interface for object detection using YOLOv4. I really hope that are excited by this course as I am, because if you are then you can enroll down below. Remember that I will not be publishing this course anywhere else and will be exclusive to AugmentedStartups.com Okay so if you are ready to get started with AI, Computer vision and Yolo V4! Click the link down below and let's get started. Downloading DarkNet Okay so first up we are going to be downloading the darknet framework from GitHub. Type in "Alexeyab darknet" in Google, click on the first link. And you’ll be sent over here where you can Clone the repository from the official Github of Alexyab So, we are going to deploy this repo into a new folder, that’s also easy to find called YOLOv4. Try to keep your folders structure as same as mine to avoid confusion later on. Open up command prompt by typing "CMD" in the search bar above. And then we can type "git clone" and paste in the clone link from GitHub. It will take a couple of minutes. Copying files into Darknet Now within the darknet directory, we need to navigate to build darknet x64. And then open up a new window and then navigate to OpenCV build bin Release. So what we need to do here is to copy OpenCV_ffmpeg and OpenCV_world.dlls for version 4.1.0 and then paste into the darknet folder in the same directory as darknet.exe. The reason for copying these files is so we use OpenCV video processing libraries. Copying CuDNN files into Darknet Next we want to go to C Program Files NVIDIA GPU Computing Toolkit CUDA v10.2 bin and copy cuDNN64.dll and then paste it in the same x64 folder into the darknet directory. This will help us speed up the neural network process. Changing the CuDNN version in Darknet Now the original repo used for darknet was CUDA 10.0. We are using 10.2 so we need to change the CUDA version here in darknet.vcxproj. Do a search for CUDA 10 and it will get you the lines that we require for the edit. Change it over here…. And over here. Save it . And lets do the same for yolo_cpp_dll.vcxproj Make sure to save it again. Compile YOLOv4 with updated CUDA version. Okay once that's done, go ahead and Open yolo_cpp_dll.vcxproj with Visual Studio. Once open, Select Release and x64 Right click on yolo_cpp_dll and select build If all went well you should see 1 succeeded without fail If this wasn’t the case for you, please try the previous steps again properly. Compiling Darknet To get our updated cuda version to work with darknet, we need to compile darknet.sln with Visual studio. So in D Yolov4 darknet build darknet, go ahead and Open darknet.sln with VS2019, if it prompts, just click okay Ensure to Set compilation to Release and x64 Right click on darknet and select properties So, in the panel we need to make 4 changes. Go to C/C++ - General - Additional Include Directories: and we want to add in the directory for the OpenCV include folder which is C:\OpenCV\build\install\include Click Ok and Apply If you followed my instructions earlier then paths should be same we go to C/C++ - Preprocessor - Preprocessor Definitions and remove CUDNN_HALF as Yolo v4/3 uses Tensor cores and we dont need to use it for the GTX 1080 However if you using a GPU with Tensor Cores like the nVidia Titan V / Tesla V100 / DGX-2 and later) then add CUDNN_HALF and this will give you a speedup of 3x in detection and 2x in training. Next go to: CUDA C/C++ - Device - Code Generation and remove compute_75, sm_75 if you’re not using Cuda 10.0. We are using 10.2 After that go to Linker - General Add the lib directory from OpenCV build folder C:\OpenCV\build\install\x64\vc16\lib Click okay to exit. Now don’t worry we are almost there: Right click on darknet and select build After a successful build, let’s try to import darknet in Python from x64 folder Open up CMD in yolov4 darknet build darknet x64 directory Let’s open up python and type in "import darknet" If no errors cropped up then it should be imported. Otherwise if you ran into any issues right click on darknet in visual studio and click clean the build and ensure that you follow the earlier steps properly again. Run Detection on Images Now we are ready to test out YOLOv4 on images and videos. But first, you need to download the weights from the alexyAB github repo and have a test video or image ready as well. Paste them both into the x64 darknet directory. And now we are ready to run the detector! YaaaSss Now this is quite a long command, I'll have these commands pasted down below. darknet.exe detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights After it initates the neural network It’ll ask for the input path of the image. So we have an image of a dog. And we just need to copy the directory of the image file and paste right back into command prompt. And there we have it. If you take a look at the output image, it will show you the detected objects as well as their confidence percentage. Run Detection on Videos Now that you have images working, lets try it out with videos. To get video working, we need to type in this long command over here. darknet.exe detector demo cfg/coco.data cfg/yolov4.cfg yolov4.weights PATH_TO_THE_VIDEO Where it says PATH TO THE VIDEO, replace with the name of the video. In this case, mine is test.mp4. This command will be down in the comments, if you don’t want to type it out. Now what I want you to do, is to try this out with a different images and videos and post a link to it in the comments, I would love to see what images and videos that you guys have tried and tested Okay so now that we have YOLOv4 working, lets take a look out road map going forth. Tut 1, we spent setting up the pre-requisites Tut 2, which is this lecture, where we installed darknet & implemented YOLOv4 on an image and videos Tut 3, we will look into YOLOv4 into the python code for real time object detection on video, for recording the video with detections as well as using on a webcam. Tut 4 onwards, we will be building some practical apps that we can use in the real world like social distancing Dataset labelling and training your own custom YOLOv4 objection detector will be a part of my comprehensive YOLOv4 course, I’ll have a link to that below. And, if you like this video, please give it a thumbs up, comment down below if you have any questions or any suggestions for future videos. Subscribe so you get notified when the next AI/AR tutorial is out. And feel free to share this video with any of your friends if think it will be helpful. Okay, so earlier I mentioned that if you are interested in winning one of 20 free enrolments to any of the augmented Startups courses, then all you have to do is like and comment on this video and sign up at the link below. Winners will be announced every 3 months. You can comment on anything or provide suggestions for upcoming video and ideas as I’ve mentioned earlier. Thank you for watching and we'll see you in the next video. So the full Yolov4 course will be available as a comprehensive course on Augmentedstartups.com. Im pretty excited for it because we are going to be covering a lot, from execution of a pretrained model on images, videos and webcam Labelling a new dataset in YoloV4 format Creating a custom dataset from other datasets but in YOLOv4 formation and then we then train our own custom detector natively on your PC, We also Implement on a MultiGPU And develop some real application We also going to how you create a nice PyQT user interface for object detection using YOLOv4. I really hope that are excited by this course as I am, because if you are then you can enroll down below. Remember that I will not be publishing this course anywhere else and will be exclusive to AugmentedStartups.com Thank you for watching and we'll see you in the next video. 