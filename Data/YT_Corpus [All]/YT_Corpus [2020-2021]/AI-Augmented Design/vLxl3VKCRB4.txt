 In this video, I'm going to introduce AI-augmented modeling with Kyligence. Powered by our new AI engine, users are able to create a self-learning model, which can pass your query patterns and become smarter. By learning your queries, it can understand your analysis requirements, optimize indexes, and accelerate your slow queries automatically. Now, let's get started. First of all, let's take a look at how to create an AI-augmented model. Instead of creating the model manually, we can create a model by importing existing SQLs. The system will analyze your queries and extract dimensions and measures from those queries, and define relationships between tables automatically. This is really helpful when you have a lot of tables in a model. You can also modify the auto-generated model by drag-and-drop, just like what you'd do normally. All right, we already have a model now. Before loading data into this model. Let's try to run some queries first. Right now this query cannot be answered by the model we just created because the model doesn't have all of the dimensions and measures in this query. So this query will be pushed down to the data source directly. Push down can guarantee your queries' response, but the performance will not be as good as the models'. Okay, it took 38 seconds to get the results. Let's try to accelerate this query with our AI-augmented model. Our goal is to make the query latency less than one second. All the queries will be captured by the system. You can choose which queries you want to accelerate. Sometimes you don't want all the queries to be accelerated because end users might send as many queries as they want. Here we have some rules you can define to limit which kinds of queries should be accelerated. You can specify filters by query frequency, by user roles, or by query latencies. All right, the query we just ran has been captured by the system. You can accelerate this query by just clicking the "Accelerate Now" button. The system will give you some recommendations about how to modify the model to make this query run faster. As you can see, two more dimensions and one more new measure have been added to this model. It also generates a new index for this query. After you've accepted these recommendations, a new job will be triggered automatically to build the new index. After this job is finished, the query results should be returned super fast. Great! The job is finished. It's time to show the magic. Let's run the query again. If you remember, last time it took 38 seconds to execute the query. Let's take a look. Here we are. It only took 0.2 seconds this time. That's how our AI-augmented model works to accelerate queries. 