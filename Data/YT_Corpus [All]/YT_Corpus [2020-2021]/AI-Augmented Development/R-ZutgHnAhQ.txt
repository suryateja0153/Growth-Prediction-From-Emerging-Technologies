 Hey guys and welcome back, so in the last lecture, I showed you how to install darknet as well as YOLOv4. And with our new sets of skills, we applied YOLOv4 to images and video. Today I'll explain: 1. The darknet.py code 2. How to save videos to a .avi file, and 3. How to use YOLOv4 on a web cam. Before we do, let’s take a look at our road map So Tut 1, we spend setting up the pre-requisites Tut 2, we installed darknet & implement YOLOv4 on images and video Tut 3, Which is this one, in which I shall explain the darknet output code for video and webcam execution. Tut 4, the next one we’ll be creating a Social Distancing App Okay so let’s get right into it Another thing, please don’t forget to Watch right till the end, to find out about how you can win one of 20 free enrolments to the course of your choice including this one. And, if you like this video, please give it a thumbs up, comment down below if you have any questions or any suggestions for future videos. Subscribe so you get notified when the next AI/AR tutorial is out. And feel free to share this video with any of your friends if think it will be helpful. So let’s get right into it and Roll Intro! So the full Yolov4 course will be available as a comprehensive course on Augmentedstartups.com. Im pretty excited for it because we are going to be covering a lot, from execution of a pretrained model on images, videos and webcam Labelling a new dataset in YoloV4 format Creating a custom dataset from other datasets but in YOLOv4 formation and then we then train our own custom detector natively on your PC, We also Implement on a MultiGPU And develop some real application We also going to how you create a nice PyQT user interface for object detection using YOLOv4. I really hope that you are excited by this course as I am, because if you are then you can enroll down below. Remember that I 'll not be publishing this course anywhere else and will be exclusive to AugmentedStartups.com Okay so if you are ready to get started with AI, Computer vision and Yolo V4! Click the link down below and let's get started. So before we get into the code, I want you to go over to my Github repo and download a modified version of the darknet_video python file, which is the file in which we can access our detections, perform our processing using OpenCV. It is called darknet_video_mod.py Darknet.py Code Okay so the code, Let start right here at the bottom So, this is the main function which calls the YOLO definition function up here and this is where all the magic happens. Now within this function, we start defining the paths of the config file, the weights and the meta data. This block over here, checks whether the file exists, otherwise it will return a Value Error. Moving on to the next block, it looks like a lot is happening here but these series of nested if statements check for metaMain, netMain and altNames files and loads them into the script. So metaMain loads the metapath. In our case we are using coco.data which is metadata of several parameters like class names, train & validation path, names path [in coco.names], and backup path netMain loads the configuration file with the relative weights. In our case config file is 'yolov4.cfg' and weights 'yolov4.weights'. We can choose which .cfg and .weights file we are going to use it with. altNames loads the names file[coco.names] mentioned in metaPath. which creates list of the classes and load it to network. So it defines which parameters we are going to use with our detection script. Now this is where things get a bit more interesting, there are 2 lines here which do more or less the same thing, however 1 captures video from a webcam which is this uncommented line here and the other gets video data from a prerecorded video file, in this case we are reading from test1.mp4. You can insert whatever video file you want here. So these are standard OpenCV functions. Now when we process the video, the window that is displayed is not in the correct aspect ratio as expected, so we need to set it manually over here by setting the frame width and height. VideoWriter helps us to write or save our video file that we can view the processed video at any time. We set out our save directory over here Here where is says darknet_image, and we want to create an image that is compatible with our darknet network. Within the whileloop are the code sequences that load the input frame and write the output frames Moving on to this line which captures the frame and returns true if frame is present, however if the frame is not present, it will break the while loop. If you are familiar with OpenCV functions, cvtColor can be use to change color space, in this case from BGR to RGB. In the next line we resize the frame using linear interpolation. Now remember earlier we created a darknet image, so over here we want to copy our input frame bytes into the darknet Image. Detection occurs at this line and return the predictions. What is nice is that it allows us to customize the detection threshold – Currently we have it set to the default 0.25. Below we have functions that handle the drawing of the bounding boxes and text. You will find that function cv Draw box right up here. This huge block here is the color dictionary for each class, It just defines the color the bounding boxes should be use for each class, you can set it to whatever you like cv2.imshow is common, and it displays the image. Out.write writes the detected frame to the output video that we specified earlier. And we are almost done. We just need to release the out capture and writer processes Running YOLOv4 on Video Okay so great hope now you have better understanding of how the script works. Let’s go ahead and run this video. So, because we already specified the video in code, in command prompt, we just need to type in python darknet_video_mod.py and run our detector. Just ensure that you have the same video in the same folder Also create a folder called Demo, and that will contain our output demo video that will write to. Okay so let’s run the demo, press enter, and everything should be running as expected. Running YOLOv4 on Webcam To run YOLOv4 on Webcam, it is very simple, We, just need to uncomment this line over here and comment this line for locally stored video detection. We can run our command again in command prompt, python darknet_video_mod.py, press enter and voila! Okay great! So now that we have all the foundation necessary for building your YOLOv4 apps. Let's take a look at our road map again So Tut 1, we spend setting up the pre-requisites Tut 2, was about installing darknet & implement YOLOv4 on images and video Tut 3, Which is this one, and this is where I explained the darknet output code for video and webcam execution. and in the next lecture we’ll be focusing on a Social Distancing App using YOLO v4 Dataset labelling and developing custom YOLOv4 objection detector and training will be a part of my YOLOv4 course, I’ll have a link to that below. And, if you like this video, please give it a thumbs up, comment down below if you have any questions or any suggestions for future videos. Subscribe so you get notified when the next AI/AR tutorial is out. And feel free to share this video with any of your friends if think it maybe helpful. Okay, so earlier I mentioned that if you are interested in winning one of 20 free enrolments to any of the augmented Startups courses, then all you have to do is like and comment on this video and sign up at the link below. Winners will be announced every 3 months. You can comment on anything or provide suggests for upcoming video and ideas as I’ve mentioned earlier. So the full Yolov4 course will be available as a comprehensive course on Augmentedstartups.com. Im pretty excited for it because we are going to be covering a lot, from execution of a pretrained model on images, videos and webcam Labelling a new dataset in YoloV4 format Creating a custom dataset from other datasets but in YOLOv4 formation and then we then train our own custom detector natively on your PC, We also Implement on a MultiGPU And develop some real world application We also going to how you create a nice PyQT user interface for object detection using YOLOv4. I really hope that you are excited by this course as I am, because if you are then you can enroll down below. Remember that I 'll not be publishing this course anywhere else and will be exclusive to AugmentedStartups.com Thank you for watching and we'll see you in the next video. 