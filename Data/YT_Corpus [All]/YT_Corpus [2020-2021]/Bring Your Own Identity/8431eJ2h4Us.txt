 let's see if this scenario sounds familiar you find yourself working from home and using a bunch of sass applications in the cloud now one of these applications let's call it keep your fingers crossed accounting doesn't work with my work account so I have to sign up with a new password and it never remembers Who I am so I have to keep signing into the application over and over again now let me tell you about a second application let's call this one contoso accounting Pro 2020 this app lets me sign in with my work account it always remembers Who I am and it lets me invite my external business partners such as distributors suppliers and set permissions on what they can access Oh in my IT department told me this app is super easy to manage they get auditing the ability to revoke permissions to data and they can set conditional access policies like multi-factor authentication whenever I'm not on the corporate network by using the Microsoft identity platform we're going to help you build the second application and it's easier than you think this is the same developer experience in libraries used by visual studio teams and other Microsoft applications welcome to this live bill 2020 session my name is say doctor and I work on the identity division at Microsoft I'm a lead program manager and my team drives requirements for authentication libraries at Microsoft the format to date is to cover about 15 minutes of content and then save plenty of time to answer your questions we'll start with the basics of the Microsoft at any platform and everything you get for free inside the box then we'll talk about what's new we have some additional platforms and scenarios to talk about for the Microsoft authentication libraries and some exciting news regarding the ability to sign in external identities or users outside your organization let's start with the benefits of using the Microsoft and any platform your applications by using the Microsoft and any platform you're getting all of the have you're giving all the heavy lifting to Microsoft such as permissions and consent compliance privacy regulations breach detection auditing reliability performance and so much more this is great news because it allows you to focus on your core product and shipping your application you can save time and money by developing your app but it's not just about saving time and money your app is going to be more successful because of four reasons first we're going to reduce sign-in friction the Microsoft identity platform enables users to sign in with their preferred identity in using a familiar user experience second security is enforced by Microsoft and you'll always get the latest in identity innovation such as password lists without having to build it yourself third your app will be easy to manage by IT and comply with IT policies and last your application will get access to rich data it's easy to ask the user for permission to data and then call Microsoft graph for your own API to summarize by using the Microsoft and any platform you'll save time reach lots of users and your application will be future-proof getting all the latest innovation in identity now let's see what you get as a developer last year a build we announced the unification of our identity platform for developers which means one platform to sign in any identity as a developer you now have one portal to register all of your applications one set of libraries and SDKs with the Microsoft authentication libraries that give you the best experience for single sign-on and compatibility with policy set by IT they depend on an endpoint which is standards compliant and also allows compatibility with third-party libraries you can securely access web api's such as Microsoft graph or Asha resources or you can protect your own web ad eyes this gives you the ability to authenticate any identity from Azure ad accounts to Microsoft personal accounts to external identities external identities includes users from other organizations social accounts like Facebook and Google or even sign up with just an email and our platform is built on open industry standards the Microsoft identity platform makes it easy to integrate identity into your application now let's cover the Microsoft authentication libraries although you're able to use any standards-based libraries to connect to our platform these libraries provide great single sign-on experiences and make it easy to comply with IT policies such as conditional access at build of last year we announced a general availability of M cellnet and M self for JavaScript and ignite we try announced the general availability of M cell for Android iOS and Mac OS and Python and Java became generally available at the beginning of this year and we've heard your feedback on which platforms and scenarios you wanted to see next today we are excited to announce the general of the veil ability of M self for angular this allows you to build single page applications or JavaScript based clients in the latest version of the angular framework we're also announcing a preview of M cell JavaScript 2.0 which provides compatibility with privacy controls in Safari allowing those users to get single sign-on it uses a new standards based protocol called auth code flow for spa and supports pixie security we also have a preview for applications targeting first line workers such as hospital workers using shared devices it allows these first line workers to pick up a shared device signing globally to all applications and when they're done with their shift they can sign out of all the applications with just one tap so the device is ready for the next first-line worker and the newest member of our Microsoft authentication libraries a preview of Microsoft Identity web which makes it easier to build dotnet core web applications and web api's let's dive a little deeper into that one so what is Microsoft identity web today if you wanted to build a web app or web api calling downstream web api's there's some code involved to handle incremental consent or conditional access it requires some expertise in validating access tokens with asp net core exchanging some artifacts and calling the downstream api using m saldaña what Microsoft Identity web does is it provides the glue between Microsoft between asp net core and M cell net it dramatically simplifies the developer experience this code actually shipped is part of our samples and we heard your feedback that you'd like to see this package as a new get and supported by Microsoft so if you're building a web app or web api and asp net core be sure to check out this preview and give us feedback let's jump into a quick demo now here I've got an asp net core web api it allows for anonymous access in my weather forecast controller i've got a get API that returns a JSON blob for the weather forecast it uses my top-secret algorithm probably about as good as your local weather forecaster now let's take a look at the client this is a desktop council application pretty simple I'm just using an HTTP client to request data from my anonymous web API and it's going to spit out the data on the council let's write okay great we've got our JSON data it's being displayed on the council application and the client is requesting anonymous data from the web API now how do I secure and protect this wave API well let's first start with the reasons of why you would want to protect this web api imagine that you need to know who the user is in order to do billing or maybe you want to personalize that data by calling a downstream API like Microsoft graph such that you could combine say their office location with your algorithm in order to provide personalized data back to the climate the way this is done using open standards is to validate that the client is sending a authorize header with an access token the access token is retrieved from Microsoft ok Microsoft identity platform and let's take a look at how this is done let's start with a preju stration so here I've gone into the azure portal and I've registered my web API and I've gotten an application ID and some other settings here I'm going to jump into the section that says expose an API and here I'm going to define some new scopes such as weather dot write and whether or not read perfect we're all set up let's jump back into the code and start making some changes the first thing I'm going to need to do is take all of those settings that I got from the azure portal from my web api app registration copy and paste them into my app settings you know I just give this any name I'm calling this my app registration settings and I've got my client ID and tenant ID so this is ready to go now I'm going to jump into startup we're going to insert some middleware for authentic key for authentication and authorization and we're going to insert some middleware this is a function from Microsoft Identity web and it allows me to protect add a protected web API and it takes in the app registration settings that I added to app settings JSON next we're going to go over to the weather controller weather forecast controller and now I need to first decorate this Web API to say that it requires authorization next I need to define the scope this is the weather dot read scope that i defined in the azure portal and now here's the fun part in the incoming request we need to validate that the client is sending an access token and it has the necessary scopes that are required to call this API in this case we're going to require our weather dot read scope great let's save this off now let's go ahead and run and see what we've got now remember we have not updated our client yet so our client is still going to try and make an anonymous call to the web api and the web api is going to validate that an access token is in the header which is not and so we should get back an error code on the web api saying HTTP 401 unauthorized great we've protected this web api but now i need to update my client in order to securely call this web api how do i go about doing that now let's jump over to our client here's our HTTP client where we're anonymously calling the Web API what I need to do is insert an authorization header so first we're going to use M cellnet on the client console application to authenticate the user then we're going to print out data about the user we just authenticated like the user name and then it's going to add a access token in the authorization header so that we can call our API let's try it so here we've here we go calling this protected web api I'm already signed in to this device so it should tell me hello you're signed in call the Web API awesome it returns the data we are now have a secure web API that we are calling from a client that gets an access token from the Microsoft attendee platform in order to call my secure API that was super simple now you could take this even further I mentioned that Microsoft Identity web is great for scenarios for calling downstream web api's I mentioned earlier that maybe you wanted to personalize the data by calling Microsoft graph in pulling data such as your office location under the hood Microsoft Identity web takes care of all of the complexity of doing the on on behalf of flow taking an access token from the client in exchanging it for a new access token for Microsoft graph now the reason I couldn't just take the client the clients access token and call Microsoft graph with it is that its audience is set to my web API and I wouldn't want replay attacks if I were to try and take an access token for the wrong audience and send it to Microsoft graph so I need an access token from them soft identity platform for audience Microsoft graph so the way that I would go about doing this is I'd first go into I've got a a new file here that's set not to compile just so that I can show you the changes that would be necessary and where I had the Microsoft identity web set up just as before with my app registration settings for protecting my web api i add another function saying my api is going to call downstream web api eyes which are also protected it can take the same app registration settings but there's one additional setting that we'd have to add which is a certificate or application password we recommend using certificates because of the operational security but if you're just doing a test application an app secret would work and we have to tell microsoft and nad web where to keep the access tokens in a cache now imagine that I had a distributed web api which had multiple instances and I wanted to cache for optimization purposes all of my access tokens such that more than one instance of my web api can access it maybe I'd store this in sequel or Azure storage but in this case I only have one instance of my web api so I'm going to use in-memory token cache and next I would make some changes to my weather forecast controller first in my constructor I would add I token acquisition and then when I'm ready to call my downstream Web API I would pass the scope that I need to call my Web API so this is a user dot read Microsoft graph scope it Microsoft at any web makes it easier to do on behalf of flow get the access token necessary to call this downstream of API and now I'm ready to call my downstream Web API makes it way simpler and dramatically improves the developer experience for this scenario so in summary Microsoft Identity web makes it easy to build web apps or web API is that called downstream Web API it's like Microsoft graph today we are announcing the public preview of a new feature in Azure Active Directory called external identities your organization likely collaborates with lots of external users especially in these times we're all adapting to remote work this feature allows you to build applications that sign-in customers citizens distributors suppliers and other business partners in your IT administrator will be able to manage all of these dynamic relationships while protecting access to apps and data here's a demo app we call Woodgrove groceries you might be familiar with a ad b2c here we're using Azure ad with the external identities preview to give users access to apps and data within your organization with this preview you can now build self-service signup flows for users from another organization or users with a social identity like Facebook or Google as a developer you just integrate with the Microsoft identity vout2 platform using any of our existing quickstarts or samples then the self-service signup flow and the social identity provider can be configured in Azure ad your app will work seamlessly with these new types of users without any complex code changes required if you'd like to see a demo of how to build an application and configure external identities for your application we have some great pre-recorded content for you the external identity scenario I just described is covered in the session I have in bold be sure to check out this in other on-demand sessions if you don't have time to note down all these links you can download this presentation after the call so how do you get started well we have a number of resources available to you you can also find us on github Stack Overflow UserVoice Twitter and more a big thank you for attending our session and now let's open it up for questions releasing so one question that I'm seeing pop up is are there plans for additional platforms and languages supporting themselves in particular view or node yeah absolutely great question so we are actually have started on node and we're actually focused on the client scenario first so one of the things that we're doing is we're actually building MSL nodejs so that vs code can take advantage of this library and another thing I'd like to quickly show you is that you can find all the applications and platforms that we support in the azure portal so if I were to just jump into the azure portal and go over to asher active directory and I go into my app registrations pane if I were to just create a new application and just give it a name register it and I jump into the QuickStart experience here you can see all the different platforms that we support and if I jump into one of these you can see all these different samples that we have some of these are tutorials that walk you through step by step and others are integrated right into the portal for the integrated ones that are in our portal integrated as a first-class experience you can actually just click with one button have them make the changes for me and download a working sample that was that quick to get something up and running on the platform awesome now on these authentication libraries do are they integrated with mobile device biometric authentication like face ID touch ID you touch them on password list a little bit curious about them occasionally library support those yeah so on on mobile one of the advantages of the Microsoft assign ocation libraries is that they're integrated with the system browser so this allows us to take advantage of some new standards that are emerging for Fito and password lists and other biometrics and so it allows us to basically take advantage of all the latest innovation and provide it to you without needing to dramatically change your application so I think just by keeping up to date with the latest version of the Microsoft added authentication libraries you're going to be able to take advantage of all this innovation awesome now does the identity libraries also support us yes the M cell dotnet library actually supports the latest version of a DFS and the reason why the latest version is required is the latest version of a DFS actually did some protocol standards compliance work to make that their latest version completely standards compliant and so because M cell has a dependency on all these open protocol open standard protocol libraries you'll have to get the latest version of of em cell net as well as a DFS in order to get that scenario up and running but we you should be able to find some samples in maybe some folks on the chat can connect you with links to those samples awesome switching gears a little bit talking about B to C can you tell me what are some of the common scenarios are when it when it is best to use something like as your active directory to see yeah that's a great question so azure ad b2c has been a product offering that we've had in market for a while and it's really great at signing in users with any social identity self-service signup flows show up with just an email and create a password it can be completely branded as your own experience so if you have like say a shopping or retail type of scenario this product is awesome for signing in your customers now one of the limitations is if you want to give external users access to data that is part of your organization say you had business partners distributors or suppliers and you need to give them data that either applications like say the office applications or you need to give them you know SharePoint data or your own Web API is which are protected using your tenant your organization's tenant then external identities is the right path in this scenario and if you take advantage of this preview you would be able to sign in these external users and then have some sort of flow that you know after they've done self-service sign up that there is some sort of validation and yeah they are who they say they are yeah this is a supplier which I want to let into my organization and after that step you know that's done programmatically through an API then they would be able to start being assigned access to data within your organization or applications within your organization I definitely we've got some really great recorded content on this scenario and step by step instructions of how to configure this in Azure ad and get your application up and running with the scenario so definitely check out that recorded content awesome so a quick follow-up on the B to C scenario can you do custom roles with immediacy for example can you give certain users elevated permissions if they're using third-party providers like Facebook or Google well when you're signing in the user ah sure ad b2c there is a way to request access tokens to call the Facebook Graph or call you know Google api's for the user that's signing in with a Facebook ID or a Google ID and the consent screens and those scenarios are rendered by you know Google or rendered by Facebook and so you can request you know access to data get access tokens and call you know API is in their system and then you can also with a 3d b2c protect your own web api so when I'm protecting my own Web API and I'm configuring you know the application ID and the tenant ID just like we did in this demo just a few minutes ago I would have to enter a tenant ID in and application ID for an application that's registered in my asher ad b2c tenant and that would give that would be allowing access for users within asher ad b2c to call web api is protected by a sure ad b2c but what i was alluding to with external identities is that you may have applications or data in c and sharepoint or something where you want to give users external to your organization access to those resources or you want to build applications that do self-service signup flows for your suppliers or distributors and that's where this external identity preview comes in awesome looks like we just have a minute left any last words in terms of how to get started yeah be sure to you know check out some of our previous content we've got lots of stuff there be sure to check out the azure portal and the QuickStart experience you should find you know loss of tutorials and quick starts maybe some new stuff that you haven't seen before because we've been iterating on the azure portal and thank you everyone for joining this is this has been awesome thank you 