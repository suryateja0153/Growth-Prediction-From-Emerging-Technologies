 So in this video i'm going to attempt something different.. Up to now all my creative coding was done in TypeScript on the html canvas. I'm starting this new series where I attempt to make generative art using Flutter You might wonder what Flutter is. It is a UI framework from Google for cross-platform mobile and desktop app development. From the looks of it it can create beautiful user interfaces It seems to have a good documentation and support from Google as can be seen from these short videos from Flutter team. They look like a fun bunch of people. Some people had used Flutter for generative art. For example Robert Felker speaks highly of it in this video As usual I will be using VSCode for development How to set up VSCode for Flutter development is well documented here in this webpage I will leave a link in the description for you It is very easy to install and set up but will take some time I'm not going to go through the setup in this video Once you've set up go ahead and create a project. Again, the web page tells you exactly how to do this When you create a project, Flutter plugin generates template code for a default application. First thing to do is to delete some parts of it so we can add our bits. Flutter uses Widgets to organise UI components. and uses composition over inheritance to create complex widgets Here we are replacing the default ui widget tree with a custom painter The custom painter allows us to draw onto a canvas. And it also has a ui widgets on the same component. The painter defines the canvas we will be drawing to. And the child defines the UI Widget tree if you want to have some normal ui components like buttons and sliders. Flutter plugin makes things easy by generating code for us. Here we can generate the class MyPainterCanvas There are two methods we need to implement: Paint and ShouldRepaint. Since we will be doing animations, which require repaint every frame, we will set it to return 'true'. It's best we move this new class to its own file so the code will be easier to manage. We can remove the annoying debug banner by setting this flag. So we are ready to draw something onto the canvas. We do that inside the paint method. Let's draw a circle. It takes three parameters: a centre position, radius and a paint object. We will draw the circle in the centre of the screen, and we'll have a radius of hundred. The paint object tells how the circle should be drawn, for example the colour is set in that. Let's set the colour to red. Nice! I love it! Konnichiwa everybody! By default the painter, is a background painter. Which means the child UI widgets will be drawn on top of it. As you can see here. If you want to draw on top of the UI widgets there is a foreground painter you can set as well. But we are not going to do that here. okay great! Now that's done let's create some particles. If you've been following my previous videos you know that all my drawing is done with particles. So here no exception i will create a class called particle, with a bunch of properties like position colour and its velocity. Small refactor here to move this class to a new file if you are new to software development, do this type of tidying up frequently. It makes your code easy to read and maintain. So now i'm going to create a list of particles and then initialise them. The initialisation is done in the InitState method of a widget. Here i want to create an array with 10 elements. And i will iterate the array and initialise each particle. Seasoned Flutter developers will notice that this won't do what i intend to do. And i will fix that very soon.. Here i'm trying to assign a random colour. In order to do that i need to generate a random number And then we set the speed and angle of the particle and its position. we need to pass this list of particles to my painter canvas, where they will be updated and drawn So in the update section I will make sure that the particles are within canvas bounds and also convert the polar velocity to cartesian velocity. So we can quickly calculate the particle position. Honestly it's a bit messy how i do this here, I could be more straightforward i promise to do better next time :) Okay now let's set up the paint loop Finally let's run this. Fuuuuuuuuu! &lt;Laughter And we are slapped with a wall of errors. Who has time to read all that c*** So this is because of a null reference error. This is one of the deficiencies of Dart where anything can be null. Nullability is improved in a later version of the language. But here the reason for this error is that when we created the list we allocated elements thinking that it will create those elements. but they don't get created. Instead we have to use something called generator, which will create the elements for us Let's quickly fix that So here we are... As you can see that the position of the particles don't change when we refresh This is because the random seed is constant. Let's use the 'time since epoch' in milliseconds as the random seed. Fine! That seems to do the trick So now let's try to animate these particles. Heading over to the docks to see how it is done Animating things in Flutter is not as straightforward as in html canvas It requires a fair bit of scaffolding code first thing to do is to extend our paint widget with a TickerProvider. And then add the AnimationController and the Animation object to the class. They will be initialised in the InitState AnimationController needs the TickerProvider as the 'vsync' and we add a listener function so each time the ticker goes off we can update our variables. Controller needs to be disposed so we add that to the dispose method. And these boilerplate bits to keep the animation moving forward. And there you have it, moving bloody particles.. :) So this video took a little longer than usual. That's because we had to set up the scene for the future experiments. As always thanks for watching. And if you like what i create, please Like, Subscribe and Share In the next video i will explore some geometric experiments with Flutter canvas Tune in then.. 