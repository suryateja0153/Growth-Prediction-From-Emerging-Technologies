 yeah I know that the title is sort of buzz worthy it was either this or idiots building telephone system so yeah yeah you think I'm kidding well hello my name is Kip Moscow licensed Danish and means brilliant engineer don't don't check it just take my word for it Danes don't don't know this is a story about how we you start how we came to you start in the building of soft real-time system with a browser UI I'm trying to cover some of the more well at least in my opinion interesting aspects of this so the talk focuses mainly on the server-side aspects of dart and some of the development methods that we've used this is my best effort to try to summarize roughly five years of development into 25 minutes so I hope things don't get too fragmented why should you watch this talk the nice people at Google asked me this so I'm including it at first I answered this without hesitation I have no idea because I didn't felt this was a big thing but it got me thinking why so it's basically an example the dart is not only it's not a web only language it's actually stable enough to base availability critical businesses on it okay and we've used it for a variety of things which I'm going to cover and also it's a story about dart in the wild which is also it's it's always fun it's always fun for developers to hear stories about how you solve this and you used language X something I got but first a bit about the problem at the project sorry the project which is actually the turning point of this talk started roughly 5 years ago with the purpose of replacing an existing legacy system for a company that hosts external receptions now this is the best description and it's sort of abstract I know so the following slides are meant to take you through the business model in order to hopefully unconvince model is not complicated but it's hard to communicate I'm going to try to give an example this is Mark you know so due to licensing issues this is Mark it's the me mark mark is a hard worker he does not mind getting his hands or head it would seem very dirty but as he is doing his work this happens so now what this is a very important customer darling now luckily Mark has a reception hosting service at reception hosting Inc now what do they do they pick up his phone and they send it to Lars if he's available if he's not available they could just take a message so this is basically what they do and reception hosting inks business model is that they do this for many different companies which all of them have their heads in tubes but they need some software to actually realize this business model and who does that spoiler alert backing up or fast forwarding depending on the view I'm going to give a brief overview of the system architectures this is the old system architecture which consisted mostly of broken love tears and trash it's all so horribly interconnected which included a Windows XP only client this is actually the serious part of it it had unfixed critical box you had to restart it every week and all these things so we really wanted to make things right this time around this is supposed to is that orange it's orange here I'm horribly colorblind so you may need to scratch your eyes out for the rest of the diagrams the components here which are sort of orangey are the ones that we've written in dart this is a high-level view of the at the components of the system receptionist over here should be viewed as a receptionist desk every receptionist has a web client and the SIP phone notice there are no communication between these two every synchronisation needs to happen here so updates to the web client are sent from here actually through a notification service but that really matter to the web client the basis of it is a software PBX for those of you who do not know what a PBX is it stands for private branch exchange which says nothing about what the hell it is I don't know what this point is called at but it's it's a piece of software that handles phone calls in queues people and things like that so every time you're annoyed in a phone queue you're hanging in a PBX this is event-driven so events will emit from this software PBX onto the call flow service which will then translate it put it into the web client make logic decisions based on it detect phone state there's stuff like that every time a receptionist wants to pick up a call they need to proxy it through this call flow control service and the call flow control service will then send it to the SIP phone all right is it over you yes live demo let's see where did I put it okay so this is the user interface it's generated mock data it I've used my test environment to auto-generate and start this so it it's yeah it's Danish mock data sorry I've also I'll be with you in a minute I've also coded up for this event a small automation script which would actually place a phone call put it into the queue which is over here and everybody see should I assume this okay good okay should put it into the queue wait for 5 seconds then bean pickup placed into Michael's wait five more seconds and then being answered it's just which it's you know so you have this well this greeting you have some reception filter selection some commands what are you going to do when you get a call you can take a message you have some contact so you can call Lars or anyone else so I'm going to press ENTER now and hope for the best yay so phone call is ringing this is an actual phone call in the system it'll be answered wait five seconds and then be hung up again this was the easiest example I could get working without stuff breaking I hope it gives you this is the receptionist view so I hope this gives you basic overview of how they work and then I need to go back to the slots which is located there yeah okay so this is for fallback I didn't need it okay so why dot did you always start out with that as I was saying at the beginning we were idiots Building telephony systems I think that's sort of an overstatement I would describe it better as monkeys with big ambitions we knew absolutely nothing about telephony or a lot of these things before we started this so we had big ambitions so obviously we started out programming this Eneida JavaScript Aida Python that was our stack JavaScript for client Python for tests ADA for server so yeah ADA is a very nice language I I'm not going to trash talk it because I really like it the problem wasn't really with ADA I think the problem was mainly with the tooling around data because if you couldn't iterate as fast as you can with Dart for those of you who do not know the type safe it's used for instance in aerospace and railway industries so you can see why we thought that we should use this for our Lin system well we started using Dart pretty early late 2012 for the client so we could end already at that point we could see some of the benefits from using it on the server side so we started looking towards the server side and migrated to use use it in her micro services around late 2013 around 2014 our entire stack was running dart and one of our developers quit there is a fun fact so back when we was using we were using a ax people who are saying you're using what what why we're using it it's dead language so that hasn't changed what are the benefits of Dart well this it's pretty much sums it up the best benefit you can share things you can share models and you can share interfaces we've written up some clients which are transport agnostic so like I think there was at the development thingy Tuesday there was this guy who talked about V transport which was this dart io Dart HTTP independent client yeah this this was what we did at hoc but it means that you can just instantiate the same client depending no matter if you are here or here and this opens up a vast amount of possibilities one of them and remember this is quite this is maybe 2013/14 one of it was integration testing because we had in our stack we had the PBX which was well it's open-source but we didn't really want to look that much into it so we treated it as a black box and we had our phones which are Hardware phones which we which was a big wild card in our stack so we had to treat those as black boxes so for our integration tests we thought okay so why don't we treat our entire system as a black box and just run tests against the system which we did and this meant that we programmed what I called a test environment which could then if you were a test you could say yes I would like to test this functionality and for this functionality I require a set of services the test environment would then spawn the processes for you and then return the interfaces needed and the clients and then upon test termination they would tear down the processes again and you could start a new test with a clean set of processes and one of the big benefits of doing this is that you get on test output the same you get all the output from the services so it's a big distributed system where you can actually capture output of every service involved in the test so now imagine that you're using continuous integration and you have tests failing you don't know what you don't know why but you have this big log to this log data that's not like tree and you don't even need to replicate your test and maybe you can't very useful okay that aside we added another thing which is called use case test which is much more high-level testing where you have this the same pattern just with actors so this is this is an actor model it's not the actor model something I made up because I'm clever no I'm not I'm just an idiot building a telephone system okay what we did was mapped different actors to classes and then map their capabilities so this is you Amell capabilities you need to think UML use case into their methods into different methods and then realized capabilities from interfaces and models okay so what would this look like it would look sort of like this so this capability for a receptionist user is just you know send a message you get this should be a help in other case no mind this is a type from the framework and this is a client from the framework all typesafe and its realized capability so using this it looks like this test environment request receptionist Wow we make a mock message we send it and we can do some expectations very high level very nice actually let's see okay yeah I have much time that's nice actually this one here you know so you remembered the user interface I showed you the call coming in this was the piece of code that was being executed that's pretty nicer and this actually opens up a whole new world because you know it's I know it's cumbersome and it's tricky to do and you have to write a lot of code in your test environment but it gives you the benefit of developer documentation right so developer you can communicate this to a developer how do I realize this oh I can see okay so when our receptionist needs to hang up I can just let's see this is hard to do you can go this okay so it needs to yes I know it's at this keyword okay so this is a code for control service and it's this one oh I can go on so you can actually see the entire chain of calls like language calls being made which is good in my opinion okay back sloppy focus sorry yeah there's a lot of code over here in this I know but it actually enabled us to change our ADA code into dart code almost without featuring questions this is nice it also enabled us to test a lot of things at once treat our entire system as a black box because we had many distributed components so this is a good at least my opinion very good strategy for testing this cannot stand alone we still have unit tests and things like that but okay deployment we caught this the day of doom looking quiet you can imagine but before we did some simulations using the test framework we could create a lot of like you saw in the code a lot of customer objects which we could then script into making lots of phone calls into our system then put receptionist agent robot which is just a dart simulation file which is situated in the UI and it keeps track of the coldest by just checking for a you know list elements whenever the text one it will try to pick it up and go through a state machine so randomly say okay I'm going to perform this action on it everything is salted with a random - with random latency so we don't get live looks and we started up I think 15 agents and then start hammering the system it took about I think we handled maybe 200,000 calls over a weekend and new precious yes the migration we migrated 900 ps10 numbers which doesn't sound like a lot but remember in Denmark we only have 8 digits of phone numbers so it's actually like big percentage but it's about 6 or 700 businesses which would if we failed at this be without telephony sis service so we did this in two career criminal phases we started Friday Friday after hours we diverted all the calls to the new system so that was zero downtime now we were on the new system and everything worked we had no human interaction in the system everything was handled by the PBX because we compile all the diet plans statically diet plans are just instructions for what to do with a call Monday morning at 8 o'clock the receptionist came in and started using the system we had never had non-technical people using this system before so they started hammering on this and we had a fire extinguisher we had speed dial for the telephony providers so okay we're going to roll back but as it turns out there are no bugs in this everything just work worked from the moment of deployment how about that I think that's amazing come on all right so in this application we have about 100,000 lines of code almost all in strong mode the tests still have some work needed the system has handled about seven or eight hundred thousand phone calls since February I think we've not experienced a single crash first by Dart yes we were not good at creating database schemas well dart has for us being a more than adequate tool and provided us with sufficient type safety and testing tools and we still maintained a rapid development pace so in summary would be that dart actually empowers monkeys with ambition to build phone systems but I think we should market it a little bit differently thank you for attention oh there's still time oh yeah yeah yeah you know you're not off the hook yet yes if you want to check this out we actually have it on github the readme is work in progress for requests welcome if what is this available it's a package or is it just an app it's like I don't know did you publish or is it like is it no it's a self-contained app that contains a few different dark projects like four or five different art projects in one we merge them all because we could have some benefits of the static analysis analyzer like we have time for me one or two questions for Kim oh yeah we need it yeah oh okay see ya okay that's fine just go ahead yeah questions let me repeat the question the question was how do you handle SDK upgrades and roles do you poop the latest SDK how do you test we test with Jenkins so yeah it's that's that's the short answer of course the the long answer is that we have a Thomas which is he's an early adopter and and he just pulls down every new package he can and he figures out okay so there's a breakage here and he sends a bug report to me back I don't know if I mentioned it but the last year and a half I was almost alone on the project along with Thomas which took care of the UI so most if not all of the testing in the server stack the socket communication all the things it's done by me so it's actually one monkey I just took around so a few more questions we can talk to you efforts yeah fabulous yes the question was what about implementing a soft phone in the browser with WebRTC yes it's in the pipeline as a short answer we did some experiments in the early days with using a library called PJ SIPP which is open source sip library but we had troubles getting it to work with alsa things like that so we took a quick decision and took the client phone or the receptionist phone out of the equation and just what hardware phones but yeah we would really like web RTC so it's it's an all browser app because it also eliminates a lot of firewall issues at least moves them did that answer yeah cool thank you so much for your time thanks Kim 