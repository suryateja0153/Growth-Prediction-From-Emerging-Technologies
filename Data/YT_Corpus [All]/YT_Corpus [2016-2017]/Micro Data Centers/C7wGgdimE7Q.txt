 all right guys so thank you very much for coming this is the inaugural Dublin microservices Lido and I think we have probably nineteen people here which is pretty cool so I was in for two weeks ago to microsoft's meetups it's pretty much the same numbers of people as both so you can see that there is a really interesting thing happening here would be micro services for example over the last few years or so maybe more but this stuff is really ridiculous guys and part of what we want to do with this is form a community so micro services it is a really interesting new space and lots of people are doing loads of different things and this is a space and community for everybody to get together and share experiences so we're gonna happy gonna happen speed up once a month if you are working with micro services feel free to contact me because we are looking for real-world experiences and learnings people have had anybody who's actually using micro services please put your head up and then see how we're doing so that's a sort of 20% which is really cool and I guess I have to ask what you guys are using to write your Microsoft so who's ready Mike reservist so that's that that's like you have a Texan and obviously if you notice from that other meetup nodejs so that's actually about the same numbers hey just just shout out anybody running work services in any other language go that's got up so you can see this is like a really wide open field and this lead up is language agnostic and platform agnostic so it doesn't matter what you're doing and what you're actually using I think this community wants to hear ok so what we're going to do is a gentleman of Gilt Groupe he's going to talk about how gilt uses microservices they do some really really awesome stuff this is one particularly important because this is micro-services in production actually in the real world and if you're thinking of using them and looking at how that should make it work in production after that we're gonna do a few questions and then we're just going to do a few announcements and things like that that company pizza will arrive in two years right here I can tell you this heaven earth food today brings fear this is Mickel and beer so somewhat patriotic a it's a micro brewery and Wooper and we get their regal select - bring it bring it to Dublin so you can experience it if you're looking for interesting little thing to do that hopefully when we can just do their tour to rapture beer and pizza and I'm doing short talk on some stuff around micro services of doing here and then Fred George movies out of a a very very large figure and microservices newest it's going to talk about some of the challenge like see you taking samples he's the real reason we're here fun ok so that further do amazing awesome okay so we're okay soon I got a short amount of time and anybody who knows me knows that I love talking and like you go on forever so I'm gonna try very carefully to keep down to 20 minutes when it comes to these things and so there's a lot of things that need not work that and actually since today what I believe to go in kind of by asking you guys what challenges but without further ado so for those of you may not know guilt effectively where and what we do is we buy the tree products brands we buy these typically at a discount sometimes are expressed in the country sometimes their excess into some things are last season but things we get them at a great deal with nuts the deal then we pass along to our membership okay so be part of what Bill does is we make the product look absolutely fabulous so typically when we get the part you shoot it ourselves 25 photo studios in operation in Kentucky Brooklyn I assume New York and so you know effectively making the product look fabulous is just to the north part of what we do so we're opening that real stuff we were robots unexpectedly we receive real product which we should back to customers effectively against humans and if actually the tech team guilt is putting together all the software that runs is very very unique in this money get this inventory is effectively everyday the new industry goes live at noon we have that energy for maybe a short amount of time two or three days right we let our members and if you look at our performance graphs in any given day you've got this sort of you know pre pre new kind of yeah we're gonna weather we've been learning well then you shoot straight up off the spike right so and I thought I think is what makes guilt for me super interesting beyond just a an e-commerce site and dealing with the pulse load characteristics of new so and how did we start trying to get there so of architectural meandering the first instance was you know your startup and you put together an application right and you do it in Ruby right in your database and you speed it up with memcache again it's something that looks like this right it's all the boxes look the same size right that's an illusion because realistically all of our code was in this Ruby on Rails right bigger bigger bigger so a couple things half of our customers are going through the code paths in that but also already stopped are going through the same code bases all our business processes are all in that same right all of our engineers are trying desperately to get code into this same right and that's hard enough to to work to really draw on one code base but I think what was just really accentuated for games in 2008 we've got the brand new katana I'm not into cheese but the ladies love an effective league we just our site fell over effectively groovy no matter what when you try to stage now that's an attack but really you know I love really we needed to move on right so something like this over time then I think as a business we were exploding right so for scalability we decided let's sound let's build a whole load of Java services right and these services with one stem here like obviously kind of a product service stuff that gives you information buy products they use your service that give us information about users these services I miss performed very very well but if we look of Li what was happening what kind of thing that was not great is it the quality of these services in terms of the api's was enormously ad hoc a lot of the service and points were written using JSP so you never really had a clear idea Oh what were the parameters that this service reading it is and also what was the dicta that they returned back did you do you see this map of data is completely old scriptures and absolutely visiplate nonetheless it worked right performance once we got some great performance out of out of these job service right sir though we had all these businesses at the same time Gilt Groupe having multiple websites on the go right so we ended up then breaking up these people because multiple lines so guilt become was from Guild tv.com a home business had a separate path stock tanks comm they all have this same pattern which was effectively a front-end built around Java server pages right keeping a set of services to these fellows here right one of the services did was really in hindsight not great what they did was take reduce models of pages then produce the content and so it kind of this is a huge huge bottom line right you know your routine and you want to get your your self right some other team has got a branch that's be merged into this monolithic code base and effectively they're breaking something introduction right now so you were branches not when he emerged right and this was a tale of woe and until the muscle in productivity as well waiting it was very very hard okay there were also some very very strange things are happening this model when we looked at one of our services which did the bulk of the content of calm seen some nasty things it was secretly going to the database instead of going through the services here the both was taking data directly out of the database he was kind of doing business logic a nice kind of bits and pieces that none of the other teams can actually use right I remember I remember the day actually the first Piper service with the back three years ago when it simply said anything I want is for a given user to know today's marketing messages right is it twenty percent off or is it whatever right now turned out all the logic for that with very deep inside this thing here I were to get that 20 piece of information I had to ask for the entire content for the home page of the report so we created this tiny service full SPC marketing the marketing services was it gives you good marketing information for a different user it was probably we made 200 300 lines of Java code and at the time you know chatting with our CTO he's like I'm not sure this feels right machine course it feels like overkill right but nonetheless we kind of proceeded we said it feels right I mean it's a small surface if you say Mike we're service if you will but it actually feels right so so that was actually get started the braking code out there one of the other things well I'm really really I know there's obviously lots of traditions by code we use right sometimes expensive to minion code right however what we were finding was the cost business lines with absolutely so yes kind of some big questions right how can we how can we really accent business means how can we figure out initiatives right put teens around these initiatives and then write code and get into production really okay that's right largely largely cool right then largely we feel that at the end of the day you've come to the right place I say though there are some things that so legacy never goes away there's always stuff that's out there very rare dejected condition something what did happen those if she was the applications that were monolithic the big Swift application he actually broke up we don't know Larkin architecture for lots of small applications and effectively we our team at attitude page-level you said we're not an application that serves public's detail page we're not efficient but sort of search listings we're gonna have an application that serves our home page right what this allows us to do is have lots of much much smaller repositories that any team could commit code to any team could deploy Stephanie from all of the other teams so there was no more time to point it Rob you know 902 percent ninety engineers right we broke it all day today right but I have to say at the time and when we are now yeah these are assuming there was in terms of the number of houses in the front ends I always felt that seven plus or minus two that the magic we need seven is for month to with a good number because conceptually everybody can keep in their minds like these rough seven areas of these experience from our site okay now if the teams might absolutely break you know in starchy technologies play this where you just said screwed mullets would you want to build something new to do something great build your own the service right and effectively we split up them to multiple teams working in parallel currently we have 24 initiatives three traditions across different teams living in parallel in the same organization and no team is held up by the work community right this is facilitated by the fact that we literally that people build the services they need Scala a reduction of Scala was quite liberating at this point when this graph here shows the rates of services the greater the number of service for changing the line right there the point of infection in January the 12th so I generated every child that was the point we've cited an organization that we were no longer a job is the numerous talents and as part of that pivotal links the micro services explosion and simply took off so one of the services do I mean at the end of the day you are an e-commerce site right so you don't wonder how that half of it that we have all of those that minutes 32 minute minutes for internal to me and this any service history so either work fight obviously this is other so one of our repos in and Gary's a pizza and effectively just turn into the word applied I met some interesting things that happened you see kind of become work that we work on a recommendation is that the web services around about machine learning algorithms and recommendation systems that services land search email is one of the key ways that we dream that members to our site every day and tell them every day services in every services place now how big our services right so this graph shows the lines of code per service writes the x axis is logarithmic what we see is that the median is that any given service contains two to the 11 2 to the 12 that's why the code to calculate using that CBOC right it includes XML Java Scala build artifacts that's build information feel pretty good about that's where we have a fair back of services though all less than 2,000 lines of code all in right we have a non-trivial number of services I think that's actually I never put an X in that box we have some services over here that are absolutely just that tends to be the older legacy stuff source files per service right some interesting metrics right 2 5 2 to the 6 ok yeah and that's actually quite nice right you get the idea that we can get into any given service this power she can engineer in there and they can figure out what's going on pretty shortly matters not to think one of the one of the real benefits right you don't end up having these crazy crazy services the bilby understands because we're trying to get to a point where there are absolutely small then I'm greedy easy cheese move exploiting these are the instances for service right it turns out that most of our services are deployed over three notes this is standard kind of available oozy stuff right sometimes we deploy them to fight people who will always deploy any given service on three notes just to make sure that you're gonna have you know deployments and if you need any note you don't do that goodness there right now the the infrastructure for guilt is deployed over Virginia one of the biggest things we're doing right now is we're moving higher law to Amazon hey that's lots of motivations behind that but one of them is we need buck teens but you're encouraging to create what happens is the team is need boxes to the point one right that means you've got to have you get it with a buckle neck around your in 1402 pointy okay and so what we'll try to do is they could be make it super simple for teams to provision their own software or hardware so that they don't need to ask anybody for permission they can just basically deploy what they need on the hardware they need they want every attempt that we've done that I have been we've done to make provisioning of hardware it's super easy right has ended up in failure right along in parallel or something where they said nothing's doing it all for us right we really can't repeat that so ultimately we're moving the entire lot to add to plan right and that's actually been very very in our strategy in terms of how to do everything all of these services all of this infrastructure is the following we've actually created a legacy EPC right this is like a cliff finish it as we're taking all of the deployment architecture that we have in our data centers over day it is that we're saying there's deploying the machines in Amazon let's move this stuff across I mean then the the existing stuff is just ruining in a different place that actually works nice what we're really encouraging though is that teams or other departments which are kind of large teams of about 20 engineers of the similar theme these guys have their own Amazon attacks and effectively they can just deploy whenever they want whenever they want so on their own account stick takeover messaging key whatever deployment architectures it's entirely right so it effectively were staying kind of rigid we're keeping green everything over into the cloud but we're allowing you to do a Pablo yes just non-stop innovation do what you want it's interesting in terms and of as we move to to a progressed it's interesting that either the sizes of machines that were provisioning on this legacy virtual actually the both of them are micro it's kind of nice we're kind of kind of really coming in on lots of love very very small winning elements okay so that's the evolution of where we're going right we're talking to this micro-services architecture really effectively you know getting lots of teams working parallel to solve wellness right that's effectively what we trying to do right under the massive focused kind of culture as well autonomy teams figure out what people to do themselves I think we have about five architectural standards or rules that we encourage people to adopt with that spagett right very very light touch we really let the team to correct what they want to do themselves okay so what was public grapes right micro-services what we should be doing was we face the dependencies between teams right which meant that code right that's fantastic okay because we have less dependencies between teams we can burn lots of initiatives in parallel right that's also very big as well is is that the approach we've taken with a very new set of architectural kind of principles it's simply that you can choose whatever language you want to build system you want some - you society as an engineer at a team what framework you want to do well we're basically restricted simply is you must deploy using docker right and you must have to be able to point to anything but if you teach tried to service interlining or in whatever language it is designing to you other things that we've seen them that are very very good for is a graceful degradation of code right last Friday one team took night to check out there were approximately twenty minutes but another team then later took at login the registration on our site yeah another great kind of thing right with a really bad day however it turns out that basically the rest of the site run just fine right so these these components see the impact of them being broken was just in a very very very small okay so what I did is parked right I'm actually teachers team you know like I've been away for a while I came back to fields having actually worked in a team that was much much smaller and didn't use micro-services so I'm gonna come back into guilt from Tokyo and I'm gonna go in hard the number one problem is staging environments right we have no we have so many services right now that running creating the thank you environment for from multiple teams right effectively what happens is you think it's easy you deploy it all but then you realize that some service we started elevators there started dependencies and effectively over time you find that when something breaks on any given stage in Brandon's there's so many services there that the team watch the only station environment doesn't know the service bro and this you throw them throw a lot of audiences throwing a lot of goods but materials of this I think is a kind of a very scary consequence but something I've never read so we're actually looking into a lot of different techniques to run this right so using the automated tests dark canary canary releases there's a number of things that you can do to make test and production safe enjoyable and so basically this is this is one of the key things with unions right there I am really keen to hear how other people in massive my desert of architectures are doing the staging we open that heart okay ownership is reading heart effectively with all these services the very very vibrant kind of economy for software engineers people write services and then they go right many you're left with this service and nobody wants to own it right and so this is actually we're capturing we're bringing that around by saying well these larger departments these kind of teams of teams we have ownership at the department level but we decided not to do is having a site reliability engineering team at SOE and Google does we don't just pull surely even decided it's not right for us to throw the software over the wall for somebody else to to grow and maintain its on be honest all the departments and of course if they inherit a service that they don't like they can rewrite it right it's up to them it's up to them to get rid of it if they don't like it so deployments mentioned this earlier on we what we're doing right now is we're building some really great deployment doing over or AWS on docker to make it super easy and super flexible for us to get services deployed we very much settled on rest what we started doing is being far far better but how do we define our services right and this is classic thing I used to work in from the cold IO technologies you separate the interface from the implementation and effectively what we're doing now is we're designing our api's in a programming language neutral way using a framework that that mike has developed for epi dot I started off with documentation to use this tool to document what your service does and the models of data that it returns would now even coach innovation movement as well what you read minds there is the mantra is that we generate a client or server stove right it should use the minimal set of dependencies or that target right you do not want any pulling in a novel rate of libraries that the developer never wanted right this is a really serious issue for us right we have 156 services out there right there right there all using a Commons library the framework that we developed that's closely tied to a version of Scala 2.9 I think it is and effectively the latest version which requires everybody to upgrade at Skala 2.10 right and effectively now we're going to go through the laborious task of upgrading all of these servers right it's been a really hard necessary thing for me I would never do it this way again I think that when you have you know code generation technologies that can generally the simplest lightest client imaginable I think that's so the other thing that is is will give the challenges which frightened the hell out of our officers rights so you know once a year this ease that I'm attempting types in and they come into your organization and they go what 80 engineer just out of college to deploy to production are you insane doesn't anybody review their cover before it goes isn't there like a single person absolutely every change no another all that really frightens the auditors so what we've done is we've said well what we're going to do is we're going to provide a really strong and intelligent alerting so that if anybody did do something malicious into our production systems we would all know about instantly right so we're developing - easy - open source very shortly cold hey but it makes you to receive events from one of your services bill really like you know the orders that are shipped to the US a five-minute period if not number is equal to zero that raise an alert right so basically it's going over a time series of events looking for patterns or anomalies detecting behavior is wrong what's actually nice there is that the auditors are bored with this if they can see a dashboard one of these alerts and see the clearly the one last thing as well we haven't actually cracked is this i/o explosion effectively we call services at all of the services that call other services you have any very structured or authoritarian in the back but how or when these services should call it a services this leads to redundancy sometimes so I call a service that looks at the user data it calls another service which also looks up user data another service which again looks at the user data so we're doing an excessive and redundant amount of work in some cases the other thing as well is that we don't detect cycles in terms of service calls right so maybe argue so that's it so six challenges that I think are pretty pretty important probably really worth considering for anybody who's thinking of going down particularly we didn't know we I think I'm going to take this yeah I think we've discussed that at the technique right to your starting points yeah I think it's interesting you are right I mean if we actually we're able to condense our services into our departments in a better way that these would be much people here in services that don't actually have another house that's a that's a good way to think about it I think what's interesting about guilt is effectively version of those you're trying to do this with it's typical kind of job application you wonder have an entire other application where you have 40 different hours every direction or services yeah it's much slower sessions so I think so you to write a peak that where we're going in terms of the departmental model where our department on services under cohesive effectively will bring us to that right I think though we didn't start with that in mind and so we entered an explosion which which needs flow charts even have duplication of functionality across all these things do you think that the culture inside moved micro-services or do you think the micro-services has changed I think I think the culture the culture of letting smart people affected to do what they want right actually right so so the sensor that is being specifically in there all right I think effectively the original models that we try in terms of getting software back to me they failed right and then I think all of a sudden you can actually see from the rate at which the services started yeah do you think the services I think it's hard for me to say I mean the only organization that I've worked in which is the massive micro services architecture into Delta right there there is a butcher of sleek lead in there I yeah I think it's hard it's hard I can imagine the order requirements may be different for a medical system certainly as well security requirements in other areas may be much much stronger than ours for example but the largest that the bulk of our data that we stand across our services has no person information we can send to practically in materials we want right I think that micro-services in a highly secure data sensitive architecture where governance is required the problem the requires a very different so yes so essentially I think actually so pretty our concerns configuration is all available you see people right and the smart clients one thing that was good about the smart clients is they they initialize to detect to keeper they read their config and effectively you don't even have to say what environment you're in just figured you know that for you right so thank you greatly very good there zookeeper I think it does is be designed to way more and just be a configuration management system right hold your second question yes service discovery effectively then we've got some well-known all right so all of our logs critic went to this book in the past going to allow us to trace what we're going to write the entire stack through the tool that we actually abuse it absolutely valuable is it is absolutely amazing it turns out my services so as you can see we kind of evolved a razor right originally butchered those OVC type services on the street there was no version right we love so effectively people began then to realize obviously that when it came to these VC type services which is really bad fighter usually add something but you can another question so it looks like most of your services are essentially they just saw our faces yeah how do services discovery filling services discover each other right so we do have them we do have service registry we've a couple of ways right but actually it's almost - so forth right - folklore there are some well-known services think of it like down think of it like of acid I use a metaphor analogy think of it like a city there are areas of the city you go well then everybody knows well right and then they Jerome go Cal which is effectively the area that you're working on so actually the courage evolution services unaffectedly I'm not sure that to point to in the weather puppet or sold but effectively changes - they they change every six months - the newest things so we deploy so we provision our boxes our original box effectively now what we're doing in terms of deployment at which point our docker images right into the cloud we build our own tools the idea my arms being pushed out of County like that software releases and effectively those are the tools that were using them to take any given docker image and get a you know safety role that so 