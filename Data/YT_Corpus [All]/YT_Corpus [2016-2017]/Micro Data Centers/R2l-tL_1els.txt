 all right well good morning good morning thank you for coming to this session I really appreciate it and I know I'm where they the only thing between you and in the lunch so I'll make sure I don't know over now before I begin how many people actually know about containers and docker yeah everyone or using it all right very cool and in the topic today's communities how many people have heard of Aqaba days yes everyone all right and how many people are using it but I asked this question everywhere I go but that's okay but more importantly how many people have actually tried was seeing it in action anyone okay okay good good good so so so some of these things that I'm gonna show you today might be will be new to you so that's it so my name is Ray I'm a developer advocate for the Google cloud platform and part of my job is to actually bring some of the latest and greatest technology that Google has to offer to developers like you and the other side of it is that I like to hear about your experiences and your feedback and how you're using technology today so please please free feel free to contact me at my Twitter and Samm anism now that is my profile picture and probably the only speaker who only who doesn't show his face or her face I always have a camera in front of my face it's kind of funny because every organizer doesn't recognize me in any where I go is like who is this guy but the way the reason I'm doing this because I'm kind of shy naturally and sometimes I don't feel so good like today I can actually get somebody else to come up here and not get killed okay yeah okay so as long as it doesn't fall in the water in the raspberry pie I'm okay and aside from technology I love to travel that is me traveling backpacking in Asia this is northern China somewhere in the middle of the desert and somebody told me I was a I was a cheap backpackers so somebody told me I casually stay in an oasis in the middle of the desert for free and but only catch is you actually have to go in a southwestern direction and you have to walk there by yourself by it before about four hours anyone walking the desert before no it's someone has some have and it's not easy it's very very difficult to do and when somebody tells you to walk southwest in the desert for four hours you walk that direction you don't go around anything if there's like you know anything in the middle of it like a big stand doing you don't care you just go up and come down otherwise you might just miss it in four hours anyways if you like to see any of my photos go ahead and check out my Flickr under the username Stalinism as well cool so I think everybody probably have heard about micro-services already I know there are university sessions there are many sessions about it some of them are theoretical right you they teach you about why you should be doing it while you shouldn't be doing it that is not the session here today what I'm going to talk about is really just show and tell what it may feel like when you have a microservices space deployment okay so I'm going to demonstrate this more or less with some live coding and the best guessable complication that you ever see I'm not a front-end developer this is the best thing I can do and it's pretty easy I mean you you you have a message you click on something and they saves it to a database and but but but it also has a hello world beauty Gnaeus so it's kind of liked it by self to both world it despite the very high level architecture everybody probably seen it before there's a front-end and there are services you call and then some of the services may be triggering saving data into a database like my sequel and I'm also doing some session replications with race as well so that's the that's the ultimate thing I want to demo today and then the ultimate thing I want to demo is actually all these so that will be very exciting towards the end okay so I'm not jump through many of these things very quickly but this one you know tied up with the state of how we deploy applications today right in the in the transition traditional Java applications we create year files and war files you know you package everything up you know those services is probably a drop out you module eyes it but but you you package you in the same deploy the same deployable right but then what do you do with these files well most of the time you have to deploy it into an application server but how do you actually do that well first you have to provision like a machine for it you have to lay down the operating system you have to install a bunch of packages that your application or the operating system depends on and then you have to install the application server that you want to run and then you have to configure it you have to secure it and then the list kind of goes on I remember in my consulting days I actually have to tell the landlord business like how many servers I need before the project even starts because it takes a long time to get the the service provision right for me my experiences has been nine-month but it takes about nine months for me to get the service I need for all the environments anybody do better than half a year six months yeah yeah something yeah one one month no wow that's that's really cool yeah so a lot of people don't get that opportunity however so and when you even spell some of these things in my past experiences they are this these ROM books right there are these instructions for you have in the documentation somewhere right maybe some developer and some of we write it together and this line by line instruction something operating system we need to install what packages do we need on these machines what versions of Java do I need and the operation itself Tomcat wildfly or whatever GlassFish that I need to run this and configure the gene D and I don't know JDBC pool a bunch of things and then you deploy it and you find out nothing works and not only that you know because its domain you process in most cases and in some cases you have some kind of to me to help you but still you have to go to this machine bad machine and then you run into the some of the issues of watching and let me ask a different question how many people have issues where it doesn't work in production but it works everywhere else yeah I'm almost likely there's a configuration problem somewhere along the line that was just misconfigured thing you just don't know what happened it's the environment that's constantly changing and you just don't have a really good control over eight okay so let's see how micro services are different in a way so I'm just gonna jump straight into the code now I hope I still have my internet connection yes okay so in micro services you might be using some frameworks right how many people heard about spring boots yeah all right so that's what I'm going to do very quickly in the next couple of minutes and there are many other frameworks right there is a spark Java there every vertex and wildfly has waffle ice warm so you can actually use these frameworks to Bute your micro services very easily and quickly and they all have one thing in common which is that they embed the server components directly into your jar file right so I think most people have singing already but let me just run through a very quick example of this I'll do a hollow world cookie file and just to kind of show how easy it is to write a service and you're going to learn I think josh has a session later today so you have learned a lot more about this from Josh I'm just yeah I'm just a lowly user here trying to then watch how she's doing now so here so I'm gonna do our class HelloWorld and I'm going to find a function and I'm gonna call it multiply and I'm going to taking a int two of them and they need to respond like a JSON payload right so I'm gonna do X is x and Y is y and the result is x times y that's very easy to do and then this type of network all you can do very easily is just to kind of annotate your way to expose the service as well so I can do something like request mapping and I'm gonna call it multiplying and I'm going to taking the the parameters directly from the path okay and then I need to do a path variable and variable I think that's it and that what if I run this I should give me like a restful service that returns how to multiply two numbers so the way I'm going to run it is just by using because I'm using spring boot all I have to do is do a spring from and behind the scenes it's going to start hunk timecard for me and uh that was I was super quick like three four seconds or so if I'm really lucky today I should be able to come to this URL yeah give me two numbers I don't know what what's the day today February so 210 yes all right so that that just returns to the restful result right and I can do whatever here don't wait 34 wait what just happened anyways that work once by dad what happened at the trainings fashion very good nope nice right all right so post our works which uh which it does then what do you do well you can simply put this into a jar file so I'm going to you a app - all right you can't do this with many many different formal friendly and then you can Java jar and just run it this way which is nice and now you just have this one single component you have to copy two different machines and deploy it and you don't have to worry about a lot of things because all you really need is the JVM right just have the right Julian version then you are set oh I know why yeah sorry no I uh yeah so here's an interesting thing I was wrong actually droning something else on the same port on port 8080 so and that's one of the things are you going to know this is that with these color services you have to actually deploy many instances of it right suppose you go back to that guestbook application example of the front-end do you need multiple instances of that after the services each one individually is like a standalone service you don't just run wine stand self-doubt right you'd run multiple instances of it if you multiply it and if you run three instances each you're looking at ten different things you have to manage and do you actually run those things on different machines or can actually be packaged together into you know fewer machines right and if you do beam packet together if you run multiple processes together then you run into the issue ID string into which is put conflicts right and you cannot have the same process so two different processes using this important so that's what is that's exactly what happened to me and that was back in now that actually works out pretty well okay and then what do you do well now you got a decoy okay and traditionally the way you deploy this application is by understanding which machines you have in what environment and then you go to that machine and say okay copy to here start it you have to take care of their startup scripts and all that stuff and then make sure that you application restarts what happens when a lot of these instances die right you have to monitor it and you have to restart it automatically if something happens to it and what if you have to scale it you have to get more machines you have to you know like do the installation process again well how does that look like in a potentially and microservices world where you can actually manage many of these things with containers right and one other thing so many people use docker here already so I'm not gonna jump into a lot of details here but just so you know right I mean you can just write out by the docker file with all the instructions that you ever need to to configure your image and this image is basically the environment that you want right so you can stow the right version of everything of your you know you can select your operating system placing nation if you want to you you can select the JVM you can equally games though anything you want with a specific version and this final image is actually this big binary where it not only half your application but also all of the dependencies for that wrong time environment and that kind of gets us to a state where you have this single image for you casually run anywhere and you can actually get to that state in a way right this is when you do it with Java you just need to make sure that JVM but you still have to worry about the operating system and all that stuff with the image with a container image all those things are encapsulated for you so you can do something like like this entry points and you can do like Java that jar and then and that should just Butte this image for me with my application inside and install it and there are many different ways of doing this so so this is just using spring booth with groovy straight up as you can see there's like no no maven file there's no Guido there's like nothing in here but I'm sure how many of you we use maven yeah all right very cool great oh okay and yeah yeah I I Scoobies and make make Wow I'm kind of surprised by my colleague many of my colleague uses they use make as well so if you do use maven I want to show you something pretty cool opt to I think so here is a maven project and and Spotify who I understand this actually here today and I know they have some sessions they are very nice in terms of you know releasing some of these things as open source so so I actually found this is actually one of the best in the first maven plugin that I found that actually can create a darker image for you directly from maven pom dicen el and all you have to do is to be included and rather than writing up doctor file if you don't want to deal with that you can just use like the base image or you can defy the base image directly into maven palm pond I smell you can give it an image name specify how to start your application and copy the right resources into your container is fantastic but the thing I like the most is that it can actually tie in of course I've been plugging it can tie into your entire Butte Sanko right so you can tie into the the maven beauty face and you can say whenever I'm doing a package go ahead and boot the container for me and you know type the container at the right way so it's really easy to use my favorite method however is my favorite method is to use this file so I'm gonna copy something here hello world okay hey OSD interesting that's not what I mean yeah so this is the the doctor file that I have and as you can see there's only one line that's amazing but what's happening behind the scenes is like this image I mean everything from behind the scenes is actually using a very special construct code on boot okay it's a special doctor construct and you want heard about imbued before yeah some some have about 30 whew it's a really really nice construct so what I can show you is for example the actual base image looks like this which has all the instructions that you need for me you know to to install this specific version of groovy and spring and all of that and and then at the butan whenever there's a stop in nature as being beautiful sound this image at the real time of that i can actually copy just the source code and as part of the image view process i can actually build the application okay and this is really nice for me because all I have to do is to send the source code across to the doctor contacts and then they can within that context you know we'll have everything pre-installed with the right view through this environment and then I can just view my application in the application in some docker container as well so it's a single one-shot process so make sure you have that stuff so I'm gonna go ahead and say dr. beauty hello world and that in that's nice pretty much it okay so what's happened behind the scenes is they just sent the top Ruby file and just beauty we think the the continual contacts and then done with the the bill did she just run it wrong P 8080 and of the world - GI and - - re and that's pretty important because if you don't have that's it the - - RM your container is going to be persistent actually even if you stop it the image whatever that you use the layers are still there and with the are AMOG speed transfer transient so once you're done with the container it just remove the files as well okay so that's that's pretty simple and easy and you jump straight into a few other things here so when you're running some of these services even within within dr. right you still have some challenges to you have to you to solve right well even without container is the first thing that you want to avoid this like port conflicts that just happened to me and how do you actually make sure that your services are up and running right who do you do with he'll checks how what do you do with a readiness checks what if something went wrong how do you actually restart it and in there are a bunch of things that you have to be worried about the more instances how you have the more you have to worry about these things and so so I did the containers and let me just go straight into why it does not matter with Google so so why does it matter with Google well because I should we Google runs everything in containers everything at Google in containers anybody who's a search search Gmail YouTube in case you are watching cat videos right now please please stop but about everything at Google runs in containers in fact we launched about two million containers per week and that's that's not European billion I just learned the the viewing here could mean billion billion in the space is just 1000 billion right so 1000 million right so so there's this a factor of difference here but what I mean is 1000 million containers ok and that the way that we do it is that as an engineer within Google rather than deploying to individual machines like what many of the enterprises and projects may be doing today we have so many machines in a single cluster we can have up to 10,000 machines ok so it's impossible for us to say which one of these machines to deploy to manually every single time at the scale that we need to deploy so we actually just write a file a configuration file that specifies which cluster and we call them cell which cell which cluster which one of these 10,000 machine clustered we deploy to what application do we want to deploy some kind of arguments you know to passing at the commune line and then the requirements like what is it that we need for the resource capacity that we need for this application yeah you know we don't use virtual machines for these jobs there's this containerized workload we're not using docker or anything this is like part of every stop but on the underlying technology is actually the same this C group which we actually contributed to the open source world backing I don't know 2009 or so okay so all the many of the container technology today is based on that contribution with the C group which offers you the ice the resource isolation so we can specify how much rain how much disk and how much CPU to do to use and then of course how many instances do we need to run in our data centers now of course five is maybe too few for this extremely popular harlow world so we can't just change the number of instances to 10,000 and and then we deploy it and the way that we do it internally is that we have a tool called Borg and basically the binary file you send it through a central repository and then you send it the config file to the board master and the core master is kind of like the server where it's managing all the machines and the world master is going to consult a scheduler to kind of figure out which one of these 10,000 machines that I have under my control can actually you know it's actually best suited to run this job to run this workload and it's going to check the machines and say okay do you have enough capacity can you run this workload do you have the right the right resource configurations or whatever and if it does it's going to that the machine is going to pour down the a binary image or the binary file and they run it in the machine and it's gonna do this very very quickly to launch 10,000 instances across you know the the sale across 10,000 machines and very soon you're gonna see the hollow world application that I wrote running in your Google dance theater anyway and this can be done very very quickly there's a white paper on this is called the I don't know is that work white paper you can see a lot of these details as well but it takes about two and a half minutes for us to launch and start ten thousand of these instances across the machines that we have so it's very very quick in but you know that's kind of like wow that's that's kind of nice that's really nice in fact that's how I felt why so they'll finally see the oasis in the middle of the desert this is about two hours into the hike and when you look back there's nothing when you look from this nothing in another hour or so you actually see that the tree line that's ahead it was like oh my goodness I'm saved I'm not going to die today so so what can we do you know in the in the in the open right because that technology is internal right people cannot get access to it except if you work at Google but fortunately right we open sourced this uh this project called kubernetes which is a container orchestrated is written go not Java by speaking go but it is really nice you can actually be wrong in different environments you can run this in different cloud environments and it goes around this on bare metal in your own data center you can even run this on the Raspberry Pi here which is really really cool and I'll show you how it works but essentially if you can target your deployment against criminais T's then you are kind of able to target against every environment that supports kubernetes as well so you can bring your application these containerized workload from provider to plug to fund provider to provider or from your data center to cloud over from cloud back to the data center you'd like it it's really really easy to do and it's really a vibrant open-source community there are so many people who are contributing too into it and I think there are actually more people contributing to it outside of Google then Google ourselves so which is fantastic that means that people really like to use it in their taking action to make sure that the project has some of the best features in the open source world so how does that work well in companies you you can go through a very very similar similar process like our internal tool now this is actually the open source tool right this is something that you can't use today commit at least this is how it works so you won't be able to build the content make like what I have system and then push it to a central repository that will be your image repository whether it's dr. hard or you know private repository of some sort and then you can define a config file as well that tells kubernetes how to deploy and how to provision this this application you declare the state that you desire incriminate this is going to be able to take care of that for you and communities master will then check against the scheduler again very similar and then check against every machine that's running the couplet which is like basically announcing itself to be managed by the community semester and then check the machine you then have the capacity to run it if it's best suited for running the job and if it does it's going to pull down the continue image right and then launch the container for you very very similar processing idea behind the scenes company was heavily influenced by our experiences in terms of managing containers from the past as well so it's best-of-breed at the moment and this is a very quick view of the company file that you can write okay so very similar you rather than a binary file you specify the image that you want wrong and you can specify the resource limits memory and CPU you can also mount disks as well and you can specify the port and then you can of course specify the number of instances you want to run so rather than talking about it maybe I'll just jump into the demo as well and I have about 10 minutes or so for that so here I have the application I disappeared okay I'll go back to that and first I need to be able to push this to a repository so to do that usually you do a darker tag in the world and then if you push it to like dr. Hopp you have some kind of special syntax for that right so if I want to push it to my own topper hub I'll do it sounding this in at a slash maybe hello world okay but what you can also do is to push it to a private repository so like in Google Cloud we actually have a private container registry that you can push your private images to and it's really easy to use so you can just tag it with them you see here a list so I need to know the project name that I need to push to and I can do doctor tag - you have hello world GC ortho and but this is only talking it within my computer and now I can just push it to the private registry so I can do a g-cloud dr. push and the the string for the image name sorry oh yeah that's one too many okay so that should send my darker image from my machine to the cloud that's really quick okay and then what do you do once you have the image in the repository you can just declare the desired state of this application you can do that from the from the description file like the demo file or a JSON file to declare how you want to run this or you can just run it directly from the command line so what I'd like to do is to do the the wrong command and to show you how that works I like to go to here and I have this a little visualization tool that is not running because I killed it okay so I have this little visualization tool that helps me to kind of show you what it looks like within the kubernetes cluster so my posture right now has four node and these are running in Google cloud platform and it's running as you know Google container engine it's a managed service for you so you don't have too many wings though kubernetes at all you can just say how many nodes you want in your cluster and Google compute engine can they just ping up and pre-configured everything for you and then you can just use the coming line to deploy your application it's one of the easiest way to try out communities as well so what I can do is to to row me so I lost the command line which is great so I have to do this by hand so I'm going to keep CTO wrong hello world that's the name of the application I can name this whatever I want it's like an 80s I can manage within kubernetes and then I can say the image is equal to the image that I just created yeah here we go okay and then I can say how many instances of this I want I'm just gonna by default come to start one and I'm gonna put some labels on it so everything in kubernetes has labels okay and labels are something that you can just create yourself the name and value you can create whatever you want and this really easy way for you to find out what's actually running your environment so you can actually select by label so you can figure out which parts are running or which which containers are running based on selecting the labels so I can do something like conference is equal to J focus and the app is hello world and I need to visualize this I'm gonna say visualize is equal to true yeah maybe that'll work okay so so the visualizer is actually pulling this data from the API from kubernetes of the current state and very quickly you can see that comminity has created two things for me the boxing the blue is called a replication controller okay replication controller icon that manages and oversees what we call policy actually just manages how many instances of something you want to run and the replication controller is responsible to achieve the desired state of your system based on configuration so in this case I'm telling the replication controller that I need to have one instance of my hello world application running and in the the Box in grey that is the application that's running right now okay and the Box in grey is not just a container okay up until this point I'm talking only about containers but the Box in gray is another concept in kubernetes is called a pod a pod is the atomic unit that community can manage it's not the container by the pod now what is a pod a pot is actually a group of containers that have to live and die together don't have to share resources together okay now you may think what can be in a pod like some people can say well you need the front end in the my sequel database that should being a pod but that's not the case that is not the case right because you want to separate those into separate layers so so you will have a pot for the application another pod for my sequel service and there's no be different and they could be managed differently by different replication controllers well you can put in the same pod however are things that you know are really really closely related together for example if your application is exporting some matrix or is you know outputting some log then maybe you need to run the log collector or the metrics collector in the same pod in this you know within the same namespace so that you can access your application very easily so in a pod you can have multiple containers in most cases your teas cannot have one container inside a pod okay so in my case there is just one comes now what if I need to access it if I need to access it I can just expose this as a service so I can't do something like cukoo CTO expose the replication controller hello world and the port is a DAT and the target port is 80 80s well I'm not exposed to to the outside world on port 8080 and and then I want to create the type of load balancer and actually create the boxing green which is a service okay and the service is really just a load balancers is very similarly in concept the way that's implemented depends on the provider that are using and and basically it will be able to route traffic from that from a stable IP address and robin through the different parts the different instances are you have for your application okay and the way that's going to be able to route the traffic and being able to figure out which instances I need to route to is by using labels so you can say hello world service only route traffic two parts to these containers with the labels of hello world or to the environment of production you can actually use services to front your application sinks both different parts of a to the outside world if you want to or you can actually create an internal service which doesn't have internal IP address as well so while this is spinning up it's going to create an external load balancer for me in the cloud as well so I'm gonna wait for that but in the meantime I'm gonna show you something else so I'm gonna go ahead and scale out my my number of instances here okay so I can just tell kubernetes to scale all the world I can tell the replication controller that rather than just have you having one instance I need maybe three so I just do roughly cost is equal to three and that should actually just sping up two more instances for me okay very very cool if you look carefully these instances in in parentheses that's actually the note that the application is running on so I never tailed to minetti's were to run this it just figures out for me and really smart enough to kind of just figure out the best place to run it as you can see they're running on different and what happens if you actually something actually happens to it and something dies right so I can get a pause and I can kill one of these things so QCT oh really like that now watch watch very carefully so it's going to recognize that something got EVD and very quickly it happened so fast very quickly already is spinning up another mission for me so there you go so even though i pv do something it just spins up immediately for me another instance yeah the thing i just really is gone so DBU 89 is coming from this place of parcel I have okay another really really cool thing is that that you can actually do a rolling update so what happens if I need to update my service here okay so do you a quick going back here so I'm gonna go ahead and uh just change this right so I can actually just change this and maybe he's X x y and plus one that's not good multiplication right so you can do that and then you can buuuut it and then you can tag it and you can tag it and you can push it and and when you tag it you can tag it with a different tag name so I can say v2 here and then I can just push the v2 to the cloud as well and then once that's done I can use this oops EPO there's a command line code rolling update okay and and what I can do is me see here rolling update I can say the name of the replication controller I want to replace with the image I want to replace as well okay so for example I can do this come in line right here so I can do running update hello world and the image is the v2 image so I can just copy and paste that image name and I can specify the the rolling update period but I'm just gonna do they sell very quickly right now okay so what is this going to do if it works it's going to create another replication controller for me like that and they slowly take away the existing version of the application and then introduce new versions into the mix and oh at the same time the service the Laban's in the front is completely aware of what's actually accessible and what is not and people who are using the service will not be affected okay so that's really cool to do and oh yeah I have to I have the proxy money again but I should be able to just hit it right now okay so that's really what companies can do really really awesome stuff pretty easy to do I'm not jumping because I don't have too much time left I'm not jumping into the next part of the demo which is Gandhi pretty awesome so I was in conferences I was obviously many different companies sitting I ran into a friend Arjun from Queen tore at the geophone so I'd like to invite arching up to the stage until you tell you a little bit more about the things that he has done so Arjun please come up yeah welcome yeah we're into it into ray @j fall last year and we are the PI cluster and we got a chat and let's introduce myself first I'm Ari I don't think I'm a Java developer basically and also an architect that team lead at Qatar contour is a Dutch company that's mainly focused in software development and one of the things I find very important is that it's not about writing code but it's rather about delivering systems that actually get used and work really well for your end customers so you always have to know your applications what if and all the technology that evolved and also be part of the operational part so who didn't her about here about DevOps the no hands really good yeah one Oh DevOps yeah you have to check that out because everybody is responsible for their software running in production and what we saw at winter is about two years ago that we saw that the trend of micro services and so on and that's really changing the game in which we are developing software ray already mentioned we're splitting up our applications in more and more separately running processes and to do when we do that we're running more processes but to gain the same reliable service we are previously the providing we need to run more and more instances so it's an exponential growth in number of processes very running and as here are also responsible for operations you have new challenge and what we see is that docker and cluster technology like Cuba Nettie's is really helping us to to grain again that control again yeah yeah so so so are doing his team actually built this Raspberry Pi cluster I ran into it and I was like hey why don't you try putting on committees on me because it will be really fun to do and we can run some job off services on it which we are doing today and and then we can play real chaos monkeys meaning I've been to the US and this before I just want I pull the plug on something and actually do this here so arguing what is actually young here yeah so what would we have got here is for FA PI tools so there's quad-core processors one gig of memory 16 gig of SD card storage a small networks which is a really simple one and and if USB power supply and that's all in a nice casing it's a multi casing so if you want to build it yourself I have written a blog about it what what we are here's the block cumin and SiO go there there are two blocks one on the hardware so everybody everybody anyone having its birthday soon it costs about 3000 Chrome's we yeah we posted the blog just before Christmas I know we made many people happy yeah and that is actually my cluster so so I didn't I wasn't able to give these act parts and it doesn't look nearly as good as that one so just saying like yeah yeah okay whatever that's on the calendar and also there's a blog on the software I use hi create as a base image really great starting point when your run want to do Tucker running kentucker containers on Raspberry Pi one image put it on your SD card and you're off you go so really great doing your team is really doing a really great job Garnett is running on that in the inner docker container of course thank you bananas has two things they need at CD at Citi is the storage of the state of your duck off your Cuban a disk on a cluster it's a desired state configuration that's stored in there and we need flannel normally docker containers over no different notes over different machines can't communicate directly with each other Cuban net is just that so a flannel is a network bridge underneath the docker process that enables us to do overlay networking so creating a virtual network with over the cluster so every container can call its its colleague container no matter where it's located in it's really powerful so so what we have running here again I'm gone used in my visualization tool here so you can see that we have four notes and every one of them has a different IP address the 0 dot 0 dot 0 dot one that's actually the master note on the very top and then we have three other notes that's also running some workload and we have deployed a another screen poet application this Java micro service that I wrote before so we can find basic Java image to run on Raspberry Pi as well and Java is of course portable so you register on to everywhere and I can just hit the the service URL and that's kind of the response I'm getting now on this cluster what I can also do is everything that I was showing you before so I can actually scale RC hello world replicas is equal to 4 and that's going to scale out the number of these instances I have um the raspberry pi cluster so now you can see we have four instances running and again in the gray boxes these are the deposit these are the actual application instances running and there again the parentheses you can actually see which note they are running on so we have one that's running on 237 one has run running on the master one that's running on two 114 and so and so forth now when when RG has had this before the IP addresses will I should be like 0 like 1 2 3 4 or 5 so we can't be stale which ones which but these are assigned by DHCP so we have absolutely no idea which IP address is corresponding to which nobody except for the master no yeah but but that's that's the fun because you probably don't know that here tester anyways but then what we can do is to if there's any volunteer any volunteer who buy it and break our cluster by pulling on the tables anyone come on one one person all right come on come on and see if you can't get through yeah alright let's get this game on my hand great thank you thank you I really appreciated okay so come up and come why don't you come around here on this side all right what's your name return the Adri nice to meet you great all right be gentle with that so you win a chopper as well yeah so so we have four nose here just remember don't pull the first one yeah because I'll come next to my machine and if that's gum you cannot see anything yeah let's do the network fridge yeah yeah and we have absolutely no no second well yeah we have absolutely no idea what's going to happen yeah we don't know which no this is corresponding to because Arjun put this together so there you go don't wait what now watch company says this point is going to you you know do the no checks right does it every five seconds oh so it's very configurable but it doesn't fail the first check it weighs for about 30 seconds or so that's also configurable and if it works it's going to realize that the note has gone away in about 30 seconds were sailing yeah yesterday what happened let me do a Q CTO get notes there you go all right and then and then Cooper the AC sconce you realize wait a second the pot else was there needs to be rescheduled yeah okay so you want is there and it's terminating the other one but some communities have graceful period so it's going to wait for about 30 seconds or so for the pot to shut down gracefully by in this case the machines gone so so he's gonna take about 30 seconds for kind of termination that pot so I think that will happen way too fast because as soon like that no was recognized to be down it then starts with another instance for you because you're these are his fate is you want four instances so he's able to just start another one for you so what happens if you plug it back in yeah yeah so again it's going to do that no check for you know every five seconds or so because we only pull the network cable so issue actually recognize the note to be healthy again very quickly but I know yesterday there are some issues with the network so we just have to wait and see so while that's doing that thank you very much by the way yeah thank you all right thank you there we go so I see what's walking back up there don't is being recognized as guilty yeah and I came again to schedule work here so I can do a skill five for example and and because I know this healthy is now able to schedule but that's a little bit too easy that's a little bit too easy because because these are stateless state ice workloads right so don't data so we have two minutes I'm gonna show you something in about five minutes or so if you are willing to stay around please view because I'm going to show you something with persistent persistent data right you could be dead easy cash we mount volumes and these volumes can be a cloud value right if you're on your cloud platform you can be a cloud this if you are in your local you know your own datacenter can be fast I Scaasi RDB or a bunch of different technology is actually supporting so hopefully this works we we have NFS server running on that machine on the laptop that's exporting some directory which we are going to use as a volume is exporting on FS in kubernetes you can actually declare what volumes you can use by declaring one of these demo files again and to say you know what type of storage it is right so like I say this storage can hold one gigabytes of data it's a rewrite once so you can't just be mounted Inc by one part for example for wheat right and then how do you actually connect to it in this case we're just gonna use NFS so we're connecting to the server on that specific node on that specific path okay and then for you to use it you have to clean the ownership of it right because in kubernetes the storage is a bunch of resources that anybody can take and use so you have to take ownership of that and to do that you can do a you can make a persistent valium claim which says okay here's the request I mean one gigabyte of storage rewrite write once and then them and then and it's going to go out and find it for you okay and so if I do a get PVC I can see that this my circle clamp this only ship to the storage is bound to the actual NFS mount okay in the end of what I can do is see my sequel again I'm gonna do your RC here in the end I can say alright this my sequel server it needs the volume so I need to mount a volume into the directory where my sequel stores data which is far live my sequel and then the name of the clan the not ownership that ticket to access this storage okay anyone can do is to create and run this so I'm gonna do you keep CTO create - F my sequel - RC and actually actually run my sequel instance here okay so oh that's no good that's a nice tree running on the master node so that's not I don't want to do that so what I'm going to do is to get parts and I'm going to delete it okay yeah and hopefully it's going to be rescheduled somewhere else okay yeah so it's gonna be scheduled to 214 okay and what I mean is the MAL units actually melted down now no down to 14 and what I can do a very quick demo of that is to do my sequel you root P host is um RPI master I think what's the password is your password that's the password okay so I'm inside of this my sequel I can show databases there's app I can't do a show tables there's nothing how many people remember how to create a table in sequel yeah create table hello yeah okay greeting yeah Varsha are 30 something like that same called 0.1 no yeah there you go alright and how many people actually remember how to insert let's go Leon here you can put us use hibernate and GPA he's starting to greeting right oh yeah of course the people came I always forget and yeah it's all good hello G focus right Jay focus and I can't start from here now this is difficult so I'm gone just exit of a live demo with real devices yeah so now what we're going to do is we're gonna kill the dough so he since he's still here so why did you come back here you gotta kill my my sequel server this time now this is different yeah difficulty first we need to know oh yeah know what it is yeah so I only ever yeah right so for anyone using our community for this is a little gnome on me like yeah you should know about this yeah so with our PI can actually see that 214 is down the number one no normal one okay so no no that way yeah yeah you can try the powered everyone yeah it's not the one that you will see yeah bullet yeah okay so again we gotta wait for 30 seconds or so and then I will show you what happens to the the my sequel server and then we're off to lunch okay so this is the most difficult part of the demo because I never know if it's going to work if it doesn't is lunch time so we just walk away slowly to the next room and cry so come on I'm just going to recognize this no pain down finish soon there we go and very quickly again watch for the visualization there you go so it's terminating that my secret instance that's on the dead note and it's going to start another one another note which is the - 37 - 37 is what this one so I'm going to a cessation to it so I'm gonna do a very quick sanity check if it lets me SSH okay they're gone yeah scary scary demos okay so first thing I'm going to check is whether he has my sequel it does perfectly and then let me check if it there's a mount oh sure mouths sorry grab a shoe mount as you can see I'm very nervous right now okay so there's the mount right so the mountain actually got transferred to this machine and then I can actually see what's inside of this mount data that's a good start okay in vain the ultimate test for me is to see if there's data in there so okay I'm gonna go through rpm master now I'm not cheating here I'm not running my sequel on the master note here this is actually rocking the traffic to instance here okay so service yeah it's a service so he's walking this traffic your passport yeah that worried you zap that's good show tables yeah are you ready for this so let's start so normally you wouldn't want to do that because you know you want to make sure your my sequel server is shuts down gracefully you writes the data synchronizes eight to the tasting stuff like that right but this is just a demo and let's see if it's there and are you ready yeah I don't know so so they saw from hello and their days yeah so that's what companies can do for you oh yeah so yeah that's all I have and thank you for staying a little late with me and if you have any questions about companies feel free to come up and ask the question right here all right and raspberry-pi ask the origin and checkouts blog and thank you very much yes 