 alright let's get started that okay my name is Alan Howe I lead our developer relations at Apogee I'm somewhat amazed when I'm at the platform engineering from Portal I work with partners and customers and we're going to talk a little bit about graph databases we're going to talk a little bit about micro services so to get a little background on Apache user grid which is a back-end as a service I want to talk a little bit about micro services we all know that kind of the goal of a micro service is to break break big monoliths into small services but going a little bit deeper there's two types of micro services that are that you can break them up into one is business logic services and the other is data services now business logic services we care a lot about business logic services and the creating new apps and these are supposedly are stateless services but what about services that need persistence right how could we do that a little better well regardless of whether it's a business logic service or a data service two things need to happen for micro services they need to be isolated from each other and they need to have an API you don't want to have any database connections you don't want to have any like direct socket connections they all should have a API so kind of the tradition SIA for deployment and management business logic services is okay let's just put it let's let's let's put some let's put a continuous gets a lightweight scripting language or Java something of that sort put it in containers and we scale up the number of containers that's kind of like the the way that a lot of people are thinking and then for data services kind of you can the question is can you extend that same approach especially web data services that need web scale well so a lot of people I see is that they try to put Cassandra or in a container they put a lightweight and then they put a lightweight scripting language in a container and then put the lightweight scripting language to call the no sequel database there's a problem containers solve nothing right because at the end of the day no sequel sucks and it sucks only when you're doing it at web-scale this is what I'm talking about at a thousand TPS even though it's designed for that and what are the common issues so you know developers are not very good at doing indexing and when you get up to the you know the thousand and ten thousand TPS level having the developer learn how to index their databases is very hard the second is for a lot of no sequel databases taking advantage especially of the you know taking actual advantage of the no sequel database optimizing it for parallel for parallel calls is also difficult and last but not least when things go wrong when you have latency especially it is extremely hard to debug a no sequel database right and web service like micro services makes it worse because what you're doing is managing you know hundreds of not thousands of instances of both databases of these no sequel databases and you and you know before all the things I just talked about it just gets worse you're not really solving the problem when it comes to data services so you know what's in a different approach right the different approach that Apache user Grid uses is that it's a radically new way to create a multi-tenant data service on top of a single Cassandra cluster it has an out-of-the-box API for it right so you don't have to stand up another you know a lightweight scripting language in another container it has a bunch of kind of out of box capabilities especially for mobile like pushing applications and as SDKs for Android iOS and JavaScript so what is a mobile backend as a service well simply these are not just a datastore but also out-of-the-box back-end services that are needed to build common apps so you know this is like geolocation users push notifications etc and the the key what's different about you Sigrid is that it's open source so who here heard about parse anybody heard of course yeah Facebook shut that down earlier this year anybody heard about stack mob stack mob yeah when PayPal bought that they shut that down too anybody hear about firebase Google I was talking a lot about firebase I don't know if Google is going to shut that down but if it's your software is not open source you just can't afford to have a vendor lock you in so the great and the nice thing about user grid is that it's open source so no matter what you no matter what your vendor is doing you know that at least your data is not gonna get is not going to go away so what are some use cases well for the case of pivotal you know this is really back in the service is really a part of a bigger story of a mobile reference architecture so you have the back of this service that's great for storing like location data user preferences etc you have an API gateway for managing legacy applications as well as new services and then you also have streaming event engines for capturing things like analytics of that sort this is one use case that we have this is our customer this is a this is a customer that's using this called Burberry and they're using it for customer favorites so this scenario they need they have millions of customers and then favorites is one of those things where they have the unique scalable rights because lots of people might be adding things to favorites but you also need scalable reads and what I mean by that is you know if you have a favorite list from a famous celebrity that gets shared out by everybody a lot of people are reading that one particular are reading that one particular list they also needed the idea of graph queries as well and I'll get into a little bit more because every user has a has a list of favorites and you know wish lists but being able to query sub-query items on that is very important but most importantly is that it's the provisioning time they didn't need to actually spend a whole lot of time standing up another Cassandra database standing up a front a API front-end to the database it just happened automatically so I kind of give you a quick demo to kind of show you what it's like before getting into some of the technologies use cases so this is a UI to it now all these API calls I'm going to be making by the UI can be done also by a command line and so to create a new application it's simply you would press a button and you would create a new application and this application is going to be isolated from all other applications let's take a look at some of the let's take a look at some of this data here so I take the get users and it give me a list of users I can also do searches over here to it so it's not a simple key value pair store but there's actually indexing going underneath the hood too okay so in this entity over here you can you can put any kind of data you want you can put in JSON blobs as well and then you can also do other things too so you can actually it supports the concept of graphs so I can I will drill down into this particular user and I can look at the activities related to that user too sorry oh sorry I got this wrong here oh thank you okay so this is what I'm showing you here is this user Jenny I've got the list of all the activities that they had that she has done and these activities may include things like likes it could be including things like put adding to cart things of that sort there's a graph database underneath the hood and you can even do sub queries on that graph so for example I want to find all the items that Jenny had liked that's under 2000 2000 dollars let's do that and see what happens okay this is a copy and paste issue Oh - lt's okay so you can see here i just queried on this item and then i can see that jenny may be a like take a camera that is under $2,000 oh this is okay there was a little error here okay so let's go back to show the underlying technology about it so under it so inside it's a combination of Tomcat talking to Cassandra and elasticsearch so we use Cassandra for storing the actual data as a source of records and the reason why is because Cassandra gives you the ability to do multi data center replications and is very very scalable with shardene and then we use elasticsearch for doing all the indexing because you could throw any kind of any kind of thing inside and we wanted to index all the fields having a doctor having elasticsearch which really just focuses on indexing allowed us to get the best of the best from cassandra and get the best of the best at elasticsearch so from a graph data structure perspective you can see here we can show you know there could be an app an app has multiple users and user can own multiple lists and each list can contain one or more products so this is a very very rich data model it's not your just your basic key value pair data model again it's built for web scale and I got a bit put a little caveat here right obviously if you use hand-tuned Cassandra on your hand to an elastic search you're gonna get much better performance but for majority of the web scale use cases which is in between the thousands and tens and tens of thousands of scenario requests per second you really don't need to do any that tuning besides your developers are not going to know how to tune that anyway right okay next part is sharding so we've spent a lot of time charting the data and we sharted every connection at each level so that whenever we're doing any queries it's it's uniformly making queries across all the cassandra' across all the Cassandra instances so you're not getting this hot spot of data for a particular chart and the other part that made this very scalable is the indexing so what happens is that when we do a write to the system it hits the Tomcats we immediately write it into Cassandra and we also write it into a queue the queue then then we have the Tomcats asynchronously pull the pole pull the queue and we and the and read Cassandra and push it into elasticsearch and so what this means is that from an eventual consistency perspective yes when you put you can write very quickly and almost immediately get a response now it won't show up in your queries immediately it takes a little bit of time because we're doing this asynchronous indexing but for many use cases especially web-scale use cases this is totally fine from a user experience perspective so I'm gonna hand off to subbu and talk a little bit more about how you can actually get this running on Cloud Foundry welcome everyone so what we okay to tell you the truth I don't really know anything about em bias or user grid or any of that their team came out to the industry day wherein we had different partners come in and try to help build so his broker or applications or tiles for PCF and we were able to accomplish the tile construction for use of grid all in two days time essentially what we did was we created wash reliefs that encompasses the Cassandra the elasticsearch and then we had both parents that pushes a user grid application as some application to the cloud foundry and we create a tile around it and in the interest of time we actually went with the docker images of Cassandra and elasticsearch rather than full-blown Bosh so in terms of the standard deployment what you might be having is a tomcat server running the use of grid application and separate insults of Cassandra and elasticsearch which you will have to manage you'll have to scale up things like those and if something goes down you're on your own you need to make sure the thing is up someone has to monitor it someone has to scale it up someone has to fruition the VMS do all the stuff that you might have heard all through these days and it's not cloud native you will have to do all the heavy lifting so with the PC of deployment essentially the the Cloud Foundry portion of PCF takes care of the app the use of grid app and boss takes care of the elasticsearch and cassandra and now like you have a cloud native application running you can scale up whenever you want to you don't have to worry about the underlying cloud and VMs the health everything is taking care for you along with scale of scaling and load balancing any questions so far so so this is a tile that we created what are the benefits of you are running on pc are you basically get the four levels of H a I'm pretty sure everyone knows about the four levels of H a you get the VM resurrection from Bosch you get the multi cloud capabilities you don't have to worry about the scaling or load balancing or H a and of course there's persistence for these ones and since we went with doctor we could do it a very rapid prototype in to get that thing out in the future we plan to do a full-blown Bosch release for both doc for Cassandra and elasticsearch so you can provide the parameters whatever you need you can customize it and build it to your own satisfaction and that might we all say service broker integration we already have a customer service broker so we would be able to let the user grid consume the Cassandra services through a service broker rather than doing a hard coded our endpoint integration so here's a tile it basically has very few configurations exposed to the user so there is a like it's a great class rename the admin station credentials the SMTP server for now we had a dummy data but this whole time creation was like less than a day getting all the parts working together was to raise two to three days and we can go into the apps manager and we can scale it if anyone wants to see that so we can say start earlier it was with one instance it's kind of starting up does anyone want to see ops manager scale up the VM instances what yeah that would take a little bit of thing so let's do that the optimizer kind of does certain other housekeeping tasks so it might take a little bit of time let's apply the changes we will come back and test it okay ignore there's one of the things if you skip it it's just a zit okay okay let's go back to the presentation we will kind of check it at the end of the call so this is the plan for it like depending on the user preference probably we would you know it's our time and efforts to build a full Bosch release for these two and what are the benefits so I think I don't really have to reiterate it like all the benefits that piece of brings to the table we can because user grid is a straightforward application and we were able to use the darker wash release you are able to create all these underlying wash releases create the tile with it and all the benefits that PCA brings to the table so we could get the user grid out there as a tile right away probably we might be working more with Apogee for other other products so edge gateway or others in the future okay so yeah so you know I would you know there's a one takeaway that one you have is that if you're building microservices and you really need to build a micro data service you don't want to be managing thousands hundreds or thousands of no sequel databases check out user grid because it allows you it allows you to have one large no sequel cluster but let your app developers be able to provision data services themselves without having to go through all the pain of provisioning provisioning no sequel or managing no sequel databases themselves and you can just get use a go go to github you could just download it from github clone it from github and try out the tile on pivotal cloud foundry mark place [Applause] we got some time for some questions not really because almost they are on the same network it don't really be much of a difference performance might be different but not the network I don't really think so but but you do you do raise a point right like whenever you're running Cassandra in it when you're running any database in the VM there is concerns right and so one of the nice things about running you know running in your database on bare metal is that you and you can still you can still run it on bare metal if you want you don't have to run in a VM and then you can actually still have that multi-tenancy on top of one large Cassandra cluster yeah for now like yeah we were able to do a fast prototype using the docker images of Cassandra but our plan is to actually build proper bas-reliefs using full Cassandra not the docker image that allows you to actually deploy it onto bare metal very easily so you can see we are kind of plating the beams for the elasticsearch through boss it's like you're going to ops monitor you say I want to scale up and we are done any other questions so the pile yeah it's a custom tile we created for you Sigrid the user grid yeah it basically pushes an application of the user grid into CF through bar Sheeran and it also creates two separate set of jobs one v l6 h one for Cassandra does it answer sorry - compared to other ambassador well user grid is the only one that an apache and bass is Apache project that's the only Apache licensed one and we I don't know of any ambassadors that are open source and have a lot of adoption especially from enterprise customers so that's maybe that's maybe one difference I do know that there were some ambassador based on top of relational databases but honestly they didn't go very far because why use a Nimbus when it's so easy to ploy it when most developers know how to use a data a relational database right so that that's what I that's why I know so far no no we can create a full-blown bar Cassandra Bosh release but it does require some time because we were able to get a docker image of Cassandra right away we just downloaded it we're a bit with the Bosh release in like a half now yeah we also have a partner offering data stacks there is a data stack spy if you want to use the proper commercial one you so you can consume the services of data stacks from the marketplace that's another option or if you want to bring in this one the whatever custom-built one yes that's an option so we chose the reason why we chose cassandra was because of its multi data center replication and just the fact that it's of all the no sequel databases out there it was the most hardened for enterprise use cases but you know you know it it's on github and you can fork it and then put in things like MongoDB I know some people in the community we're trying to think about using DynamoDB instead of cassandra and still averaging index elasticsearch for the indexing so but we haven't you know Cassandra is pretty darn good for enterprise so the question is is elasticsearch part of user grid so it's we we yes so it is a core part of user grid 2.0 you download you download user grid and elasticsearch at Cassandra are dependencies for so it's an external dependency but it is required for you so grid to function so we have got the three VMs now from one instance of elasticsearch now it's three Bosh took care of it alright thank you very much 