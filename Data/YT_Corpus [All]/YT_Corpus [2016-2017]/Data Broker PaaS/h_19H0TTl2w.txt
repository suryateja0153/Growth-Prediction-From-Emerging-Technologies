 hello my name is Julian Fisher in this video I'm going to show you the any ninth Cloud Foundry services any 9s Cloud Foundry services allow you to add production crate baking services to your cloud foundry runtime in contrast to most existing solutions the any nine services allow Cloud Foundry users to instantly create on-demand provision in highly available service instances after setting up in any 9s Cloud Foundry service any 9s MongoDB in this example we open a terminal with the cloud for the CLI at the cloud foundry marketplace we can then find the any 9s MongoDB service by executing CF create service commands we can now create dedicated MongoDB servers and clusters in this example we choose a small single VM plan and name the service instance for later use the any nine service implements the sm kronos service broker API you can see that as the request to provision a new MongoDB server vm returns immediately while in progress you can always pull the current state of the service instance provisioning during the creation of our MongoDB service instance virtual machines are being started in the background in case of a single load MongoDB a single virtual machine is launched in case of a moment to be replica set 3 virtual machines are launched after our service instance has been created successfully we can see this in the service overview from this moment on we can bind this service instance to our applications looking at the environment variables of this application we can see the credentials that have been created for this application exclusively the credentials are provided by the 89th service broker and cloud foundry as application environment variables here we see the host name of the host running our MongoDB service note that it contains a hostname and not an IP address this leads to the benefit that IP address changes have no impact on service bindings during the creation of a service instance DNE ninth service also creates Cloud Foundry security groups these security groups acts as a firewall and by default prevent apps from foreign Cloud Foundry spaces to access our apps the naming of these security groups follows a simple schema the security group name contain the name of the corresponding service instance you once created we can update any service instance using the cloud foundry command line utility one use case of such a service instance update is to add additional parameters adding a graphite endpoint for example the any nines MongoDB service then streams MongoDB nvm specific metrics to the graphite endpoint such as the memory usage and CPU usage furthermore it is possible to add a syslog endpoint which will then receive MongoDB specific log messages again we use the CF services command to gain insights into the current deployment process as we can see the service update eschewing the in progress once the service update is completed we can see in the graph on a dashboard the metrics which have been streamed to the corresponding Ravana endpoint this dashboard shows some exemplary metrics in this example you can see vm specific metrics such as cpu disk and memory usage as well as the memory capacity you can also see some MongoDB specific metrics such as the number of read and written documents this graph on the dashboard is just an example there are many other metrics that can be used to assemble custom metric dashboards besides of the update of configuration parameters we can also scale out our service instances by upgrading to a bigger service plan you using the CF service command again we can't see the upgrade being and progress during the plan upgrade the service instance this virtual machine will be replaced by a larger one in case of a single note service plan this will cause a short downtime for a clustered service plan a MongoDB replica set cluster will be deployed consisting of three dedicated virtual machines during a scale out of such a clustered service instance individual cluster BMS will be replaced one by the other and the service remains available during the entire upgrade process after the service plan upgrade has succeeded we can see the increased resources at our craft on a dashboard we can see that after the service plan upgrade our virtual machine now has two cpu cores and that the memory capacity has been doubled let's have a look at the application which is bound to our service instance and create some test data in order to remotely access the service instance for example to create a backup we can establish an encrypted tunnel to our MongoDB in order to make this happen we have implemented in any 9th plugin extending the cloud foundry CLI CF create forward established an encrypted remote tunnel to our service instance we can close this remote tunnel at any time can use these excess credentials to securely connect to our database instance from our local development machine for example here we can see the host we have created with our application once the remote connection is not needed anymore we can shut down the encrypted tunnel entirely 