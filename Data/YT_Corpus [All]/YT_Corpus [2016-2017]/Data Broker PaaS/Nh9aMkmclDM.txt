 I don't think that such person should be introduced because everyone knows Red Hat everyone knows who they are so he will talk about the DevOps the recent trends to automate everything from infrastructure through development tools and techniques which are derived from the software development ecosystem and to make the IT deployment and infrastructure management world more manageable under source controls with continuous practices and things from the development world welcome good afternoon my name is Chris van tine chief technologist for the western region in North America at Red Hat and I've been with Red Hat for about 11 years working with strategic partners and customers who are adopting red hats emerging technologies no Red Hat is certainly moved well beyond Linux in the middleware software-defined storage virtualization and container and cloud management and one of the hot topics with our customers is certainly around DevOps you know DevOps is all about doing things faster and eliminating that wall that traditionally sits between operations and developers and our customers are asking us questions like you know how can we enable developers to be more efficient and have access to the platforms and tools that they need but also how can we enable operations to be more efficient and reduce costs but ultimately how can we enable the business to deliver a product sooner and as you go and so in today's talk I'm going to talk about DevOps from an infrastructure perspective you know but what's really driving this transition there's a certainly an inflection point in the industry in Marc Andreessen several years ago had the foresight of seeing this how software is really changing and eating the world right and we've seen this in many different industries does anybody recognize what this is a picture of all right this is the Tesla automobile factory and the reason I show this isn't just because software is automating the production of these vehicles but it's also software's having a big impact in is a part of the vehicles that roll off this assembly line and software is transforming the automobile market right when was the last time you could actually go to an automobile dealer and in six 12 18 months down the road the car actually got better and that's exactly what software is enabling Tesla to do all right you've read probably about the zero to sixty time improving after it left a lot with a software update or improving navigational systems the applications and the dashboard but it's not just that it also is transforming the way the industry performs vehicle recalls right if there's an issue with the car no longer have to have a physical take the car physically into the dealership you can actually deliver a software update over the Internet and that's the safe Tesla of millions of dollars compared to their competitors and what happens to industries that rest on their laurels and stop and fail to innovate and move forward well the San Francisco taxi industry is a perfect example of what can happen a few short years ago a taxi driver averaged almost 1,500 rides a month and this is since plummeted by 65% to just over 500 rides a month and this coincides with the introduction of uber and lyft into the San Francisco market and with their innovative software mobile application totally transform the user experience of someone hailing a cab in the city no longer had to wonder when would the cab arrive or which way was the cab going the long way or the wrong way will I be able to pay by credit card when I get to my destination but it's not just enhancing the user experience but it's also transforming the company itself and the ability to deliver new products and services rapidly whether it's in Los Angeles where I'm from they're able to deliver food on demand for a lunch hour in Dubai you can order a helicopter right they are able to try out these new services and see if the market responds and if not quickly change in a different direction and so IT is at an inflection point you know Gartner calls this the era of mode 1 and mode 2 and the how what and where is transitioning to a DevOps development style methodology and culture the architecture is changing from a monolithic design to micro services that are small lightweight and can be quickly deployed and then the underlying infrastructure is transitioning from physical and virtual servers to containers running on public private physical or virtual infrastructure and this is all being done to accelerate the adoption of new capabilities and deliver those into production quickly but also improve overall product quality as well however as businesses rely more and more on software it has its own set of challenges software projects are typically over budget they're over time and they don't achieve the full value that you expected because he either had to strip out features to meet the deadlines or by the time you deliver the software its window of opportunity is passed and so one of the challenges them the reasons for this is that the organizations have walled off departments you have your developers you have tests and your production folks and there's a lack of collaboration amongst these teams typically you'll find the software being developed and then it being thrown over the wall to the testers they'll rebuild the environment to create their own environment that have their own infrastructure and then they pass it off to production which is a completely different type of environment as well and this doesn't make any sense because software product quality will suffer as a result and so this has given rise to new development trends and methodologies with the rise of cloud and mobile applications the days of multi-year life cycles is long gone can you imagine developing a social media website and releasing every 12 or 18 months I may simply be dead on arrival and so this has given way to agile with frequent releases and short development cycles but the problem with agile is that the developers end up spending more time on deployment and this doesn't make any sense you ideally want your developers developing business logic code not infrastructure your testers testing it and then your operations folks ensuring that the lights are on and doing any root cause analysis on issues in production and so this is given wise you know to DevOps DevOps is a software development method that stresses communication collaboration and integration between the software developers in IT or operations and applying some of the principles of agile to the full development lifecycle and so the first thing with DevOps is really breaking down the walls from a cultural perspective bringing the teams together for those developers testers and operations and so they can all speak the same language and collaborate use the same tooling as well some other enablers around DevOps you know first off is configuration and code why treat the infrastructure any different than source code you check in your source code you version control it point out the infrastructure right also using standardized environments giving access to developers of production like environments early in the cycle as well as testers you know Linux containers are providing an abler around DevOps as well because they allow the developer to package once and then deploy anywhere no longer do testers need to rebuild or production need to rebuild they can take the same artifact that the developers build and move that through the complete lifecycle as is also automated provisioning you know the days of manually building servers configuring application stacks is long gone and so automating those processes and the key concept around DevOps is to fail fast and recover versus never fail and in secondly you know around enablers of DevOps is C ICD automated testing and deployment continuous integration has its roots really an open-source world the idea of contributing your code checking in early testing it and if there are any issues resolving those early in the cycle because as you wait longer and longer the technical debt of resolving that issue only increases also continuous delivery so enabling you to deliver software updates as needed by the business in a matter of minutes rather than weeks or months and the key concept as well as small changes equal less risk and in thirdly around enablers of C ICD is continuous innovation alright for finding developers with self-service the ability to have rapid prototyping right enabling innovation in your organization by eliminating the barriers have giving them access to the tools and platforms your developers need on demand and the environments as well and so a key concept here is cultural change it's ok to fail because we have automated systems in place to quickly and rapidly recover from any issues and so you know you may ask what organizations out there have been successful with DevOps there's plenty of examples whether it's LinkedIn who can do several updates a day Etsy who has dozens of updates a day or Amazon Web Services right they have the ability to do 10,000 deployments on AWS an hour can you think wow that many updates there must be a lot of downtime or a lot of outages caused by change but the stats show that only point zero zero one percent are attributed to a change of downtime and so if you're out there in the audience wanting to know how do we enable DevOps in our organization there are three questions I present to ask you know how to quickly and reliably deliver these new capabilities what kinds of new apps and services to deliver and support and in thirdly where to create and run these new apps and services and so this is the how what and where of DevOps right there's DevOps a cultural change a methodology but there's also it goes together with building cloud applications or micro service based applications and then deploying these applications in a cloud or a container based infrastructure environment though many of my customers they're deploying private clouds or public clouds has the capability have API and dynamic provisioning dynamic scaling up and scaling down but if you don't have the processes to take advantage of this infrastructure you're not getting the full benefits and that's why these three things go together and so let's talk about some of the enabling technologies you know one of the roots of DevOps is that you'll notice is that open source tools are very prevalent in DevOps shops and it's no surprise with open source collaboration and development model really mirroring the DevOps may and so Jenkins in terms of continuous integration you also have configuration and orchestration tooling around the ansible puppet chef monitoring such as Maggio's in containers management such as kubernetes and so let's take a look how is the operating system evolving to enable DevOps right so first off you know docker is certainly a key part of enabling DevOps it's a part of the operating system now going forward docker is great on a standalone development system but how do you manage containers at scale how do you make sure that you're efficiently using all of your resources and a data center and so that's where a scheduler is important part going forward of your operating system so something like kubernetes goes alongside with docker and managing your containers across the data center also how do you orchestrate and deploy your application how do you define an application that consists of many different services how do you ensure that that application stays in a healthy state in your environment and that it recovers from any failures automatically and so that's where an Orchestrator such as kubernetes comes into play and these components are really going in more in a container os at Red Hat we're participating in the project atomic which incorporates docker and kubernetes for container and container management and so let's take a closer look at Linux containers and how it enables DevOps the Linux container is very similar to Java analogy you have a Java with your ear file you're packaging in your dependencies it's a Java base and you run it on the JVM in the docker role all right you have a docker file similar to a make file you have the image similar to ear and then you have the container which is the runtime similar to your JVM the difference though with containers is that applies to any language you can write no js' Java C PHP etc so containers are universal and they enable DevOps because you can very easily define a recipe in a docker file of all the dependencies and the components that make up your container image and make it reproducible once you build your docker file and create that image you can then store that image in a repository and share that share that amongst different teams or share that amongst different environments whether it's dev tests or production and then that container image can be instantiated in any environment whether it's physical virtual private or public cloud and run consistently and reliably in the same across all those environments and so those are some of the factors that enable Linux containers to be a good match with DevOps above and beyond docker and kubernetes for container management there's also platform as a service platform as a service is really automating the build as well as the deploy of your container and this really allows your developer to focus on code rather than infrastructure networking storage virtual machines and really abstract that layer from you and provide the developer access to all the platforms and tools that they need in a standardized way enable the developer to have self provisioning by just checking in their code and then automatically triggering docker builds and then also once that container is deployed into your production or test environment the ability to automatically scale as demand increases and decreases so let's take a look at a customer that transformed their organization with DevOps this is reflective of many of the different customers I work with but here's a one such cast we're a very large website take six weeks to change a single word in production and then after two years a competitive startup launched it took that much time to actually catch up and release a similar product and up until now they were using proprietary application platforms and so they didn't have access to the latest tools such as nodejs which improved their development efficiency and another key challenge with that was because it was a proprietary platform developers weren't so interested in learning it and so not having access to open standard base open source solutions provided a challenge for their HR department in recruiting and staffing their organization as well as retaining talent and so the decision by this organization was to you know take a DevOps approach to really reduce the time it took to go from production into production of their applications and so that what they did is they leveraged the pass they also organizationally brought together the dev test and production teams and they implemented continuous integration and continuous delivery in this case with Jenkins and so what did this flow look like right their goal and which they achieved was to actually reduce from six weeks to getting a single word change from dev into production to under 30 minutes consistently and reliably developer using the Eclipse IDE or from the command line they were able to push their source code into their github repository that would then trigger an event which would create a build of their code and put it into a container that container would then be run through the continuous integration as a part of that build process once it completed that test it could also go through a security check of the container to make sure there were no security issues and then it was put into their Nexus repo once they promoted it from the release into production instance and then in their case they wanted the operations team to control the rollout of the containers into the production environment and so with this solution they now were able to deploy the binaries they had the ability to do a/b testing so they could actually deploy version two while version 1 is taking traffic and then once it completed testing in production they could flip it over and then I had the rollback capability as well as automated scale up and scale down and so this shows you an example of their customized build pipeline using Jenkins which allowed them to define stages or phases in their their pipeline and they had a manual as well as automated controls to move the code from one phase to another and then from an architectural perspective you know they were deploying a pass into an existing environment their data we still resided on their Oracle database they had an existing repository there a nexus repo they for the first time we're using CI CD with Jenkins and then you had the existing f5 load balancer so they wanted to be able to integrate with that and so the pass actually was able to integrate with a low bouncer so they no longer had to call the network engineering team to make a low balance or change to add an application or add capacity or vice versa and so they built this across their virtualization environment and were able to provide the latest platforms whether it was no js' Java etc to their developers in a consistent manner and so the return on investment that they saw was that you know by moving over the dev ops and in leveraging paths to get there they were able to prove their business agility they shortened the time the market of new code into production they reduced at provisioning time from a matter of weeks to under 30 minutes they also improved developer productivity because now the developers had access to self-service they didn't have to worry about virtual machines they were also now having continuous integration a Jenkins instance per team or per developer as well because the CI system was running on top of the pass which automatically scaled up and down and provisioned they were also able to task multiple versions of their application because the pass provided any environment that they needed on demand they were also able to have a consistent environment in dev test and production they no longer need to leveraged a standby data center and manage it through change control they could give the freedom to every developer to have access to a production like environment and make changes that will without going through change control because it was a virtual environment and then also improving business predictability one of the key challenges is you know how can marketing plan if they don't know how long it'll take for the environment to key to roll out into production and so this provided predictability because every change could be released under in 30 minutes and then improving operational efficiency by going to a container based environment they're able to get about 10x and improved density in their environment so the cost savings alone there made it much more efficient and so if you're out there wondering you know what metrics to follow and track to see if your DevOps implementation is successful you might want to take a deployment frequency change volume lead time the deployment rate failure as well as MTR and service availability are just some of the metrics you may want to consider and so you know DevOps is part of a larger shift not just a cultural change a methodology but also you want to change your application architecture potentially with cloud apps micro services to take a full advantage of your new cloud infrastructure running on containers which is nicely aligned with a microservices architecture as well as the DevOps model because it allows you to quickly and rapidly move changes it's code from dev test into production thank you so much for your time today and if you have any questions feel free to reach out I'm also available on LinkedIn and feel free to reach out and I'll be happy to answer your questions 