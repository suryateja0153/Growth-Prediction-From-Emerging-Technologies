 today so this session is around the auto slip Auto sleep is a new service a new open source service that we have developed to automatically suspend inactive application after a given amount of idle duration and then it gets restarted automatically when there is incoming traffic so let me introduce myself I'm working at a range so that for those that don't know range is one of the largest telco operator in in Europe in in Africa its present in 24 markets with more than 240 million subscribers and here is the auto safety so I'm working at the product manager on this project and Benjamin and I'll go out the developers they could not be here today so I'm representing the whole team so let's start with them why would you skip the interest to you why would you care and maybe we can do a shortfall on how much of you are not yet using Cloud Foundry pretty much just a few ok who are more on the service consumer side so pushing apps and operating apps ok and so assume the rest of you are operating flat foundry keep keep your eyes your n R as if you're on trend ok most of you and public notice you ok so auto slip will help you save money hopefully and for those of you that operate to be confirmed instances of private you might as well do good for the planet and sense of computing power and avoid getting the global warming worse so let's it tells that a liveable so for we will go through service consumers and service providers so first service consumers AutoStick can be deployed both on tram on private confident instances on public so those application teams they would get the application note we stopped so the total aberration for the app would be smaller so they would have a smaller invoice at the end of the month you would save cash for platform providers you'd be able to under the same load to same workload for your application teams but with a smaller number of DA cells the ego cells on da so you'd be able to shut down some GM and shut down the associated hypothesis so to save some run and some service provider might be able to use this to provide some free or cheap cheese because it's not a more affordable you need less computing power to run some applications you might ask what kind of workload would that be suitable to run against what asleep so we think immediately about non proud but how much is non prod is a very small proportion or it's at large it's hard to get two figures precise figures on that fortunately when so I tried but didn't find that much except her friend at Rakuten as a published the proportion in their case it's 44% non prod so can think especially in the early adoption phase of Catherine Risa should be significant so what what what's in non prod maybe the hello world and the tutorials that every new canvas comes in there push the other worlds and they forget about stopping those apps so this would obviously benefit format asleep i catherine's and spike one-shot apps that you developed and you forget about stopping would be a good candidate we're actually in a ranch specific case we need to have some api stop for a wide range of api's just to discover the api's and get some stub response so that was one motivation we add some other use case include saving dogs or tours and obviously non-trade version of the app we are deeply we'd benefit from that they don't need to be up all of the time we started on the amount when traffic scans I would that also fit some production workload it's not yet clear because there is still a penalty impact in Latin scene back when the app is is waking up depending on the technology yeah might take some seconds to 30 seconds to start so the production workload needs to be able to cope with that maybe some service brokers that could response within 90 seconds could be eligible but maybe it's community we'll find some example of production traffic that would be suitable okay so how do you use how to sleep to save run and to do a good for the planet let's see that so Auto sleep is exposed as a service broker so that is discoverable in marketplace and once an app is enrolled with the auto slip you would get stopped automatically on opening activity and then waking up automatically when there is back some traffic so this is the work in progress a little the status on that unless detail is on each of the points a video so for the exposition a service broker we need an app to be enrolled so an app enroll would be managed by you to the giotto sleep so to enroll on apps we we bind it to not to sleep service instance basically and there is different to normal mode the first is regular opt-in so user comes in creators have his instance in the space and then bind it's up to the service instance but you might think if the user stop about forget about starting the app would they think about binding to the auto sleep to say Ram so we also support Auto environment it's a super mode in which every application within the space will be automatically enrolled and this would be make it noticeable by user because the application will be bound automatically to this sort of sleep service instance they can still opt out so to opt out they can unbind from the service instance meaning I don't want to go to sleep anymore stop dealing with my app of the codenamed that up against a regular expression exclusion button to escape from auto enrolment in some case we want to prevent some team to escape from motor sleep for example in the case of three tiers or chip tears we want to make it harder for them to to consume more but we still want them to be able to work effectively so in this first enrollment mode they would be able to opt out but only temporarily only for a short amount of time and then the app would be reenroll automatically we have that got to check the neurons the enrollment status and the idle duration and then the app is stopped on their activity so the activity is measured by the logs that the application produce and the log that the Gerudo produced for the app so any traffic receiving receipt from the app would keep track active CF events would as well I contribute to the activity measured so if you update an app environment variable or you scale it that evidence that you have activity on your app so the app is not considered inactive and then the auto waking up sleeping up when incoming traffic comes in so while the app is starting up we currently return for free status code to the application we'll see after that we have done to improve that so let's go with the with the demo I don't really trust my ability to do a demo with jet lag so I recorded the demo you have to trust me that I try the same way okay so I have split my screen into four parts on the upper left I have some sample application I hope you able to read so active app hello world and production asleep and I'm sending some traffic in a cow loop every one second and on the lower right I will be deploying Auto sleep so this is a regular java application so it's it's pushed using the java build pack as prerequisite he requires a crowd control account with permission to act on the application in every space and my sequel database so it's to party not asleep CEO to wake up and the auto sleep broker so this is a push or to wake up so nothing special around that and then they push about the broker and then we will define the wild-card route that would help us restart the application captured we stop the application when there is traffic coming in so we create a wild-card route for any of the domain to which the unrolled up a map to and we map this welcome route to you to wake up so Auto wakeup up will receive any often traffic sent to those roots so when I stopped at receive some truck should receive some traffic do to wake up with receive the traffic instead so let's then expose this in the marketplace so I'm deploying on pivot our web service public cloud foundry from using a space code and now we have you to slip a plea on marketplace go so we've seen how to deploy Auto sleep so let's now use it so we'll create a service instance in this space so that's a second space the space where ma Appa are deployed and as arbitrary parameter 0 sleep create service instance and passing the idle duration how much time number of seconds so the PT 20 seconds after 20 seconds of inactivity the app would go to skip an exclusion button and the rural enrollment would so let's start with standard and that signal is secret for now I should have remembered that actually so ok it's refreshed on the upper left so I see my or to sleep service instance and soon I should see to application that would automatically be bound yep so active app and a robot and a bound and prediction asleep was not bound because it's covered by the exclusion regular expression okay so what about stopping sending some traffic oh maybe we'll have a look at the dead body for now so let's have a look at the dashboard so this place - - body wrong open that in a web browser so the dashboard will tell us which apps were unrolled it reminds us of the idle duration configured that the user might not know mind me an admin that created the service instance so ha they can check the evaluation they can check the extrusion pattern and they can see those two apps enrolled and for troubleshooting purposes they can check which last blocks were collected and the last 1200 events associated to their apps so basically checks that the activity measured for the app is consistent with what they expect so let's stop see loop which is keeping the uppercut so I'm not saying traffic anymore - in a world so I should see in a world within 20 seconds stuff I have to mention and in this case this is very simple app for the sake of this demo it's the static build pack so they are starting pretty quickly you'll see that afterwards so in a word is that start yet yeah stop now go and do does not reflect the same thing so we will do the same thing we backed it up I'm studying traffic for Acula we should boost out yes I can mention as well that we are still lacking authentication on the dashboard so that's part of our backlog to authenticate that part that we don't click sensitive information on it treating the logs could be an issue yet so active app is also stopped cool so let's let's try to have those up wake up so let's send some traffic back again to in a world so it's going to take some seconds 1 2 seconds because it's a static build back it's just an engine X process it's pretty quick yep so you to wake up application with the traffic and started the yellow world app let's do the same thing with the active app yeah let's start it again oh ok so maybe we can have a look at the opt-out let's try to opt out let's say this is getting in my way to do my work I don't want totally to manage any more active at so I'm opting out I'm unbinding and if I stopped sending some traffic for ok I don't if I stop sending some traffic for this app you will not start any more so yeah the dashboard is reflecting that the app is extruded from it's not enrolled anymore it's ignored and it doesn't stop so we've seen deployment for now as auto enrollment I think we'll have a look at the first enrollment now so what I'll do now is that I will unbind the rest of the apps and I will indeed lead to service instance and I will start with a fresh a new scenario okay so it's in binding at a world and deleting the service instance in sequence and now we looked at the first enrollment mode which is typically for free or cheap shoes so in this case I'm only changing the enrollment mode and I'm passing that to false and what I'm telling I'm also providing a secret this this secret is used by the auto slip typically in this use case and admin would create due to service instance and the team using the space wouldn't have access to the secret so that they are not able to switch back to store that environment so we've seen that those two apps active app was also bound and I'm simulating the case where a team wants to escape from at escape so they try to opt out so they do opt out for a short period of time but they automatically get reenroll after a short duration so body case they cannot accept long from auto sleep what we we need to leave them the ability to unbind because they might want legitimately to delete the app if they want to delete that up the CLI would unbind the service so if we were to refuse the unbind we would enable them to delete that up so that's why we find this solution but letting them to temporary and bind if they try to delete the service instance it turns that enforced in run run mode they cannot deal it and they have to switch back to standard to switch back to stone that you need to provide the secret so if a 9-mil doesn't want a team to go back to stem to standard mode it keep the secret secret so let's do that the admin is switching back to standard Aurora mode by providing the secret and now the team would be able to opt out and delete to service instance to delete this space for example if I'm lucky enough should have let me wrote my screen sorry about that okay cool so that's about it for the demo let's switch back to slides so what it also sleep what component is it made of let's return let's look at the architecture so it's split in two as we've seen in the deployment in two parts the auto script call which is exposing a service broker and the dad bought UI and the wakeup proxy by the way through slides ions CAD scattered oh well you see the schedule so you cannot access to them right now if you want and so when an admin create a service instance giotto sleep call is receiving the message and then using the curtain API it scanning the ABS into space binding them automatically then fetching their logs to check activity and after the idle duration you would start the app once an app is stopped it doesn't reserve traffic anymore so the traffic that are directed to this route would go to the wildcard route that we have configure and down to the Auto wakeup proxy and so due to wake up proxy receives this often traffic from the curvature and would start the app once the app is started it release the request that was received if there is other requests in between we currently return a for free a 503 in the future we plan to buffer all this traffic so that there is less impact for the sleeping applications and both are shelling states using mass equal DB so originally we we were thinking we were designing to use route services instead of whiteout proxy you might have seen that into the session abstract unfortunately we discover bit late that it's not feasible currently the road services don't receive traffic and mapped to an app which is stopped so this is there was description with with Shannon the PM of the routing project to explain this so if you do have some similar use case please voice it to Shannon so that this can help prioritization to price this report which is not yet in the roadmap and might help some other use cases they're quite a lot of advantage is to go with route services instead of white cab route maybe I can get a little more after if I get some remaining time so while carrot is feasible for now it's not I do that at least is working for now until we get this feature provides by diverting team so what I put in short future improvement we are thinking of we do need to add and you to wake apart so that it's able to scale to institution as you cluster we'd like to cue traffic during restart so that's it's very transparent to the client they will see you delay in response but they wouldn't see some extra five or three status especially when you're setting API they they don't like very much to get some extra service we'd like to work on high availability load balancing for the service broker itself I mentioned not application to dashboard and checking permission we are considering packaging at the bars release and a PCF time so that you can use be used anywhere we have some something's working considering PCF as well so they'll be useful for them what would be nice is to be able to have any application in any space and any org being automatically enrolled currently and add minutes to create a service instance in what each space so there would be a nice feature to have auto enrolment for any space and org within a cloud forest and also stuff might be to have more fine-grain policy for to sleep such as excluding the business hours and potentially need notifying users when the application is but to sleep with the an email notification so some learnings that we made during this in this project so we find the service broker create read update regular life cycle is very powerful but some time respective in terms of user expands we have to tweet a bit you've seen the to switch from solid to foster enrollment mode to switch with arbitrary priming to the update that kind of awkward user experience we are heavily relying on the CEO java client for this for this service so there is an ongoing or implementation using reactive it's great thanks for been hell teams for offices he's really solid he's being distracting for us because it's stretched over time in terms of calendar so it might have picked v1 if we had better visibility and roadmap initially but otherwise it's really a great effort and I know benjamin has been contributing quite a wine to it and yes I discovered I discovered bit late to constraints about reading service so you know it now in terms of suggestions I made some suggestions for enhancement to the service broker or API so one first suggestion is to be able to propagate the identity of the quorum so if we were able to know that it's an and mean that is requesting to delete a service instance then we would grant this request for our space manager we would refuse so both being able to propagate the request identity and as well its permission is all scopes and maybe to have this requester did we get this permission so that we don't need a cut for real count which has permission or hold space but the user could delegate their permission for zo to sleep to act on their behalf so there is proposal spec from this I can look another proposal is to try to find a way so that it's easier to get custom UI for services so one interesting idea that was suggesting suggesting by Ben la plage is the service broker actions basically to have the service broker in its catalan written some metadata that describes some additional verbs that it would like to expose to users so in this example it's small to see maybe there is a new actions that is declared by this broker set mode and the CLI would propose these actions to the users built in without deploying a custom plugin another way that we can provide custom UI for for services is by providing a custom plugin but this currently also requires user to install it so maybe another suggestion could be that the CLI by interpreting some metadata into the catalogue in this metadata you would have the the repository endpoint and the name of the plug-in and it would automatically from the user into installing this custom plugin from this service so that the user doesn't have to follow the doc to find the right plugin so in terms of user expands I'll be maybe more flexible because you can define some top comment in this context okay so let's wrap up so yes this is a work in progress this is open source it's on github so please test it tell us what you think we put some bugs we had already a number of our many suggestions and feedback if you have new ideas as well and ever best if you have ability to go to contribute enhancement it would be great we hope as well as it could provide some inspiration for automating some tasks that platform providers can have and while keeping providing some control for users to control this automation for exposing battle serviceworker so we did need to pad the application to sleep and by exploding it a service broker we provided the ability to opt out and to configure the idle duration so I think we have about maybe one minute if there is question comments that wrap okay thank you very much thank you for you [Applause] 