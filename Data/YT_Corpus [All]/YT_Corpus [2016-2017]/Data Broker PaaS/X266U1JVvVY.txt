 Here we'll show you how to deploy and configure OpenShift on AWS. We ensure proper integration into several cloud providers. In 4 easy steps, we can be up and running. Here is our common architecture that we apply to each provider. We leverage capabilities of each provider where possible. For example, route53 for DNS, S3 for storage, ELB for handling traffic. Also, note the multiple masters, infrastructure nodes and application nodes. Here are the scripts used to provision the infrastructure on AWS. Provision the infrastructure and let it run to completion. This method is using the AWS CLI to do the provisioning. One of the features used via the AWS CLI is querying the AWS API for updates on resource completion. When the provisioning completes, a production quality infrastructure will have been deployed. Now we will take a look at the resources that were just created. You can see that we have nodes deployed, storage assigned, security groups. The load balancers were deployed. Here is the route53 console for DNS entries. Now have a look at the VPCs Now we move on to deploy OpenShift on the provisioned infrastructure. Part of this is a dynamic inventory of the resources on AWS. OpenShift then configures the instances in AWS accordingly. Finally, the openshift-ansible installer reports back success! 3 masters, 2 infra and 2 application nodes have been configured. OpenShift is up and running. No problems! Let's create a new project. For this example, let's look at Jenkins. Last thing we need to check is that Jenkins is up and running. Traffic? Scale the app. Last but not least, a visual representation of the resources. 