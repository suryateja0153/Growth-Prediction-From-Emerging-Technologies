 right should make a start everyone morning I think people are still filtering embargo get cracking is quite a bit of information to cover so and this morning we're gonna be looking at the seven deadly sins of microservices bit of an intro I hope you many of you know what the seven deadly sins are they come from some Christian ethics back in the day kind of human vices things we must avoid to maintain our you know sainthood and if you're not familiar with the Christianity support or don't like that also spongebob squarepants funnily enough relates to the seven deadly sins I learned this such a couple years ago dear boxer Marcus Issa was presenting and he had to tone down his presentation due to the policy of devoxx you know but were very kind of good about what we yeah we sort of present on the screen and I he actually converted his deadly sins presentation into a spongebob themed presentation so if you read about it it actually is a real thing so here's what we're gonna talk about today is it a bit of a list I say seven things lust gluttony greed sloth wrath Envy pride all related to micro service projects I've worked on over the last and five or so years I guess now and hopefully useless ever you saw me yesterday but it's a brief intro again I work for a company called open credo and I also work for container solutions as well and open credo were consultancy so I do lots of agile change management and my technical specialties DevOps that kind of stuff and I am a developer Java developer at the Microsoft sin cloud let's say for the last yeah five or so years and thinner solutions we do R&D around docker may sauce kubernetes all that new hotness and which I'm going to advise me to be careful of in a minute but if you do want to get involved give me a shout it's really cool tech actually it's really good fun I also write for various places I'll put a link up at the end if you want to if you're interested in what I'm saying today I want to know more I write for info QD zone box that kind of thing and you can hopefully check out some more stuff then so let's dive in first off and what is a micro service and I like these two definitions Asian Cockroft of Netflix Fame ebay Sun as well says and Michael service is a loosely coupled service oriented architecture with bounded contexts now battery context comes from DDD we're talking a little bit more about that later on but I really like that in terms of it's kind of like the new solar or so a dumb right a bit of a cliche but I really quite like that and applications that fit into your head by James Lewis there James kind of arguably kicked this stuff off around Micra services years ago now when he I did them Java the UNIX way talk which is well worth watching and the joke is that if you're gonna you know sort of fit the actual code in your head it's kind of like microservice or its small enough to be a micro service and they also the joke is it like James has got quite a large head and if he puts his head on the monitor and he can get the code no size of his head it's also micro service and worthy as well so a bit of a little joke there's quite quite a good one and so first off that our first deadly sin is lust and it's using the latest and greatest tech I think we're all guilty to some degree at this army as techies we love you know interesting stuff we have to play around my stuff and so I'm going to do this in two parts I'm gonna say micro services relatively new ish kind of tech and then we're going to look at the actual tech supporting micro services as well so micro services solve all our problems right like just like everything else for ESB in the past you know community there's always the new hotness it's gonna be a silver bullet which in reality anyone who's been in industry for more than a few years realizes that is not the case yeah Micra says in particular aren't necessarily good for speed if your startup you haven't got your business model yet and to be honest a monolith is is a perfectly good way to start and actually the hot off the press here this is this is Russ miles I'm talking did a very good talk and last year at skills matter about and I think yet three projects it was all anecdotal comparison but he compared three very similar program projects wondering microservices one doing a monolith and one doing a monolith with the idea of micro services in the future and he compared them and he said you know for actually if you finding a business model the monolith was faster it was just quite interesting and I don't know if any of you seen that Martin Fowler and Stefan tilaka have been having quite a interesting chat of the last that week or two about and you know should we do monolith first that kind of thing so it's very interesting if you're if you're you know finding out your business model nothing wrong with using something like groovy or rails or Grails or anything like that chuck it up on Heroku get it out there get the business model verified and then look about making the architecture really sound and on that note of architecture it's not always the amicus aren't always relevant here so I really like signed Brian's quote hopefully said a few of you saw sign Browns talk yesterday the reason I invited him to the conference was because he's such an awesome and speaker and I've learnt match from Simon and he says if you can't build a well-structured monolith what makes you think micro-services Arthur answer lasts like a really good question in it yeah you know and when I first said that I was like oh yeah there's probably some middle ground that you know a lot of us could benefit from we've got our monolith you know we've got this sort of so a vision if you like you know that we may never attain so why not do something in the middle something modular something well architected will look a bit more about that later on but also on the opposite end of the spectrum if perhaps you haven't got the necessary design or architecture skills in-house opposite end of the spectrum is when you're so good at architecture you don't need micro services now Etsy are very famous for doing a monolithic stack as our stack overflow and apologies for the graphics are a bit skewed here Sun fortunately with a scaling issue this morning but and let's see yep PHP based monolith they serve like crazy amounts of traffic and they pushed a production in so many times a day they've really invested in their DevOps and you know skills and the famous thing about Stack Overflow is all they set Q con last week econ New York and and they've got a basic they call it box Aero box Aero cylinder you think about that as microservices it be box Aero boxes loads of boxes that kind of thing and they scale through power and force yeah they are really beasty service that's 2h a proxy proxy service at the front nine web servers for my secrets um it's a dotnet stack actually and they're crazy I think they've got like half a terabyte of RAM in in there too and the hot hot standby is hearing that kind of thing and so they do scale via performance but when I was hearing this talk it really made me think like wow yeah if you've got really good architecture skills you probably don't need you know you to move to micro services you you're you can work within the code base it's so well architected so well you know component size and it really make me think the sort of the opposite ends of the architectural spectrum quite interesting and operational maturity is vital so if you're looking to move to micro services there's a whole bunch of things that go with it the dev stuff that we're gonna look at there's the business stuff and there's clearly the operational stuff we'll look at that bit more but Martin Fowler did a great article you know are you you must be this tall to use micro services which I thought was great so Marga says are very useful but check your use case they are not a panacea I know it's an obvious statement but I like to say it because I you know I get caught up in the hype sometimes and they are not a panacea though and the valuation is a key skill both in terms of using micro services but also in terms of certain tech within micro services docker makes kubernetes all fantastic but they you know they've got a good use case like you need to have a good use case to use them I should say so I'm going to share with you and a really nice quote I like a bit about evaluation it says I will postpone using the shiny new framework until my peers have validated the proposed benefits with rigorous scientific experiments and this was a course set by no programmer ever yeah we just we attract we're Magpies or black Python we're attracted by the shiny we can't help myself sometimes but really do you think about this stuff yes you know we basically do software alchemy yeah we're not software engineers really yet you look at other engineering discipline they're much more rigorous than we are in their application of science and so I'm trying as a professional to move towards this I'm not perfect by any means but I'd like to spread the gospel in terms of do have a think about when you're adapt adopting new technologies great article by actually someone from Etsy Dan McKinley choose boring technology optimized across the organization but if you're a big enterprise you're going to be having lots of different Mir pockets of technology and when you're moving to micro services you want to standardize there's nothing worse than having lots of disparate stacks and then trying to bring them back together it's the same problem as you you know you're kind of solving already that makes sense your ESB over here you know different broker over here activemq here rabbitmq here that kind of thing will look a bit more about that in a second but choose boring tech and I think in the Java world Java and even spring boots are kind of boring yeah spring boot light is out I love spring break I mustn't be careful with a spring guys that again but I love spring boot but it's kind of like a standard tech you know it's fundamentally the spring stack under the hood wrapped in a really nice kind of you know layer and I've done it we've got like a current plan and working with Java right and spring boot micro-services in production and it's been a fantastic experience Java is awesome with its lambdas that kind of thing and it streams and spring boot is just to notice it's a little bit heavy weight and deployment in the runtime but in the design time it gives you some great primitives to work with so you can look at cool things like you know wrap pack and all these other things that rat packs really cool they're getting services up we could you know very quick but I'm all for you know if developers I walk into I walk into an organization and developers are comfortable with Java comfortable with spring this for me isn't the right choice you know it's friends on use case obviously Tomcat jetty I think a perfectly fine for deploying micro-services Tomcat some organizations really you know they like Tomcat they're happy with Tomcat operationally jetty is quite nice and in memory server that's putting my preference but you know they're they're kind of boring tech but they're perfectly adequate for deploying micro services if you are gonna introduce the new tech I'm a massive fan of mat rables comparison framework it removes a little bit of the subjectivity so for sample this is the original map map map real blog post keeps comparing and web frameworks like this is back in the day struts to spring wicket JSF and you see the criteria down there on the on the y-axis and you can share this amongst your team yeah so you can say if we're gonna bring in like we're looking for a Microsoft's framework we'd like you know spring boo Rat Pack Grails that kind of thing menus might say I need develop productivity I need a good documentation I need operational skills and then you can score it on any kind of scale you want amongst your team and then bring these things together and you can kind of weigh up like as a team you know kind of decision why you want to choose a certain thing and the real benefit of this is you get documentation as to why you've chosen something all too often as a consultant I rock up to a client and I say oh I see you using you know Ruby on Rails there I see you using play framework why's that and more often than not it's like don't know sometimes I get all the vendor sold it to us which is marginally better than not knowing but really you should know if you're choosing something in technology you you should have a record of why you chose it things might change in the future and we can go back and reevaluate this kind of thing the second deadly sin I want to talk about is gluttony excessive communication protocols and now I go into lot of organizations and I can't name names actually every careful but I often see like a crazy amount of things gluing other things together and if you do micro services I say standardize across the organization again choose if you can one synchronous protocol start with and one async protocol that gives you a nice flexibility got sort of peer-to-peer synchronous communication async stuff for batch operations or stuff that's not you know necessary in real time I like JSON over HTTP as a star it's nice and easy it's well supported I like RabbitMQ to your expert for that but there's plenty of options yeah I say don't gold plate no if you are looking for things like increased speed a binary protocol like protobufs and thrift and Google's need new gr PC is really cool it's not human readable but that's often not a massive fact that to be honest like we I think we've ovince oversold the human readability of Jason next now because ultimately it's machines the machines communicating but thrift and protobufs also give you nice they're an IDL or an interface definition language they give you sort of version schema of the protocol you're communicating with which is really quite nice as well 0 mq MQTT a lightweight asynchronous messaging protocols they're super cool super fast but again they're kind of gold plating if you're just doing you know poking things do this do that no your options don't go play I did actually an article back six months ago and I think it was around Java one time and about doing micro services in the enterprise if you're using sort of heavyweight es B's heavyweight messaging protocols and I'm not going to talk too much about it today but check out this this guide Marcus actually I've mentioned le wrong also they did a art win this one as well talking about the integration pathway over the years of how like we've how we've arrived at sort of the notion of ESB versus like web messaging technologies that kind of thing so a bit more information if you do want to know about sort of how to and bring in a managed communication protocols within an enterprise stacked a bit more heavy stack that was a short one that one the third thing is greed yeah all our service are belong to us and this essentially is looking at the operational or so looking at the organizational impact of micro services now it is in my opinion massively underestimated yeah if you're gonna leverage micro services you need to you know be in terms of development good operationally we'll look at in a minute you to be good there but you need to be good at an organizational level and I'm sure some of you guessing what's coming it is the obligatory mention of go mice law every micro service their talk has to reckon with law and yes it's a cliche but for a good reason yeah Conway says organisations which design systems are constrained to produce designs which are copies of the communication structure of the organization now in a nutshell for us I think what I see most as well it's silos yeah we dev to QA ops there's hand off this delays and fundamentally its lack of cohesion lack of shared understanding and lack of joint accountability ya know it's very easy to joke in it saying you know dev QA and ops for all different people different goals that kind of thing but fundamentally we're all working the same goal with a company we're gonna deploy software we're gonna make money we're gonna have some fun as well yeah we need to increase the cohesion between all these silos and the problem as well with these silos further compounded their silos within the silos took me in big organizations yeah and you get front-end people middleware database they don't talk to each other it's kind of crazy and this is compounded again and again yeah and you kind of wonder how software gets built sometimes thing with this kind of thing and then you look at some of the projects that do get built and I'm ragging totally on healthcare.gov I'm sure many of you heard the story about how this we know when live fell over constantly we're just as bad in the UK there's an NHS project I know of that and it's publicly talked about it was just bad not quite as high profile as healthcare.gov over in the states but when it this is how like US citizens have to buy their own health care for example and you know it was like a lot of sort of political and politics around it a lot of legal framework around it but it just it was just such a big project so many people so much money involved and they still couldn't deliver on time it was a great talk actually by nori hi killing I think just called and fantastic talk at KU con New York last week which I've wrote up for invoke you so if you go on to info Q and look at the actual type of the articles called too big to fail and she talks about her time as a site reliability engineer for Google and for healthcare.gov she went in and triage some of the stuff and it was such a toxic environment in there that for example one person crashed the login system crashed at the end of database you know red alert going off craziness going off and apparently this person was sat next to the war room that he knows all these alarms going off and that this person was running like a really crazy query on the might on the database and was crashing the whole site knew about it but didn't speak up because he feared he would lose his job and this is madness we search a toxic environment I'm not doing this story full justice but have a look at that that's my article and if you can't have a look at Nora's talk Norway is just a fantastic talk about how things and go wrong in big organizations and how we should you know try to to fix these things so cross-functional teams seem to be the way forward you know you got to work on culture in general Spotify are amazing at this much of any of you seen the Spotify video about how they sort of organized their teams and cross-functional just means and you're not like a team of middleware people you're not a team of front-end people you're cross-functional in that you know within your team you might have a front-end specialist back-end specialist operations QA PM that kind of thing Spotify you know they've been doing this for a long time it's an advanced pattern how they how they do things Amazon famously do their to Pizza teams I'm sure many of you have heard to pizzas teams that come up be fed by the team size must me any bigger than could be fed by two pizzas is that is the joke and but it's really good the reason they did it is to cut the communication and the channels when you've got teams a hundreds big you know you as an individual go like 99 other people to talk to to keep the teams around ten twelve you know to Peter sighs and it's much easier to much faster to communicate things and guilt I realize guilt there are flash webs flash sales luxury band website in the States and checking out their do some really cool stuff they're just getting on the micro service I'm sort of sharing bandwagon now they've been using Microsoft's this for like quite a few years but they and the reason they switch to Microsoft rity cheek alignment they gave teams sort of declarative goals we want to increase conversion we want to increase stickiness and they basically steer teams do what you want and ultimately they converge to scale of ace micro services around each strategic alignment it's a fascinating story they've shared so do check them out but fundamentally is much as we kind of you know loud at kind of Conway's law Conway was telling the truth yeah that's why you often with cliches there is some truth behind it we have to deal with it yeah and it's maybe not necessary your job but I think you know if you're developer if you're an architect but I think it kind of is we're all leaders to some degree within the organization and we need to push change up and down in the organization the connected company talks about a lot of the Amazon stuff for two bits of teams how to create organizations around these kind of you know more and the connected companies versus the divided company divided companies silos lots of handoffs which I've already shown the connector company is this kind of new micro service type model from a business perspective the modern firm talks about that as well it's more business oriented but how you should kind of structure your organization your team's to leverage kind of a micro service technology and then don't kid yourself you're gonna be doing change management if you're a team lead that kind of thing when architects you are gonna be doing change management in terms of bringing micro services in they are a very disruptive technology up and down hierarchy and across the text back as well QA for example is really quick often change with with micro services and we'll look at that a bit more in a minute great books great recommendations I hope there that I've certainly got a lot of value right off the fourth pattern is sloth creating a distributed monolith now if you can't deploy your micro services independently there is an argument that says you're not doing micro services you're doing a distributed monolith I think a rune did a great tool guess they around I said like em you know you're like distributed bags of dust if you've got like among that kind of thing and it's very true and I've done this myself in a couple of projects am one that was because we didn't have our bounded contexts right we didn't kind of model our organization correctly and things leaked so we had to deploy two services at the same time to get like this are we updating the model like both parts had to go into production at the same time because they contained the model we'd kind of art we hadn't got our bound it we hadn't defined and the business context you know that we were actually deploying correctly I've also had that along date of fault lines we were using solar elasticsearch we've seen that kind of thing and we wrapped solar with I'm a rapper that did some sort of business logic for us and there were several waves they just got like a satellites around it and we had to deploy all these things at one go because we didn't get our data fault lines right when I say fault lines I mean it's like you know think of like tectonic plates where things are shifting where things are changing where things are being transformed that is often a good boundary for a micro service we messed it up we had to deploy these five things at one go and then we learned the lesson the hard way then we decoupled things we got our fault lines a bit more correct we transformed things in a more appropriate level in the stack that kind of thing I'm not gonna talk about in this us in but there's also check you've separated deploy and release that's the key thing even if you're using a monolith this is a really good thing and feature flagging that kind of thing yeah you turn things on and off really good let's see are freaking awesome at this and they've done a very simple thing with PHP and if I think of open sourced it as well and which is really good but again microservices it's even more of a challenge because you're often deploying lots of things into production with you know things turned off and then you have to turn them on and that might turn on functionality in several different services how do you test that that kind of thing but you do need to separate deploy and release otherwise you have to do like I did with my you know my story you have like our feature flag was essentially essentially us deploying stuff and crossing our fingers which is not a good strategy I learned the hard way there the client wasn't happy with fair enough yeah now it's interesting around quitting sort of the contractor and micro services there's a couple of different approaches the first is schema first design and and Michael from Gil to the great talk actually kook on New York last week and he's gonna create a tool called API doc it's a little bit like swagger but slightly more automatable and in terms of generation and you can generate clients from it as well and it's quite opinionated and Michael's not being shy about that like the it's it is very opinionated even more so perhaps than swagger for documenting things but also it allows you to do some kind of upfront design of my microservice has this schema and it's at this version and the tool allows you to sort of evolve the interface you know you eat builds even Java clients with the the uses semantic versioning Machel 15 of a semantic versioning so you have major minor patch like 1.1.1 that kind of thing and and it gives like a sort of like a get like change log in the API as its changed and when you do like a major and change now you bump the major version so it's two point one point one and it is a little bit up front design so people are a little bit conscious of that is that a good thing but and it's worked really well in guilt and guilt I've got over like 200 micro services in production running at high load so I respect that you know it works for them Martin Fowler and cruise talked a lot about consumer driven contracts and I think this is a fantastic idea it's moving basically the schema from the supplier from the service you know the service saying I offer you this it's moving it to the consumer so the consumer says I need this and then you can run tests against you have all your consumers this one supplier worse than the Aspire at one might say sorry consumer one might say I need this consumer to says I need this consumer three says I need this provided your supplier meets all those three contracts tests pass yeah and that we've often used it in organizations where you know it's not a problem if the contract has to change but it's it's a queue for a conversation yeah I you know as a consumer I need something a bit different all that's broken the tests therefore I'll have a chat with the pet the people that run and the supplier you know it might be in my team for example they only snag with you know if it's done right it's kind of consumer driven contracts is kind of behavior driven development for micro services I love behavior driven development yet John smart fantastic talk yesterday on that stuff and but the only thing is the technology is not quite there yet there's the pact framework which is very interesting and thought works or working on something called pact o which is kind of like a slightly different version of it and I heard from Dave sayest actually really interesting that there's something coming into spring boot perhaps from I think it was for finance that the team was called and so that I'm really conformed to that actually as well I think it's an amazing idea and it totally makes sense when you start working micro services at scale the implementation is not quite there yet I've really struggled in my own and gig actually to get this kind of thing working and we've got it working but where it's a bit fragile at times things like packed in even if you change headers like dates and stuff it breaks which you kind of you don't want that really you want to say this you know this this shouldn't break if the time old disk is obviously we're testing a different times that kind of thing but it's in really nice idea so it's yeah upfront design or sort of the supplier definition or the consumer definition check check it out I'm going to use this nice sort of skewing a bit of architecture as well as much as you must get the service boundaries correctly the contracts correct architecture is vital ya know hopefully if you saw Simon round yesterday or some stuff architecture for me it's not Enterprise ivory tower architecture it's about technical leadership it's about communication it's about the shared vision I mentioned in the keynote yesterday and and promoting a shared understanding within my team than the team this is really key yeah and fantastic book by Simon lean pub Burke he's got a great website coding the arc XCOM please do check it out and and work because we do a lot of domain driven design inspired stuff in micro services I always recommend this when I go into a into a company as well for me it's all about it's all just enough upfront design now I think many of us have been stung by big upfront design in the past and we're almost skewing to the other way now as and you know doing everything very agile but agile is not an excuse to be sloppy yeah and this is the point that Simon makes and I really already buy into it we need to do just enough front design I can't give you a rule for that it's something I think we develop and I'm I'm still learning for sure it's something we develop over time back how much to do upfront but that's all great talk actually by serious day and she was saying like and we're skewing and throw away from that kind of stuff now we know that the committee driven you know like we must design our architects like this we must gold plate for the future and I really like what she was saying in terms of you know that is bad but we need to do just enough upfront design as well so it's really hard balance really hard I just drove her with it v am a sinner I want talk about is wrath blowing up when bad things happen yeah and micro-services are inherently well maybe not inherently but the way they're deployed working on a distributed computing environment yeah so this is a big challenge for a lot of us and I'm lucky to study here you need to be computing so I know some of the basics and I've got some very amazing colleagues that help me with this stuff but I don't think organizations realize this quite enough when I go in to see them they're like Damien microservices how different can it be but a lot of stuff now it's going to be going over the wire when it used to be an in process call that kind of thing yeah and then you're liable to things like the eight fallacies of distributed computing if you guys haven't read about eight fallacies of history and confusing please do it's really interesting things like you know people think the bandwidth is unlimited the latency is zero and even if you were in like an amazingly ran datacenter that is just not the case yeah and people like Google Amazon I totally wear that stuff and they're they're quite open about that kind of thing as well but my my pitch for and this kind of stuff is a few things are gonna cover but it's it's bringing Michael my guard for your dev team and bring in some monkeys for the operations yeah so the the how many of you read release it I always like to ask this ah it's getting better great I'd like more to be honest this is amazing book but it's ten years old now it's kind of round when the clouds that were just coming out but it talks about fundamental fault tolerant patterns I'm sure many of you don't use design patterns every day you know use NBC single turn strategy that kind of thing but fall torrents patterns are things like timers retries bulkheads and circuit breakers you break a his mistress very popular now please Netflix this district sorry but you don't need necessary to use a particular tool it's the concepts that are really important when you're working in a distributed environment you need to code a lot more defenders defensively and this is a great book for priming you so please like if you know go and read this stuff it is gold and once you know there's a development team we've we've got this stuff operationally you need to be testing these things it's all very well to say you know yeah we're doing all this great fault tolerant stuff but you need to test it and the simian army you know gets a lot of publicity but it really is super cool yeah I've got it working on a couple of gigs and there's like conformity monkey latency monkey this kind of thing and it's not hard to get work and you need to be quite operational proficient but there's plenty people out there that sort of really like this stuff and and it's a great way to test that what we think we're doing we are actually doing those guinness it's not we're no longer testing and prodding one thing we're testing a micro service you know a distribute environment ya know Martin Fowler talks about you know the the prerequisites you must be this tall to use micro services and basically he's saying continuous delivery is a micro service prerequisite he's three things where you need rapid provisioning basic monitoring and rapid application deployment fundamentally agile and DevOps yeah now we're looking at this more from an operational concern because really at my pictures you need to like you know look at it from an organizational point of view you need to look at it even the business point of view arguably you need some kind of lean stuff in there as well because you know if your business can't take advantage of all this opportunity to deploy lots of new stuff fast what's the point in doing it you know technically it's kind of cool and we're happy as developers and operators but you know yeah it's it's micro services offers a fantastic opportunity but you must take advantage of it in all levels of the organisation but anyway I digress a little bit they're coming back with the operational concerns the technical ones yeah you do need to have a look at these things things like you know puppet chef ansible reliving ansible actually an terraform are really cool I know I said you know be careful of the new hotness and stuff and new frameworks popping up all time but and stuff I'm working on with that may sauce docker kubernetes I'm loving ansible I'm loving terraform for defining infrastructure and once I've defined it then I can trash stuff bring it up really quickly it's super cool so if you haven't been familiar with the engineers that everywhere you don't do it within your organization this is a fantastic book Jes humble Dave Farley you know it's a long-standing book but the concepts in it are amazing and again it's much like the release it but go and read it and then map it on to where you are in your organization maybe ansible is not the right fit for you maybe she'll scripts are fine maybe puppets find that kind of thing but please do think you know these three things are really important from an operational technical point of view okay and the next thing operations yeah the social side of operator not great is a failure happens all the time in distribute environment in a micro service environment Verner Vogel's CTO of Amazon is very famous it's you know failure happens all the time in the cloud you got to get used to it and you know I mentioned nori Norris presentation earlier on she was talking about in Google they regularly run game day or disaster in recovery testing and dirt sessions where they they actually start pulling plugs but it's like a real-life chaos monkey type thing and they and they test what their teams do who gets paged who gets called who gets reacted you know who reacts and what happens if it goes through a customer facing thing they you know they they pull the plug on the actual test for example they're very consciousness and it's not affect their users but they figured that you need you have to get used to how failure happens and Noorie talked about this fantastic story about how the Atlanta metro data center and broke in Google and apparently disappeared off their network map and it was all due to the fact of a bug in a new route to their be using and they were trying to query like the CPU and stats of the router and it would then the old route it was like index 0 the new route was indexed at one and when they did SMTP to query the status of the CPU on on a sort of zero indexed array it that the actual route fell down and it killed the whole connection to the data center and you imagining Google's alarms going off everyone's getting crazy and they handled it pretty well but they learnt that that you know we need to get even better at handling this stuff like we never thought about whole metro region disappearing and that's my experience all the stuff that goes wrong I've typically not thought about that much so you need to do real stuff yeah it's not easy and this is more of an advanced pattern but just bear it in mind and you know we need to get as developers and operators and architects we need to get this kind of thing in you know fairly happens all the time we need to actually test when it happens and what we do about it do we run around like headless chickens or do we handle it yeah and you know my experience that when it first happens we're more like headless chickens then we get better questioning from Netflix then ethics are actually moving away from the chaos monkey stuff a little bit now which I think it's interesting because like they got burned apparently by latency monkey so they were running latency monkey year legacy monkey injects latent see into services but it was hard to contain some times where the latency was being injected and a famously it took out a couple of like natural you know use the facing some services if it wasn't meant to and and users room packed it and not in a bad way because all the fault-tolerant stuff and Netflix are famous for cutting and you know stuff got sort of it fell back into other services but developer stem because it caused end-users pain got more conscious about using some of the cows monkey stuff so you did some other way to do testing to keep you they've got a raise for anti fragile approach to software and to their actual and development as well yeah in terms of their ante like so they've created like famously anti fragile development process and anti budget risk and the opposite of fragile yes kind of like you know that we learn from failure basically and so they're using this tool they have an open source that yet but they've started talking about it called failure injection testing and it allows them to they've got a proxy thing at the front end called Zul like h a proxy or whatever and it allows them to identify traffic coming into there and sort of you know do various failure scenarios to it so they're in there koukin new york that the guy actually the Colton was Ted was demonstrating he actually took his Netflix account and injected certain failures to it live in the presentation and he showed he was actually looking at his Netflix site and he injected a failure that only showed the default and recommendations and we could see in real time is that nice GUI he was looking as a live website was looking at my school we he's our injector failure here we can see what's happening in the monitoring and house like that is super cool yeah so they've not open sourced it yet but the concepts are really nice and I were the Netflix are a slightly unicorn maybe but they're nice to look at for inspiration yeah if they're saying some of the cares monkey stuff needs to be changed a little bit I'm inclined to go well that's that's interesting I'll pay attention to that as well now in terms the operational concerns I mentioned the silos anyone on the dev to QA to ops that kind of thing and I like it's a little analogy other to use and logically any of you heard it before but as developers we often get used to throwing stuff over the wall yeah but we're not accountable for running stuff in production necessarily so we don't feel the pain and that can lead us the right you know crappy code sometimes that if we run it you know we really wouldn't write crappy code because we're responsible we're getting paged when stuff goes wrong the analogy is kind of like car air Axia now no one could deny the airbags are a fantastic invention they save you hundreds thousands millions of lives but there's an argument that cause people to drive more reckless yeah because you know if you smash into something nice balloon in your face there's probably a minimal risk of death you know meant that's what you're kind of thinking there is an argument that says we should replace airbags with a spike yeah now you imagine you go into the motorway 80 miles an hour and it's a big spike and your steering wheel you're going to think about what you know think twice on you for tailgating if you have the death on that brake yeah not so good and this is the kind of notion of Devlin call yeah the occasional spike to the head is a good thing as a developer you learn not to write crappy code so much well I started getting paged and previous Kiko worked on so I get a page in the morning cuz I've been a bit sloppy with my fault tolerant stuff I'm not ah you know gotta fix it or whatever next thing I'm making sure I'm writing good code that avoids this kind of thing yeah I don't like this pain and it's not fair to push this onto operators yeah like developers we should take responsibility first this is kind of you know part of what DevOps is all about yeah and again Verner Vogel's Amazon CTO famously says you write it you run it and that's what they do in Amazon no allegedly encourages accountability as a developer as a development team I should say a cross-functional team it's shared responsibility and it also promotes communication because when stuff starts going wrong operators can only do so much then they might need to engage with QA the minds engage with developers that kind of thing but it's just this notion of you know accountability shared responsibility and communication it's controversial organizations are going to don't always like it but I I see the value it's not right for everyone as with everything here you know some caveats but I really like the ideas behind it now six and A six sin is envy the shared single domain fallacy the one domain to rule them all yeah that's why I've got the ring up there and back in the day when we were doing monoliths this was actually best practice yeah I've no blackhat much names again but clients we worked on spent years perfecting a single domain yeah and it was really hard because I really careful not to give away - about the if I mentioned a few secrets over it's really hard when you've got like quite complex business to model one domain to meet all the requirements of that business is really hard yeah so we struggled for ages and the thing is with micro-services there's this notion of bounded contexts so actually one don't you know one single domain is kind of an anti-pattern now and that we spent so long like as you know as a as a server I swear there's an industry perfecting this one model it's really hard to break away from but one model in a micro service environment it breaks encapsulation and introduces coupling the antipattern I mentioned there on where we were had to deploy two services at one time because we had the model spread across it that was an anti pan yeah that was really one service in disguise that make sense so know your domain driven design no I'm not going to talk too much about this and today because there's plenty of other great presentations and people that smarter than I am on this stuff I've talked about it Eric Evans doesn't fantastic stuff the quick google there but i really have seen the advantage of knowing about entities value objects aggregates what you should expose externally like aggregates you expose the idea externally but not the ID of other things further down so that users are famous when you Mon and you might want expose the user ID but not the address idea of your user that kind of thing and but do you think about this but it causes quite a lot of contention within an organization like they introduce these things classic question I get is how do i generate reports when you've got one monolithic system typically kicks out to one monolithic database and regardless of whether you're like sort of doing development on the main app and querying the database or whether you're doing data analytics it's one database yes so you can do your joins and what kind of stuff if you start splitting up stuff into my tree services the good practice at the moment is to you know put a single database with a single micro service and you're suddenly splitting up all your data and this is fantastic benefits in terms of you know change management reasoning about the data sort of locality but the data analytics people often quite rightly get a bit nervous I'm gonna have to like do a join over HTTP not a good thing yeah but there is patterns to help so the aggregated reporting pattern great so a book Barretts at this old school school commando who's got a solar book but it's got some amazing stuff it's fundamentally micro services are built on so er concepts so don't don't shun so I really recommend actually people were like to read about called solar took if you're going to start slating microservices online or so online whatever like do read about the history because a lot of stuff we've kind of done before and you know we've learned some lessons it's a great book aggregator reporting pattern it's kind of pulled by service so the pattern there is you have all your bounded context or individual databases and you have like one other service that reaches in every so often and pulls in the data it needs to build that one database for the query in people like cliched thing but they people got a day to lake so things like HDFS like you're off and dump sort of and they turn to HDFS process it with her dupe that kind of thing in into AM into a database as the lambda architecture is worth a look at she as well that sort of speed versus batch in terms of processing data also interesting is data pumps there's Sam Newman fantastic book about Micra so you haven't read it please do like it's an amazing book actually as a kind of a single books they if you want to jumpstart your micro Service and learnings Sam 2013 sounds great book but he talks about data pumps and how he pushes events yeah so people are event sourcing is kind of kind of HIPAA kind of popular CQRS as well and fairly see QRS is command query responsibilities segregation very popular pattern and it's kind of nice in that if you all say broadcasting events you can have other things than intended target listening for them so if there's an event going through saying you know update user one five nine change names or whatever like this the user service can be listening for that but also your data service can be listening for that so that's that's quite nice pattern as well there's the push all the pull model and anything on your use case you know one of the others probably quite interesting these are the answers to the question I often get hydrogen reports I'm getting a bit nervous here my database is being shot it's being split up because again it's all about shared responsibility yeah us as developers we're like a hack up the database this is amazing you got my liquor base going on my fly away I'm cool with the schema changes but the data specialist maybe not so check with them yeah it's really key it's a shared thing in the Ovation you've got the same goals make sure you already know you're not disadvantaging someone buy something that's cool for you so seven and pride yes testing in the world of transients no it's testing is really hard and microservices I am NOT going to lie micro services they are transient at runtime things come and go we've mentioned that already fault tolerance but they're also transient in that they kind of some people pitch that Fred I think of all of the pitches that you know microservices could be disposable so you could write one spend a couple of weeks use it and throw it away that kind of thing so how do you test that kind of stuff it's quite a challenge yeah the people are surprisingly quiet about this excuse me people doing that there's so much microcell chatter going on at the moment but testing is like a really key point and some people are obviously doing it and doing it well like your Netflix is like your Amazon is that kind of thing but there is surprisingly little amount of sort of knowledge out there I'm chatting to people actually at Yelp and I'm chatting to people at a couple of places now as well hopefully they're good or halo-halo wouldn't emit cool stuff and hopefully I'm gonna get some articles for info queue that share how they've set up their testing and microservices I think it's Yelp and particularly some really cool stuff with with docker like docker izing the data and for testing and stuff and I'd love that to be shared within the community because I think we need to start talking about this a bit more and they only look really solid article around it is and the testing strategies by Toby Clemson and he put it on Martin Fowler's blog and it's a great sort of primer it talks about like summer stuff I've talked about consumer base contracts testing it different sort of bits within like a service and then how do you test services communicating together do you mock things do you stub things and it sort of tests you know the end-to-end functionality it's a great primer for a lot of these things but some of it is deliberately a bit sort of choose the right word but sort of it open-ended by you know the he was like I can't give you you know I've got the kind of the exact rules to follow because this is kind of you know depends on your use case and so it's a great jumping-off point but don't expect all your answers there you probably gonna need to experiment in your organisation as well it is difficult so testing mic reservist is so invest in your build pipeline testing no I've done this when I was working on one let's as well and saw the benefits so I kind of brought it onto my lower fan stuff I work on in mic reservist and domain I really like serenity bdd that was John's John smarter stuff he was talking a yes that used to be called Thucydides but no one could pronounce Lucy disease so it's changed its to serenity it's really nice it's like just like a selenium another kind of testing their frameworks really nice wrapper around it generates nice reports I use it a lot actually for and project managers that kind I think it's really cool sort of framework for that's good for us as developers vivi outside in development at a service level where and at a global application level but it gives you feedback to project managers and the business people as all which is like awesome and while mocking saboteur really awesome tools and they don't get enough credit Tom a cursed awesome person from London unfortunately couldn't be here at the conference and they're now but his tools their wire Mach allows you to stub and services it runs like a little mini HTTP server and you can sort of and you can record responses you can mock responses that kind of thing we use it quite a lot with another thing called like mock web server as well as the newest newest thing but it's really cool for sort of faking out services whether you're doing local dev you can mock out at the services or whether you even running it we run it in Jenkins as well we use that vagrant sometimes the spring up sets spin up VMs in vagrant and and then and yet play around like some real services some fake services that kind of thing really quite cool Tom also wrote Saboteur which is kind of think I don't actually yeah that's likely there unfortunate apologies for the resolution but and Saboteur is a really cool tool for injecting failure into the network stack so you can like drop packets you can add latency and you can do all kinds of crazy things you can like not respond to queries that kind of thing and and again we've used it like with we used actually with VMs and stuff so you can it's kind like a bit of chaos monkey thing you can say if I get this traffic don't respond and then you can run it within like a j-unit scenario and say you know it should fall back to a default behavior that kind of thing it's it's a really nice tool for playing around with the network stack to actually trigger failures and one of the that Chris Baty again from the London Java community and a couple of fantastic talks if you google for Chris Baty and skills matter learned the Java community and he talks about how to do this stuff really well he worked for Sky actually I think he's jumped ship now to date attacks but work for Sky and he talks about how they use this kind of technology to and to actually make sure that even third-party libraries they were using how do those third parties react under failure and they famously found some bugs and when they famous HTTP clients that when you did certain things the network stack it would fall over and like they caught that in testing which I thought was like super cool yeah and also Jenkins performance bug in and so I use Jamie's quite a lot Gatling is also kind of cool and few other ones as well and but Jamie told up I've got burned nests and few gigs ago now where performance of one of our services was gradually going down and down and down down and we didn't know it we didn't have any um this kind of testing involved so now I always recommend put this in you know that it's not the massive jump off that with massive drop-offs even a performance that get you that's kind of obvious the spat as the spot if you deploy a service and suddenly nothing's responding it's like oops no performance issue or whatever it's the subtle degradation over time that gets you and that's the same in a modern list to be honest you've got to be consciously this kind of thing as well in a monolith but you need a good baseline so I use like Jenkins like performance plug-in you get these kind of graphs that show you know the service start off like this few commits that went down that kind of thing and it gives you a nice way to track that is you know is the performance of my individual service good enough and you can also run it at a application level as well on your critical path so if you're an e-commerce site for example your critical path this can uses browser products can use add things to basket can they check out and you might want to be running some kind of thing some kind of MJ meter tests ideally in production against that kind of thing and tracking the results so imagine it's hard and some people are saying now you have to once you get to a certain scale this is that more advanced pattern as well but once you get to a certain scale you have to test in production and you look at the unicorn time people Netflix halo guilt they they do then and guilt or in some really nice articles recently about how they now really think that it can only test in production when they've got like two hundred you know micro services or whatever you get emergent behavior you know there's multiple teams working on different things at time they tried to create staging environments and it was just chaos apparently like you know different teams at different staging environments halo make that work I think there's different teams it's penny only use case it science works but even halo are leaning I think more towards you know looking at testing in production and this is like it's kind of a paradigm shift yeah you know and like I mentioned earlier on netflix there's some caveats for doing this you've got to be quite mature operationally and from a Berman point of view but it's it's worth looking into as the joke goes I don't always Tesco but when I do a test in production but it must be automated yeah don't use this test in production thing as a mantra for oh I'll click a few buttons and it'll look good don't do that please it must be automated things like you know Jamie sir sorry Jamie to or and j-unit with selenium that kind of thing or testing api's with a shi-it selenium can be little fragile so testing api is actually even better so quick summary we've gone through we've looked about using the latest and greatest tech check whether you and your business can benefit from micro services it is not a panacea and if you're going to be doing Mike reservist do you really need to introduce more tech into stack things like docker Mesa sauce kubernetes they are amazing given the right context check it works for you yeah gluttony excessive communication protocols if you can take if you're a big enterprise try and standardize on the glue between your services yeah you know it's really it makes it so much easier when if you're working on things in isolation then different parts the organization come together and trying to do things together if you're standardizing on something like rabbit or JSON or HTTP much easier really good greed do not in do not underestimate the impact that moving to a micro service framework or architecture will have on your organization both from a business point of view from an architectural point of view that kind of thing really do you think about this and see if your business wants to get a lot of answers from this they need to change they need to get a lot more agile as well sloth laziness it's all too easy to create a distributed monolith I've done it yeah so please learn from my mistakes and if you can you know think about things like you bound a context you contracts around the edge of Micra service is that kind of thing and again good architecture yeah Raph blowing up and bad things happen you need you know bad things happen all the time you need to test that ya need to test that some way at a service level with a group of service levels and at your whole application level as developers release it it's great as operators we need to sort of adapt techniques and to allow us to to test you know these kind of things and again that shared responsibility my little joke with the steering wheel and the spike you know it's bit of poking fun of it but think about these things we've all got the same goals in our organization so we need to work together to ensure this kind of stuff envy ly said that the single domain used to be like you know the kind of Holy Grail in a monoliths it's not in micro services so think about this stuff again bounded context like that as a key thing there and it's it's really it's it's a bit of mindset shift particular big organizations as I found and pride it's all too easy to get a bit prideful in that you know are my stuff works but reality we all make mistakes yeah so we need to think about testing in the world of transients we do think testing of element level testing an operational level and testing at a business level are we meeting our our objectives our customs happy that's what we're here for yeah our end users and customers happy need to think about that kind of thing uber shameless plug before we wrap up I do write quite a lot for info Q's a piece if you want to learn about docker may suspend QBit second stuff like I do like a lot of stuff I cover conferences as well so check it out I write back microservices for boxed and then Mark mentioned Vox in the keynote really cool site actually liking Vox there check it out and my company the companies that work for content solutions I write a lot about sort of and challenges within you know companies that using docker about using communities and success we've had would you love R&D around that kind of stuff and open credo I do consultancy I occasionally blog there about sort of interesting challenges we've had so furiously if you'd like we've seen today I'd share stuff regular and I love feedback yeah really this how it works the reason I do these presentations is partly to sort of clarify my knowledge but also to get feedback from people I really appreciate that and yeah I would say so team behind me you're amazing got a shout out everyone open credo everyone at container solutions and actually got a shout out not on the highest keep my current clients I'm learning so much with them as well as much I'm presenting there's an amazing team behind me yeah but it's not here with me actually today and tarik in particular from open credo he was the one that came up with the seven deadly sins idea and I've kind of stolen that a little bit yeah we do different talks with the same title but I got a shout out he's the CTO at OPM credo and he's really helped me with a lot of stuff actually so and thank you very much I think we've actually run out of time now so I'm conscious let the next speaker set up but I'll be around the conference for the rest of the day and do you come and find me if you got any questions I'll be happy to answer them 