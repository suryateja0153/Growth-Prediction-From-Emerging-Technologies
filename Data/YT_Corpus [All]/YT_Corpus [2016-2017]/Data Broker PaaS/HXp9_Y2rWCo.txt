 good afternoon and welcome this session is entitled Cloud Foundry the gaps and my name's John Weatherall I'm an architect to cloud architected bien Y Bank of New York Mellon and a little bit of background kind of what brought me to this basically what brought me to this talk so I've had a year career in developed software development and delivery the last four years I spent it at active state building our cloud foundry basepaths helping build it and basically deliver it the path is called staccato and it was a really interesting role and I from the viewpoint of a cloud foundry vendor visiting a lot of large enterprises around the around the world around the country anyway and seeing what their problems that they were facing were you know seeing the problems they were encountering trying to deceitful II and rapidly deliver software and and and the barriers that they were seeing and and not just in general software delivery and then with Platt with the platform's they're looking at including cloud foundry and including staccato so I had this viewpoint of seeing all these companies from the viewpoint of an external vendor and getting a lot of you know very informative descriptions of the problems that they're facing and I've since moved on from the staccato project and I joined BNY Mellon six months ago working on the past team and it's now I get to see the world from like the other end of the telescope so instead of from the external you know a long distance view of a vendor I'm now seeing it from the inside and first of all it's it's affirming a lot of what I've discovered over the last four years talking to these big enterprises yeah they get these same exact problems and but what it also is doing is really from the external I didn't really see the depth and the how difficult some of these problems were to solve and I'm I'm seeing it firsthand from the inside and so what this talk is about or what we're focus on is our work with cloud foundry at BNY Mellon where a Gold Sponsor of cloud foundry the cloud foundry foundation we have brought it into our shop and so the work with that and it's basically framing this with we have been building a past for several years for almost 15 years and so how that relates to the cloud foundry and everything that we're doing so that's kind of a background as far as PNY mellon goes we're we've been around for a long long time one of the oldest established companies in the banks in the country and we handle massive massive amounts of of you know funds and finances currency etc I am slightly embarrassed to say that before I started interviewing with this company I hadn't really heard of them and yet it's actually it's a very important financial institution institution in the world as you can see with these numbers twenty nine point one trillion in assets under custody one point you know lots of money lots of assets going around we have 13,000 people in IT and as I mentioned earlier we've been working hard on cloud software we we've been building a past for 15 years we've been building micro services long before micro services were kind of the latest trend we're a Java shop mostly for the most part so we've been working hard on all this stuff and we have built our own paths just working oh I see it's a build me I'll let this cycle through because I don't need it to do the build thing so we have this platform called the Nexen platform which is our platform for soft cloud software delivery including the the paths itself including analytics and digital information I think I just blew past this thing my apologies let's try this i over clicked it and this platform itself we've been working on it for several years and we're on the third generation of it now it has had profound impact on our ability to deliver software and I'm just very carefully stepping through the slide so I don't go too far and it's it's the entire platform for our whole software delivery system and we have incorporated Cloud Foundry as basically as a POC at evaluation into this passage we'll see shortly so I didn't realize that they had provided me as these as bills it's okay but the point of this slide here and we'll get into the meat of this thing shortly the point of this slide here is to show how we have advanced over the years from our ability to provision and deliver software taking a long period of time to a much shorter period of time so back in the old days it would take two to four weeks for setup and for same on 4 to 12 weeks for testing and QA see 12 to 16 4 to 16 weeks to get things out into production and that's part of the dev cycle and we've got most of that down to a single day so and that's the the speed-up that you can expect when we're moving into the modern era but there's some incredible challenges we have as a bank to try to get there and that's some part of what I'd like to cover today so yeah let's move right into that so this is this is huge and by the way when I was visiting all these companies all over you know a lot of the word banks and financial institutions and I I swore to myself I'd never worked there because of all these restrictions that they have imposed on them and I found it working looking at BNY Mellon they're they're aware of a lot of these constraints and these these challenges but they're actively getting past them and that's what we'll look at here so it's a fine a huge financial industry company in in a very highly regulated industry we have massive amounts of transactions going through our system very high volume very high amount high number of transactions and to the point where if something fails it could potentially affect the economy of the country right it's that much so obviously high availability is absolutely essential for our operations we have multiple data centers across the planet they need to be they need to stay up we need to understand disaster recovery obviously security is very important and we've been around for a long time we have a lot of old cold cold cold old applications legacy apps you know vintage apps as they said this morning and more more modern stuff that we have to deal with have to work with different hardware architectures software architectures all the things you would expect integration with vendors and partners all these things are huge challenges and just a little bit about the regulations audits are huge everything that we do has to be audited I'm trying to just paint a contrast here between what it's like at this financial institution versus at a you know a start-up that's working with with logs or data or something like that these constraints have significant effect so having everything has to be auditable and trackable and secret delivery and secret management has to be very carefully controlled and never getting in the wrong hands every step of every process has to be reproducible precisely as it was pre produced so every image that's built every artifact that's built has to be tracked and reproduced obviously fraud to track detection many of these things are they have huge impact on how we are able to deliver software here's one example is separation of duties by regulation the coders must not deploy to production so if you're a coder you can't deploy if you're a deployer you can't code there's that strict separation which you know kind of gets in a way a little ways of the DevOps concept right but but this is by regulation and and that fact that one little fact has significant impact on our whole delet development lifecycle including on our paths that we've built so I'm going to skip through some of these because I don't have a lot of time I want to make sure I get into the the Cloud Foundry part but some of the additional challenge is just the massive amounts of data we have running through we are global we have to be up 24 by 7 SLA is to deal with all over the place we just can't be done and I do want to say a little bit about dr so without a doubt Bank of New York Mellon understands disaster recovery we've been through some basically the worst possible thing you can happen have happened to a data center we have had happen to a data center about 15 years ago and we had to deal with that so there's many people that I work with that are experts at what D are really means and how we can recover from it so there's a lot of things that that has to be incorporated into our entire platform at all times you have to keep keep on top of that we also have to validate this we have to prove to the regulatory regulatory bodies that we can recover from a disaster and it's kind of interesting um it turns out it's easier to go through it a real dr event than it is to test for a dr event because if you have to test for a dr event you actually have to keep all your existing stuff going and then gradually move it over to and you know somehow move it over to another data center whereas with the real dr event you don't have to worry about you know gradually bleeding off process these are things I thought it just it's down it's gone right so we have to prove that periodically and make sure we can simulate failure failover accurately there's a lot of stuff regarding security but again I'm sensitive time so let's let's talk about some of the challenges the and as a company we're doing all the things that you hear about at a conference like this micro services and we are we are doing devops to the ability that we can based on the the regulations containerization docker you know that kind of stuff all the things we we are heavily into open source open source makes a lot of sense for a number of reasons and we're very sensitive about getting locked into a specific solution or a specific vendor but are there many advantages of open or open source and we're we're actively taking advantage of all the open source or many of the open source project that you've heard of including Cloud Foundry so some of the strategies we follow to try to get here pass itself as I say we've been building a pass for all these years and I'll talk a little bit about that and how it relates to confound me so Cloud Foundry we are as I say were as I said we're a gold member of the Cloud Foundry foundation and we have incorporated Cloud Foundry into our paths again we're using the open-source version we're taking advantage of a lot of its features for monitoring and log aggregation and the self-service on-demand cloud stuff you would expect to give to allow our developers to rapidly provision an application auto-scaling all this stuff can come to expect with cloud foundry another valuable point is it's a hybrid cloud ability to support hybrid clouds quite easily ok so let's get into the meat of this that was kind of the background I think I've got 20 minutes left so um there's a lot of gaps that we found there's several gaps we have found with cloud foundry that we've had to work around or had to meet and I'm gonna cover these relatively briefly I want to set the stage though that this this is not a defects of cloud foundry talk by any stretch there's no way that any product or application could meet any everybody's needs at all times and as I say we've been building paths for 15 years and we have all our specific requirements and we do things the way we do them so we can't just drop in and replace all our stuff with a brand-new technology and have it work and so what we've done is we spent a lot of time analyzing and evaluating what cloud foundry does and how it fits into our existing platform and what I'm going to cover in this talk and the remainder of this talk is some of the gaps between cloud foundry and our paths and how we filled them up so and there's I think there's three slides here with some of the high level gaps and I'll blast through those while I dive into each one in just a little bit of detail first of all is OS certifications so a lot of our products must be by by regulations they must run on certain specific operating systems and so we found bringing howdy that was a little bit of a challenge because because it wasn't certified to run on some of these os's so we don't have a choice about this we have specific apps that must run on specific OSS and then as an organization we certify a set a fairly small set of OS as we can use internally so that was definitely a constraint we have to work around and I'll get around shortly how that how that happens I mentioned disaster recovery and I realize cloud fodder is making great strides in all of these areas by the way this is our kind of how we've been in the last few months looking at things as they were but having a use case for Cloud Foundry sorry a use case for disaster recovery that can handle an instant loss of a data center and failing over to a secondary data center we have to have a very precise way to describe that and make it happen I had obviously the the whole multi data center operation has to be very seamless so it's like if you maybe heard of uber Neddy's it's like the uber kubernetes thing you kind of need something like that with our paths and we have built that with our paths and that's Cloud Foundry is sliding sliding into that so we need a single control plane so we can manage all the pieces of this whether it's the applications of the services across multiple availability zones across multiple data centers across multiple clouds for that matter even a private versus public cloud and another challenge of that is there's all this vendor integration so we use vendor products for monitoring and for logging and for load balancing and all these other other facets of the paths and we have to integrate with all of this and it's no mean feat to take care of all that Network and application issues I guess so that basically there has to be ways to describe how different app instances and services and containers if you will can communicate to each other or cannot communicate to others so I want to make sure that this webbed here you know Ruby on Rails thingamajig can talk to this Java tier but can't talk to this database tier that's just a very trivial example but it gets much more interesting when you have you know fleets of microservices operating throughout your network how to control the access between all these different components or for that matter how to enable it how can I get from here to here so there's a lot of complexity involved in isolating isolating networks and then we have this whole ecosystem where I'm for us alright containers the the whole container concepts so docker is you know obviously I'm Cloud Foundry is actively working with supporting docker which is really cool and we were able to use that to great use a few months ago but there's some limitations that we found that we we had to overcome for example um I don't know if it's changed yet but when we were on it a couple of months ago it's very difficult to have Cloud Foundry pull a docker image yet this is with Diego obviously to pull a docker image from some random like let's say internal secure registry as opposed to having to go out to the docker to the hub so that was the challenge that we we had trouble getting past or taking an existing container that has requirements for volumes and figure out how to get that to work inside of cloud foundry as a docker container inside of Diego a lot of challenges we we had trying to get get past that like check okay and docker has some nice features like dr. Campos the ability to describe multiple components of an application in a single descriptor and deploy the whole thing is one unit which is which was pretty nice so we have our own version of that we've had it for years we have our own descriptors that describe apps I'll get into that a little bit more detail so these are some of the things that the doctor and the containerization support that we had to work around or had to deal with a little bit about bill packs so very powerful concept you can take an arbitrary op and Cloud Foundry will understand it and provision a container for you based on on what your application is built from but we found that so very powerful but then if we needed to customize it at all we had to you know download this built pack code which is several thousand lines of Ruby code and we're we're a Java shop so suddenly we have to have Ruby expertise on board to understand what is inside this bill pack and how to maintain it and then issues like can we contribute that upstream our changes is it is it relevant things like that so it the build pack issue is just it was I'm still struggling I'd love to talk to people about how how you get around that issue of bill packs complexity and the massive code base to deal with it what what I've done in the past is just taken a you know if I need to do something really simple like Java and Tomcat and some specific customization like injecting some security thing you almost can just bypass the whole bill pack order the Java bill Pat can use a bash script like 20 lines of bash to do the same thing but I don't know if that's the recommended way anyway another thing so a lot of work is being done today for the you know the TCP router etc allowing non HTTP and on HTTP traffic to be routed through Cloud Foundry and you know back in the staccato days when I was with staccato we'd been working on that for a few years now it's been working quite well but with with this latest venture that was a limitation where we want to make sure we can deploy any workload whether it's HTTP or not and have it correctly routed to by the paths and you know ideally on our paths should support UDP as well and I'm not sure what the status I haven't checked usually of the weather the TCP router is if there's also a UDP router underway but our pass is having to deal with that outside of Cloud Foundry okay i'm assemblies is pretty interesting so i need to be able to take to describe a complex application topology with a single descriptor and again if you've used doctors so doctor compose is a really good example where you can have a multi-tier app or micro services base app with multiple components multiple services that makes up and describe them in a descriptor and then use docker compose to provision the whole thing as a single entity and these partitions for us they can include all sorts of things whether it's vendor software or standard 12 factor applications and services or a lot of our legacy apps cron jobs services that need to be up all the time all this stuff needs to be wired together described and wired together and and we use assemblies for that so twelve factor apps you know Cloud Foundry is really good at good at that and but that that's kind of the the easy part twelve factor apps there's stateless and they have standard ways to log and configuration and source code manage and all that stuff but we have all these other applications all these you can call them legacy apps but not necessarily legacy they're just not cloud native applications I guess and all of these apps need all this stuff the automation and versioning and scaling up and scaling down we need to be able to do that effectively for any category of application not just a web-based app or a 12 tier a 12 factor application so what we need is to be able to manage this from a single abstraction and we have what we call an assembly which is like a docker compose file which describes all the components of this application in a single place and then we can provision it this entire thing as a single entity things like dependency management on how can I get the latest version make sure it's the latest version of a service is tied to to a specific application I'll say a little bit more about that is you know micro services has great promise obviously ability to version your all your services independently but on certain applications with with very high requirements of veil ability where you know there's penalties incurred if your if your app is down for a minute lots of money penalties involved it's maybe a little too risky just to allow that micro service to evolve on its own right and so instead you have to be able to say while this application requires this micro Service version X Y Z I was gonna say that I should say Z since I'm in this country I want to be able to tie each application to specific versions of everything and that's what an assembly can be used for it's a this is my entire complex application and I can deploy it as a unit I conversion it as a unit I can roll it back as a unit so that's how something that we we have had to build outside of the power of Cloud Foundry and we've that's what we've been doing for several years another thing we need to look at is is like affinity or location awareness so if we have you know for many workloads and applications you need to have the data and the processing close together and Hadoop is a good example of that but at the ability to - I don't know partition your in to all your resources so that certain workloads get targeted at those resources hot cold storage so I might have this you know petabytes of storage that has very very long time to access it and then I have my smaller memory pool which is instant access and I need to be able to say you go over there and you go over there and we we need to be able to use our paths to say all this stuff so specify all these all these constraints same with specialized hardware GPUs and FPGAs etc our paths needs to be able to handle all this stuff shared local file system again I understand this is coming with cloud foundry if it's not already here but many of the apps that we do deploy we need to have the ability to share multiple multiple instances of the operating across the pads need to be able to share a filesystem easily and we need to be able to specify this in the descriptor or the assembly scripter pardon me single sign-on authentication so we have just huge infrastructure in place to deal with this and that says here lots of customers it means there's lots of people within and outside of the NY Mellon it will be authenticating to our systems in the powers is what's deploying these systems so it has to have some understanding of an integration with all these different authentication mechanisms so very complex and there's some that are very challenging to do so we have to do a lot of work on that third parties customers our whole stack whether it's ancient hardware or brand-new software and hardware has to be able to deal with all this ok secrets is an interesting topic as well how's my time ok um secret management is regulated and I've been a time companies in the past and I'm sure there's many many companies but whereas if I was a clever and malicious developer I could easily get into a database and look at things or even change things if I knew what I was doing I've I've been there and you know there's there's ways to get around that but we have to be just very precise on how we control secrets and making sure that secrets don't get in ever can never possibly get into the wrong hands so developers and deploy is just can never have an access access to a secret that provides access to some trusted or needing to be trusted resource some sensitive resource ok exposing secrets via the environment is kind of risky so we're looking at sophisticated secrets management techniques to get past that and just to say a little bit about trust on you know it's it might be it might seem to be a good thing to trust our developers you know Trust developers in general but in fact that's not a good thing and it's nothing about the developers myself as a developer I do not want to be burdened with the trust of secrets I never want to have a secret because if I have that secret and something happens you know suddenly I'm kind of I'm in I'm in there somehow whereas if I never had secret never even kind came close to it that I can do all my work so the pass has to be able to allow me to provision everything I need to and run everything I need to but without me ever getting my hands on that secret any part any portion of the whole sdlc and so we have to very carefully bake that into our paths it's just a fundamental tenet for the past okay so that's a few of the gaps with cloud foundry but as I said this isn't a cloud foundry bashing talk by any stretch there's a lot of really good things about cloud foundry and I'll just wrap up my talk by just covering these and briefly and I'm sure many of the talks here cover all of this stuff too but it's a very strong community as is evidenced by this by this conference and by how things have been going for the last three or four years here and we are using the open-source cloud foundry which gives us a lot of power as you can imagine really good for twelve factor apps really good for micro services really helped us with our hybrid cloud initiatives so we can take our apps and have them deployed across multiple clouds both internal and external you know jury AWS that kind of thing so that's the same point here it did allow us to do some pocs with docker there were as I said there were some limitations but we were able to really quickly provision docker containers into our paths using our cloud foundry integration many of the developers in-house that used cloud used our paths that had the cloud foundry and incorporation we're we're just pleased to put it mildly of how simple it is to provision apps when when you have cloud foundry taking care of all the heavy lifting the service broker car party service broker whole infrastructure we've been using that URL provisioning is really nice if you know the wildcard DNS well Cloud Foundry URL mechanisms it's really nice to for a developer to provision an app and that URL is instantly available that's a huge thing the logging this standard Cloud Foundry pitch which I'm really good at by the way I've done it for many years but I'm the logging the polymorphism ability to support multiple languages the security groups it has for isolating workloads and basically creating Network between between or partitioning networks between workloads the open source one we had no vendor lock-in and we had we had clouds so yeah no specific is tie is really that as far as from the from the higher level and it really helped with the separation of concerns who does what I'm out of time so I'm rushing a little bit yeah so there's a lot of things that cloud foundry did very well for us but we are continuing to use our existing paths because we have built it to support all these things I discussed at the beginning of this talk cloud foundry is a past component so when you push it up to our path it might in certain circumstances will push that will just pass it through to cloud foundry but you know so we'd be a single cloud foundry instance running across these data centers as opposed to kind of an uber thing that's where our pass comes in but it does very well with things it does it does Cloud Foundry deals with all the things that it's good at very well obviously and we are able to leverage that do I have a yeah so greatly simplified app deployment the descriptors are so much simpler as well so are out descriptors if we use Cloud Foundry for certain classes of apps we can simplify the descriptors and and the specification of those much faster to bring a developer on board to figure out how to provision an app to the paths to the cloud the URL provisioning I mentioned docker POC you know we can do some docker work with with Diego and the hybrid cloud so that's kind of the front of my talk I don't have time for questions unfortunately I will take it just a second to say that um we have a bunch of innovation centers around the globe doing some very innovative things and we are hiring and it's a very cool place to work so yeah I just I wanted to put that in there I mean if you're interested and go to this URL or come talk to me it's incredible the initiative to innovate is coming from the top and from across the organization and we're doing some incredible things I'll plug we are there's a panel discussion at 4:55 today for 450 I guess in ballroom B and it's finance and cloud basically is what we're going to talk we've got half-dozen people or so to discuss finance and clouds so come to that and that's my talk thank you for the time 