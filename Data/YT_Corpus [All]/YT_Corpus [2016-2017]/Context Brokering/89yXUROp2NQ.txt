 I was actually a fight between very many things this is I'll be talked about nothing but fights in this talks at this evening I'm so Mike's up here I feel like Lucretia civ Borg so you'll have to forgive me if I feel a little uncomfortable so this is a small enough I mean the nice thing about a meetup rather than talking at a conference is that it's small enough that we can be fairly interactive so I think some of you have seen this talk before some of you know an awful lot about what I'll be talking about this evening feel free to shout out wave your hands wildly if you want to contribute to say something to it I mean we're in a smaller group that that's that's more than doable that's perfectly reasonable I don't know my glasses on so as it's so often in life subtle tea will buy you nothing if you want to say something shout or wave your hands and yeah you can shout out anything you like as long as it's not get off or he's behind you unless you really need to unless there's a really good reason to say he's behind you so my name is Ann Curry and I'm the CTO of micro scaling systems and we've been doing an awful lot of work recently well over the past year it looking into what so Gabe talk about day as being about kooban et's what next we're kind of looking into you've got coop anita's you've got dais you've got whatever orchestrator is in and in place what next you know what is the end game of all the effort that you've gone into potentially to look at those kind of things what what can it by you what's interesting about it that would justify all of the effort that's going in what why are people so incredibly hyper why is there so much hyperbole around containers so and I think it's justified but it's not wholly and completely justified the still awful lot of work to get containers in so yes so I don't think that anybody will be considering me to be exaggerating if I said that there are only two interesting things in the world at the moment the first is containers and the second less controversial E is Game of Thrones so you might feel that game of thrones bear no relation to your everyday lives in enterprise architecture but you'd be quite wrong there is there's there's a battle going on a large number of battles going on at the moment that mean that your everyday lives are not quite so far from Game of Thrones as you might think maybe less sex position don't know depends where you work but there is a battle at the moment for what will be running on the bare metal in data centers in a year's time two years time five years time where will your applications actually be running what will they be running on top of and the so what I'm going to talk about this evening is the main contenders in that battle and I'm going to slightly kind of step back and teach my granddad suck eggs by summarizing the the main contenders that you all know very well in this battle and this is a little bit more basic than Gabe's talk so I hope you'll forgive me it will get a little bit more subtle as well as we move on so oh do been like that do them um so our first contender obviously just running on bare metal I mean it might seem crazy but it's what we were all doing 10 years ago 15 years ago why don't we now mostly because it just wasn't sufficiently flexible you know especially there are various you know a bit like you know I a bit like stan is there it's it's not actually probably your winning contender here it's inflexible spin up times if you want to expand your capacity are very high you're talking about you know best-case hours probably more like days or weeks to expand your data center capacity if you're running on bare metal so as its strengths it with image still fundamentally what we're all running on it's been commoditized but it's still fundamentally what we're all running on but it isn't necessarily where we're natively we're running our apps directly and it's unlikely to return so it was beaten by VMs and for good reason souviens was that yes the so it was written by beards and for good reason because VMS have all of the strengths that physical machines don't have they are massively flexible they are totally agnostic they don't care what the running on and they don't care what you're running on top of them so the security is very good they've been around a long time networking is excellent and they have another advantage which is which matches a little bit with what we're hearing about deus earlier in some of the problems of some of VMs competitors this was something I didn't realize when I first started to look into this but it's become more and more obvious to me that one of the reasons why VMs one so resoundingly and so comparatively quickly is because the technology all of the is if you're an application developer you don't know or care if you're running on a physical machine or a vm doesn't make the slightest difference to you so it's as far as you're concerned is transparent doesn't doesn't you know you don't know the difference as an ops team there was an awful lot of stuff to be learned in order to ramp up on VMS and to roll out VMS into production there was it there was a huge learning curve but you also got all of the benefits or virtualization so all of the work all the pain but all of the benefits for virtualization resided with on one single team which was ops with some of the alternatives that are now available that pain is spread out more widely and that's much more difficult to manage as much more difficult to deliver on but but VMs I think one of their strengths is that's all of the pain and the gain was was in with with it was within your operational team which was a an advantage one of the downsides about VMs is that it is slightly overweight you're running an entire guest operating system on top of an entire host operating system that's a lot of duplication and it means that you don't necessarily get the best server utilization that you could possibly achieve the other band the other downside of VMS is that the spin up speeds although they are so vastly better than the spin up speeds for bare metal for physical machines are still way too long you're still talking about minutes which is not real time and that's just out in my opinion not good enough so finally you've got containers the final contender for the for what your applications will be running on in in a year's time in five years time as an awful lot of the strengths that VMs don't have an awful lot of weaknesses as well so very very lightweight and I think we all know that containers are extraordinarily lightweight compared to VMS they are really just a way of packaging together processes and assigning permissions to them on mass which means that you can bring up a container which is basically just a bunch of processes in you know in the same time as you would bring up a process theoretically you know in very much sub-second which is a which is amazing now with some you add in orchestrators and then you're not necessarily achieving sub-second but you're still achieving very very very quick instantiation so that could contention completely change things so the weaknesses are as Gabe mentioned networking still isn't perfect for this it isn't really living up to the possibilities of containers but there are some very really good options out there but I mean I want the leading was as well as we've works there's also project calico who are based in London and that's a very very compelling way of doing container networking the security but the security will get there everybody's working on the security I think you will get there but it's still unseasoned you know that one of the problems with running containers in production is it is relatively new there are still there are still a lot of flaws issues that need to be ironed out of that but we'll get there we'll get there so all of that Sam that's all that's all great and also you know about docker and it's great for continuous integration and P love it and they can move things very easily from dev test to production all that kind of sup don't don't I don't care about that that's table stakes if that wasn't good we wouldn't even talking about containers now what I'm really interested in is what's next you know what what does that buy you that's bigger than just continuous integration and easy movement from one machine to another and for me that's all about the speed of container instantiation it's the speed at which you can bring things up and down in containers compared to VMS and I think that completely changes how we might think about architecture and operational architecture and development architecture in the future so for example that the main thing always gets on my nerves with VMs is auto scaling it feels like it should be incredibly useful and it is useful in a way but it's always disappointing because it's not real time so I spent a couple of years as a head of technology for an e-commerce company and certainly auto scaling would have been good we weren't in the cloud this was pre cloudless was running around data center and it would have been useful to have auto scaling but it wouldn't have solved all our problems for us because I problems were always about unexpected user demand and when user arrives at your website they can't we're not going to wait around for the four minutes required to fire up another vm to expand your your capacity to handle it that's that's not good enough it's all right but it's not good enough you suddenly lose all of those people so auto scaling is just not quite good enough when we first started to hear about containers it was auto scaling we're starting to think well hang on a minute is there something more that can be achieved here with container instantiation space and when we started to look into it and we look into what looked into what Google are achieving or Netflix are achieving they are achieving real time scaling but they're not doing it using auto scaling because auto scaling expanding your capacity you still can't do that in real time whether you're bringing up additional VMs or you're putting in new machines you cannot do that in real time but they do something else which relies on some of the abilities the capacities of containers and the container instantiation speeds that allow them to do real time scaling within their existing capacity now they still call this auto scaling but I find that a bit confusing so we're calling that micro scaling to differentiate it from auto scaling which we consider to be expanding your existing capacity a micro scaling to be reusing your capacity so for example say say it was me again and I had my ecommerce platform and I had web servers and I had something else maybe it was processing warehouse management orders now some of those processes some of those services that I'm running the web service is utterly key it is entirely what my business is it's if there's a peak in demand its web services I need I used to take orders doesn't really matter it's important to me it's enormously important to me if that orders are still processed in the warehouse but if that didn't happen for 20 minutes or an hour or a day or a week that wouldn't be the end of the world but I absolutely need many systems to process where borders as they arrive I cannot that's what my business is all about so the way that Google have approached this and the way that Netflix have approached this is that they've used orchestrators and you really need a good orchestrator to do this so you need coupe annuities or you need me maze us and we're not tempting to write those we're just saying what can you do once you've got them you've got company tease you got me so so you've got Nomad your ecs or whatever orchestrator that you might want to put into your systems what you need to do is tell that orchestrator well just for a moment switch off all of those warehouse management systems or what I would do switch off all those warehouse management systems because they're important to me but they're not urgent right now and use that capacity that I already have I'm not actually auto scaling I'm not expanding my capacity reuse the capacity that already have in order to do more to support the demand that is urgent for me the processing of web orders and this is what this is what google and netflix do and it works extremely well for them and the end game for me this is the reason why containers were invented this is actually what they didn't invent it in order to use docker because dr. wasn't invented until years up these guys started to do this kind of thing it was invented in order for you to do very clever things with your infrastructure like that and even further things beyond that that's that's for another talk but at the basic level this is the most simple thing you can do with your infrastructure using containers is turn off one thing in order to free up capacity to turn on other things so what's required for that well containing senshi asian speeds are required for that if they don't actually instantiate within seconds and you bought yourself nothing microservices if you have just have a giant monolith then you can't get any benefits out of this approach this containerized orchestrated approach because you've got nothing to turn off in order to free up capacity you just got one giant monolith just got on his turn off the only option you have is to spin up additional resources also cattle not pets if it takes 10 minutes to turn your warehouse management system off then you've bought nothing again you may as well have just put in some additional and vm resource so in order for this to work you need to have a mic reverses approach which some crazy talk most of us are thinking about mike reverses approaches and you need a capital not pets approach which again isn't isn't sir it isn't beyond the realms of possibility but i'm saying this and is it actually true i mean i want to believe that all of these things are possible I know that Mike reservist is possible I know that cattle not pets as possible but we didn't really know when we started looking into this weather kaneez container instantiation speeds were actually achievable with off-the-shelf orchestrators on the kind of infrastructure that we might have so physical machines or ec2 ash or wherever he wants to put it so that was the first thing that we wanted to find out when we started to look into this is it's actually true or is it just a giant conspiracy on a google's part so let me here we go so this is actually recorded off my laptop last week let me turn the volume now well it'll do so this is something that uh I'm gonna go so HEPA lipstick fit if i look at this too long don't look at this um so this is something that we put together mark Salem what auto box which is a demo a bit of experimentation to see whether or not these container instantiation speeds actually plausibly achievable using off-the-shelf orchestrators and off-the-shelf infrastructure-as-a-service so here what we're doing is so what we did to muck this up was we generated some pseudo random demand so the red is pseudo Brendan land and we defined to container types so dark blue containers is our priority one container and that's a bit like our web server it's basically the context it's the service that is required in order to meet the demand and then we said ok works Haley in a box here's your algorithm you win if you keep up with the random and so the blue hits the random demand line and the rest of the capacity in the system is topped up with your kind of batch your your priority to command which might be wheres management system it might be a batch process whatever else you want we wanted one we genuinely didn't know whether or not this would actually be possible this was what we thought of is the simplest possible demonstration we could do to see whether this was possible as you say it generally as you see it generally does win so it winds there's a win if it meets the demand and it fills up the boxes that's a win that's a win and there we've got it changing every second or so and that was about as good as we managed to achieve so we ran this with with maize haces and orchestration basis marathons and orchestrator ecs is an Orchestrator swarm and also directly using the docker api's and all of them behaved actually really very similarly we only use docker well I'll talk a little bit about that later we run it on ec2 we run it on ecs and we ran it on a shore and again they all behave perfectly reasonably so this is it's not crazy talk this is actually possible the only place where we didn't really get great results Wars where we were running Windows 2016 beta docker container engine support on a shore but that isn't a production that then they're the docker engine was just responding a little bit too slowly to keep up with this but that's not a production configuration so I'm prepared to forgive them for that because I think this is not the kind of thing that they were necessarily immediately expecting people to be doing but generally it works generally you can achieve these kind of speeds and it was not so given that that would be the case so we were quite pleased that it was and I'm not going to hold it against Microsoft too much that they didn't quite manage to keep up so yeah but it looks terrible if we have done spikes and it does actually it will keep up with that it's just that it doesn't look quite as good when you're demoing it looks like crazy and it's quite hard to follow as well it doesn't make that much difference oddly enough you can start and stop 10 containers in pretty much the same amount of time as you can start and stop one container it's really the orchestrator that's that's introducing the slowness into that and you did have we did have to tune the orchestrators a little bit to achieve that but not hugely much so we had to do a little bit of mucking around but it wasn't wasn't major we haven't done it with cuban et's yet but i can't i don't anticipate there would be any problem with that so really this is I in if we talk back to games talk before and he talked about he talks about application ops this is really i would say all all lying in that application ops layer and it's really saying can your infrastructure know a little bit more about what the applications are doing and and manage that's a little bit bit bit better because if you can start to bring in real time particularly with Mike receivers there's a lot you could potentially do with that there's a lot of interesting things coming out of that whether it's especially and I haven't really thought about this that much before but the comment about about what was it cool it was it was confident microservices there's potentially a lot you could do there where you're kind of in many ways the system that I'm talking about as a composite micra service it is a ecommerce company and it is made up of many microservices some of which are doing your your web front-end some which are doing your payment processing some of which and they are I the argument that I'm making is that they are mutually dependent right now they're not they're all just completely set up separately but really they are mutually dependent upon one another and they do depend on what your business is doing and they should depend upon what your business is doing and the comments about almost fly by wire on your systems that's what these guys do they make real-time judgments about what should be running what's important to you what matters were how it should be behaving where there's more of these or less of these and they act on them instantly in real time using their orchestration layers so yeah and this is this so this is the this is the throne that everybody is aiming for that I think that we should in the long run this might not happen for ten years but I would be very disappointed if it doesn't happen given that these other guys are already achieving it and they're getting some hugely good results out of it lower costs through higher server density lower maintenance through effectively self-driving self-flying systems and more than humanly possible I mean someone was saying to me the other day oh you know I just have somebody in a room pressing the buttons know that in the long run that that is not the way that the world will work we do want systems to manage themselves with containers I think that is coming close sir to reality that actually a lot of the application up stuff that word that was mentioned before might in the long run hopefully be automatable so I talked about a battle between V Emerson and containers but actually it isn't really true that battle has already been fought at places like Google and containers one we're just only now hearing about the results of that battle I think in the long run we are definitely going to go there now it I could be wrong because this these a lot of these same effects could be achieved by just making VMs considerably more lightweight and better orchestrated so we might get to the same end result but not with containers we might do it with extremely lightweight VMs like hyper-v for Microsoft or yoona kernels on Zen or whatever you know that there's there are lots of different options that might give us the same kind of incredibly good response times that are not necessarily containers but the the general idea i think still applies yeah I mean it's not crazy on your ops you really talking about having an Orchestrator you really do need an Orchestrator to make this work and a dockerills or alternative and you need to be thinking about my Christine or that kind of approach of effectively automating your application ops and architectural requirements are microservices and cattle not pets I did really enjoy the law I don't know so I'm now going to move into the there we go I can't well my last game of thrones reference containers are coming all container equivalents I think something that is as fast I would go into I I do want people to put their possessed mates and ask questions but I'm going to make one final comment from the last talk which was that actually I think they think that's most threatening to this world and I think it's a writ is a world that's really worth achieving is the energy barrier so docker is quite a low energy barrier to get from developers to nothing to playing with docker it's a very low energy barrier that's where they've been successful is keeping that and it's very extremely low but getting up but moving to the next stage of having an awkward having orchestration interpret in production that's a huge energy barrier and there are a hell of a lot or companies and developers SAT between that initial hump and this huge hump over here of orchestrators and I think that's a real shame because I think if once you've got orchestrators in production there's such a lot you can potentially do with it so I'm you know I'm quite keen to play around with this because anything that gets helps get people over that second energy barrier will I think in the long run be a very good thing so anybody got any comments or questions on after your question can be a comment containers are dead thing is AWS lambda sort of services well it's interesting because I only think that you're not the AWS lambda and server lists architecture is another is almost stepping on from this but they'll be very difficult to orchestrate I mean it will be quite hard I mean if you go yeah yeah yeah that's Jay and I to be honest I wouldn't really mind if it happened because you can do the same thing all of these kind of things with that all right yes so when I said lightweight VMs or containers there's also server this server this code it's another way that you could you could achieve it it's going to be yeah I would quite love that world actually because there's a lot of interesting tooling that would come out of that that we kind of match the same kind of thing that we're thinking about doing at the moment anyway it's it's then then once you get that how do you make them more aware of one another and able to kind of light because you know the difficult thing is you've got a million line application it's difficult enough to Microsoft's at you know it's difficult enough to turn that into for you know quarter of a million line microservices but people can do it is possible to do that but you're probably not going to really ever want to turn that into a million single line lambda so for this moment of every but we really hard to manage but I like the idea of it we're just the right different patience and I think in in that world oke oke the infrastructure just has to be really clever to make the the actual application so dumb but I mean that's what the tools orchestration tools now are actually doing that you know they were going to attain your level yeah to take that down to process level yeah lander is it's just a different concept so yeah yeah this is the next step so yeah containers again I think you're probably I think they will chef certainly be a continuum in which serverless code it does appear it's quite interesting it's definitely interesting uh uh I'll go from the front and then work back where my interest is Elias have a very easy deployment from development straight as a way of pushing but also is that and what what interest me around and took to this area it says i will use different hosting platforms or under the agnostic because i want to be on yo awx final straight up on that but I do have a multi-talented web front end and back end which is basically a spark cluster so essentially is that each customer and has their own storage and their own compute but assured front end yeah what's interesting with like some of this micro scaling because for say some analytic jobs you know I want to have the customer be able to say hey I want to run this and half I'm suspend up twice as many servers yeah and I use a lambda type of architecture you spin it up do the work spin it back down again so yeah it takes care from a cost perspective in hosting but it doesn't seem to be a connection as much between the billing does I will get from you know Microsoft or Google everyone's a me kind of aligning that to what I have to charge my customer you know in terms of that seems to be disconnected so we get in the ease of deployment the ease of scaling maybe not where you're a platform as a service so you have another customer that you're then brokering that posting relationship essentially to because all they're seeing is a web front-end they don't understand anything is going behind an iceberg and in that case I think some of the hosting company cpu away from that so just one wheel that's an area that is working oh no actually I wonder if you've got any more common you would have any comments on that from a you're closer to the pass world mmm I it's I kind of hope that's now that he's obviously AWS of basically just completely cornered the market you know they have what ninety two percent for cloud markets and as you'll have what six percent and everybody else is just picking up the you know the crumbs I think the next one is google with about 1 r % which is not a very healthy world I have people friends that work there and like their provisioning infrastructure that used to run amazon every day five years ago so maybe they had five years ago running amazon depravation every 90 of these data centers but am i do think this is still what's happening is that we're still kind of climbing up the majority curve you know so we're having the platform's you can have to do you know you can have spark na so you can get much more interactivity you're having people like data bricks come along and make it really easy to run analytic jobs but eventually you're going to get the solutions that run on these platforms you know so that maturity curve just always happens you know and and that's why i don't think the battle is over I certainly do think that Microsoft being very pragmatic in terms of their support for the legs you know terms of them recording sequel server two minutes like you know this most video over the dead body of bomber well he's dead give him what he said but I think Linux was communism or something think about what he said about the other one but M so they've been very traumatic I think they could be more pragmatic I think they're being pragmatic but I because I used to work on exchange back in the 90s I did what a lot of work for Microsoft back in the 90s I think they could be walk pragmatic I think they should be thinking about open sourcing windows I you know I think if bill was still in charge he would do that because I remember what I when I was so I was on the very old-fashioned sna server i'm not sure if anybody it remembers SNA it was one of the microsoft back office suite and I works in exchange as well back in the 90s the batter the Microsoft back office suites existed only to keep Microsoft in the game of service of windows servers they existed only it was what was required at the time and you know didn't make any money off it it was required it was required at the time to keep windows server in existence as a server operating system and at the time them in the linux didn't exist they were competing against solaris hp-ux all of which are now gone you know um and it feels to me that now if they want to keep themselves in the game as a server operating system they have to open source and I don't think it would actually do them any harm to do so I mean it's completely against their what they've been thinking for the past 20 years but I don't think they'd be crazy to be thinking that I don't know if they will but I don't think it'd be crazy for us you know you don't buy it for a couple hundred anyway best changing their business yeah for traditional companies yeah yeah I agree I was like sorry there were more questions um you had a question call so we see this move away from marcg I style development towards things like JVM base development back but do you think we're going to go thank you too far CGI style developing very fast startup speeds and in the future will be writing PHP well it I think there will be to take full advantage of these things yeah there's definitely an issue there and I've got three people I'm talking to at the moment is saying I really want to do that I really want to be able to respond but we're running in a rail server and it takes a couple of minutes of the whole thing to come up and what will what will they do about that what we do about that will probably end up or architecting things too I mean with the whole thing about microservices you can break down some of the stuff and you know people move some parts of it out into a microsemi t written in a different language yet so you it you don't like the idea of the lambda future are you I'm sure we can do it that PHP different yes ah that's a very good question so the question is I don't know because we haven't written thing to do that but yet but I mean I would have imagined it would start with configuration files you know that actually and it's in many ways it's it's passing that decision the interesting thing is that is a business SLA decision you know I care about this in these circumstances I care about this I don't care about this and so that decision has to be passed back to to business users and you know I think business uses it was something that I saw when I was in weekly trading meetings for our so it was fig leaves calm so online lingerie every week we'd sit down and go are we selling enough 30 2 b's you know we'd have we'd have all those conversations and often the business do have a very good idea about that kind of well this is important to me in this isn't they do understand that so for example what one of the difficult things was always getting the marketing team to communicate the information that the ops team needed to provision successfully but the irony is it was the same information yet the marketing team cared about the ROI ROI on a campaign which was really how much traffic is that going to generate how many orders is that going to generate the ops team cared about how much traffic there was going to be and how many orders they were going to place so it's often bizarrely enough that's exactly the same information that's required across a whole business we're all going to get half to find a way of making business users share that information with one another and it's entirely a psychological question I think because the actual information is the set is isn't isn't a million miles apart they do they do know that kind of thing and businesses can make a decision somebody normal technical can make the decision if we had a huge number of users I prefer that the website stays up more than I prefer that payments are collected that's a nd F I think in the future they're just going to have to make my decision good that says we can all go off and eat our own weight and cream eggs or a go 