 they're going to be talking about this great very long title which is taming the micro service which grp see and Cooper Nettie's and it's very long so long that doesn't fit in one line so I change the name which is building system like a ruler or if you prefer coding like a Googler and the idea is that so when I joined Google I was a software engineer and I loved it because there was a bunch of things that I could use that were just amazing like for developer the fact that you can just write your code and you have the compiler is Magic deploying is magic everything is magic it's basically there's a series behind it but their magic juice so you're like yeah everything just works and then started doing open source and it was not the same I was missing a lot of stuff so nowadays we can still we can already use the same tools I used to use a Google but externally so that's what I'm gonna be talking about today so we're going to be writing code running code sending messages and there's gonna be demos everywhere and and not much testing testing is a different talk okay so who am i I'm a developer advocate as I said I work for the Google cloud platform and the go team um you're gonna see oh I don't okay you're gonna see go first everywhere like that's that's me i'm also on the on the on twitter facebook no i'm also on facebook but don't look for me and i also i have an email as a lot of people whoops sorry and I also speak French but I'm very jet-lagged so I'm not gonna stick friend today just so you know but if you want to ask questions at the end you can totally ask the question in French I understand you and replying whatever feel like okay so writing code how do you write code when you're a gubler I could like to say it's go it's not the case yet but one day maybe nowadays a google writes code in a bunch of different languages I cannot that many not Lisa + + java go python not that much and bunch of JavaScript everywhere so that's pretty much what we do but I'm gonna be talking about go cuz I'm a gopher so why go there's this sentence that Irie like this quote so to program is to engage in a pastime singer to banging one's head against the wall but with fewer opportunities of reward and this is something that depending on what language you might have used you might have felt so what's about that well that's implicitly if the language is too complicated if the whole language doesn't fit in your head you're going to have a bad time so the VA is let's make it as simple as possible so you can concentrate on the problem rather than on how you solve it this one is a really good one current source web creator of C++ said see makes it easy to shoot yourself in the foot c++ makes it harder but when you do it blows away your whole leg which is very I really like it and what is this about a clearly memory corruption and go is actually a safe language is safe in many ways it's type-safe we don't have a void start how many of you have actually how many of you have used go okay oh that's a lot good how many of you have used C and void star like the void pointer okay we'll have those those are evil we don't have those and go we actually have them but we hide them very well so you're going to use them there is also no implicit conversion so having things like overflows in the integers they don't happen that often it you actually have to say I know what I'm doing and same for memory we have pointers but now pointers are ethnic so you can go this is the address at four and see what I get there's also now a memory over by buffer overflows and since it's garbage collected there's no memory leaks unless you have them and then that's a different thing but it's easier to write code that doesn't have memory leaks this one I'm not going to read it because it's really hard to read at the end but some people when confronted with the problem thing I know I'll your threats and they have whatever what is this valleys concurrency and concurrency is very important nowadays everyone uses concurrency and some people choose some languages to some interesting approach like no Jas chooses not to have concurrency at all well they have concurrency but not for ilysm then they remove a class of problems go what it does it offers something which is go routines and channels which is based on sequential communicating sequential processes which is really old idea I kids older than me it's 1978 and the fact that is an old idea doesn't mean that is not good there's a couple of languages that have tried to implement it before but I think that go is probably one of the first ones that is kind of successful with that idea before there was airline but saying airline was successful might be a little bit and go is fast the compilation is really fast especially if you compare it to C++ and also execution is very fast and keeps on getting faster the garbage collector has the garbage collector passes are now 100 times shorter than one year ago so we are working on making everything really really fast and go for that fun and I did a very scientific study to prove that go is fun by tweeting about looking on Twitter go going so much fun and people say go is so much fun so scientific okay let's stop talking about why go is cool and let's do a little demo I'm going to build an HTTP server simple add to that okay so I'm going to do min ago package mean I have my function main in my main function sa you should handle all the requests with this handler and then you're going to listen and serve on port 80 with the options if something goes wrong we're done my handler is a function the given response writer and a request just going to print hello the fest to the output go build and we have a binary and it doesn't work because it's 480 of course but I'm crazy so pseudo easy that's gonna allow me to open it localhost hello the best awesome these are amazing then why not cool so actually have a script that's crazy cool so now the next step is like oh yeah I have a binary cool why do I do with my binary we are in two thousand sin you put in that container okay so how do I put this in a container so I gotta do from scratch because I like small things I'm going to add my web server as web server I'm going to expose 480 and then the entry point it's going to be web server that's it that's a whole thing I'm going to be using docker machine from the cloud because these running through my phone so otherwise could be pretty bad and I'm going to do docker build my web server this should work cool so you're going to see that the whole thing we're sending that's the binary its run set max set megabytes that's a whole thing with something and that's actually I run the size of the image by the way dr. run web server dr. Ron dash p 8080 and watch my IP my peas this no wait something bad happen oh yeah oh okay something really dumb that I do every single time so it makes it looks like it's part of the demo yeah you cannot run mac on linux that's that's a bad move so okay I want to build a linux binary from mac how do i do that go as equals linux go bill that's it now i'm compiling a binary dive works in docker takes a little bit longer but i just ends up generating the same thing i'm going to do a doctor build its gonna send the same banner you again my phone is working that's good dr. run and we got it now we're running in production okay how awful is this very because right now which is running one container in production what happens if that content goes down whoops what if we want to have many containers and we want to offer some way for our users to just access one of the one of the IPS no just get this list of ips that keep on changing by the way and good luck that's another way to do it so let's talk about that okay running coding production so how do we run cutting production if we want to run cutting production like a Googler let's learn first how we do it at Google and we're gonna talk about Borg how many of you know what board is ok not that many Borg for google for other places different things for google Borg is the thing that manages all our containers and when I say all our containers it's a lot of them we learn to run 2 billion containers per week that's a lot of containers so we manage all of them across all our datacenters with one single system called Borg the way it looks for a developer for me when I was a software engineer and AdWords could be you write your amazing web service called hello world then you say these words I want to run it that plaster there and to do this first you ask people you cannot be like oh yeah that cluster is mine you as someone so yeah I see I see is a cluster in some data center and it has around like 10,000 machines so no my you good ok this is my binary run this binary the these are the command line parameters like whatever flags or anything you might need and these are the requirements I need 100 megs of ram 100 max of disk and you are the one cpu which is not much but it's hello world after all like whatever and then I want to file to execute five of them but this is google right so we can run 10,000 of them instead what happens next all of this and I'm going to add very beautiful pink arrows to make it clear first thing you have a binary that banner is going to be sent to binary plus three where we're going to store it there for later later used then we have the config file which is the thing we just saw and we send that to the board master the board master will parse that and ask em understand make sure that first you're actually authorized to do that and then if you are it will check with the scheduler and say hey out of all the machines that I have give me one machine where I can execute this replica just one by one and then it's going to go to the machines gonna say hey you execute that that hey you is actually an instruction that is sent to what we call a cute abort left I portlet and a portlet is a little job that runs in every single machine at Google what it does is basically dr. full but the Google version of it just just give me the binary and then start executing it in a container it's not a docker container is a different container but it's kind of the same idea and soon you have 10,000 hello world's going around a data center they really load like this the data center is not the hello world and to runt like 10,000 of them might take like two minutes and a half which might feel like it's a lot but since thousand jobs so you know it's kind of decent and it's actually taking longer because we we stopping fronting to time to make sure that other containers will also have the chance to be scheduled so we just get them thousand at a time in security we do 100 we wait hundred we wait and so on by the way this little line here never gets to them thousand because when you get to 10,000 the probability of one of your jobs being removed from production or just failing is high enough that you will get to like 9000 and 98 something like that and you're happy with that and its story normal it's how life is machines fail all the time okay let's talk about crew brunette is what is Cooper nannies to start with how many of you know what kubernetes is or have hurt you burn a tease or I hear French people saying goodbye on it okay soku benetti's is a container orchestrator so it's like Borg but for the ovens open source community it's not an open source version of board it's actually an improvement on board that has some changes one of the improvements if you ask me that it's raining go but that's really personal and basically what it allows you is it allows you to run containers in a bunch of machines those machines could be anywhere it could be part of the club Google cloud platform or Amazon or Asia or it can be one of your machines on your desktop or even could be if some some of you have seen a bunch of raspberry PI's we've done that we've executed green Arizona on a cluster or four raspberry PI's which is fun because that you can unplug them and stuff like that it's really fun if you do that at Google they don't really let you do that so it's an open source project with a huge open source community I updated this a minute ago so it's like over 24,000 commits and not even half of them are done by Googlers and 12,000 github stars which I guess that means it's a high project we have a lot of partners it's not google by itself we have very important partners like Curro s but also microsoft with asia and IBM and so on so basically it's a bunch of cloud people getting together and trying to do something fun so how does this work well this looks really similar so you got your config file and you have your container image docker image rocket image or app see image let's go with docker you send that docker image to a darker repo dr. repository or docker hub then you send your config file to the cube Cooper Nettie's master kubernetes master will talk with one of the schedulers this is something that you can change we have scheduled by default but you can change whatever you can have a wireless cable you want you to have and then it will send it to one of the machines in the cluster and say hey cube let execute this this image culet will go fetch it from the Reapers from the repository I start securing it that's it ok let's create a kubernetes cluster so these actually container engine container engine is a managed version of urban areas so pies deficit gonna say I want these machines i want three of them and i want all the things working and that takes like two to three minutes so let's see what this is doing ok what is Cooper night is good Burnett is there's basically three or four concepts and with that you get the whole thing first we have pot and put our groups of containers very often one but sometimes more why do we have pots because if you have some containers that are supposed to live and die together it makes sense that they are together all the time one instance of this could be you have an application and then you have a log collector if the application dies once the log collector is there but the application is that what is it doing there nothing should just remove completely this I like that happens all the time right so we have a pot but I'm pretty cool because they have unique IPS so now it's not your host or your machines that have IPS is your pot and if you have hung red pots in one in one machine every single pot has a different IP why is this important cause it means they can communicate very easily regardless of where they are they have the same AP regardless of the machine where their execute being executed which is pretty good but even better you don't need to fight for who owns port 80 every single power every single pod has port 80 by itself so that's pretty cool then we have labels and labels are just add you label stuff that's it done and this sounds really simple but it's actually super powerful this is one of the things that board doesn't have and we add it because we realized I was really powerful on it and we needed it so what you do is you say i'm going to use labels to say this part is a front end and it's version 2 of the front and by the way and then we can have things like replica controller and a replica controller you will say i want two of these things and the way you say these things is by saying the labels i want two front ends of version two then you can say 911 it will modify it now the important thing is that you don't say start one or stop one you say I want to and why is this important well let's imagine that we have four nodes and four pots and by chance we have one pot permission and somehow catastrophe strikes and one of the machines is gone now we have we said we wanted four pots and the crew Burnett is master sees that there's only three running so what does it do start a new one you didn't have to do anything because you didn't say start for you say i want for so anyone will be starting some node that's it quite simple and finally we have services and services are used to be able to solve that problem of you have a bunch of pots they keep on dying and reappearing and moving around what IP do i give to my clients well you give the IP of the clan of the service so that service for they will do will do load balancing across a bunch of pot and the way it targets those pots is via labels so we'll say I'm targeting all the front ends v2 so you have one extra front of you one so if you have one extra front under this video that service is not sending messages to that one but then you can remove one of the labels and they just all the front ends and a good work Joe so it's very flexible you can do whatever you want we'll see that in a minute okay let's deploy our amazing server our yeah it's up first thing you're going to do is I'm going to do cluster what's the name part is that fast so this your doing only once it's basically saying I'm going to be using this cluster so the cube CTL which is a cube controller tool will be managing that cluster you may have many more than one so it's important to say it oh yeah that's uh well it's gonna be a little bit slower okay zone okay clusters cool go okay now going to cube CTL get pots it's gonna say there's no pot which makes sense could there's no parts yet but I can also do I have an alias so now i'm going to start just typing k because you know it's called shorter I get nodes can I tell you there's actually three node 0 running and they've been running for the last few minutes and you can have labels on those two so you can do pretty cool stuff cool so how do I run my web server on that cluster what I'm going to do is I'm going to have a web server llamo and this looks a lot of code but just because I have some things oh by the way I need that's magic don't pay attention to it yet I have visualizer and two for the visualizer I had made a data to everything that I generate to say I want to visualize that you don't need that in general the important things here are these are replicas controller and what I'm saying is the name of a really control web server v1 I have one replica and what I want to do is the selector is things that are named web server version one that's what I want to run and then when you need more this is the plate so that's a pot it's the metadata its labels name web server version 1 and also want to visualize it and respects that's an interesting part its web server and then we have that image there TCR the yellow / that festus that phase fires 2016 web server what is TCR that I yo does anyone know what DCR is one person to ok TCR is google container registry and this is very useful because if you're putting things on docker hub by default or public meaning that i can go and pull them and find your code yay that's not really cool so we offer google come back dr. Conte docker container registry that is associated to your own project and no one else that your own machines are able to access it so it's pretty safe ok so we're going to need to put our image up there so I'm going to tag my web server as that thing version and no Persian docker tag Wow dr. tag web server cool dr. tag dash f I'm really not good at this today docker tag darker tap ok I'm gonna make a little bit smarter web server gonna take it and now dr. push this and this it's going to fail saying wait docker we don't know what GCR is might take a long time but it will fail so you just say G clap do this and we just push it and now we're sending we're doing that first step of sending that container to the to the doctor registry there is a darker registry there's only four everything worked cool now i'm going to do create you're going to say create that web server llamo this is my my tribes that create that be a picker controller gonna create it create it cool get pot there's one part is starting okay replica controllers this is one replica controller day is there we have selectors and everything also not that one know what that one look this one no okay one second that's supposed to work okay well that's going to be painful okay so we have one rep seeker controller the blue one one pot the the white one cool now what if i want to have more of those can come here and be scaled a replica controller web server v12 have a replicas I know 10 it won't fit but now you have 10 replica controllers boom done let's make it a little bit less than that let's make it only 5 which nope I again let's make it only five so it actually fits in the screen and now let's choose one of the the ones that survived get thought and be really evil it just delete it so what happens if i delete this now i have 5 and back to six which that's not what I said I said five so now on this appears what happened actually said delete this pod but the pot was shutting down while he was shutting down when you is still there but it was shutting down so we started a new one before that one died and now it's dead we remove it what happens if you lose a machine exactly the same you don't need to care about that which is pretty cool now how do we access that well you can do something like I'm gonna do I'm going to start a cruel pod cool part is to something that allows me to do curl it's just a pot and now so you had to get pot you see there's the curl pot I can do exsec dash IT Crowd sage and connecting as an ssh into that pod and now i can do curl to whatever I want so I can be here and say give it the pot again we're going to get this one described that pod that's a lot of information just give me the IP I really have issues using this ok that's the IP I can come here curl that one hell of the fest my web server is working but that's an internal IP right and that's only one of the pods how do I give access to all the pots all the time regardless of them dying that's what we call a service so our service everything it says is we're going to create a new service I was going to call it web server it opens the port 80 we're gonna mean we're naming it HTTP and then we're creating the type its load balancer and when we say type is load balancer something really cool happens a container engine it will create an actual load balancer with a public IP so everything and everything inside is private but you now have access to those so create now that one create service service is created and now we have that server there now it make it a little bit bigger you will see that there's an IP there that IP is private right now but what's going on is Google container engine uses an API call to Google cloud platform to say create a new load balancer and give me the IP so in a minute or so this should work in the meanwhile we can actually use these IP from our amazing crockpot robot so we can curl there and it keeps on working and every single time is a different part that replies how do we know that you trust me because i'm a Googler now that's not good enough so instead what we're going to do now is oh I want my web server to also down me with which web server it is so what we're going to do is we're going to go here modify the code and i'm going to add at the end get the environment variable hot name now go as linux go build in the meanwhile here you can see that we got the public IP so that works that's Rico and darker bill actually talk of build okay push all of those things already did it before so you don't need to see it now so instead of what I'm going to do is I'm going to deploy i'm going to move we have the version 1 and version 2 i'm going to create a new replica contour and that new replica controller is actually pretty similar to the first one the only difference is the name is vito it uses version to version 2 as labels n version 2 for the docker image that is the only thing now I could create it if I created this I could end up with five pots of version 15 pots of version 2 and that's service serving to all of those that's not really what I want what I want is to replace those five that I have with five new ones so i can do that and to do that is actually free awesome rolling up date a date period is two seconds and the service is called web server v1 and I want to move it to veto and now what it's doing its saying gonna create a new replica controller and I'm going to start a new pod of version to you cannot really say but there's at two right there and once I see this is one is running I'm going to stop one of version 1 then I'm going to do any one version too so you can see it here actually let me see if I can put both together that might be a little bit too much no my work now okay okay so we got the version v2 to be too we're going to take the v1 2 B 3 and so on we're going to keep on moving now the cool thing is that if in the meanwhile we have something like wow to curl that sleep one done you're going to see that we're going to get something did I break something Wow Wow to curl HTTP that URL sleep one done hmm while is broken okay maybe curl is broken let's see curl I think that my wife I stopped working oh that's why okay let me use my personal Wi-Fi that might work a little bit better I don't know how that how that's working because it doesn't have access to it so I'm going to confused everything is down the one cloud demos without Wi-Fi quite hard nope everything is down wait this is working yeah okay so why is this work I mean using the wrong one oh yeah I'm totally using the wrong okay so that's why may be too late for that okay ah you're saying the new version already okay you could have seen that it was moving from the phone version 10 there you go we still have some of the pods our version 1 so we're going to keep on seeing hello deffos by itself but otherwise you're going to see that we actually get the pot ID and it keeps on changing all the time so we're actually doing load balancing across all the versions as soon as we get to zero which could be quite soon we took it down to not for two it's gonna take a little bit more because the Wi-Fi is really slow so it makes take some time to to manage it but as soon as it's done what it's going to do is going to remove the replicant or for web server v1 and then we're done if we wanted to back up everything you need to do is to do exactly the same thing but backwards web a web server v2 and the file could be for version 1 so you're moving from the truth of you one that's it that's everything you need to do I think this is pretty cool if I was supposed to deliver like deploy stuff these kind of things is what I expect cool let's see we're kind of short on time okay so communicating across containers we now have a go binaries running in production they're running all the time if something goes down just start up again if your machine goes down start up again nothing but happens we're all happy exit that we need to communicate between messages and there's different ways of doing it one of the ways that a lot of people are using is rest just use rest api is everywhere and rest api is are very good for public api's but i could say that if you have something that is needs to be very performant rest is not the best option because it's actually it has a lot of things that you're actually not using HTTP is a pretty complex protocol so using just HTTP for that it's kind of hard on top of that you need to adapt your api to be i get a past a foot or delete if it's something that doesn't match that well you have to choose one so it's kind of weird I google we don't use that google will use stubby and stubby open-sourced it's grp see the best part who knows what grp c stands for exactly I thought it was google remote procedure call but now it's grp see remote procedure calls it's a fractal which is amazing that blow my mind okay so what what is your PC grp see basically the main idea is we want something that will be efficient and easy to use it needs to be dramatic meaning that you don't need to end up writing really weird code to build a server or a client for this it needs to be performing and scalable which means that it needs to handle things like throttling if a server goes down be able to send it somewhere else load balancing but also needs to be performing so in cheney it should send as many as as little bits as possible the amount of data we sent over the wire will be much smaller than what we would send with rest and finally microservices need this if you're doing microservices of a rest there's going to be a bunch of things that are going to be really hard to manage especially versioning that's one of those that can be pretty hard there's ways of doing it but can be pretty complex so what is your obviously it's an ideal intermediate is an intermediate design language or domain language I'm actually not completely sure about that one where do you describe your API if you've used swagger gr pc is like a very very very very boiled down and simple version of swagger you describe your API I simple way that's it and then it generates things for you it generates code for the server and the clients for the server we don't really care that much because you read a server once but for the client that's pretty cool because when you're writing the client you're going to be able to generate code for Python for Java for objective-c whatever also it supports point-to-point so hey get requests but also it supports streaming and bi-directional screaming so you can have a communication between two servers that keep on sharing data with each other which is something that tends to be quite hard unless you're doing it by yourself so the way it works we have servers we have clients servers implement some interface and the clients use some stops which is basically like a generate auto-generated library that they can use to do the calls so to get started you just write a profile you compile a generate code fill the gaps easy and that's what we're going to do like with support we have three native languages we have C go java all the rest are Dining's for C so if you want to do is JavaScript will be a binding on see which means that it works very well notch is not on chrome yet we're working on that the way it works is using the message receive a response exit that on top of that there's not only binary blobs there's also made a data that in this is what helps you manage versions not only you're sending hey like 42 you actually saying this is this message with that ID version I don't know what and that field has the valley fortune so it's slightly more expensive than sending a blob but it's Cal's much better if you have a stream you sin limite the metadata ones and then all the blobs which is pretty efficient I said that gr pc works on HTTP to how many I mean there's been talks about a TV too so how many of you have not know what why HTTP two is cool now that many people okay I have a HC feature is awesome and I don't have time so I'm just going to show this demo especially with crappy wife at is going to be awesome ok this is HTTP 10 we have six connections downloading tiles and you can see how they are falling one by one actually six by six because that's what chrome does i think it's 6 i'm not sure with HTTP tube we send all the requests we get all the responses that's why it's a bit to school and now you can do that for your messages so what we're doing is sending protocol buffers over at cb2 we know why gbg school what is and what is protocol buffers protocol buffers are a way of encoding data that's it quite simple it's like encoding data in blobs in binary blobs but with metadata and the language to running it that helps you understand what you're actually encoded it's what we use a google for everything we have yeah like probably over 50,000 different definitions of messages everything at Google is proto buffers we store things as protocol buffers within things over the wire protocol buffers if it needs to be encoded it is a taco buffer basically and the good thing about it is that you can use it for many things and it supports versioning very well so you can have something you storing that binary in a data store and then one year later you still up able to read it because you have different versions but they're still compatible why protocol buffers their compact versioning generates idiomatic code so you're going to see how to use it and go very simple and they're strongly typed I'm a static that I strike type person I like compiler errors protocol buffer will gives you compiler errors which is also ok we're not going to see this we're just going to continue last demo and I have zero minutes do it so it's going to be quick okay so what we're going to do is run up in this okay i have my pro message it's say my service calls say and you say you tell me what to say and I say it back to you simple the request has text and result is sound which is pretty cool so why I'm going to do here I'm gonna change to my local vm and i'm going to say gr pc go i'm gonna do prada see so that's a compiler go out go on I just realize that grp see say the proto and that generate that some go you could do the same thing with prada c java out it calls these say the proto i could generate some java so compiler is quite easy to use so go doc generate two main types request a result and then a bunch of all the types so we have nice a client so that will generate that will generate a stop for the client and say client so let's see godox a client it generates an interface that has a method say which is exactly what you expect is what the method you will go and we have something similar for say server this is the one we have to satisfy on the server side so you need to do that satisfy one on the other and that's pretty much it one this compile i can go to my say server now to my server maint go so main the go i'm going to go very fast around this but basically you open a connection saying i'm going to be listening on port 30 60 60 which is what we use for for our pc you could use whatever else you want by the way and then i create a server i purchased or mice a server which is this thing which is a server which is a type on which I define that method say that's that's the whole thing I need to do and then say that where the magic happens I call random stuff I'm going to deploy it create server the demo create service the demo and now we're going to see if it's running is it running yeah service server now I can go to my client I never gonna show the code because I'll have time go build oh I need to wait for the public URL to be able to test it oh that's sad but I generate a go I go client you could generate a JavaScript plan you could generate a Python client it's quite easy to do really get services no no this demo is cool I want them I I stayed till 3am yesterday to make it work I'm gonna wait for this ok pleione back n equals this 30 60 60 halo def s Paris and knowing how this works time at five seconds ok a lot of force Paris awesome so what I end up doing is generating this thing that could not run on a pension because I'm calling text wave which is a yen I ubuntu a package that i installed so to do that I end up running in somewhere the easiest place to run it what I have meeting this is place to run it and of course on container engine if that server died for some reason I don't care it will restart anyway so these do all the things we've been talking about today there's a bunch of things that you might want to learn if you're interested about go on g RPC specifically there's a very good talk by similar hush money from the Gold team and he talks about how to do bi-directional and cancellation and all of these things that you actually want to do when you're doing real things on production with 45 minute you don't have time to do real things in production i will share at this this lights for the rest I'm I have to wait but don't worry how to get those lights find me on Twitter send me an email or ask me a question thank you 