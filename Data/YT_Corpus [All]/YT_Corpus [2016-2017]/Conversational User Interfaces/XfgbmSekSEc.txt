 you thank you very much now voice Services is not something that's going to come eventually voice services are already here I mean think about it you've got your handset you've got voice services on a handset there are voice services on TV remote controls now there are voice services and well Amazon echo the thing you put in your living room there are even voice services in your car imagine what we can do with virtual reality and augmented reality headsets and voice control so it's not a matter of if you're going to design your own voice service really it's a matter of when you're going to design your own voice service and that's what I kind of want to talk to you about today is kind of help you get started in thinking about that and help you get started I want you to shut your eyes and imagine okay actually I don't really want you to shut your eyes I've got a good black screen here that'll kind of suit be suitable for that but I want you to imagine that you're in the United States and you've just driven your car into a fast-food restaurant and you're gonna order from the window of your car okay good cuisine aside just work with me on this one the automated attendant instead of being a nice human being at the other end it's an automated service the automated service asks you hey would you like chips or salad with their order and you say yeah sure I would next thing you know it does the audible equivalent of a blue screen I've got to imagine that's a really very rude sound when your audio service blue screens but but white white is this why does this happen should you not have said I would are you sure have just said yes or no well the problem is is that not all UI is created equal the poor developer of this voice service did the right thing I mean he looked at a successful piece of software as a touch software that they use inside at the cashier stand and he just took this UI and turned it into a voice service I mean that makes sense right well not really because visually we are forcing an either/or choice here you've got to pick chips or you pick salad before you can actually continue so here yes isn't really an option but with voice services you can't force that quite so easily and what he asked and the automation was a presumed or an assumed either-or and my gosh people are gonna say the craziest things you don't have the same constraints that you do in this scenario and my gosh we learned a whole lot about what people are gonna say when we were designing voice services for fire TV it has a button you can search for TV and video and stuff and the Alexa service basically which is your digital assistant that kind of lives and responds to your voice in your kitchen one of the really important lessons we learned from that is that voice recognition is not the same thing as natural language understanding knowing what you said is a lot different than knowing what you meant and the key it turns out in a conversation to figuring out what people meant are the interactions in that conversation that's the key to real understanding and what does that mean really interactions are the bits of bits of things that you use to interact with a customer they're the things that I say I wait you say something back to me there's those fragments that when you string them together actually become conversations and conversations are those things that ultimately we're going to drive value to your customer through the application of your service so what I want to do today is kind of go through what we've learned as key design principles for those voice interactions the first principle is that interactions should provide high value wouldn't you like it if all of your interactions and voice provided high value that would be kind of unique and fun well we'll dig into this a little bit later um interactions should grow over time they should actually get smarter and evolve a little bit as you learn about your cost you should be able to speak in a very natural conversational tone of voice of the service the service should be able to understand what customers are saying most of the time and of course the response that a server gives you a voice service gives you should be very natural and easy to understand in a conversational tone so let's start digging in at the top of that list what does it mean for a voice service to deliver high value well let's take a look at a utility chart here I'm gonna go ahead and start on the right hand side with low utility browsing now browsing is pretty much what it sounds like you you get this huge result set in the worst case scenario what you're gonna do is read your poor customer a list of Google search results Oh painful please please don't do that on the more useful side of browsing you could you could make a voice service some movie times tell me all the new movies that are playing and you'll get a list of all the new movies that are playing better than browsing is telling you can do something easy like tell a a quick cat fact or you could tell something that's a little bit more of a constrained browse movie times tell me all the movies playing at my favorite theater then we move on to searching where you can apply multiple filters and search criteria to actually get some information that's potentially actionable movie times tell me when the Martian is playing at my favorite movie theater now all of this data is great but it's got to be actionable you need to be able to close the loop on this if you don't close the loop and actually do something what where are you leaving your customer your customer has to stop what they're doing with your voice service and go find a screen somewhere to actually complete that interaction that's a really lousy experience because they can't just go to a screen to complete that transaction they've got to go to a screen and pretty much start all over again go through all of those steps they've just gone through in a voice service to actually get to the point where they can do something so think really high about how your voice service can turn that actionable data into actual action something along the lines of movie times purchase two adult tickets to the 7:30 showing of the Martian at my favorite theater now that's actually accomplished something for your customer and that actually adds a tremendous amount of value to your service now if we were doing this in a screen you I I mean that would be fairly simple right you have a bunch of movies you pick one it shows the theaters near you you pick one or maybe your favorite theatres are saved you see the show times you pick one and then you just simply increment the number of tickets you want and you click buy as humans we're really good at processing a lot of visual information sorting and filtering that very quickly not so much invoice so invoice very realistically less is actually more and we can start by by getting a very targeted interaction and make that smarter and make that grow over time for example I said my favorite theater well that presumes that my voice service has already learned what my favorite theater is how awkward would it be if it had to ask me which theater I wanted to go to every time that absolutely kind of breaks the rule of a interaction that can do more with less transaction time one of the things that I worked with was capital one on getting smarter like that is actually a count linking with Capital One they're a big us-based credit card and financial services company they wanted to do things like checking the balance on your account paying your credit card bill and doing other high-value things like that but the first thing needed thing they needed to do was link that voice service to your voice endpoint to your account doing that over the over the endpoint over the voice service one was kind of awkward two actually had some security issues using that endpoint to try and do validated work so what you can do is if your voice service plan form actually enables things like oh ah the sonication you can go ahead and use their toolset to help you authenticate specific accounts if not you're gonna have to build this yourself and one of the things I suppose you could do is very much like a Bluetooth authentication on a screen based service they can log in to an authenticated website or mobile app and then they could have that mobile app send a Bluetooth like pairing code to your both your voice endpoint it reads you the number you type the number in to the authenticated website it now knows that this specific endpoint with this DSN number or this this unique identifier is now associated with your account on this on this trusted site so that crucial account linking is something that you need to give some thought to how you set up and how you prompt your user to set that up when they start the engagement with your voice service wonderful and that's a key thing on how you help that evolve over time because that gives you a focused quick response that really takes care of making that business value that you're offering really front and center and really quick to access imagine how difficult it would be to get your account balance if you had to go through that authentication process every time you wanted to get your account balance that's not really evolving over time is it so I want to take an example on how to do one thing and make it grow and actually start to do that thing really well by taking what is it first a long transaction and kind of compressing it into that shorter smarter transaction so what we're going to do is we're gonna build a commute tool it's going to help you plan your your commute here in Amsterdam we're gonna build a voice service called travel buddy now when you first launch travel buddy it really doesn't know anything about you does it so when the user launches the service we're gonna ask ourselves do we know where they're starting from or do we know where they're going if not we're going to go through the tree on the left and we're going to go ahead and get that information so that we can be smarter so the user says launch travel buddy travel buddy says do we know their starting or end point well actually no so let's ask hi i'm travel buddy i'll tell you about your daily commute where are you starting from Utrecht wonderful where are you going Amsterdam hey now that I know where you're coming from and going I can tell you about your commute when you launched your current commute is 43 minutes because there's a 15 minute delay at who trekked Central that's a good high value piece of information but it took forever to get but now that we know this the next time a user launches the service launch travel buddy it can respond instantly with your commute is currently 22 minutes think about all the ways that you can learn about the things your customers typically ask for and use that to kind of short and longer interactions to get that short quick high value information transfer now what would be better is if I could refill my travel card using travel buddy or if I could buy a one-way or two-way ticket with travel buddy so they didn't have to find a different mechanism in which to do that the next item on our list is you should be able to speak to the interface naturally and spontaneously kind of the way that I'm talking to you guys right now the last thing you want to do is give your customer a list of very specific words and a very specific structure of syntax that they have to remember in other words don't be like the voice services in my last car okay I love having voice control in my car I really do but the way it works my car's you you'd press the button on the steering wheel Bing what I want to say is plain 97.7 that's easy it would play a radio station for me right but no Bing entertainment radio play 97.7 oh sorry 97.7 SM why the service couldn't figure out that 97.7 could only be an FM station it wasn't an it's not a legal AM choice why does it force me to say FM well because when they coded this out on a screen well that's just the way it worked right that was a logical flow you started with your main menu you went to entertainment you went to radio you chose a.m. or fm and then you picked the station you wanted to listen to right again in a screen UI that made sense that is not how you naturally converse with someone when you're talking to them what's worse is now that I've just tuned to my radio station I want to call a friend of mine so I can say call Bob Smith what does the car tell me Bob Smith is not an own radio station seriously oh that's right my car exit exit telephone call Bob Smith please say the phone number that you wish to dial uh exit exit contacts Bob Smith would you like - yes please call Bob Smith okay context switching we'll get to context switching us in a little bit but that's really important to be able to hold that kind of a normal human conversation with any of your voice services I mean my car can do a lot more I've forgotten everything else I can do with my car because they don't remember the explicit syntax it's asking me for this point here on screen is really important the only thing I should have to know is a general idea of what you do you give me directions you make phone calls and you play music your service should be smart enough to figure out what my intent is from how I'm asking what I ask you to play something do I usually ask you to play Direction somewhere no not really what I want you to call someone do I tell you to play Bob Smith well unless he's a music artist no you want you know what I say call someone I want you to phone someone or as they play something I want you to be in the entertainment subsystem your service needs to be smart enough to figure out the context that the user needs to be in and make that natural now we're gonna do that by removing the artificial syntax and we're gonna do that by making it possible for your service to recognize simple requests and we're going to do that by making it easy to start a voice conversation we call that invoking your service now there are hand full of ways that you can invoke your voice service with the Amazon Alexa device the first thing you need to say is the wake word Alexa to make sure that the end point is actually listening to you okay now it's game time what do you want it to do do you want it to you know ask your service to do something tell your service to do something um use your service to do something or start your service and then do something so there are all kinds of verbs that you need to be able to recognize hopefully your platform will do this for you if not well you've just bought writing this yourself but this is very important in getting that natural language part to work once we've identified your service then we're gonna say what do you want your service to do ask travel buddy to show me something ask you know your service to do something or start this and do the variable what you end up with is Alexa you scheduled update or ask scheduled update for my daily update now people are unpredictable and somebody's gonna say Alexis start scheduled update you don't have your variable ah what do you do do you panic do you close no you recognize hey thank you for starting the service I was expecting you to pass me a variable you didn't give me one so I'm gonna prompt you for that missing variable and that's gonna be another interaction but it's not awkward because it becomes part of the conversation now you can certainly do things awkwardly if you like odd phrasing again a lot of developers who work with catalogs and structured tiers of catalogs will do this order boots hiking size-12 nobody actually talks like that but if you're looking at an online store that's probably how the catalog is organized you really want to see order so I have 12 hiking boots so try not to force your user into the data structure that you have on your back end that's really unnatural also unnatural is making really very technically accurate but impossible to say things of that your customer has to remember ask transportation service alerts for the current status of train 14 nobody talks like that what you want is you know ask travel buddy about the train to Amsterdam that needs to be something that you recognize and that you can actually express the acknowledgement for that's understanding what your user is talking about and that's why your service should understand most user requests now in order for you to do that in a natural way think of all the different ways that your customer can ask to pay a credit card bill make a payment pay my bill make the minimum payment pay a hundred bucks pay a hundred dollars pay $100 there are all kinds of different ways that using natural language someone can try and pay their credit card bill you need to recognize all of those customer intents and that's why we are gonna have to work hard at building a customer intent framework again hopefully your platform helps you build this framework if not you're buying this framework on your own and you need to figure out all the different ways someone can ask for information tell me the schedule to Amsterdam ask for the schedule to Amsterdam what's the schedule to Amsterdam what is the schedule to Amsterdam or all of the ways that somebody could actually tell you what their intent was once you've mapped out every intent that your service can respond to then it's not that hard to go from understanding each intent to figuring out the 80% rule of how people are going to go ahead and instantiate that most of the time now if you do the 8020 rule and variably the first user is going to try something that falls out of the way you didn't catch and that's why your interaction should respond in an appropriate way the first and most important thing about responding in an appropriate way is making a timely response again with a visual interface this is a lot easier because we can put up a little weight screen we can put up a little clock with him spin around if you're waiting for say a list of all your credit card transactions to come back you know you're going to be waiting for that but if someone's talking to you and they just stop you I get this kind of awkward silence and without even a visual cue that they haven't forgotten about you it gets really uncomfortable asking you know waiting so if you know you're gonna have to wait for a little bit at least let the user know hey let me get that information for you please wait and at least the customer knows that they haven't been forgotten if they're waiting a long time ten seconds or something maybe you want to throw in a quick fact about your service just so that they know that it's not dead air I mean when you're on the phone and your handset and you don't hear anything for ten seconds you check to see if the call is dropped right same thing with the voice service for Capital One it meant keeping the api's fast and I know that kind of goes without saying but what quick show of hands how many people actually write native Android code anyone actually right yeah okay I got a couple of people here um for you you never write your business logic on the UI thread do you no you don't put your you don't put your business logic on the UI thread same thing with a voice interface don't put your business logic on the UI thread start the query and then on a different thread you can say let me get that for you please wait and that way you're actually handling that in a more a much more graceful fashion now after that provide adequate error handling and by that I mean I want you to follow a couple of rules never expose the user directly to what's gone wrong because you're gonna you're gonna make one of two errors you're either gonna tell the user you're stupid okay not that any of you would actually ever tell the user I'm sorry that was really stupid but users are sensitive around new technology I mean imagine this would you like chips our salad with that yes yes there's an unrecognized response cheese back off okay that's a little intimidating and when you say that you've just told the user that they're stupid so what can you do instead um I'm sorry I don't recognize yes seriously you don't recognize yes I don't recognize seriously you you're stupid I mean no it's it's a bad idea actually that's kind of the second thing is how being the user think that you're stupid so you can't say things like I don't understand yes much better to say I heard you say yes please say chips or salad that's a much better a much more elegant way of dealing with that so also check for missing variables when the customer asks you to buy movie tickets if they haven't specified what time or what show you can go back and ask for that I said for my favorite theater did I tell you what my favorite theater was before if so I hope you remembered it if not you'll have to walk me through that routine where you go ahead and get that missing variable if the miss variables missing of course go ahead and prompt for it so here's what you know these are a lot of tools that you can use to build a voice service now does that mean that you're all of a sudden you know able to turn you know steel and to lead and lead into gold can you turn any user interface into a beautiful voice service maybe not I don't think so take for example the medical form up here on the Left I don't know if you can see the question numbers from there but that's actually question number 55 on the bottom there are 54 other questions that are this dense I mean visually it's easy to scan read what you need to and check the right boxes can you imagine a voice service reading this to you Oh painful if someone figures out how to turn this into an elegant voice service I will come and buy you dinner I'm just not sure that's possible yet so here are some of the characteristics of a really good voice interface it's clear that the user needs to respond the options are understood and you can keep it brief so let me kind of go back to where we started this conversation when we're at the fast-food restaurant maybe what it should really say is please choose your side dish you can say chips or salad holy cow that's short that's brief I mean it's even better than would you like chips or salad please say chips or salad okay that's really repetitive that's not fun but please choose your side dish you can say chips you know I want you to say something you know what your options are and it's short quick and conversational that's the right way to go ahead and solve these problems and voice services it doesn't overwhelm the user although if you're doing something fairly big like paying a credit card bill that has the potential to be overwhelming please make sure that they can say help and then you can explain all of the options and what they can say it's probably a good place to keep the users in context too we talked about the context of a car app imagine the context of asking for your balance from Capital One did you mean your credit card balance your checking account balance how do you tell the user and and let the user know where they are you can say the balance in your checking account is or the balance on your credit card account is and that helps make the users be sure that you know that they're in the right space or helps them know that they're in the right space oh yeah this okay guys if any of you read your Terms of Use to the user in audio I will hunt you down find you and make you listen to this presentation again do not read legal stuff like Terms of Use to your customer please point them to a website direct them to some other thing with a screen or they could actually go ahead and agree to your EULA the voice service is a terrible location to do that um why is it terrible again because you guys should be designing for the ear not for the eye the best way to do this have a friend talk through your user interface with your friend if you need to show them something for it to make sense you failed go back to something that you can talk about that makes sense no Amazon didn't come up with all of these things by ourselves we're clever but we're not all that clever we actually had a bunch of really good resources that we used by people who have been studying this problem for 15 and 20 years go ahead and take a picture of this some of these are actually really good resources I also want you to take a picture of this because I'd like you to go to bitly Mike Hines and tell me whether or not this information was useful or whether the information wasn't so good whether you like the presentation or not it's just a quick for blank questionnaire and you don't even need to put down your email address guys thank you very much for your time today don't forget to vote in the nd Prize Awards 