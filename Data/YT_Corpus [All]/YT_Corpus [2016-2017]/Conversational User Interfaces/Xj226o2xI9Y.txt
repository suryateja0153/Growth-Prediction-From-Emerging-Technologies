 right it's five-thirty yes right thanks for coming I'm glad to see so many people thanks for staying understand internet like the last last presentation on the conference i'll try to be quick i don't think we're going to use the whole hour and 15 minutes extra i think i will speak for about 20-25 minutes then i will give you a practical presentation of what i mean by the chat bot and then i will expect questions which i believe you will have so so basically in a nutshell that's what i want to say so the user interfaces in general is not a perfect solution for small micro services which provides some some service of functionality to technically experienced users i'm talking about programmers developers architects whatever so the UI is this is the summary of the of the next of the next hour of my top you I sucks and chat bot is a perfect replacement for the UI and I'll show you I guess your technical people here so i will be you know try to speak and i'll try to be as technical as possible so this is a simple diagram this is the only diagram in this presentation is it clear do you see it okay good so the left side as user it's me who's who's going to to use some servers in our case i'm going to talk about let's say the service division on the right side is a micro service or something which helps us to manipulate some resources in later we'll show you the practical example and that's going to be a manager of a number of servers a manager of a number of docker containers but it sounds really important what's important now is that the user who stays on the left wants to do something with that service on the right the traditional approach to do that is like this so I'm the user are making a request an HTTP request whenever using the browser I'm talking to the UI the UI is a piece of the code of the component and side to serve and then the server's gets this request and does something with the database and with some assets in our case there's our topic containers or some sub machine whatever so this is a traditional way of how this microservices work and this is what i think is not really perfect and can be replaced by this approach on this diagram you see that the servers and the user are decoupled now this the user is not talking to the server directly instead the user is talking to some message hub which can be slack which can be IRC or which can be in our cases github so it's a place where two components to alpha two parties can communicate one party is the user another party is to serve so instead of instead of me as a user being a client of this service and talking to the service instead I go to some messaging platform I post some information there and I get a response from the content from the service which is in this case is a chat bot so you probably know what chat board gives when you go to some little slack channel you may see some bots which are replying to your messages and giving some information I think that's what I'm trying to present that the future of micro services that the better architecture for Michael services is to design them as chat BOTS and why I'll give you a few practical reasons right now but that's what that's what the concept is about so instead of being a standalone so the standalone solution which has an UI which has a HTTP interface where the clients have to connect yes the service becomes a client itself so in this case the service is a client of this messaging hub so now you see the arrows the errors are coming from the user of and from the service up they both are clients of some messaging have hub of the slack or whatever it is in this case we have a client and a certain this is from the past this is how we're doing you know this is how it was before and now when we have this perfect messaging platform messaging have like slag like github and a few others we can use a new architecture which will which will give us a number of benefits which we'll discuss right now so is it clear I mean technically how it worked like what I'm trying to what I'm trying to present alright so basically this is a summary so we have the client versus the server we have before we had a clock we have before our our micro service was a server serving requests and now it's a client for the messaging platform that's a different it's a very important difference which actually will give us six bands so I'm going to summarize six important elements and that's going to be it so that's my presentation about I'll show you six important things which are which this solution gives us and then I'll show you practical example how we implemented that and how it works for a year and have for us right now and the service is being used for over three hundred users on github so I'm not just it's not just theoretical idea it's a repo so a practical one so the reason number one the first reason is why it's good why this being a client is better than being a server is that you don't need to be fast because now you're not serving requests you're not expected nobody is expecting you to add to give answers in a few milliseconds which people usually expect when there is a micro service so they expect to make a connection to the micro service then get an answer of in 20 milliseconds or maybe like up 200 millisecond but they would not expect they would not like your service if you give an answer in two seconds that will be the micro service which basically is really badly designed but in this case because you recline now nobody cares about your speed anymore because in the chat we don't really expect this bot to give us answers in a few milliseconds we just post a question to slag okay one second two seconds five seconds we get an answer so this the problem of the speed on how fast it should be done now we put this problem for the client shoulders so now the clients will look the client will expect us will not expect us to miss to be fast so which is good for the design of the micro service which is easier to design a micro service where we don't need to be fast it's just first the first advantage the first thing we as architects of this of the solution will get and in our case in our you know practical chat board we we have that too because we are dealing with with service which are staying somewhere and we need to connect to them we need to get some information from them this is all SSH tunnel tunnels and it's not really fast so it's really difficult to make if you know our set our service is kind of similar to Travis which is probably know the continuous integration online solution and when you go to services like Travis and you want for example you want to see the log of what's going on you open the web page and then there is JavaScript loading some information and cake the time so it's not like he needed you can open the page and immediately see the logs of the server because when you go to the page they need to connect to the machine they need to download the data it takes time that's why they need to develop some JavaScript they need to somehow you know keep you waiting on the web page while they're going to some extra resources databases servers containers whatever over the network in our case it's not really important because nobody is expecting us to give answers immediately to stay on the web page because we communicate through them through the messaging platform you post a question we give you an answer when in a few seconds or maybe half a minute sometimes it's not really critical for the architecture in perspective you don't need to be fast it's a huge a huge game for architects the second reason is there six reasons and total the second reason is you don't need to look cute anymore which means that there are no web pages anymore people don't see you when they talk to your slack worm or at github I mean they're just messages so you don't need to design your website like to look nice to attract your users you all you need to do is it the system to work to do what it promises to do but you don't need to worry about the colors of your buttons and then how they are located which is a typical problem for for small Mike reserved for small companies who design some micro services which are useful but they look ugly and that's why they never get to the market because now the demand for what the interface is quite high we have really beautiful websites and really beautiful web services and people would just will not use your service if you don't design it and like perfectly graphic which is also difficult for small you know small small small companies small web services in this case you don't care at all you don't have a web interface all you have is just my name the name of the bot is I don't a BC talk to me on slack ask me a question I'll give you an answer so there is no UI at all which means that people will not complain about the UI so you don't need to look cute that's my that's my basic point this is the second advantage for me as an architect or web search I was creating this I came to this whole idea of this chat board from a practical perspective I needed to create a solution for my own needs we have a team of programmers I have a team of programmers around me so we needed a continuous delivery solution which will you know manage at these docker containers etc so but I didn't have a lot of time to design an imperfect way so that's why I I jumped into this idea and just was it was just perfect for me because it was like one developer just one week of work I don't have time for the perfect you I but I don't need it now I just created a bot which just talks to you and nobody knows what's the real designer is no real design that's a second question second advantage which i think is again important for architects it's maybe not so important for big companies who really have resources and funds to make it perfect but for us I mean for for people who are startup founders or you know just making something for something simple and they want to put it on the market this is an interest like very critical benefit number three it is much easier to scale why it's much easier to scale because the serve is the web service that the biker service is now a client not a serve so it's much easier to create 15 clients talking to the same messaging platform and somehow synchronizing their parallel work instead of making a server to handle multiple requests at the same time on 15 machines but different different different problem it's different scale of the problem just creating three different servers and they will talk we just need to synchronize on a date on some database that's it we're done we just copy five different we created this in Java so we just copy this five Europe we just start five or three hero who machines or Amazon machines and that's it and they basically work with the same central database we use Amazon dynamic TV so just just three instances connected to one DynamoDB to a number of dynamite dibby tables and that's it the problem is solved I mean we don't need to worry too much about how to handle a huge traffic in parallel when people are coming to us and coming we need to you know somehow blast to the load-balancing make sure this traffic is no loss to make sure that one server is perfectly loaded while the other one is idle you know this problem which is really typical when the web service more or microservice over web system just answering your quests and being a cert in our okay is like I mentioned before it's not a server any points climb and being the client gives us a huge advantage in this area it allows us to to be extremely easily scale horizontally vertically we can make this machine's bigger we can make many machines it's really easy to it's really easy to build a scalable client comparing to a scalable server that's number three and and the client will not see that again it's really like the whole burden of scalability actually is now on the shoulders of the messaging messaging plan so if we have a million clients then they will all be connected to the messaging platform and the PlayStation platform has to be strong enough it has to be something big like like I'm saying that the slack or something like that big company which is not the problem now we have these companies now well we have IRC before where it was like that it was it's on the market for I know how many years maybe longer than I am so but it was before like that but now we have commercial solutions which can handle a lot of traffic and they will basically not be against you talking through them so slack you just connect with them and they will allow you to put all of your to put all your account customers on this this discussion channels so the scalability problem is kind of it's kind of gone in this case because it's not completely gone you still need to think about how to parallel your service how to make them work in parallel but it's now easier to to make its cable this is number three I believe right yeah that was number three this is number four but in total there is six so we are in the middle number for the bugs are not visible which means that people will not see I mean users will not see the problems that the defects of your micro service as often and they will not complain as critically as if they would use them through the problem in the browser when the user sees a stack trace it it means that the server is down and the user will complain they will tweet about it it's going to be it's really like serious consequences because it it will it will visually show to the user then there is a problem because because they expect you to answer immediately they expect you to have no but they expect you to be really reliable in order that in order for them to use you in our design whether it's when it's a client then the bugs are we just I just know it's worth at all the year and a half of work of our service we have bugs we have them every second week or something sometimes something goes wrong and but in most cases people just don't see them they just don't know that there is a bug if they post a message on the pond on the chat for example then we start answering not in five seconds as usually but in five minutes they don't really care that much some of them may complain and say you know I just noticed that you're too slow for some reason that's it but baby there is there could be a serious problem on the server maybe the servers extremely slow for some serious reason but the user don't know that the user don't see this so the but become less visible that's my so the people just people just don't see that something is something goes wrong that's the benefit of the chat board in general I be I don't know other channels like how they work and how they're designers feel this a benefit or not but I do so I'm the architect of the solution so I'm only toward a solution I see the logs I see the servers how much do you know how much the memory and everything at CPU they consume and I understand and I I have this you know the errors and stack traces in looming my logs but the user users complain extremely oh not really off like sometimes when something really goes wrong and we just stop answering when the bot stops answering then yes the user will complain and if you like a cough an hour in an hour they will say something is wrong i was expecting an answer in for half an hour is not there not an answer for example or i'm giving it a weston sand something coming back which is not the answer i was expecting but the majority of problems especially minor problem they're just not visible so that's that's the that is the number thing number for number five yeah it's number four so the bugs not visible which gives me as an architect a lot of a lot of flexibility in actually making changes to the solution so I'm not really afraid that much of breaking production which is a typical fear for architects and other people who develop something live in this case it's not really that critical because i'm not i'm not i don't have the traffic which is coming in which is a you know typical situation work or the web server the web service is expected to be online full time and online answering whatever comes in in this case i have some i have some delay in answering i can't wait for a few minutes if something goes wrong I still have a few minutes maybe a few hours to fix stuff and then still put it online may most of the people will not just see the problem most people will not recognize as something goes wrong that is number four numbers number five benefit what it gives me as an architect of this solution everything that is happening is traceable because we're talking through a messaging platform we're talking through some messaging system then all requests and all responses from them from the service from this web server microservice everything we can trace back and see how it happened for a year back which is we and then you will see how people were talking to this micro service and how microservice was replying back this is something you cannot get if your work with you with your micro service is it is an HTTP paid as an HTTP endpoint or or web page you just you can design some logs you can you can make them really powerful you get a lot of information in the logs but how much time and money will that cost you to trace everything and how how transparent it will be for ya yep yes that's right those arbitrary point it answers your requests so you post questions it answers your questions no it's not requesting that's the point so this is the central place which is a message hub it's not requesting the data that the micro service is just listening to life connecting every every minute or every few seconds and checking do you have something for me do you have some new information do you need we have some requests for me so I'm acting the micro service is acting as a client not a certain so the HTTP connection is happening from here to there not the back not the way back so not the slack is connecting to me I am connecting to slack and saying you have something new for me in this room but i'm not using slacker using github so until half I'm connecting to git hub every minute and i'm checking do we have some new notifications this is the api of github and github says yes we have three new messages with and then okay i say okay this message I given through here and we're here and this answer there that's it then I connect again and say if you have something new phone so the kid huh doesn't know what the kid have doesn't come back I come but I connector pin habit I check what's new for so it's like a mailbox will be basically so I'm just checking the mailbox do you have some mail for me do you have some requests and I post some information on their back so we are communicating lights through them so the mailbox or Islam some messaging I'll show it click in practice you will see technically hard work but here the point is that we have the law if it's kids habits a ticket in the github you probably know how github works they have ticketing system so there's a ticket in this ticket I post on the user post something and then the service post something else and then the user to post something else and then we have this conversation which stays there forever we can get back to this conversation in the year and we will still see this whole it will be completely transparent and traceable for us we will understand why what why this happen and what exactly happened we don't need logs for that mean we also keep some locked but this logs just get destroyed like every month because we keep loads for basically for security or debug purposes so something like that for technical reasons but this load is for understanding how our micro service was used so I'm talking definitely i'm talking about micro services which are not i mean which are not time critical and you we cannot implement like that a micro service which is supposed to give you some information really one millisecond but these micro services are not well it's a different category i'm talking about services a lie which where people can actually wait for a little bit in that case this whole presentation makes sense so the traceability is important for me it was really important because I can see how people communicate with the system what they say what the answers are what the problems are which I believe lament this whole thing myself inside this de microsomes I can make these communications inside but in this case I will just replicate the github inside my my solution I will basically copy the functionality of github or slack so this login feature logout feature restore the password giving the email email notifications formatting of the requests how to render them online that's a lot of functionality which is already implemented by github or by slack or by other messaging plan so why making it a game for us I mean internally to basically duplicate this functionality it's better to reuse these public services like github or slack and we use this functionality which which gives us the traceability which is really important so seeing the log is an important thing and I call it traceability and the last one the last benefit number six it's easy to integrate which is probably the most interesting benefit maybe not like very practical from the first side but what's interesting here is that if you design your service you might preserve your micro servers or servers a web service whatever if you design it that way like a chat board you will be able to integrate it with other chat BOTS and they will start talking to each other not only people will talk to chat box but Jan wats will talk to chat bot so I designed my child board will understand this amount of commands you design something else which understands another set of command and then we can start talking to each other without being connected through restful api sore Jason request an xml request we're just going to talk the way that people will understand it so the users will be able to see how this chat BOTS communicate to each other to perform some you know some real task and to do something in reality that will be the final level that's the final goal this whole project that the error of chat box is coming a thing and we will have more and more of them and they will start eventually they will start communicating to each other and people will start designing their systems as chat BOTS or like as chat BOTS who are able to understand other chat pods maybe there will be some language for that maybe there will be some standards for that I don't know that's for the future but now I see that we have this we have that in our in our business we have not just one chat board we have a few other chat bots which help us on different tests not gonna describe them now but I'm saying that we do have the solution a little bit we're starting to there so we have a number of child BOTS and they start talking to each other and why it's so beautiful why it's so interesting it's a little bit slower of course because this message my message it takes more time than instead of they would just make Jason requests to each other and just get an immediate answer but it gives all the previous five benefit tours it's easier to design it's traceable it's a it doesn't need the time to design the interface it makes gives us all this benefits and we have the solution which is extremely skilled that's basically number six and I don't know what you think and then I'll show you the practical example of how it works and then we'll have questions and then you can follow me on Twitter on Facebook and github so what do you think I don't know that it's a replacement for you I but I could see how it would be really handy for a PRS that don't have you are so maybe something that another microservice or a service bus would call so if you need to check to see if it's up or you need to get data out of it then it would be nice just to be able to hit it from slack or github or whatever you want it to yeah I wouldn't say yeah like that's right I wouldn't say it's a replacement for like a I wouldn't say it's a replacement for all web services for all microservice like I said they're microserver let's say dynamite EP it's a micro service we can call it that way so the micro service from amazon AWS it promises a response in less than 20 in less than 10 milliseconds so definitely this chat or the approach is not is not the way to to do it but at the same time the Amazon that did I know my GP they have a console so call when you go there and then in desk in that console you click the buttons you manage your tables you see what's going on and this console now it's more powerful but it took them I don't three four maybe five years to make it really look more or less acceptable and how much money in the beginning it was horrible it was difficult to do anything with this tables was difficult to manage and they did it in they did it through the UI instead of making a pot if they would make it possible for me to talk to this DynamoDB web service through some chatting through some chat panel I would immediately get the full functionality out of it they didn't have that it wasn't possible to do certain things through the UI for a few months or a few years I was one of the first users of that economy and at the beginning few years it was it was a nightmare it was difficult to work from the console because some operations were just not available or they were not just you know perfectly designed it was difficult to understand how to do there so if they would introduce a chat board for the for the management of the time going to be like create table drop table check humming lines are in the table check the performance of the table all this kind of request that would be easier for them and for us as programmers you know to communicate with them of course there are certain part of dynamite EP which needs to be fast extremely fast in that case yes it's microservice traditional approach but there is no UI there it's just a just ajust a JSON / XML end point where you connect and get an answer but we are talking about you I especially for services for programmers I'm not talking about air being arrogant need should have an interface and then people will not just chat with the air because they're like they're not programmed but if the services for programmers is for technical people for architect then making a building a nice-looking you I will take like ninety percent of your budget and then the ten percent you will just spend on the real actual services like in our case i'll show you that right now in our case and you will see that if i would create a you i would spend like ninety percent of my time and effort and money just to fill the UI instead of doing the real server optimization and dr. containers and and really doing what the service has to do for the end users so yeah you see this as an answering service i think i think it they should go together the rest api is something like i said for the dynamo to be for example as an example it has to be there if if you need to give like this instant immediate answer to some certain things if your web services about rest restful answers but for the new idea i think to have a different set of terminology to make sure that you just reaching between the things that you're talking on because I think a lot of people's minds especially developers when they think microservice 18 I can connect this thing with HTTP JSON I've been posted the other they're thinking about ATP and abilities as being a definitive part of fiber services and you have a broader view what this is you're thinking of them in terms of how can I service an action from that somebody requires and so I think there's an implementation level disconnect with a lot of people and if you came up with a different terminology or if you were very clear about your terminology that early on you might be able to this presentation my goal wife's murder okay I am sorry but I've been doing this for several years now with different eight in fact exactly the same that you're doing using Europe and so pumps but the this talk about our services because the part I work on as a bunch of micro services but they're not restful at all there they receive messages through tubes and post response back to base most things a rabbit so people call microservices different things yeah so yeah that's right that's right so probably the definition of what i mean by micro service would be helpful yeah that's right that's why I agree oh yeah definitely definitely I think that's that's a good that's a good thing to show to say that this is an eternity so all this racket queue and all that stuff which is Iraq will show the Amazon they have asked us also the service for queuing this is definitely would be way easier to do it that way because in that case people can understand that as well you can jump into the conversation and see how your your chat bots are talking to each other instead of in this rabbit q it's difficult Jason messages their xml messages you need you we need to be really like like you know technical person really have your everything in your fingertips in order to understand what's going on there here you can just don't need to be really special technical you just jump in the conversation and see how these boats are talking to each other or people talking to both so definitely replacement for curing services like RabbitMQ or host one the AWS SQS that's a definitely solution well i would i would definitely I would design something new now and somebody would ask me like how we do it therefore it has a chat board in some may be nothing slackness maybe an IRC because it's really like way more technical and probably cheaper than if for formats if you have like a huge amount of messages then use something like IRC because I think it's more scalable that's like an antique up for sure but it happens perfect for people because it's easy to log in there they they manage everything for you restore email upload your picture format your message everything is done there we just our code is small and their code is huge but in the end the users they use both they just experience echidna plus us now let me show you how it works so this is the service I'm talking about it's cold water you can check it it's it has a web page but this web page is just one page which says hey where I'm line we're alive so you cannot shoot it through the web's through the web page if you go there you just see the logo you see some some some icons there saying that yes it works we just we just online so the bot is working the ball is talking to to the github but that's it and I'm going to show you how it works in practice go in here so this is you see that yes yeah a little dark so this is basically you understand so this is basically it get help it's a small project open source project of myself and we have this upon request let's Polica so what this rotor system is doing the ruler is helping us to merge full requests using docker containers so when somebody submits a pull request to our project before we get this pull request and and instead of clicking this button merge which which is here so there's a button called merge so you can call merge and they get Hubble just probably know how it works and the github will just merge your stuff into master prime instead of doing that we are just created this the system which helps us to before doing the actual merge the systems the system put together the branch and the master branch inside the doctor container runs the full build and if it doesn't break then the merge happens so basically when the pull request comes in we need to to initiate this whole process we need to tell somebody like hey start a machine started docker container get this code in there get the master branch put them together run it for a half an hour when it's done click the merge button and report back to us this is the service which work for us so this is what is what it does and it talks on github if I see here for example i say rotor you don't see it but Walter for example I say hello so I just posted a message to get help I said ultra hello that's also I don't have any control panel I don't have any idea consider anything it's just the public it's just a public pot which is listening you see the suppori quest the public walk boat which is listening to all conversations on kill hub which are happening in its name so if somebody is talking to rule there anywhere then when the message is there it connects to it have every minute and checks to have anything new for mean in all tickets and across the entire key hub you can try it yourself you can post the same message in your own project and you will see what happens so it is the chat you see it takes some time so it's only mediately it takes some time we're just waiting we expecting the ball to answer and every minute it checks what's going on github on the entire canal and it happen forms the bot about the situation forms about boom we just got an answer we just got an answer which says it talks to me hi there I understand a few simple commands there's this and that this page explains them briefly any questions or bug reports submit them there have fun so it does talk to me it's a lie I can say something else so the beauty is that look we don't have control panel I didn't look in anywhere you can create an account in this system in this rotary just it just hosted somewhere it's connected to give up to the big messaging platform it talks on this bed messaging platform to me when I when I say something there and it can do something for me let's say I say rule to do something for me so it doesn't stand a limited amount of commands and this is definitely not something that this is this boy will understand so now it will talk back to her to me and say I don't understand that so give me something more meetings then I'll show you then I'll give you a meaningful meaningful command I will tell rule to merge this request like I just explained to start the machine to start a docker container inside the Machine around the full bill boom see it says I'm sorry I don't understand you check this page and try again please so it's a simple simple chat board which understands just a few commands which you can try yourself you can just create a project in case hard work use existing project in any ticket in any ticket post a message like that and you will see an answer without like I'm saying without creating an account without going anywhere and making it a can and you know uploading your email and and then starting this whole process you just get answered and there's no user interface like you see so you don't know how this rules are both looks it just talks to you it just answers your questions it just does something for you let's ask this much how do what it's done by github I don't know how JavaScript wrong yeah it's done by them so we don't care about that we just have to click the question and post an answer and they do all this whole thing that this entire interface it gives up its don't mind you see it's just it's a big company they do it for programmers the multi-million dollar company and we just use their service instead of really implementing it ourselves instead of making this chatting functionality on our side we just use them so let's ask this dude to merge this pull request I'm saying you're older verte it's one of the commands which you'd understand so now I think it will start this process like I said it will start a server start this docker container and start doing something again behind the scene so I can't see it I can open any web page which will show you the progress but it's going to be it's going to be here in the in the chat mode so we will be talking to to this to the bottom it could be like I'm saying it could be another messaging platform I don't know so many of them which look good and really popular for programmers we just develop all our projects and get happened that's why it's easier for us to integrate but for example jira or any other ticketing system would also be a good candidate for for integration of this one and now we are thinking about integrating this with get lot or maybe with big bucket so that's going to be the future it's the same the same machine I mean the same server to save microservice of whatever but it will just start talking to a different server you see it said okay I'll try to merge now you can check the progress of the merge here so if I click here it's going to be a new web page and on that web page I'll just see the log of what's going on just the plain text this is the only web page of the roller and now something is happening so we can we can see it in action we can see a need you know running progress bars or whatever but we can say for example rule turn status I can ask it to report me back what's the status what's going on now you just started the merge I want to know what's going on so I say status again will take some time because we're checking to you how every minute every not every second every minute mostly because the kidnap doesn't really allow us to check every second so well it it will it will complain if you do too many requests to get help so I'm saying show me the status and the answer will be again it will be it's not the interface is going to be just text message but it will be quite informative to to tell me what's going on and why it's going talking about yeah so I don't know many other you know that popular chance systems or messaging systems I believe in slack it's possible to do but github is good why my github is good because we have the code over there and our solution this rotor is basically a tool for working with the source code so it's a perfect integration of where this code is and you see we get the message it says okay this is the status it says this is what's going on here and then it gives me some information like I'm working on this fork emerging same 60 seconds already the docker container is this it's a name of a docker container some size of the work directory observe the lowest average so it gives me some information back some details of what's going on I Campbell I can see it online I can see it on a web page I can see the progress over there but I can see it and is in this simple text message which comes back to me and then it about it should take maybe four minutes maybe less this merge will be completed and we will see the message here it will be again posted here oh the pull request merged so now it happens so that the rules are the Machine click the button so the merge request was first and now we're we should see again probably in a minute we'll see a message saying I'm done you can go there and see the logs so the point here is that we are very much decoupled from the actual from the actual machines you probably see it yourself so we just talked into something and we don't experience we don't feel that there is something big is happening at the background because it's for us it's still it's just like messaging we don't have the UI yeah so now this last messages has done for your information the full log is here we can click here for example and see the follow so this is what it was doing like all the commands commands but the full built of for people who know what what they were doing going to do it amazing deal so that it's a java project so that was the maven build unit tests executed sub unit test was a full run of the maven build and in the end it was in commit push origin master to poke for the full cycle got the polycrystal got the medaka the master put the top got the branch put on top of the master around the full build check the result the result is good build a successful build success and then it does all the regulations which are need to be done when the merch is happening and then it's done so that's basically that's what I wanted you to see and yeah so now are your questions and I'm done use a preview darker container or did you go there we build on fly yeah we would have an image we have an image photography of course we have an image where we start from but for each project we have like custom it's a custom container where yeah yeah absolutely the github does that yeah oh you mean I mean the context of okay what's the status oh yeah of course we use DynamoDB for that yeah so we keep this information that's right yes yep yep exactly well in our case that's important because we want to keep this information because we started for you just a container so we need to know what is the container so we need to save it somewhere so we attach the number of the ticket we're talking in and the and the location of your of your build and everything was happening so we need to keep this information persistent but in some other cases maybe it's not necessary maybe you don't need that in your specific example maybe you just answer specific and answering questions I mean one by one and that says you don't need to keep the you don't need to keep state you'll need to remember state but in our case yes we do remember state we have we have like I'm saying we're using DynamoDB for storing this data and for any other yeah for the authorization and first of all we know who made the request because github gives us this information so we know that you have already authorized you and we know your name that's first we trust you hop on them that's first second when we configure the project we in the project we let our users who use this rule that this is a public this is a public service like it that's like just under student so we give it to everybody is free and we have like I said probably now about three hundred users 300 projects are using walter of regular basis and when the command comes to us we just know who sent the command we know that you have to give this information and then inside the repository we keep the configuration file in llamo like Travis does we do the same for the configuration file which where you as an owner of repository can say like you know I'm accepting requests only from these five people and in that case rutul will tell you like sorry no you are not going to we're not going to accept from you you need to ask that person to help so it's configurable you know the first one we just go first in first out the second one the first one goes that the merge happens if we just post emerging after the same pull request the rule that will say it's already emerged sorry but cigarettes yes sequentially and Sigma yes the first thing for some so we just keep the line we keep them in a line in the queue and we answer requests who come first we just answer their twist now that's specific for this project in the lab in a different project it may be different you may accept parallel request and like I say this BOTS can start talking to each other in parallel but in our case it's important to keep them in a line one by one so that's why that's why we did it that way so any other ideas suggestions comments complaints yeah you still have your face it's a lot easier to doing a nice pretty one yeah we don't have pledges user interface but we have we have user we have help pages so when you say something which would not understand the rules are say I don't understand you here is the web page HTML page for you to learn more about the commands I understand listen that's it like I was expecting that question so what kind of commands and what kind of language these chat bot who sucks will do that cell in our case we just define maybe ten commands and that's it and it's pretty simple if this keyword is in the text we just do what you said you can say merge you can say please merge you can say branch me please or please nurse this it doesn't matter if the merge stay is there then it's the merge commit their me we can say like status merge deploy release we basically support three commands deploy release emerge that's how we automate the entire DevOps operations for all our project so this is really simple syntax we don't do any step with you we don't really we don't do any syntax analysis of your text or we don't do any I don't know artificial intelligence to understand what you actually man we're just looking for keywords and that's it but maybe another you know situations you may design your chat for more powerful and if you understand the semantics more deeper and you know more powerful but in our case that was just enough just a few just a few words if we don't understand your rules will just point you out to their to the help page and then you go there you learn that's what people usually do so they gonna ask me so nobody is sending me now well we had that year and a half ago we just started and we didn't have this help pages people were just saying like I understand how this thing works because where's the UI where's the where's the front end what do I click but when they start saying something we we made this interface more and more powerful the interface started to give answers better and better using these help pages and now I don't have any from anybody for I mean maybe eight months or so so nobody's asked me how this thing works because they just say ruler hello and there is a boom and answer which says this is the help page they start from there they say something else Walter says no I don't understand you they learn on the fly they learn on the go and in a few attempts they know how it works without the UI yeah what are some of the other yeah we have a few but we use them internally and for example when people we do software developer a custom software development company people come to us programmers come to us every day five up to 10 people I mean submit their recipes because we work remotely completely remotely report we work with freelancers only and people come to us because they want to work without a steel answers and they submit we have a form so they submit the information about please interview me start working with me and then we have they jump into our all we design you know similar to get out but way more primitive system and more suitable for us also this conversation system and they jump into their their their form is just dropped in there and then the board is invited and the both decide okay who's going to interview this person and it invites another person to interview and then when the interview is done the board says okay thank you for the interview it process this information so we basically let our candidate to talk to our board before we hire so that's not the application it's kind of fighting again people sometimes I don't understand it's a bar and they start talking to it and the boat said I understand you I'm bought sorry and they okay and what do you understand it's really because they don't sell meat we made this ball is that we made it as a girl picture ahem and they don't realize that there's actually a boat talking to them so when they start the conversation they sometimes get with you which is which is fun but in the end they realize and then everything goes smoothly because they understand that you can give it come get an answer so you don't need to wait everything is organized and discipline like in this case there's no you know human involved and but that's our business application it's more that's an example of how this BOTS can be used basically I think the future for the app is to integrate depot and computers so people will be integrated in a more intuitive for us waste user interfaces I think are not that intuitive for business operations as as talking to somebody but as just typing and saying what you want instead of looking on the screen and times of trying to figure out what are the buttons what do I need to click and how do i how do i need to understand the language of the computer because all these buttons and forms and clicks these are the language of the computer the real language of being is a user is the language is the English so I'm saying what I want I'm saying hey do these for me or I don't hire me or how about increasing my rate or how about signing a contract with me can you send me the contract oh you got a contract how about you show me what are the conditions on which you can increase my cell you boom these are the condition okay let me try there okay so somebody is talking to you instead of you figuring out how to fill the form I think in general that's the future and I believe and this is the first step I mean the first step we've done so I'm done if you have any more questions you can come to me I'll give you my card subscribe to my blog read my articles it's all over the blog and you can find out more thanks for coming 