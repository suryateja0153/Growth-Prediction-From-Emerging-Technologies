 hope you know what this talking about least approximately but they still want to ask you how many of you knows actually what microservices how many knows what with the chat board good so it's probably it's not gonna give any technical talk it's more like conceptual and I'll try to I'll try to show you how I see the future of architecture in general and how I think we're going to design systems in five years and ten years maybe in twenty years and this is all based on my vision and my experience so I do use this chat box in my practical projects and they do use micro services and I combined them together and I even amend this micro services as chat pod and it works and I want to share it with you and try to encourage you to think that way and maybe this is gonna be our future I believe it's gonna be but let's see so show you force six steps which current architecture is moving forward from the monolith monolithic architecture where everything is building one big thing to the stuff which to the architecture which will look really heterogeneous in the future it doesn't look right now but these three steps on the right this is how I see the future the first three steps is what we have right now is already happening we have it in practice we have it in books we have it in practical projects but the last three things is what's gonna explain to you and and promise you that this is gonna happen it's gonna be about 35 minutes probably less again as long and if you technical it's more about high-level architecture and the vision so I'll show you six diagrams so all these six steps will be six diagrams they're not gonna be complex still UML but not compiled for the first step this is how we design systems for many years before this is monolithic architecture so we have a big piece the big bit which is that called the system or a web system for example or some some mostly I'm talking about web systems it's a big monolithic piece of code which contains inside some modules module a module B whatever there are some modules and components inside and they communicate to each other basically through the code so they call each other through basically method calls or encode calls so there's no there's no network connection between them they're basically Java or not Java or.net some pieces of code which communicate to each other through inter inter method calls or there are many benefits of this architecture existed and then we have a client on the web side you have a client who is talking to this system for HTTP interface or whatever basically the web site the web web client the user sitting in front of the browser and there are many benefits of this architecture first of all is easy to build when we start building it we just create all together there's one programmer controls this module a module P there is no it's really not difficult to connect them because if you want to use something from module P you just basically call it you have the documentation for it you have to explain you can you can look how it works it's what it all stays together in your in your IDE and the place where you develop the stuff so also the mistakes you make a really not visible so everything is under your control so it's inside your big monolithic piece of software and and you're responsible for everything no not anybody cannot see what's going on if they are outside of your team for example it's all belongs to you you control this piece of code and it's kind of good for job security this architecture so you build it you design that you all this code and you're gonna stay in this job for as long as this piece of code is a lot so it's pretty good this is how it was before but their problems their pros and cons so the problems here is the first of all we start seeing problem when it starts growing big so this is perfect for the small system when the system starts to grow big it's kind of difficult to maintain because because all these connections between module a module B they become less and less visible with time and modules start to start to save too to merge yeah exactly and it's not anymore in module eight module B is just a piece of code which interconnects to each other's some sometimes we can even see spaghetti code when the module a becomes more to B and the module B becomes module a we don't know anymore who is the which model it is we just have a big monolithic system which was some lines of code they interconnect to each other and they merge so the concept that was the initially the separation of concepts one module does something another one does something else and then eventually these concepts they start to emerge and we have one big huge monolithic concept of the product so it's really unmaintainable and is difficult to reuse so it's difficult to be used and in future it's difficult to come in and say we want the functionality which you guys designed three years ago and we want to get that piece of functionality and use it somewhere else it's not really possible because it's all monolithic and all together you know assemble together and it's and if you want to take the piece of this functionality we can in the best case we can give you some piece of code which you can put in your stuff and then we use it somehow but you cannot just call us and use a piece of functionality from us so that's a problem for reusability and like I said the architecture becomes unclear not just the code not just these modules merged into each other but the architecture in general becomes unclear and in the end it's just one big piece of code which just works or doesn't that's the first step that's how it was that's how it works in these cases and now we have the micro services that's the idea which is kind of fresh and we start using this idea and it's coming to the market for the last few years so we break down this into microservices and we don't we also still we still have this system we still have the system but now it's not so solid it's not some monolithic we break these modules down into into standalone pieces and they start to communicate between each other's through HTTP API calls so the module 80 now in order to do something to ask the module B to do something it's not enough this module cannot just call the Java method cannot just call the Java class it has to make the HTTP call eight through the API which is more formal so it's now become way difficult way more difficult for the for this micro service to merge with this micro they basically stay up different machines sometimes they they are designs in most cases by different groups of programmers so they cannot merge anymore so it's perfect for the isolation and perfect from what maintainability so now if the system becomes way more maintainable and way more stable and the architecture may be made way more visible for the future because we're not able to to create a chaos and create the mess from this architecture because they are separate and also another benefit of this is that we have smaller pieces so the software becomes smaller in the previous case when the monolithic architecture was a big one huge piece of software with millions of lines of code but like we've heard in the previous presentation the question was about what do I do have a million lines of code in this case the million lines of code is really a bad example of a badly designed software you have a million lines of code there's a big problem in the first place in this case it's it's not really typical to see a micro service with a mind with a million lines of code it's usually like a few more because these pieces are it's better to design them to be small so they organically naturally small it's micro service which is good for me angular it's more this more the piece the more maintainable energy you deploy that's the last thing which is good in these architectures easy to deploy you can deploy them separately you don't need to deploy the whole big monolithic system the deployment is in they're all a problem and if you deploy the whole big system to production then it will take time you will have more risks you will have more problems you need to configure it properly so it's way more difficult comparing two deployments separately of small micro services this one goes to one server another one goes to another server that's the architecture which becomes composable so the previous one with one lady this one is more composable we can compose it from pieces now and we can reuse them and that's my next steps about the review that we use abilities number three so we are getting to the actual reusability we start using this services not from if you compare the previous slide here we have the client who is talking to micro service a and then this micro service is using micro service B to do something for the client but still the client is talking to one entry point like with the monolithic are still one energy point where the client connects and then it's our job inside how to talk to each other and how to combine us together to deliver the service to the client if we become reusable then the client is able to talk to all possible micro services so we are making our architecture more open and we let the client we use us in the way the client wants so it's not any more about programmers who make micro services for programmers but about us making these services available to everybody else outside of the system and that's a really big achievement of the bike on the micro Service domain on this territory so there are not any more pieces for programmers and made for programmers and being used by programmers through the API but that's the stuff which we make public and we announce this API we make it visible for everybody will make the documentation we publish it somehow even though their internal maybe this micro services are internal for the for the enterprise or we still would document them we make them visible for other programmers because now the clients are also programmers and they are not just users but there are also technical people who maybe use our stuff and may use the functionality which was implemented originally for the service a but then in the future the client may say that we need it for something else we need it for some different purposes maybe we are building another system which can be used this stuff you build a few years ago so now we can just can just use it all we need from you is just the API properly documented so what's the benefits here what do we gain by making it available but by making our micro services available to everybody not to just programmers but to I mean not to just the original client but to all client first of all it's cost optimization so we are actually saving money on only making stuff so if we make the micro service for example let's say it's a it's a let's say it's a CRM system not to Syria but some ecommerce system and we have the payment module which is able to process transactions so we make this transaction processing service available to everybody and then they can reuse without spending any more time to building anything from scratch so we are this is cost optimization so we are making services available like libraries but they are hosted libraries now not just libraries which people need to download but they are cosas stuff so that's cost optimization another thing which is good is we will definitely have higher quality demands because we can not anymore create this if I'm a programmer here I cannot just create this microservice just the way I wanted with the with the I mean the quality the low quality and and not really paying attention to documentation not really paying attention to the look the way I designed the API this is going to be not really easy for me to do that because I will have so many clients around me complaining about that so I will have to make it higher quality because because there will there will be many more users comparing the situation where there's a monolithic system or even it's a micro service which is for one client if I have more clients but inevitably my quality will go up because I will have more complaints and we'll have more pumping ports that we'll have more people asking me to make it high-quality so that's why the quality of these micro services will go up inevitably that will happen which is good for for everybody and together with the quality comes with better documentation so I will again never to be documented better and make it more easier to understand for everybody so that's what's happening anyway I would call it be usable so this is the situation where the micro servers that are usable this is what we have now and now what I think will happen in the future that's everything I just explained it just a preamble this is what we have now and probably you know better than me how it was but now I see three new steps which will happen in the future which is happening already in a few of my projects I think it's gonna happen step number one it's number four action is one day these guys become decoupled so instead of talking to each other through the api's they will talk to the communication hub so we will have we will have one micro service to micro service many micro services and instead of declaring the API here they will have some communication hub for example let's say slack or I don't know Facebook Messenger or the IRC so some place where this these micro services can connect and they can post their post their requests and they can get some responses from other micro services so in traditional design if I need something from this guy I just directly connect to this guy and I'm getting the data from there and I'm getting the response back in that design which is decoupled I connect to somehow to communication place to communication platform and I post a request like I need this payment to be processed I need this customer a to get that just I need somebody to take five dollars from the credit card of the caste customer a and give me the answer when it's ready so instead of connecting to this payment micro service and then sending the the API call the restful to restful api and saying how about you proaches the table for me and staying online and waiting for the result or maybe connecting again in the King I don't know who is this micro service you general I connect to communication hub I post a request maybe a text maybe a Jason made the XML and then in a few seconds or maybe microseconds or maybe minutes I get the response over there in this communication chat and the answer is yes we just took five dollars from the client so now our micro service has become chat BOTS so they are they are able to talk to each other using some language some JSON language arts the meta language or just plain text language so we turn micro services into chat BOTS and this gives us a lot of advantages comparing to the previous architecture when they have to talk to each other so what are the advantages is it clear how it's gonna work technically no probably yeah what's the question let's cool it service bus or a queue but but a little bit later but let's say yeah well now it's like a service bus or a queue or like a message to ever event but you call here whatever you call event bus let's go event bus for now if this is this is the name which is which is clear but you've got the idea this is something where I can drop my request and then come back and say you have some some answers phone do you have some some responses to me yes the response is waiting for me over there calling you can be waiting for a but in general I would suggest first of all explain why I would suggest instead of polling just basically coming back and asking do you have something new for me what's going forward yeah you just jump you jump into the chat like in slack for example you're jumping or a facebook messenger and you basically see what's new for you so this is like five messages unread so I've seen everything before but there's five new messages and this is what my previous message and then after I posted that message I have five more messages so I can I can read this when I'm talking not about a person not about the human by the computer so it's a micro service who connects to let's say Facebook Messenger maybe that's an extreme case but slack is a better example the micro service connects to the slack and then keeps talking to each other so we understand technically right how it's gonna work okay so what benefits do we have here the main the biggest benefit is that services becomes X lines instead of being a services so in the PDS diagram you can see the direction of the line so this one is a client and this one is a server so the client makes a request and the server is supposed to perform here and here is supposed to stay awhile 24/7 and answer this request this is one design and the design of the client is way different so here these guys are only clients then we have only one server where the requests are coming in this is the hook to design a client is way easier than designing a serve I mean in terms of before in terms of load control in terms of scalability in terms of data integrity all many different questions it's way easier to design a client who is making a million requests an hour than to design a server who is handling a million requests so by changing this by reversing this architecture and and placing the and removing the server functionality from here and turning these guys into clients we make it way easier to make them to design them to implement they are now just small simple HTTP clients which which send as many requests as they need and they don't care about performance scalability whatever if you want to make more micro services you basically put five more machines and they keep sending questions to deserve so the only problem we have here is how to implement the hub which will be able to handle a million requests a minute or an hour or a second that's the only problem and for that we have pretty much standard solutions we have like public hubs we have like IRC servers or slack or whatever like Facebook Messenger so we have solutions which can we can get from the market they can be hosted we can sometimes pay for them and they will be able to provide us enormous scalability and they will be able to handle as many requests as possible so to design the client is way easier than designing a server that's one huge advantage which not only performers the only scalability but also another thing which is the interface so it's we don't need to make these guys we don't need to make them we don't need to care actually about that much about the documentation we don't need to care about how to make this restful api properly designed we don't need to care if sometimes as micro services they have even the web page the web interface so we don't need to make that web interface we're just making clients we're just making a server-side JavaScript - somebody checks what's new for me gets the response and does something else she's pretty much isolated standalone java server-side software which has nothing to do with being a bap server I mean being a wrestling and publishing this restful guy and we do we don't need to need to care about making it 24/7 available we don't need to care about stability of that stuff that much we do want these guys to be online 24/7 but if they go down for a few minutes it's not a big problem because this guy if for example I want to charge $5 from the user I post my request on the hub and say hey how about you charge $5 from the user let me know when it's done and then the answer is coming back nothing into half millisecond not even half is half a minute but in two minutes do we really care about that is it so important for the architecture not really but if I connect from here to there so the restful api and I open HTTP request and I'm staying Alwine waiting for the answer for two minutes then it's probably going to be considered as a downtime this guy will say hey please micro service is down I can I can't rely on it anymore because I'm some waiting for two minutes already there's no answer but because this one is just temporary down maybe it's just being redeployed and we just don't have the redundancy there where it's not it's not that reliable it's gonna be a problem but if we decouple all these guys if they are not coupled anymore then they reliable that is the availability of them it comes up not that much of importance that's the thing you mean in this in this configuration yeah that's possible yeah you can configure it the way you want you can configure this one is not replying and you basically like reboot it or restarted it's not really important because there is nobody there are no connections being already opened and waiting for you if you're making a web server you don't want to drop all the connections and just restart yourself that will cause a lot of troubles for your client but in this case if all the clients posted requests to you and you have a Java bug and your stuff doesn't work you basically restarted and no harm no harm done because all these guys they don't know about that they don't know that you were down they don't know that you had the downtime that for two minutes you were you were not answering anything because there was a Java bug and then and then the service was the micro service was completed now because you are because all these these two micro services they are clients from now on they're not servers so even though they're still called micro services they are chat BOTS so they talk to each other being clients this is a huge advantage so I've I've implemented in their architecture implemented a few micro services on my own and my experience is about two years in one of them which is quite popular we have like about 300 active users who are like actively using them and the services is working sometimes it goes down sometimes it's up sometimes it's down but it's really we just know that it's really not visible for your for our users so the clients we work with that the client the real people not only micro services but but real clients people they work with us and they don't see our downtime that often even though we have that downtime we have it like every second week or maybe every month we have something goes wrong something with the service goes down sometimes for a few minutes sometimes for a few hours but our clients they don't see that that off because like I'm saying because they don't they can up there is no page where I can go in and say hey I'm trying to log in and I can't log it and they start tweeting and saying like hey this service is down they don't see that you know to see that they really need to post something for us and then there is no response for an hour and then they say okay this micro service this chat board is not answering for some reason in that case they start complaining and saying something is wrong with you and then we fix the problem or we find out before we understand the problem before they understand so that's the architecture with you we have two more steps and then I'm done so the step number five which is going to happen in the future after we design it that way and I think it's gonna happen we'll have micro-services as chatbot then we will make them visible and visible means that that they will talk to each other not only through the like you said the message bus but this message they send to each other they will become visible to normal users to people not only computers but also humans will see how microservices talk to each other so the language between this micro-services the language this chat bots are using will be playing English not Jason no XML not some super slight computer understandable structures of data but it's gonna be just plain English so one micro service will say literally how about you charge five dollars from user Jeff give it and then the next message comes in I just tried and I got a decline from his bank curious and then I'm as a user I log into the same table I jump into the same chat and I see what's going on there I see that the one micro service just wanted to charge Jeff for five dollars and another micro service said like I can't do that because there was a decline from the bank so I can see as a user as an administrator or just a normal user or something like that I can see what's going on between my micro service I can see how they communicate how they interact and I'm able to to interact with them as well for example I can post hey how about you explain it with more details what happened with Jeff transaction just two minutes ago and then that micro service has no problem here's the details I just got from the bank boom this is the details of the transaction and then I say like how about you retry it right now and it boomed three tries so I'm communicating with them not logging through the UI not logging to their web interface but I am just talking to the chat with them and they all communicates with this chat with me as well that's how I see the future of Micra services and chatbox and we have it again we have it in practice so we're trying to we are trying to use that for about two years and really work so we have one Micra so we have a few micro services and one of them is actually telling us what's going on with the machines where the stuff is being integrated it's to use integration and we have users who are talking to this to this much to this service and giving commands and asking the answers and getting results and everything is happening without the UI without the user interface everything is happening on the on the chat on the chat on the chat channel we are using github I could have issued tracking so what's the benefit here if it's visible first of all like I said is the monitor so it's easy to understand what's going on you don't actually need to in most cases you don't need to be an administrator to understand what's wrong with any of these services to monitor what's happening it's easy to trace it's easy to see what happened an hour ago it's easy to see what happened today ago because they all this conversation it stays online forever like in the more in a traditional way when this guy connects to this guy and then there's some bug and then something didn't happen and for example the transaction was not processed and it was declined by the bank we need to go to the log files and see that log files find that position where it happened then we need to compare the log files from here and then from there and see okay that guy made the request and the failure happened there so it's kind of difficult if we put all this information in one chat room it's we just jump in as a user and you see how your guys how your micro services were talking to each other and it's cheaper in this case everything is cheaper because you don't need to build the UI for this micro services you don't need to spend time and money for making this these components really attractive and visible and then and everything and and here's the list of this is one of my last slides this is the list of things which I which they said this the platform's which just a few of them which you can use as as a platform the chat room where where these chat bots can talk to each other we're using github github issues so indeed help you can't read who knows what did happen all right so it can help you have issues and you can open an issue it has a number and then in this issue you have like many many messages where your people and developers and computers can talk to each other so we are using github slack it's also possible I are see it also possible Facebook they're just starting there so they just just introduced this functionality I'm not really thinking this is going to be the good platform for for for micro services but still that's just an example and this is what these guys actually give us which we don't need to implement so when I'm designing the micro service and I want this micro service to talk to my users and to other micro services then I don't need them to implement authentication authorization I don't need to build the web interface I don't need to build mobile interface restful api I don't need to be fast I don't need to be worrying full of rainfall and and and I don't need to try to do lightweight all this stuff is given to me by being happy so all this functionality I just get it for free so when you develop when you start to develop the micro service you have to implement all of that you have to if you want your micro service to have some web interface I mean at least something put for real users not other micro services but maybe some other users will be able to log in and check what's going on and maybe it can figure something and you will need to implement all that and this is what we get for free from this platform from this hub and the final step and done this is how it's gonna look in the daily in the future there you gonna be heterogeneous that was the that was the strategy a long time ago maybe 15 years ago people thought about how to make how to integrate complex enterprise systems in the way that this one is dognapped this one is job and this one is old and they were thinking about this the corpus tan word standard was they introduced that time and all the different object standards and then they died more or less but I think that's what them in the future in the more light way approach so we will have micro services and we will have the hub and we will be able to integrate new micro services into the same chat so it's not gonna be only about micro services created by me but I will create the micro service that is able to do something song song which which is able to provide some functionality and all I do is I announce it to the world that my micro service is listening to you on facebook and his name is death and then any developer in the world can just jump in start a chat and start using my micro service so there is no there is no web UI there is no registration there is no page for logging there is nothing like that I just jump in I find this guy this micro service on Facebook or on github or on some other communication channel the communication platform and I say hey hello okay what can you do for me and the service immediately answered like I can do this stuff for you I can I can I can work for you I can do these provide that for you and probably you will take it down and give me your credit card so you start talking to the service and what's gonna be even further in the future these guys will start talking to each other so we will be able to invite a few of them to the same chat and tell them what to do and they will start working with each other and this one will be implemented in Java this one will be implemented in dotnet and that one will be implemented in PHP and they will do completely different things but we will be able to orchestrate their work and coordinate them just by putting them together in the chat so that's going to be the future and think architecture so the system they will not talk to each other through their API and connect to each other and no they're 18 and they're in their IP addresses and open connections and send XML JSON messages and see how it works but they will be able just to be invited in the same chatroom and start talking to each other using some maybe language there's English plain plain English maybe some it's a more formal language maybe the language with some some some pre-specified format but they will talk to each other in the hub that's I think what's going to be the future and that's what I wanted to tell you what do you think am i close no yes you don't think so yeah when one service is down when it's not answering it's down in our experience that's it so the user but the customer the user of the let's say this is the client and this this guy is supposed to get to do something for me so I would say I'm posting a request on although this person posting a request do this work for me but there's no answer for a minute for two minutes for three minutes it means that the service is down that's it maybe maybe thinking yeah depends on depends on the contract depends on the promise so what exactly was promised if the service promised me to answering in five milliseconds or maybe 50 seconds then yes if there is no answer in 50 seconds then no in our case we have this but we have this chat bot which is doing which is doing which is for continuous delivery so you post the message and say get my code package it all together and deploy it to the server that the service will provide and it takes sometimes 30 minutes 40 minutes because it takes time so in this case the chat board says I got your request that's the immediate answer when you post a question and say hey do it for me the immediate answer is like I got your request wait for if you want to know what's going on there is a link you click in there and you're going to go to the lock page which is just a plain text lock which shows what's going on but wait for it and then it takes 30 minutes 15 minutes maybe an hour and then it post the next master said I'm done I finished that's the result of my work well that's the that's the communication you check the chat bot with me well in this case we're talking about the card number then probably you should be you as the user should know that there's only one one pot is talking to you in the chat room or other box you should just trust them but it's like this is at the corner case when giving like really sensitive information in the chat room just a credit card because in most cases not that sensitive in most cases we give information which is which you're still let's say you would so you're saying that if in the chat room we have two bots instead of one yeah and just one of them is supposed to get the information which I need and another one is not supposed to know about that then you can encrypt that for example like you're doing a public talking about really something sensitive then we can encrypt that information for the future but basically in most cases the table provides us the security the authentication and authorization because every every person who is in the chatroom already passed the authentication authorization step so they were able to log in to confirm identity to make sure that this is actually me talking and this is actually the chat bot which is ABC top not somebody else so we trust the top that they have actually authenticated all these participants of the room and then we know that this is actually these guys at somebody but the question is how we can you see that will be good for e-commerce that definitely will work like that I'm just I just think that in general that the idea of web UI is going to slowly slowly become less and less popular because for us it's way easier to talk to somebody instead of clicking buttons and figuring out how to do that it's just organically more naturally like it's better to open that open the web app or the mobile app and let's say just like we're using this Syria or okay Google whatever and we just start talking maybe even to just even in natural language and there is somebody on the other side who understands us and instead of just just just finding out the right form and finding it on the right link and clicking that link and then figuring out how to enter my credit card it's easier for us to just drive and talk so that's that this chat boss is gonna be the future but this is talking about the consumer perspective but from the architecture perspective for us the developers I think that's how it's gonna be technically so we will be we will have micro services who talk to each other through the house what kind of hub is going to be we don't know maybe the Facebook will provide us the functionality of recognition so I will just design the micro service which is selling some stuff on Facebook and I just advertise my page and think and say like hey if you want to buy something from me go Landon the Facebook and start talking to me and then they go there and the Facebook will provide the functionality of people like saying something like you know voice recognition and it will be translated to the English text and then I will be using some libraries for natural language processing and that stuff will be converted to to more formal information for me and then my micro service will understand what this client is talking about and I will be able to sell my stuff there to sell or whatever to do something so all the people all we need to do is instead of making the website and promoting the website we just promote our Facebook page and say come to our Facebook page clicks message me and start talking to and you will get what you want from me as a shop for example on selling shoes let's say so you will be able to see everything to see there that's that's what's going to be probably the future we're out of time 