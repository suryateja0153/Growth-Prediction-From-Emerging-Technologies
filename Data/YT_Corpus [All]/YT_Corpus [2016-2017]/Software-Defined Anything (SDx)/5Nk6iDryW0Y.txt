 So, thanks for coming out on a Sunday afternoon here at [coughing], at DefCon. [coughing] And today we'll talk a little bit about mouse jigglers... [coughing] And defense and a little bit of offense as well. So what's this talk about anyway? Why should you be here or some of you might be in a hotel room watching this... [coughing] Uhm, mouse jigglers are now a common item in a toolkit for many law enforcement organisations and also, uhm, for people who like to come and grab you stuff. [coughing] And if you're using full disk encryption like you should be using, it's kind of worthless if you're logged into your computer. So, other reasons why this might be interesting is if you wanna build your own mouse jiggler [coughing] it could be fun. [pause] Uh, just a little bit about me, uhm, this is my seth, seventh DefCon talk in the past 5 years so if you've seen me around and thought... [applause] "He looks familiar..." [applause] Maybe that's why and also, uh, funny story, I have a film credit, on IMDB for the DefCon documentary as "The Professor", uhm... [sneeze] I was in the calibrator the other day who is also credit as "The Student" and someone recognized him and like "You look familiar to me for some reason...". So I teach digital forensics and security at a university that's, my day job. Also a hardware hacker, uh, been known to write a few books, just released a really small book on Windows forensics, last year we released a Linux forensics book and a couple of years before that I released this book on hacking the low part of ISOs, so yea... I mean, this is the small book. [audience noise] [pause] [background noise] So, what's this talk about? First of all you don't wanna be like this guy... [pause] [cough] This FBI is knocking on his door, and he's thinking "Oh, sh*t!", so what is he doing? He's running to all his computers and he's launching a nice little deletion process; he's grabbing drives throwing them in the toaster; [cough] he's putting CDs in the microwave... And here's my favorite part - he's got these huge magnets... [laughter] And he's deleting his hard drives... And now he pretends like "Hey... I, what's, what's going on guys?" You know? Right... So you don't wanna be like this guy for a couple of reasons, number one, what this guy just did is called "Obstruction of justice".... [laughter] And it kinda gets you into a bad place, right? The other thing is as much as it looks really cool as you're going accross your hard drives with magnets... it doesn't really work. Okay? Those suckers would have to be super powerful, but yea... It's Hollywood, right? [pause] So what is a mouse jiggler anyway? Its sounds a little dirty, a lot of people are like "Oooh, that sounds like a dirty talk you're giving this year, Phil..." But, uhm... [audience noise] But it's simply something to use to keep a computer awake and unlocked, it can be used as a prank... [pause] Anything could be used as a prank, right? [audience noise] [cough] And there's two basic types, you have your software jigglers, that's not what we're gonna talk about. And then you have your hardware jigglers... and that's what you gotta be worried about. So... [cough] I've got a couple of pictures here of two very common mouse jigglers that might be in somebody's toolkit. So we're gonna talk about how do you detect these; what sort of things could you do... just simple stuff [cough] in order to fend yourself. So when it come to detecting a mouse jiggler you could use a known vendor ID and product ID. Now it turns out there's pretty much one company who makes these and their vendor ID is 0 E 9 0 and their product ID is the most common ones are 2 8 and 4 5 but honestly this company makes forensic stuff so if anything from their company is plugged into your computer [cough] it's probably a good idea to do something about it, alright? [audience noise] You could also detect behavior, you know, what if somebody, you know, listens to this talk and they're like "Well, I'll just make me own"? So we will talk about how you can detect that and also you could just... do things based on a device class, you know, any type of device that could be a jiggler, uhm, do something, [coughing] You know, do something. So the easiest detection is detection by a known VID/ PID combination - know the vendor ID and the product ID. So, since there's a single manufacturer this is super easy, right? And the nice thing about it is, very quick, you can immediately detect it. Some of the other things we'll talk about are not as quick, you'll have analyzed stuff a little bit. It's very easy and it's definite, you're like "Okay, it was definitely one of these devices...", you know, it's not like I's, I think it was, alright? So how do we do this? Well we use udev rules. Any, how many of you are familiar with udev rules? [pause] Alright, just a few of you... Alright. [cough] SO udev rules are kinda like the new thing, I say the new thing, they're not super new. I think like in the last 10 years or so... but, you know, for Linux if it's been around forever, uhm, that's "new". And they determine what happens when a new device is attached to your computer. And they have a set of matching conditions and you can use them to launch various scripts. You know, one caveat is if you launch a script it should return right away, otherwise bad things happen with your computer. You don't want to launch a script that says "Let me spend 5 minutes analyzing this device to figure out if it's a mouse jiggler", because you can't install any other USB devices in that time and it's gonna kind of suck...[coughing] alright? So here's an example of a udev rule, this one will detect a known mouse jiggler and if you look at the rules, normally they're set in edc.udev rules dot d and you just create a simple text file with a bunch of rules, uhm, I believe you have to mark it "executable" but other than that there's no real requirements. Normally we name these rules with a number and then a "dash" and then it's name and then it ha, it should end "dot rules", alright? Now, the reason we use the numbers is these things are executed in alphabetical order so you might have something that definitely has to run right away or should run after other things. So that's how we handle that, we just use a different number. So in this case I used 10, um [background noise] which is, uh, appropriate for this particular thing. Alright, so, here's my rule, my rule just says "action, double equals, add "so a double equals, if you've ever programmed in C, C++ etc. you know means "this is equal to" not "please assign something to this", alright? And the same is true with udev rules. So it says if the action equals add you just plugged in a device and the vendor is 0 E 9 0, which is the known vendor ID, [cough] then to your lists of scripts to run please add... That's what the run plus equals "this". So it says etc/udev/scripts/lockscreen dot SH, alright? So in this case the first thing I'm going to do is just lock the screen, right? You know, what was the goal of mouse jiggler? Don't let your screen lock. [pause] Alright, you plug into my computer, it instantly locks... sorry! Now, when you change these rules you have to restart the udev service so that's why I have the little not that says "Don't forget to run sudo service udev restart!", alright. Let me back up for just one second... so you see here where it says "ATTRS" with an "S", ID vendor, equals equals, 0 E 9 0? What that is about, is that you can detect the device, now when you plug in a device, USB devices are layered, right? They are device, they could be a composite device... and so you say "When I add an "S" to any of these matching items, uhm, that means that if anywhere in the chain, you know, my parents, anybody has this vendor ID for this device, or part of it in this tree-structure that's gonna get loaded, please match it.", alright? So that's why it's important to add the "S" in there if anyone's wondering... [audience noise] [cough] You can also detect a mouse jiggler based on behavior. So, what do they do? They periodically make small mouse movements. Now the prank version which you can buy doesn't make just small movements periodically, it's like, makes your machine unusable. So this is something you can prank your friends with, although, honestly it's like, if you have physical access to your friend's machine there's a lot more fun things you could do. [laughter] But, they do sell this device, uhm, I don't think your typical law enforcement person is gonna have this in their toolkit because [chuckle] they couldn't use your machine anyway. Uhm, and then there's the forensic version, the forensic version has a much longer period, usually around half a minute to a minute. Sometimes they're randomized, depending on which version you buy. So, that you can do is you can detect these periodic mouse movements. Now the other thing that's a little bit unusual about these devices is that they normally have no "clicks", right? Why don't they have any clicks? Because that could screw you up, right? If you're working on something, if the mouse moves a little bit, yea whatever... But if the mouse is moving and clicking, [cough] like what you might do on the prank version, uh, [coughing] that's a problem. [background noise] So, another thing that we can detect, normally these mice are two-button mice, so they're two-button mice they're never used to click on anything and they move in predictable ways. [pause] So if you think that you might have a mouse jiggler you should probably, immediately, apply some sort of benign defence. You know, something like locking your screen. Yea, it could be a pain if every time you plugged in a possible jiggler the screen locked but, so what? [coughing] I mean that's, how often do you plug in a mouse? Or a Keyboard? Things like that... Uhm, because this will take a couple of minutes. So here's the udev rule for that. And again, this, uh, another file stored in etc/udev/rules dot d, and the action is "add" again, and it says "Oh, you just add in anything", so I'm gonna be super cautious, I'm not gonna check the vendor ID or anything like that, I'm just gonna say "You added something". So please add to your list of things to run, this little script. It's a detection script and I'm gonna pass it two parameters. [coughing] The bus number and the device number, you'll notice that there's also an ampersand added to the end because I said that you shouldn't have long-running scripts. And I just said this might take a couple of minutes to run, right? So you don't want this running and clogging up your udev system. So once you've added this simple remember you need to restart udev with pseudo service: udev restart. And then you can go on to the script. So it's detection script uses something called "USB HID dump" and this will dump hid reports. HID, if you're not familiar, stands for Human Interface Device. So there are a class of USB device you have keyboard, you have mice, you have joysticks, basically, a HID is anything that [coughing] connects a human to your computer. So, this script has to run with root privileges, which it will be, if it's run by the udev system. And it relies on the no-click behavior, amongst some other things, alright? So here I have a screenshot, hopefully you can kinda see that, this is a couple of reports from a mouse, like a proper mouse and you'll notice that this mouse has, I think, something like 15 buttons on it and a couple of axis. It generally, a mouse report like this will start with a byte or bytes for the, uh, the buttons, so each button gets a bit, so you can have 8 buttons per byte, if you will. And then you'll have the various axis. So this is a really nice mouse that has got, you know, scroll bars and all, all kinds of stuff on it. So it's a bit longer of a report. [pause] So, here's the script itself, it starts out with a standard shebang, bin/bash.. just to make sure it's running the bash shell. And, I have a, I have some stuff in this script that obviously if it's being run as a, uh, [cough] non-interactive process it's printing stuff to the terminal which they'll never see but you can also run it separately, that's just there for debugging. So, yea, normally you don't need a usage function in your scripts that run but, so I had to find little usage function and then I check and can say "Hey, did you get me enough parameters?" Remember, I need the, I need the bus and the device number." Remember when I first do a check for the standard el cheapo mouse jiggler that emulates a two button mouse. So what I do is I look at the address, so I get the address, I use "print F" in order to format that. So you might recognize that statement where I say "device address equals", let's see if I can successfully cursor over there, yea here... Alright, and I'm using a little trick that some of you might be aware of already, in bash shell scripting you can run any command and then take the results from that command and use it to set a variable by enclosing that command and parentheses and preceding those parenthesis with a dollar sign. So here I've said "Please run the command print F" and I have a format string and that format string just says "Please give me zero padded, three byte decimal numbers, separated by a colon" and then I give it dollar sign one and dollar sign two which were the two arguments passed into this script. And then I get a report, I use that same trick - my dollar sign parentheses - and I call timeout one second. Timeout, if you haven't used it, it just runs whatever you give it for how long you say and then it kills the process, okay? So I run USB HID dump and I give it that address [coughing] and it will give it another parameter - dash E S, which says "Please give me the strings, not the, the descriptors that describe the device." And then I pipe that to egrep and I say "Hey, did that bullet begin with three byte of zeros? Or did it not begin with three bytes of zeros?" Because it turns out the cheaper mouse jiggler will give you a lot of null reports, like "Yip, didn't click anything. Yip, didn't more", alright? Over and over and over again, now if you get the, the fancier one it doesn't really do that, but, it works differently. So I get a bunch of these and then I check and I say [coughing] "Alright, did I get anything?" That's what this first statement says, it says "If that thing was at zero then I'll just echo something that you'll never see unless you run it directly and then I will start declaring, I declare a couple array variables which you can do in bash. That's where the "declare dash A", uhm, mouse reports and also "no null" reports. Uh, by the way, just an FYI, uhm, you'll notice, I dunno know how visible it is here, that those are separated by semi colons and the reason I did it that way is, uhm, just to put more in the one command, on a, on a line so that I could kinda fit it on the screen. Obviously it's still a little bit smallish, but... Uh, in the materials on the DVD from DefCon we have all this stuff so don't stress too much if you can't read it. [background noise] So, then I, I get two minutes worth of reports and I store that in my array and then I do a little bit of command line kung-fu here... [audience noise] [coughing] And I say "Okay, are any of these "not null" reports?" and then I look at that list and I say "Alright, it wasn't null..." and there are two reports that are exactly the same. And there's no mouse clicking going on - you pretty much got a mouse jiggler, right? At that point. [coughing] Now, if you have the slightly fancier one, then I'm gonna check for, if it's like a 5 button mouse it's 5 button, 3 axis mouse and once again, there be no clicks, right? So that's kind of a big key and I will look for the report that corresponds to that and if I get a bunch of reports that are duplicates or, you know, nobody's ever clicking on anything, then I know this is a mouse jiggler, alright? [pause] Finally I can do detection based on a device class, so, whenever you insert a possible jiggler I can do something about it. Again, this should be benign, you know, don't start wiping your drive just because something that might be a jiggler was installed. Alright? [chuckles] [audience noise] Uhm, this is really a good idea even if you have the other rules in place, you know, you could do something simple as "Hey, you inserted a USB, a USB drive or any USB device, I'm just gonna lock the screen now." [background noise] I mean if I do that, uhm, here's the udev rule where I say "Alright, any HID...", so it's like, "Alright you inserted a mouse, a joystick, a keyboard... your screen's gonna lock". So what! Right? If it's you, so what? You know your password. You know, by the way, you know, [coughing] if someone storms into your office and they're trying, you know, their first goal is to get you away from your computer and their second goal is to keep it from going asleep, right? So that's where the mouse jiggler is gonna come in but.. you know, I think personally with all the stress of armed people in my office I would temporarily probably forget my password until all my encryption and deletion scripts completed. But that's just me... [laughter] [chuckle] Alright, so this script or this udev rule is pretty simple. You say anything that was in HID subsystem go run lockscreen. [coughing] Right, now when it comes to the scripts themselves you have to choose you level of paranoia, you know, do you just wanna lock the screen, do you wanna encrypt some files? Again, I recommend you use whole disk encryption in general... Uhm, do you wanna start a secure wipe? Do you wanna do some physical destruction? Now there's been some other DefCon talks in the past that I'll reference later about that... [pause] So the first thing I wanna talk about is locking your screen from a script. Now this might sound simple but remember you have a non-interactive process, right? So it's like "What screen?", right? It doesn't have a screen... and that's kind of an issue, so, if you're running various windowing systems, it's gonna vary a little bit. So if you're running Gnome you can get the session ID. By running, uh, bin login control list sessions. You can run bin login [cough] control lock session with that session ID. If you're running KDE or LXDE you can look at the display and you can use the X-screensaver command, alright? So basically you say "Oh, I'm gonna log in as root essentially and lock the screen. And in other systems if your just U SU dash C and then you run... [coughing] A command, screen lock command, whichever it is, that'll work. Now here's another little tip for you if you're kinda new to Linux. Notice that I have "display equals colon zero" before my command. This is a nice little thing you can do in Linux so if you want to run a command and you wanna change an environment variable just for that command and not in general you can do this - you can list all the environment variable you wanna set before you run your actual command and it works great. Alright? [pause] So here's my little lockscreen script. In this case I just put my username in there, [coughing] you could, somehow, you know, try to figure out what your username is. But keep it simple, right, this is your computer, you're trying to lock it down, so, you know, make it applicable to you. And I'm running, actually, Ubuntu on the test system that I ran so it's running Gnome and here's the little command. So I run list sessions and I pipe that to grep, right, grep for my username and I pipe that to auch and then I print the first item from that line, and that is my session ID and then I call lock session with that session ID. And it's very similar with some other windowing systems, alright? [background noise] So it looks kinda like this... I'm just minding my own business here, working.. one my little Ubuntu system.. and here comes some person I didn't boot, alright. So, you know, my computer just locked, now a, a little word about this. My computer just locked its encrypting files in the background. Don't be stupid! Okay, don't have a little graphic going "Hahahaha... [laughter] ...I'm like deleting sha, sh*t..." or you know "encrypting files..." right? That's, that's kind of a bad idea, right? You don't want to alert people as to what you just did. Or, I'm sorry, what they just did because, did you touch that computer? NO... No, you're not like that first guy from the movie, that was from the movies "The Core", you know, that wasn't you... Your forensic tech - I dunno, I dunno what he did. Not my problem, I was nowhere near it. You know, things happen... Oh, I forgot about that script, yea... we have that safeguard, sorry. [audience noise] Uhm... Alright, so encrypting stuff. [coughing] So if you wanna encrypt your personal files, again, you should be using whole disk encryption, you have a couple of options. You can use GPG which is [cough] Gnu Privacy Guard - it's the same thing as GPG but open, [cough] uhm, you can use openSSL, you can use Bcrypt and Scrypt [cough] and you can also use random encryption key, right... So you might temporarily forget your password when people ask you, right, when people ask you. And then if they say "Well, what did you use to encrypt this file or this set of files", [cough] if you can honestly say "I dunno..." [laughter] "I dunno the key. I'm sorry you can't co-herse me into giving you something I don't know..." But uhm, so I talked a little bit about generating random keys and somewhat securely storing them, I mean obviously, if you wanna stash this key somewhere,uhm, it could be discoverable. So, you know, I'll give you some general ideas - don't, don't be the guy that does the exact thing I'm gonna show you... [laughter] In this talk... right, it's kinda like. I taught a pen testing class a couple of years ago and I had some students in the class and they were like "I, I ran all these commands, to, you know, encode my stuff from and Dave Kennedy's medicine sploit book and AVG found it every freakin time", and I'm like "They read that book too!"... [laughter] You know. [pause] So here's how you can use GPG and again, I have a little usage statement and it will take a directory and for everything in that directory it's going to use four to loop through everything. And it's gonna say "Hey, is this file already encrypted? Does it have a GPG extension?". So that's what you see going on here. [pause] Let's see if I, there it goes... So here I'm saying, alright, if you, uhm, get the file name, get the base name, base file... Oooops! Sorry... Uhm, base file is a co, [cough] a command, or base name is a command that will get you just the filename or it could have a huge path on the front of it and you strip that off. And then you can use base file and the pound pound dot! [coughing] That is a construct where you can take that name, that shell variable base file and get just the extension off of it. So it's kind of a cool little trick. And then I check and I say... "Alright, has this thing...?" Oh! This is the wrong script, they're all about the same... alright. [coughing] So if it doesn't have a GPG extension then I'm gonna echo my password and pipe that to GPG and give it a pass phrase which is in file descriptor zero which is standard in. And I'm gonna say "Please use symmetric encryption using that key, and here's the file name and then as soon as I'm done I'm going to remove the file..." [coughing] So I'm going to remove the original file that is. And that's pretty much it. Openssl, very similar, just a different command. And I'm just looking for ENC as the extension. Now here I'm gonna use ASS 2 5 6 CBC. How many people went to hacker jeopardy last night? [cough] [pause] How many of you were sober enough to remember what CBC stands for? Okay, you can look it up later... [laughter] Okay. It was actually in a question, or I guess in an answer, technically. [pause] Alright, you can also use Ccrypt, Ccrypt you pretty much wanna use that trick where you set it in an environment variable so I set my environment variable "Jiggly" equal to whatever your password is [cough] and the I call "cc encrypt" on, and I give it "dash capital E" in that environment variable and in my file name. [coughing] So if I wanna randomly encrypt stuff.. [pause] I can get a, a random password, well there's a lot of different ways you can get a random password, this is just one. So we use our old friend "dd" [audience noise] if you do any forensics you probably know about "dd" - love- or hate it. You know, it's a very easy to use. My input file in this case is "dev/urandom" - uh, urandom is better than just "random", it's more cryptographically sound. And I give it a block size of one and a count of 128. SO it says "Please go to random, u, urandom, that is, and give me 128 random numbers, and then I'll pipe that to base 64." And that's my new password, right? So if I wanna get my files back I have to find a place to put this password so, uhm, some suggestions - again don't do exactly what I'm gonna do here. The middle of a log file, some obscure log file that nobody's probably gonna look at. You know, don't make it a, it a juicy system log that they're gonna look at because they're trying to figure out what's going on in your system... Uh, some random file, you can also use a random sector on the desk, including something that is unallocated, you could also use Slack space in your files. And, whatever you do, securely delete your script when you're done, you know, don't just like "Hey, yea I did all this awesome stuff and I stashed it here and I didn't delete the script that stashes it there..." So someone might find that. Uhm, so, here's a simple example of doing a random encryption, you know, I get a random a password using dd and then I go and I encrypt stuff and then [cough] when I'm done I'm going to securely delete my files. Right? [pause] So, speaking of securely deleting files you can use the secure delete package and it comes with SRM it's like RM but secure, Sfill for filling things with zeros or random stuff and Sswap which will nuc your swap partition or file. [pause] Some common options: dash D says "Ignore the dot files, the dot and dot dot files" which is probably a good thing, dash F is for "fast". I don't recommend you use that cause, you know, says you don't use urandom, uh, if you're really in a hurry, [cough] like if you have a lot of files maybe...maybe it's not such a bad thing. Dash L - lessen your security, sounds like an option you don't wanna use. [cough] Uh, dash R will recursively delete subdirectories... Yes please! Please delete everything in the directory that I set up. Verbose, uh, you're, you're running a script I dunno why you'd want that. And "dash z" will zero out things on the last right so it looks like it's empty space, right? So here's a pretty simple delete script, where I'm gonna go to the directory that you told me to burn... and first I'm gonna use Swap to kill anything in the swap file then I'm gonna burn your files using a "for" loop going through that directory. And then I'm gonna use sfill to get rid of the directory itself, and then I'm gonna hit the swap again and I'm gonna shut down the system. Right? So what if I just wanna wipe the whole disk? I'm just like "I, I'd, I don't ever wanna see this stuff again". Uhm, there you can get your data from dev zero or random or urandom, now if you use urandom for this process it's gonna be slow. Now, one thing I should say - yes, it's possible that if you have, uhm, a government that's going after you... If you overwrite your disk a few times they can get it back if they have specialised equipment and they're willing to spend, you know, a million dollars to get your hard drive back so... Choose your level of paranoia here. Uhm, might take, take a little while so if you're gonna do this I recommend you delete the important stuff first... [audience noise] So if you're gonna wipe a partition it helps to have more than one partition because you can't really do this on a mounted partition, right? So, you gotta unmount it first and here's just a couple of ways that you could do that... [pause] [coughing] PHYSICAL DESTRUCTION!! [laughter] Our favorite, right? Uhm, there's a lot of things you could do - charge capacitors, you could charge up some capacitors that are just gonna fry some circuits if you give them the command to discharge. There's always pyrotechnics, uhm, [coughing] hopefully you don't start a fire. [laughter] [coughing] Uh, destructive edges, you know, things that might go explosively through your hard disk platters and things like that. Uh, there's been some past DefCon talks, there was one - DefCon 19 called "That's how I lost my eye" and then aptly named last year - "How I lost my other eye". [laughter] Both very good talks I recommend you go out to YouTube and watch those. Alright, and the last thing that I wanted to talk about very briefly is how you could make your own mouse jiggler. Now I'll preface this by saying you probably don't want to... You can buy a mouse jiggler for 20 bucks so what's the point in building one? Yea, unless you wanna just do it for education. Uhm, if you did wanna make one I would probably use the FTDI VNC2, micro controller, w, FTDI, if you don't know them, they make USB stuff. So if you have an older Arduino you would have an FTDI chip that would be the USB, the serial conversions for you, uh, there's cables if you do any hardware debugging you probably use one of their cables that do stuff like that... Couple years ago they came out with a microcontroller that was really good at USB stuff it's kinda like an Arduino but it's, it also supports two USB devices and and or hosts... so if you wanted to code your own jiggler you basically have to create a USB HID device and send some commands. So, creating a USB HID is like this - you have to create a HID descriptor, this describes that device and the types or reports that it sends. As noted in the slide, I have shamelessly from John Hyde's USB design by example book, so here's an example of a mouse descriptor and it talks about where the minimums and maximums for each of the ranges, you know, does it have [cough] this many buttons or that many buttons? What do the reports look like? Right? So that's what this is about. [pause] [background noise] You can send some commands. So you send a, uhm, HID reports to the host, again, the cheapo ones have, like, a two button mouse with two axis so it send a 3 byte report. You could do something a bit longer if you wanted and you could add other axis if you wanted. It doesn't really matter what you do. [pause] [coughing] Right, so if you made your own you could make a little bit harder to detect. First thing I do is not use either FTDI's VID and PID, or, actually, their VID, you can set your own PID. Uhm, or, the one in the commercial mouse jigglers, just pick something random. Righ? You can also randomize the inputs a little bit better than somebody's doing. Do that and you could also randomize the interval, right. So it's not periodic and it's not super easy to detect. and if you're doing this yourself you're probably doing this as a prank anyway so would add, you know, uh, little keystrokes here and there. Uhm, if you wanted to add a keyboard to your device you would use something like this as the USB HID keyboard descriptor. Again, this is shamelessly ripped off from John Hyde's book which, by the way, uh, you can download for free if you go to ftdi chip dot come and just search for USB design by example. You will see this book, it's, it's freely available with example code and all that. Okay. [coughing] If you do decide to add some keystrokes, something that you should be aware of - you're not using ASCII codes, you're sending keystrokes which are different. So you'll have to map those, uhm, you can suppress multiple keys at once. You know, you can make things happen, like, oh, I dunno... You wanna lock their screen or things like that. Yea, uhm, the other thing is, yea, uhm, you can have those keys set,uhm, to specific values but if you're just messing with somebody do you really care what they are? Just randomise it, just like, assign random junk. [coughing] One that... You can get more details. A talk I did last year was called "One device to pwn them all" I actually went through making a scriptable HID keyboard and some attacks and things that you could do with that. [background noise] Some other ideas, uh, you can convert that annoying device into a key logger pretty easily if you bother to make one. And, you could combine that homemade jiggler functionality with some stuff I talked about last year, right? Alright, so with that, if you have any questions, uh, you can always hit me up on [cough] Twitter at P Pulstro. I'm also the handsome guy you might see sporting a deerstalker hat, uh, at a conference. You can also catch me at BloomCon, little plug, it's little conference we started this year, uh, [cough] it's gonna happen next your March 24th and 25th. We're over in Bloomsburg Pennsylvania, I know most of you are like "Where?", uhm, but we're a couple hours from Philly, New York City, DC and all that so... It's a good time, but... With that if you do have any questions - I was told to ask people to come up to the mics so that it could be heard on the recordings. [pause] And I might have some free stuff to give away if you have a good question.., Just saying. [laughter] Wow! Here they go...  Would it be possible to design the scripts that when a key jiggler, uh, mouse jiggler is plugged in to, depending on the design of them, it rewrites the firmware so than any other computers it's plugged into locks those computers too?  Okay, so you're saying, someone answered it's a mouse jiggler and you wanna infect the mouse jiggler? Yea... Uh, I do, I can't think of a mechanism where that would work. I'm not gonna say it's impossible but I'm gonna say probably fairly difficult. Right? Any other questions? [pause] Yea, okay...  Does it work for only one computer on the entire network?  For? Okay, so you could deploy these scripts on your entire network, if that's the question you're asking. Okay....  Oh, she just answered my question. [laughing] Okay...  Sorry! [background noise]  Have you thought about, uhm, detecting the mouse jiggler and then putting this into a log file which then gets deployed to the other computers so if you detect one that took a couple of minutes the other ones will then immediately detect it? I haven't thought about that but that is a good idea. I think that is a mouse-jiggler worthy question! [laughter] [background noise] Alright. Yes sir. Uhm, your talk details a lot on Linux. Is there a way to do this on Windows or Apple computers as well? Yes it is. Certainly with Apple computers because Apple computers [coughing] are sorta running Linux, right? I mean a different varying, variant of units in that family tree. Windows - I'm not gonna say it's impossible, I'm just gonna say I don't know how to do it cause, it's, uh, I don't use Windows, alright? [applause] Windows is great for hacking on...[laughter] And, uh, doing forensics on but, uh, actually my latest book is about doing forensics on Windows subjects from Linux where you get real power... so it's basically a little, little plug for my... It's, uhm, how you can do this without, uhm, spending 10-thousand dollars on software. So like using all the free and open-source stuff. Uhm...  Okay, I'm getting a sign that I'm done. So... Thank you very much! [applause] 