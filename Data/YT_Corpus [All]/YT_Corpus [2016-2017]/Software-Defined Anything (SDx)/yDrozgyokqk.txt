 welcome to my session at scaler automation using PowerShell to talk nitro so first a little introduction I've been working well I think it's almost 18 years now in IT doing some consulting for now for pepper bites a Dutch consultancy firm been to deafen many different customer places did a lot of different Citrix implementations and for the last year I've been working on NetScaler and as a little side hobby project I got into PowerShell got hooked on it and decided to see how much I could control the net scalar configuration through PowerShell scripts I'm also a citrix technology professional since 2015 so I get to share my knowledge and provide feedback to the citrix product managers through special sessions that we have with them and some of you might know me as the author of the Zen app expert cookbook I know the version is kind of outdated but it's a it has been a lot of fun to write it and well perhaps I should write a sequel so what are we going to talk about today first of all I thought it would be nice to have like a small introduction to make sure that we all know what REST API czar what nitro is all about and then just move on to the fun stuff and show you some of my NetScaler configurations that are the automated scripts for them and I included some demos and if I do not run out of time because I do want to make sure that we have some time for questions and answers at the end of the session I'll even share you some bonus slides that I put up there that show you how to even deploy or automate the deployment of your netscaler VPX so first of all as I mentioned a small introduction to nitro and rest api's but I thought it would be better if I invited Dave Potter from Citrix himself up on stage to share his vision of NetScaler automation awesome thank you Dave Thank You Esther yes so I just want to take a few moments not too much time but uh so I'm Dave Potter tme for NetScaler and my focus is on automation and being able to orchestrate new policies through these changing and hybrid environments so I want to take a few moments just to put into context where automation is today and what today's course really how that aligns to your interests so we're seeing a huge transformation in the data center right now we're seeing the integration of services become part of the network and we're seeing the network yet become more complex as well so we're seeing today that 12% of all services deployed are now micro services and we see that because we're using all of these technologies to become more versatile so twelve percent of services are becoming much smaller rather than having a behemoth monolithic app that has multiple ports multiple IP policies and multiple things happening we're now seeing where you take that carve it off into little pieces and to play those pieces wherever they make the most sense in the network or in the environment we're also seeing a 49% of those services are cloud based so we're seeing those be deployed whether in that local cloud or in the public cloud and to connect we're having to now no longer go to a single device we may not even know where that device is in order to provision it so we're seeing this transformation and we need to know where the provision and what to do with it we're also seeing a lot of these services ride inside Linux containers for which we now have a new product to address that you can quickly see that with this deployment problem where you can quickly see that as the services become more and more and more because now they're micro light micro eyes we're seeing the need to be able to have a central manager into something to be able to tie it all together so the traditional model where we started was you'd have your own groans system your own homegrown application it would just talk nitro or XML directly to a single NetScaler well that's no longer the case now that that NetScaler may not be on prem it may be in the cloud or may not even exist yet maybe it's going to be spun up we're moving toward then is the need to be able to make a common interface available to other systems and orchestration tools so we're seeing that now with the introduction of Cisco epoch being able to manage NetScaler OpenStack being able to manage NetScaler we're able to now use those orchestration or orchestrate drawers to find the right NetScaler to push that application policy down before this you would have to know which NetScaler to go to so it becomes much more important as we micro micro size the services and we spin out so many we have thousands of them across the network we need something else to unify that interface to the NetScaler mass is a good example of a new tool that we're introducing now to take to offload some of that need to go directly to the net scaler the other thing is the net scaler changes it has different form factors different sizes and may be used for different purposes the nice thing about all of these integration points is they all use nitro at the bottom so when it comes to automation whether it's using a controller to simplify your interface to the net scaler or to use nitro or even PowerShell which is where we're going to cover the topic today it's very good for you to be able to have that simplification in mind now this doesn't mean the network is getting simpler it just means that the interface to the network becomes simpler to use because the network becomes more complex so our focus today is going to be on using PowerShell to automate some of those tasks that are commonly done in NetScaler and this is something that we see typically just curious how people are using Microsoft do most people here use Microsoft apps or is anyone using PowerShell today in your environment for services all right great so this is a good material for you you're going to be real excited to see what we can do within NetScaler so ester has prepared a whole lot of content it's very technical so I'm glad to see a big show of hands for or that because it's going to get into show what we can do at a higher level and how we can automate a lot of these deployments within NetScaler so with that I want to turn this back over to Esther and enjoy the rest of the talk and the detail on the deployment for NetScaler Thank You days so let's get on with some of the fun stuff I'm not sure how many of you already know what the rest api is all about but it's kind of like a client-server protocol that is supposed to be or is stateless not supposed to be but it is stateless and it's had in mind to make it a very simple communication protocol between the client and the server so it's based on HTTP protocol and it will use port 80 or 443 if you're using HTTP to communicate with it it makes it very easy to use even if firewalled environments and if we're talking about nitro we're talking about the restful service that runs on your net scale so it's a web service that allows a client to communicate with your net scaler and as I mentioned it uses the HTTP protocol and the HTTP protocol is all about these specified parameters that you provide while communicating to the restful service so it starts with a verb a URI that the version that you're using a Heather to put in the metadata and your body and if we are talking about Nitro the verb just simply means the HTTP method that we are going to use and these are the basic HTTP methods that we can use with REST API calls so the get is to retrieve information the post is to put york to post your configuration to the NetScaler and the delete well I think that explains itself so if we are talking nitro there are two different URLs stems that we can use for instance we can use the slash stat to get statistics from our NetScaler which can be useful if we want to see how many is of our load balanced environments and whether we need to upscale more service at the back end or even down scale to preserve some of our power consumption and there is a slash config which basically is the one that I've been toying around because I wanted to be able to automate the configuration of my NetScaler in addition to the basic URL stamp we also need to provide a resource type because nitro needs to be aware of what resource we want to configure which can also be added you can also use the resource name to add that to it as well to make it even more specific and if we're talking for instance the the URL to to automate or enable the NetScaler features we also need to specify the actions that we want to perform with our commands so you also need to add action and the specific action that you want to use in this case enable to your URL the other part is the content header the request header I'm sorry the request header the request header allows us to specify a special content type that declares or lets nitro know that we are using adjacent payload in our request body so it knows what the format of the information will be and how to interpret and get it translated to the right configuration into your NetScaler and as I mentioned we also include adjacent payload into the request body to provide nitro with the information that we want to include in our configuration so below there are two different samples of the JSON payload the first one is to make sure that we provide the right credentials to log onto Knights nitro make sure we have the right user credentials to be able to add configuration to the NetScaler and the second one is an example to show you that we can even upload multiple configuration items within one command or one request body to sum it all up because maybe I went a little fast but that's because I want to go to the good parts the powershell scripts this is the information that i need to be able to talk nitro to my NetScaler so why would we use nitro well as I mentioned before it allows us to have to create simple HTTP calls to configure our NetScaler and by using this staff URL we can also create interactive scripts that monitor our NetScaler configuration and even adjust it on the fly to make sure that we can anticipate the load that the netscaler is dealing and if we are talking nowadays data center solutions we are getting more and more into a DevOps situation where we need to be able to automate it because doing all the manual performance and configuration is taking up so much time and it's very error aware so we need to make sure that we get up to speed and be able to quickly deliver the services that we want to provide to our customers so as of version 10.5 and up there have been some enhancements to the nitro restful surface that enables us to even automate more configurations for our net skaters so what do I need to if I want to start automating with Nitro first of all I need to have a net scalar version 9.2 or up I need to have a rest client in this case or in my case I started out with postman which is an add-on for Chrome that gives you a very visual interaction with the nitro surface or we can use a programming language as nitro provides us a lot of different SDKs for the most popular programming languages among which is PowerShell and well we all know probably if we're using some send desktop implementations that documentation for PowerShell commands has not always been up to the standard that we wanted it to be from Citrix but with nitro the documentation is pretty good so it's available as a download from your net scalar appliance and it runs a set of web pages that includes a getting started guide that simply walks you through all the steps to set up your first scripts and your nitro API and and it even lets you zoom in in this case into the configuration part and that NS feature that I wanted to enable it will give me some information on all the different properties that are associated with the NS feature and even the enable function and all the information that I need to provide so it's very easy to find the URL that you need to use the method and and how to build your JSON payload and if you're still looking for some more practical information there is a whole block theory on the Citrix blog that gets you through each and every step of the way and even provides you a very complete PowerShell module that you can import into your PowerShell scripts and allows you to even use very simplified functions to talk nitro to your NetScaler and these are the the functions that are the the different configuration areas that are already included into that PowerShell module when I got started with the PowerShell module I realized that most of the functions were to ask configurations to the module and in my case I also wanted to be able to retrieve the information so I could interpret myself and program substantial actions or be able to modify the configuration so I've been toying around with the module and added some more functions to it so let's start with a very simple example I'm slowly building up from the 101 to the next level so if we wanted to configure for instance the NetScaler features there are different ways to do that nowadays we can use the GUI which Allah gives us a very simple interface to just tick the Select boxes and have the features enables if we press ok some of you that are more into programming and feel more comfortable with the CLI also have that option with just on one line of code but those two methods still require you to do some manual actions like logon to the admin console make your putti connection as an ssh connection to your NetScaler and type in the commands so with nitro we have an interface that allows us to use for instance a scripting language like PowerShell so with the PowerShell module all I have to do is just import that PowerShell module and I do hope that the code is readable also from the back of the room thank you so I import the PowerShell module and after I set up my initial connection to Nitro I simply have to call the enable Ana's feature function specify the features that I want to be enabled and run the command and of course I have to close the connection just to have some very secure and code but for those of you that want to be more into control and like to geek out it's as I like to do you can also use the built-in info crest methods from powershell but that requires you to build your own JSON payload so that's what I did as well because I started to write these additional functions for the module so you simply create your JSON payload you combine that all with the other information that nitro needs like the URI the content type for the request header and you simply use the info grass method to push it all to nitro so far I guess everybody is still with me ok so so let's get to more practical examples so what about some basic settings well for those of you that have the experience of logging on to a NetScaler for the very first time you know there is this first logon wizard that pops up there's asked you if you want to participate in the citrix user experience improvement program and its ask you for some simple or some basic NetScaler configuration information so i figured i should be able to just program that as well with PowerShell design so that was kind of like my first Strahm to see if it could do the configuration so I added some additional functions to the module and it allows me to set all those settings that are required on the first logon like the time shown the dns name server etc and to show you that that actually works I kind of prepared a little demo and to be honest I pre-recorded the demo just to be sure so this will show you the screen that we all know when you first log on to your NetScaler with the NS root credentials and if the code is not entirely readable at the back you can go to my website and click on the images that have the code available as well just to make sure that you're not missing out so in this case the license is already agreeing because I kind of uploaded the file already and wiped the NetScaler but it still reads the license file so what my code does is it does add all those different configuration items like your subnet IP your hostname DNS IP name timezone and basically going ahead of the video the timezone and basically allows you to upload the license file as well and in my case I just retrieved the license information from the file that is already uploaded but Nitro does include order PowerShell module just includes a method to upload the license file as well so let's just run the script see what happens so basically what I did was I allowed the scrip to use a lot of get functions to make sure that the configuration that I post is definitely in there and I can retrieve it as well through the nitro interface so the script runs very quickly but I just wanted to make sure that all these settings are also in the NetScaler configuration so when you try the videos at home you think you don't have enough time to comment on them so now you see that I'm not presented with the first logon wizard because it already detected some configuration in the NS config and this is just to show you I hope it's visible enough that the different configuration that I pushed through nitro are in the NetScaler configuration so it's just a little check to make sure that the subnet IP got registered the timezone is there the hostname is implemented and the names home is there as well for the name server I'm sorry and as I mentioned the license file is uploaded and all the information is there and you see it I can also retrieve the version and the license version like platinum and enterprise so hopefully that kind of convince you that our basics the basic configuration can be pushed through with PowerShell to nitro so what about some other basic settings what I did was for instance the NTP servers because that's very important to ensure that time synchronization is running in my environment I added some functions to the module for that as well to make sure that not only the NTP servers can be configured but make sure that the NTP sync is also enabled or user administration as you can see this is a little bit more code because I needed to not only upload or create the user accounts and the groups but they also needed to bind those user accounts to the different roles that are on the NetScaler or groups if I wanted to make sure that I could integrate for instance LDAP configurations or authentication so I played around with that as well and I'm now able to configure that as well through nitro but I guess some more practical examples should be can I configure a load balancing rule set so this is kind of an example of some of the basic load balancing configurations that we did at customers for storefront and the reason why I picked this is that I'm also using HTTP to HTTPS HTTP redirection on it through rewrite and rear spoiler sees on the net schedule so first of all I have to configure my rewrite and response policies to make sure that users are redirected to the default store in case they're just using the basic URL off storefront and that if they are using HTTP they are redirected to HTTPS and then I needed to make sure that the service surfaces and service groups were added through nitro or configure through nitro and last but not least I needed to create the fee servers and I needed to create monitors for it because with storefronts you have to have your specialized storefront monitor if you want to make sure that the storefront surface is up and running if I would use the default ping monitor then I still was not in the clear if the service was up and running so I was able to get nitro to configure that as well through and make sure that the bindings were in place as well so the policies were connected to the fee server and of course I made sure to convince you all that it is doable that I recorded it through a demo so once again I use these different functions that I defined in the PowerShell module that I imported to create all the different steps that I previously explained so adding the server's service groups surfaces monitors and the virtual servers that I wanted to use on the NetScaler so as you can see I also made sure that it would show me the configuration that I'd just set through nitro just to have like check to make sure that the right configuration was up there and s2 GUI gives me a very visual interface to make sure that all the configuration is out there this is just let you know that the monitor is in place that the surfaces are created in this case the service is a local IP address connected localhost surface to make sure HTTP is redirected to HTTPS the service groups for a storefront and the to be servers one for the HTTP redirection and the other one for the SSL connection to storefront and the reason why it's still down in this demo is that I kind of skip the whole SSL certification in import because somewhere I had to move to a new house and time ran out before synergy and so that's still a small set of functions that I need to add to my module to make sure that I can upload the certificates as well which uses the same mechanism as uploading the license file to magnetic ale so basically now I'm able to automate the configuration of my NetScaler basic settings and my load balancing so I figured that with PowerShell I'm now able to automatically connect to an existing NetScaler appliance and push the configuration to it so no more human interaction is required which allows me to quickly set up demo environments or test environments or development environments I might even use the new NetScaler CPX for instance which also runs the nitro interface but that still required me to especially if we're talking about NetScaler PPX it's still I still needed to import the VP X file and give it its first through the console interface give it an IP address so I still needed some manual actions so I started to check the knowledgebase articles from Citrix and I found this great article that described how you can auto provision and SK taffy px on sensor fur for instance and make sure that it gets the predefined IP address on first boot and as you can see it all has all the X 'command nicely specified but it didn't have the PowerShell script so I figured what the heck I'm still working with PowerShell I'm having fun why not see if this works as well because that will allow me to not only automate the configuration of my NetScaler but it will also enable me to automatically deploy a NetScaler so the AVA be able to automate maybe even the entire series infrastructure and have like an instant demo environment up and running so I just made sure that this is already on the block side so you check it out if you have some time and you are interested in it but I do realize that we're not all running XenServer in production so I dig a little bit further into the knowledgebase articles I also found how to do it for on the ESX server so I can now also do this for feasts where environments so there is a whole example PowerShell code for it that even allows you to specify for instance the MAC address that you want to assign to your interface and that's already up on my website as well all the other stuff but for I still need to write some some out and make sure that I gotta get to that as fast as I'm back home after synergy and as I mentioned before nitro includes a method to upload files to your NetScaler which is very nice but it does require you to provide the file content as a binary string and even specify the file encoding that was used and I have to admit I'm not very good at generating the file content as a binary string so I looked a little further into what my options were and I discovered there's a winscp wrapper that I can use within PowerShell to upload files and what I like about this option is that I just have to point it to the file location and have it uploaded so I don't have to get the binary string correct make sure that I when I copy and paste it I did not leave out just a couple of lines and it allows me to simply upload certificate files or for instance upload the customizations that I want to use for my web interface and I rode the block for that one as well so you can check it out and now for the fun part because I realized that it took me quite some work to complement the PowerShell module from Citrix with the additional functions and functionality to configure even more complex configurations for my NetScaler so I hope to do with next week already but I created at least the github space and I will be uploading my PowerShell module up there to ensure that I'm sharing it with the entire community community because for me sharing my knowledge with the community is very important and I will make sure if we are talking about community that I will keep you updated through the Citrix user group community special interest group for networking because that's where we can totally geek out on that scale so figured if I just make sure that I keep you updated on that channel as well that we may be even able to interact and exchange our code and improve this module because if I'm really honest I still feel kind of like a powershell newbie so I'll probably need a lot of feedback to make sure that the code is really robust and has all the error handling in it that I kind of wanted to have so I hope that I gave you a very clear presentation of how I'm using PowerShell and nitro to automate my NetScaler configuration and if there are any questions feel free to step up to the mic or type in your question online and I'll try to answer some of your questions so no questions it was all perfectly clear you're all very eager to either get out and start your own information or just make sure that time goes on and we can't get to the party yes sir nice Jimmy Lee basically from this demo it showed a lot of no configurations however have you started doing anything for generating reports or process flows that you can do from that not yet is that something you're looking down the road to post up oh I wanted to do so much because I got really excited about it haha what time was so limited so I basically wanted to so I am looking for an opportunity to get into the staff part of nitro and see if I can generate like monitoring reports or configuration reports or see if I can have it in a kind of October way respond to different triggers that I can configure but so far I haven't got around to that yet what about anything around GSL be because we're developing more of a GG SOP form - for one of our agencies well I had a hidden slide in here about GS lb but I didn't get the functions up yet so there is there is some configuration already in the PowerShell module for to add your DSO B configuration but I wanted to make sure that I test drive it with the GL so B configuration that I have up and running at one of my customers to make sure that is connected to the practical examples that we have so any more questions just checking to see if some people are still awake online so no questions there so then I guess I can release you early thank you very much for listening to my story 