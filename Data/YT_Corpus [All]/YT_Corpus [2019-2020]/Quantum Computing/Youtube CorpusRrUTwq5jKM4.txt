 call got get counts and pass in our circuit and there it is that's the result of executing our quarters [Music] hello everyone welcome back to coding with kiss kit so traditionally when we learn new programming languages the first application that we write is what's called the hello world application and the purpose of this application is to show first that you've installed a programming language correctly on your computer and second to walk you through what a regular application cycle looks like so how you program an application and get it to execution that kind of workflow so in this video what I hope to achieve is show you that workflow by running your first hello world application in quantum mechanics using Kiska so in the previous episode we showed you how to install kiss get on your computer and in this episode what we'll do is get you to run your first quantum program so hopefully by now you've installed kiss kit and what I'm going to do is I have my terminal window open I'm going to start a Jupiter notebook where I'll start writing code to executing kiss kit so I have my terminal window open as you can see here and I'm going to write Jupiter notebook and hit enter and that gives me a new Jupiter window on which I can start programming okay so now that we've opened a blank notebook what we're going to do is start writing code in tisket now for those of you who are familiar with Python kiss kit is written in Python so a lot of it will look very familiar to you and for those of you that don't know don't worry we'll get through the fundamentals that we need before building complicated quantum circuits so follow along so the first thing that I'm going to do is to do from kiss kit import everything once I've imported everything from kiss cat the next part is to build the quantum circuit and to build this quantum circuit as I promised we're going to be building a two qubit quantum circuit so what I'm going to do is first create a two qubit quantum register and then I'm going to build a two classical bit classical register so that I can take measurements from these quantum bits if I can just type better so now we've built a quantum register in a classical register and now we can build a circuit using those two now we've created a quantum circuit and at any point that we modify the circuit if you want to look at what the circuit looks like you can draw it out by doing the following I'll do this one line here so that we can see our drawings and then I'll just do circuit draw so as you can see what we have is two quantum bits in the circuit and two classical bits in the circuit the quantum bits are q0 sub-zero and q0 sub 1 and the classical bits are C 0 sub 0 and C 0 sub 1 all right now this circuit is not very interesting there aren't too many interesting things going on here there are no gates so what we're going to do is now build up the gates into the circuit so in order to create entanglement the first step is to apply what's known as a Hadamard gate onto the first qubit and so what I'm going to do is circuit the Hadamard which is H for short and I'm going to apply it on the first qubit so once we've done that again you can apply your drawing function and this time what I'm going to do is show you a way to make a better plot of your circuit instead of using something that's text-based to use something that plots out in math love life so now that you have a Hadamard gate applied to the first qubit you see that H that showed up we're going to then create a two qubit operation called the controlled X and that's done by doing the following this two qubit operation is like a logical if so it's going to be sent in the quantum version of if this then that and the control is going to be the first qubit and the target of that operation is going to be the second qubit sorry and there we go let's look at how our circuit looks there we go now our quantum circuit is composed of a Hadamard gate and a controlled knob and the idea here is now with these two simple operations we're able to generate entanglement between Q 0 Sub Zero and Q zero sub 1 so now that we've built our quantum circuit using this Hadamard gate and controlled X Kate what we're going to do is measure the quantum bits or qubits and take those measurements and store them into the classical bits and what we're going to do is write out that code to do that circuit that measure what I'm going to do is take the results from measuring the qubits in the quantum register and store them in the classical register okay so we've done this by the way those outputs that show up are simply related to a quirk of Jupiter notebooks I wouldn't worry about them for now so your circuit has measurements built into it again as always you can look at what your circuit looks like at any moment moment by doing circuit draw okay so this is what our circuit looks like finally we have our quantum operations the Hadamard in control Dex gate and we have the measurement so that we can understand what happened in a quantum circuit at the end so the next step is to run the circuit and I'm going to do two things the first thing I'm going to do is run this quantum circuit on my classical computer and see what happens when I simulate a quantum computer here and then when I'm once I'm confident with the quantum circuit what I'm going to do is send it off to a real device at IBM and then see the results that come out of running this quantum circuit on a real device so in order to simulate the circuit what I'm going to do is use the air component of Kiska the idea here is that air is what we use when we need to do simulations of our quantum circuits on our local computer so the simulator can be imported from air by doing air get back-end and the name of the simulator is chasm simulator if you're curious the name chasm comes from quantum assembly language okay now that we've imported our simulator it's time to execute the circuit so what I'll do is call execute what I'm doing is executing the circuit that I've built so far and what I'll be using is the simulator as a back end so the back end on which I'm executing is the simulator that I've imported and that's it so now that we've executed our quantum circuit the question is what are the results that came out of that execution once we've executed our quantum circuit let's get the results but back by doing dot result and assign them to a variable called result so now the result variable holds the information that came back from executing that circuit let's look at what result itself contains so to do that what I'm going to do is import visualization tools from tisket so what I'm going to do is from kiss kit that tools dot visualization import plot histogram once I have this plot histogram function imported from Kiska what I'm going to do is take that result call got get counts and pass in our circuit and there it is that's the result of executing our quantum circuit so as you can see we get roughly 50% or with 0.5 probability 0 0 and with almost zero point 5 probability 1 1 so these these small errors are because we're running a limited number of shots on our simulation instead of an infinite number of shots now that we're confident that our circuit is doing what we expect let's run it on a quantum computer at IBM and see what happens so in the previous video you learned how to take your API token from the IBM quantum experience and save it on your computer so that you can access IBM to quantum devices so let's load our account here so I'm going to write out IBM Q dot load account okay so once our account is loaded we're ready to choose the device on which to run our code and then to continue to get results so once i've loaded my account I'm going to say provider is equal to IBM Q get provider and I'm going to say the provider is IBM dash Q hit shift enter and then I'm going to say that quantum computer was which we're working is provider dot get back-end the name of that particular device we'll be working with is IBM Q underscore 16 underscore Melbourne this is just what we named our devices the device isn't actually located anywhere in Melbourne we're going to say the job is execute the circuit that we've built on the back end which is called queue comm going to remove these spaces and spell circuit properly and then I'm going to say from biscuit Tools dot monitor import job monitor so the idea here is that these jobs are submitted to the real devices and because they're public devices there's a queue so the job monitor allows me to say job monitor taking in the argument of the current job that we started and we see that the job is queued now and in fact it's a job number two in the queue depending on how busy the quantum devices are at that time the job might take a few minutes and once you get this message that the job has successfully run we can say result is job dot result next we'll plot the results by saying plot histogram of the result get counts and I'll pass in the circuit as an argument so looking at these results let's compare how they looked against what we saw with a simulator so you see the difference between the two is that in a simulated case you only got 0 0 & 1 1 but when the code was run on a real quantum device we also had a small number of results showing up in 0 1 and 1 0 even though the majority of results are still at the 0 0 State and the 1 1 state so let's think a little bit about why that happens the difference between the simulated case and the code that was run on the real quantum device is that the simulator simulates a perfect quantum device in the meantime the real quantum device is susceptible to small quantum errors these quantum errors are getting improved every day as a result of the technology improving so we expect to see these counts getting lower and lower and the results getting closer and closer to the ideal simulations however as you can see here the devices are not perfect today and that is why you see a difference in results a small change from what you see with the perfect quantum computer simulated on our laptop so there you have it we've gone from start to finish and creating our first quantum hello world application so now the question becomes where do we go from here would you like to see more focus on quantum games quantum applications the devices themselves would you like to learn more about how these applications come in in industry where do we go from here let us know in the comments down below and we'll see you in the next video [Applause] [Music] [Applause] [Music] 