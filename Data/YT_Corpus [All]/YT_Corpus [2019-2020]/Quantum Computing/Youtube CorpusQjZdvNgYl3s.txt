 the issues are a great place to start contributing and in particular if this is your first time developing you might also find it a good place to start by clicking this good first issue [Music] hey everyone welcome back to coding with kiss kit this is a so in today's episode we're going to be making our first contribution to the open source software kiss get the idea here is that we're going to look through the issues in kiss kit in particular in a component of kiss kit called kiss get Tara and among these issues we're going to pick one interesting one and find possible solutions to it once we've identified a solution we're going to submit that solution back to the open source software and in this way we're going to have become official contributors to the open source software this is a meaningful contribution that we're making because it impacts not just the software but the entire quantum computing community so in this video we'll walk through all of these steps individually will download kiss kit we will find these solutions on our computer by navigating through the code and eventually we'll go through the process of submitting changes through the code back to get out so let's get started so as we've mentioned before a kiss gate is open source software and what that means is you have the ability to contribute to it and even fix issues and contribute to the development of quantum software so what I'm going to do here is start off first at the Kiska toward webpage here I have my browser open I'm going to go to the github page for kiss kit and github is where the open source software lives when you go to this github page you'll see a few pinned repositories and a list of other positive orry's and we're going to start off by looking at the four elements of kiss kit so Tara igneous aqua and air and the idea here is that Tara is the foundational layer and this is where we've been building circuits in previous videos this is how we've been executing things this this this Tara foundational layer is where we'll be focusing on today what I want to do is show you how we can fix an air work through an error with you live and submit a change to the code so that we fix that error in kiss get there so the best place to start is by clicking this kiss kuitar repository and looking here in the issues the issues are a great place to start contributing and in particular if this is your first time develop you might also find it a good place to start by clicking this good first issue label when you do that now all the issues that you're seeing are those that have the good first issue tag applied to them so if you don't find anything that says good first issue to click on you can also just type this in the search box so you just say is issue is open and the label is good first issue and then hit search so these first good first issues are great to work on and to get started contributing to Kiska and today what I want to do is work through one of them with you so looking down the list you can see a list of ones to work on so let's say maybe this one so the idea here is that someone has reported this issue and the issue says there is an inconsistency and how the parameters of the gate are showed in the circuit plots so it looks like this code which by now you should be familiar with is adding a u3 gate and a cu3 gate and is drawing them so this is the output of the drawing function and you can see the person is reporting the inconsistency between how these numbers don't have any parentheses around them but these ones do okay so the issue we have to fix is figuring out why there's this inconsistency the person is saying if I have to choose I would go with removing the parentheses everywhere but for sure it should be everywhere the same okay so the person is reporting another inconsistency so he's now saying circuit all dot draw output MPL and it looks like if you pass in the argument use PI format you get PI's here but you get nothing on this gate if you don't use pi you get back the previous plot but you have this inconsistency with the parentheses okay so it looks like generally we're going to be trying to fix this problem one good habit to have is to look through what progress has been made so far so someone here commented that they're interested in trying this out before shooting this video I took a look at the issues and decided to maybe try and work on this one so I asked for to work on this and I said how is this going and once I got permission to go ahead I'm going to be working on this so it's just a good idea to make sure that you're contributing but you're also not stepping on other people's toes let's go ahead with solving this issue how do we start how do we begin so what I'm going to do is first begin by trying to modify this code right so somehow we need to get this code onto our computer so I'm going to go to the Kiska terror posit or e and then I'm going to fork it into my personal github so I click the fork link and I say to my own profile and once this Fork is complete I'll have a copy of the code into my own profile as you can see now the github pages my profile slash Kiska tera so this branch that I'm working on in my own Fork is even with master and from here I can continue with trying to work from my own computer ok so once we forked the repository to our own personal github then we click the clone download link and copy over the link to clone this repository and in our computer we go to terminal and type git clone and bring in the address for the repository keep in mind here that the address that I'm pasting here is from my own personal get page once the cloning is complete if you look in the directory that should there should be a folder called kiss Cantera let's change into that folder so I'm going to say CD kiss kit Tara and I'm going to say git status so you see our branch is on master and we're up to date with origin master and in particular what I'm going to do is say git remote - V and look at where origin points so origin of this folder points to the repository where we did our fork there's also an upstream so I'm going to add the kiss kit repository from which I forked to upstream here so I'm going to say git remote add upstream and then I'm going to bring in the address of KISS get Tara copy this particular link and paste it here notice that this time the upstream is pointing to the original kiss git repository once you do that then say git remote - V and you should see that the origin is pointing to my personal repository and the upstream is pointing to the Kiska repository it's a good idea also to work on branches so what I'm going to do is say git branch and I'm going to say the branch is going to be fixed issue and if I remember correctly the issue number is 28 22 so I'm going to say the name of the branch is fixed issue 2822 branch and then i'm going to say get check out fix issue 2822 branch and that means I've changed I've changed over to this branch that I just created and I can see git status and you see I'm on this branch now instead of previously we were on master when we started this work all right now we're ready to start working so in order to see any changes that I'm making in in the code what I like to do is work in an environment for Python that's different so I'm going to also create a new environment so to create the new environment I'm going to go to kiss-kiss org slash documentation and I'm going to follow the instructions in the installing page and building kiss kit packages from source so we'll put a link to this page in the description as well but the link that you're looking for the instructions that you're looking for are here so kondeh create - why - and kiss get dev and so that's the instruction that we're going to type in to our terminal so I'm going to say Conda create - why - and I'm going to change the name of the environment to fix issue environment and I'm going to say python equals three and Conda goes ahead and creates that environment and now we can activate that environment you can simply paste the instruction here Conda activate fix issue environment and now you see this changes from base to the fix issue environment the next step is to install kiss kit Tara from source so we are already in the kiss get Tara directory so the instruction to do that is also on this page in our browser so we're going to go down to this section which says install Tara from source and we're going to run this list of things so in particular we've done our own clone so we're going to ignore this line we're changed into the directory already so I'm just going to start from this particular line which says pip install site on that's successfully installed and then I'm going to say pip install - our requirements dev and once that completes I'm going to go to the editable node instructions and do pip install - e dot so click install - e dot so the - etag here allows us to install pip in editable mode which means we can edit the code and we don't have to do this installation over and over again in order to see changes from the code reflecting in our work okay and once that completes now we have Tara installed in this particular environment called fix issue environment and now we're ready to start working so what I'm going to do is quickly double check that Tara is installed so I'll say Python you can see that there's Python three point seven point four in my environment and what I'm going to do is say import kiss kit and run that line and you see we get an error that says there's no IBM queue provider and there's no kiss kit err that's fine because we haven't installed these particular packages but it looks like Tara itself is installed so again what I'm going to do is say kiss cat dot underscore underscore kiss can't underscore version underscore underscore and that tells me that I have this Tara which is the development branch and I have none of the other packages which is exactly what we expect given that we just installed Terra only so let's think about where we are now so we have forked the repository from kiss gift to our own github profile and then we have downloaded that code onto our computer by cloning using github and what else have we done we've also installed this particular version of kiss kuitar that we've downloaded into this particular environment that we've created okay so what does that mean now we're ready to start running things with this version of KISS Cantera so I personally like to write code in Jupiter notebooks so what that means is now I need to launch Jupiter notebooks and start writing code what I'm going to do to keep things clean as also create a new kernel on which we'll run code in the Jupiter notebooks so the instructions to create a new kernel are available from this page and we will also create a link to this in the description below so if you scroll down to kernels for different environments section of this page and you use this particular instruction this is the one that I'm going to use in my command line so I'm going to copy this over I'm going to exit out of this Python instance and so right now I'm in the Kiska tariff folder I'm going to go one above it and then I'm going to paste in that piece of code from those web and I'm going to say the name of the environment is fixed issue environment and the name is again going to come here so this is the name of the environment that I'm installing the kernel and and this is the display name that will be seen in the Jupiter notebook so type that in and we have the kernel installed so what I'm going to do then is just say Jupiter notebook so that creates a new jupiter instance and what i can then say is new fix issue environment so this is the one that we just created i'm going to create a new jupiter notebook and this is the kernel that's going to run so let's do the same thing as before I'm going to say import kiss kit hit enter again we get the same errors that we did that we got on the command line which is we need to install kiss get air and kiss get IV MQ provider and if we say Kiska dot underscore underscore kiss get underscore version underscore underscore we get the version of Terra and nothing else is installed so far so good so now we're able to write code using this particular version of Terra in this particular kernel all right so now let's go back to the issue that we were about to work on so the issue was in the good first issues I think it was number 28 22 yep so this is the piece of code that the person has reported that's creating this circuit so let's copy that over into our Jupiter notebook and see what happens when we run it so as soon as we run it we get an error right so it says name quantum registers not defined so that's because we haven't done from kiss kids import everything if we do that now we get a new error which says name pi is not defined and this error looks like it's coming because the person has not said import numpy as NP and then said pi equals and P dot P so now when we run this code we're able to get the printout without errors and it looks like this issue is showing up now right so we see pi pi pi and we see nothing in this gate both gates are taking in the same parameters for the angle so it looks like there's some issue that's causing the single qubit gates not to get the printout of the angles but the two qubit gates seem to be fine okay so my instinct when I see something like this is to first see if it's localized to just a matte plot like plot or to all kinds of circuit flaws so I'm going to copy this code over and just remove this argument and it's so now this is the ASCII drawer version of the circuit so you see here the angles are showing fine for both gates so it looks like this issue is limited to the matplotlib version of the code okay that's that's a hint as to what the problem might be so now what I want to know is how this function dot draw works so that I can see how it does things without arguments and with arguments so I'm going to take this and I'm going to ask for help on it so one of the best things about kiss kit is that there are dark strings and they're very helpful in these functions so if you just ask for help you should see something that's very useful so you see here there's something that says help on text drawing and module kiss get visualization dot text okay so this thing takes arguments and gives these outputs so let's look in this file kiss kit visualization dot text so what I'm going to do is open a Finder window and navigate to this particular piece of code so this is the directory where we're working now so this is the Kiska Terra folder that was cloned and looking inside we're looking for kiss kit visualization text so I'll go to kiss kit I will go to visualization and I'll look in the text code so what I'm seeing here is something that draws the text code okay so these are all the details that are involved in drawing the quantum circuits and it's probably fascinating to look through all of this what I'm going to do is ask for where the MPL line exists so nowhere all right looking in the same folder we have something for plotting in text the mat plot live plot that I used probably uses this particular file called matplotlib so let's open that here as well look inside here okay this looks promising so this looks like the fragment of code that draw single qubit gates and looks like we have multiple qubit gates as well let's look in the single qubit ka gate code okay I think we might find found our issue so I'm seeing self gate here and there's text that displace what kind of gate it is so this is probably the name of the gate and then there's subtext I think these are the PI pi PI arguments that we're supposed to be showing so let's let's make sure first of all so let's print PRM and just save that very quickly and it looks like this is length less than 20 is when this shows if length is bigger than 20 then this section of code runs without subtext so let's also see what the length of PRM is that we're trying to work with so I'm going to say print the length as well so I'm going to then go back and restart the kernel and run everything again okay so we are in the right section of code at least so this is the PRM parameter and it's laying this 23 okay I think now we know what the error is right so if the length is less than 20 we show the subtext otherwise we don't show the subtext so if I make this number something like maybe 28 I don't know and rerun the piece of code then we should see that parameters right ah there we go okay so now we get the numbers to show up so we fix at least that part in terms of consistency there's parentheses here and none here so that's probably because of this let's remove this and go back to the code kernel restart and run all yeah now we have no parentheses and it looks like things are consistent so that that fixes the issue that was reported so one more thing I'm going to do is this number 28 is something I just randomly picked let's make sure that we can display something like PI over 2 PI over 2 and PI over 2 so I'm going to do that and hit sell run so it looks like 28 is able to accommodate this because 25 is the length when you have one digit in all the denominators okay so 25 is a reasonable number I'm going to say 28 to be safe I'm going to remove these print statements because I inserted them for debugging and now we're ready to report that we fix this issue so one last check I'm going to restart the kernel and run everything no print outs for debugging and we get the consistency that we were looking for at first all right at this point we're ready to now submit this code back to github and report that we fixed the issue so to be safe one of the things that we have to do is make sure that we haven't broken anything in the process of fixing an issue so we're going to run a few tests so I'm going to go back to the command line and go back to the directory where I'm working so I'm going to activate the fix issue directory fix issue end and I'm going to within this particular environment so right now we're in the kiss get Tara we're outside the kiss get Tara folder I'm going to go inside again and I'm going to say make style so this is the first test that we're running and you'll see what it's going to do is make sure that the code is stylistically consistent so we haven't added maybe a space instead of two spaces that sort of thing so no errors reported here I'm also going to run make lint lint is a much more thorough test so it's going to consistently look throughout the code using regular expressions and this can take a few moments what you're going to do is once it reports whatever issues it finds you're going to look through it and see if any of those issues were caused by you or if they're not caused by you if they're not then you're ready to move on once the linting completes you can see that there are no particular errors that I've caused so the code has been rated at ten out of ten and in particular there's this module that reported one error but I wasn't working in this folder so this must be something that someone else is working on so I'll move on to the third test and that simply make tests and this is a thorough code of testing the code itself once your tests finish make sure that there are no errors of the particular files that you changed and if you see no errors we're ready to move on so the next step now becomes contributing this code back to github so I'm going to clear my terminal window if you don't know yet the keyboard shortcut is command plus K and what I'm going to do then is say git status to see where things are and you see it tells you where on this particular branch we've changed this particular file and these things are untracked they were probably created during the testing process that we that we ran so in order to just submit the changes to these particular files and not these other ones so I'll do get at - you and then I'll say get status again and now you see this particular code file that I changed is green instead of red all right so this file is still on tracked what I'm going to say is get commit - M and I'm going to add a small piece of text to describe what I did so fixed issue 28:22 by updating let's see by updating mat plot live draw okay that's it and now again let's do git status you see here that the status shows you that there's nothing that we're going to put in the commit so now we're ready to push so we'll say git push when you do that you get this error message because you're working on a specific branch so the fix is very simple just copy this line over and run that so let's copy this over okay so now that that's done let's go back to the github page so we're going to go to github.com slash kiss kids and kiss get Tara and you see this message that says hey you just pushed something so let's put a pull request to put these changes forward and ask for review so I'm going to say compare and pull request and now the text that I wrote in the commit message comes in here so fixed issue 2022 by updating I'm going to say in the summary fixes number twenty eight twenty two so there's a benefit to doing something like this so when you do this so github automatically understands that you're submitting this pull request to fix this issue so it goes and closes that issue once the once the pull request goes through so let's put in some comments so I try to be as descriptive as I can in the details and comments and in the summary I try to say fix the issue number that we're working on okay so at this point it's a good idea to look at the changes that you're submitting so here you can see get is telling us that this used to be the old line of code and I've submitted this so remove the parentheses and change the limit to 28 characters okay now we're ready and there we go so I'm going to create a pull request here at this point now that you've submitted the pull request a few things are going to happen first some tests are going to run automatically and you can see them showing up on my screen the other thing that you can do once the tests go through is to sign a contributor license agreement if you haven't signed it already and that would happen here in this line the final thing that will happen once all of these tests go through is that there are reviewers assigned to this particular repository they'll look through this and submit it and allow it to be part of the code once it's reasonable so as you can see we've gone through the entire process of fixing an issue in Kiska tear and what we did is effectively find that issue in github download that code to our computer make those changes running tests to make sure that those changes don't break anything and submit those changes back to github and the changes that we've made here are quite impactful right so tisket is open source software and this is one of the really cool parts about working in tisket the changes that you're making the fixes that you're doing are positive changes to a much bigger quantum computing community and so there's chance to make big impact here so what I'd like to do is finish off by asking you to contribute to this kit as well so go to kiss get Tara find an issue that looks interesting to you and tell us in the comments down below what issue you've started contributing to and what pull requests you've submitted as a result of that work we'll see you in the comments [Applause] [Music] [Applause] [Music] 