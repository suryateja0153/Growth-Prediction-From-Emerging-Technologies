 all right so let's get started a welcome back everyone clearly I'm not Krista and Krista should really give that presentation because it was her who gave the quantum computing class ed you dub earlier this year in in winter term 2019 which was when we went out publicly and we taught a new group of students kind of the future workforce for quantum computing taught them quantum algorithms taught them how to use Q sharp to actually express quantum algorithms and I want to give you an overview of that class it includes the kind of contents I will also show you a little bit buddy the technical parts were also the feedback that we heard from the students and kind of feel free to interrupt me at any time to ask questions I will be probably helpful to get this dialogue going a little bit just for a little bit of context so you heard in the mornin already about quantum computing what it is what the potential is and maybe also what potential applications are but let's take a step back like a long time ago we had classical computers that looked kind of like this this is an ENIAC a knife from 1946 it was located in Pennsylvania I think Germany had similar machines Conrad Sousa built them in Germany those machines were designed to solve the hardest problems of the day back then in the in the 40s they were typically related to some form of cryptography or computing ballistics maybe and people probably kind of could feel that there is more that's just a tip of an iceberg there could be more but they used the machines already for good purpose they did use them to tackle the hardest problems and we're kind of at a similar juncture in quantum computing we have these little devices small devices that are emerging we have that we can sense that these things will be useful we know it once they get very large they can do amazing things things that are beyond the tractable what's what's classically tractable but it's really a long road that we still have ahead of us to understand better what we can do with the machines so it's time to develop that future to really think what can be mapped to the machine and so far the quantum field has grown it has grown exponentially from very very few people in the mid 90s I remembered there were seminars back then they had maybe 10 15 people - now a much larger community but still there's another phase transition that what needs to happen to go to a really broad workforce in quantum computing so they you draw in a lot of people a lot of new ideas and then maybe you have that one-in-a-million event that you find a new algorithm that will be a breakthrough so when we are trying to think about that that these events that might happen we need to kind of also think about training the engineers of the future so that he or she actually is enabled to come up with these new algorithms and of course we also need to find the algorithms themselves and that there's kind of this these these loops where you have an idea and you try to verify or falsify it does it even make sense right you might have an idea and then you initially don't know does that pan out there were so many attempts and that typically in research that's how it works right you try something it doesn't work and go back to the drawing where you try again and as researchers we've been through that a lot and it's really useful to have tools that help you in that process and that try something falsify the idea go back and kind of that's also one of the motivations here to provide these tools to help our future generations of quantum researchers and developers in that process and just to try out ideas right ideally we try to like to try them out on hardware hardware is growing at a at a certain speed sometimes software is a little bit ahead you can do stuff with simulators or with emulators that you can do already today that you might have to wait a few more years until it's actually coming into fruition on hardware and of course ideally would like to co-opt ax Mize for the entire system stack we'd like to optimize for the classical computers needed for a quantum computer part and those are all complex things it's important to educate people about it and just a little thing about the applications themselves right so how does it typical exploration of that space work the typically a starting point is you have a quantum algorithm where you have a certain idea and for that you need algorithms designers they need to find an algorithm that hit that a principal officer speed-up but then you need to confirm that speed-up because it's one thing to have speed-up in this in the asymptotic sense if your scale to large sizes now at some point you will have a speed-up it's important to understand the actual cross over point over the best previous method and for that you need to have you need to get a sense of the constants that might be involved in the asymptotic scaling right so yet kind of you need to implement first of all all the operations at Sur against a certain gate set including the IO and some methods for instance in quantum machine learning there's often a hidden cost that sometimes people make neglect that has to do with the with the input of the how do you actually represent your problem so you need to really spell it all out and then optimize the code as much as you can and then maybe even target the hardware to get really footprint analyses at the lowest level once you have done that then you got a really good sense if that algorithm can actually be run one day so that those are complex things and the future work force hopefully will have a lot of people who can help us with all these stages right right now we have already a few people where we good if we had a whole workforce that could help with that any questions so far just point okay now I'm gonna switch gears and go into the the course that was taught earlier this year as I mentioned so the motivation for this was well we need an educated workforce we need to find developers software engineers algorithms engineers these are very diverse requirements that the mix of we have software engineers but also maybe more mathematical skills also physics skills they need to all come together in this new field of quantum information processing and well it was an undergrad course that was the requirement so and that's a great opportunity to ignite the passion in the young audience they're eager to learn of course the flip side there might be not a lot of deep knowledge yet available in that in that undergrad class the the folks there they may be heard a little bit about linear algebra but now they get exposed to this kind of very complex topic so we had to get ahead around how to actually present it and in that in doing so we develop materials to actually enable learning and to enable it enable learning quantum computing via programming a programmatic approach so just this was a computer science class that's a great match with Q sharp which is a programming language and kind of the development of the course materials went hand in hand with creating programming exercises materials that that help you understand quantum computing from a very programmatic and very hands-on point of view and I'm gonna get into that in a moment just a little bit about the course itself it was hosted this winner started in January it targeted third and fourth year undergrads I think most were in third year a prereqs were linear algebra and programming and ideally people would have had a notion of what a proof is and good understanding of algorithms it was a full credit course and we at the end had a steady state of about 35 students it was a very tough course I should say that right away so there were some people who felt that they could not keep up with a pace and it was quite challenging but we had a steady state and at the end I think those were kind of really happy and they they met the challenge I'm gonna have a few word clouds at the end that show what they what their thinking was I mean thinking of this this class there was three lecture hours per week Tuesdays and Thursdays in the afternoon we had several guest speakers in the class but Christa did the brunt of the the lectures and she did office hours with the students the whole thing ran for ten weeks there was no lab section per se but there were a lot of programming assignments where the students had this homework and then they did the the the grading by the TAS support in form of automatic testers and that's you heard about that in the morning from Maria that's actually one of the really salient features of teaching it with a programming a support is that you can have these these very helpful programmatic things that help you grade automatically and so you can test this doesn't actually run it's literally a unit test that you write in a programming language that performs the test and you can check that the students pass it or not yes yeah okay so is this apologize if this okay I'm not quite sure I would have to get back to you on that question is it's the question whether you get extra credits for taking program oh I see okay it's quite possible I don't know the answer to be quite honest I can look it up for you and get back to you be happy to get back all right cool that's a good question I think it was a quite diverse class I don't know the exact ratio but I think it was it was not only like catering definitely not catering to the male and male audience and I think it was a relatively good balance but of course as we know in stem there is there's a need to balance it more and I think I think I mean I can speak to the fact that we hired a few summer interns from that class who did exceptionally well in the class and completed not only the programming exercise but also competed in competitions and we have a very balanced gender ratio among those recruits from the internship program that of course doesn't mean that the class itself was I gave two lectures I thought they it was a high ratio but I don't know the exact numbers for that I would refer to two to Krista to get back to you yeah cool yeah any more questions cool there are great great questions already thank you yeah the challenges were that most of the curricula today that you find where people I mean corn computing has been around for a while many quantum computing courses have been taught many of them focus on the graduate level so that's already hot you have a higher entry point people know maybe more linear algebra no have deeper programming skills and only few existing courses actually have a hands-on component where you go through the curriculum and you have programming exercises for each for each a new concept that you learn in the class and this is a biggie and not all students have taken physics I think pretty much none of the students have taken physics it so it kind of we had to cast and all these notions that you kind of need to know in a way that they are not intimidating that student feeling that so that the students feel included that they it's at the pace of their of them as they learn the new concepts and a lot of stuff has also to do with like things that we even don't even think about much like notation that can be actually setting a higher barrier right if you have a lot of fancy notations that we are used to as quantum computing researchers that might be a real put off for a new person trying to learn the field so we we try to make conscious choices and intentional choices what to put in there in in actually the materials sometimes I think it was still overwhelming overwhelming but if you lots of he was that wouldn't be nice if we did not have to know quantum mechanics and I think that's very much true you can learn quantum computing without knowing without having had a quantum mechanics class before I think it's fair to say if you don't know linear algebra it's it's pretty it's very very difficult to learn quantum computing so you must have a notion of linear operators like vector spaces that is a must otherwise you you cannot catch up with a piece of a class and then the other philosophy was to teach quantum algorithms through programming but it really goes both ways if you want to really do hands-on quantum programming of algorithms or cars or homework you have to have a sense of what the algorithm does so it goes both ways and I'm glad with Maria pointed that out to me earlier because that's actually a really key point when you actually eat if you're deep in the craving and you want to help the students with the programming it's pretty obvious that we have to spend a lot of time explaining the basics very well like what the gates are what does the concept what happens if you apply it if you apply an operator to the zero state what do you get but it goes on from there like people struggle with stuff like what's the encoding is it gonna be little-endian or big-endian encoding if I write down a number in binary right do I read it essentially from the left or to the right those things matter a lot when you code it and in the books maybe it's sometimes not even mentioned explicitly what the encoding is right so those those things are important so when you want to code it first you need to understand the algorithm well then you need to understand how I represent the data and then you can actually get going we taught it in in-person lectures so this was not an online course people actually went to u-dub and deliver the lectures and we taught it through coding assignments besides the lectures and and did the written homework so there were these three elements there was in-person classes written homeworks and those were kind of alternating with programming homeworks okay yeah we try to strip as much of the physics out as possible you can't do it completely but we presented qubits as vectors operators as matrices as much as possible we try to not overwhelm people with bra ket notation too much even though of course the experts in the field do that we try to use it as much as possible just plain vectors and we avoided that that's actually something as a researcher maybe you get your cringe but we try to avoid proofs as much as possible only to the extent where it made sense because that's again a barrier that we might set for people I think we had a couple of proofs for really things that are insightful and where you learn something we focused also more on the computer science topics in quantum computing you have this kind of it comes a lot from physics and it's about a simulation of physical systems so you can also of course approach it from that angle and teach it a lot about like a lot about the fundamental physics that you're now able to simulate we tried to de-emphasize that a little bit and emphasize more the computer science topics I cool yeah as I mentioned this already there was written homework and programming homework and there was a final project so that that actually had a big weight in the class there were no final there was no final exam there was no midterm exam so that the grade was composed of these three components and this was the students had actually a opportunity to earn some extra bonus points by competing in a coding competition that was run at towards the end of the the course that's a very cool thing I personally super passionate about these things Maria is the mastermind of this she designs coding competitions and it's a highly non-trivial thing to do you have to kind of have a completely automatic framework that runs in sandboxes so that the participants sands ascend solutions to this platform it gets automatically it like it spawns up a sandbox runs the code inside checks whether it's correct and then basically you earn whether you pass that exercise or not so we use the platform called code forces and ran that conduct competition on it and the problems in this competition is the second one we did based on Q sharp the problems were ranging from relatively easy to really tough so in this competition because the first one was passed by so many people we wanted to put a few nuggets in there that are really tough and at the end of the day we had over 20 I think or do you remember how many all the exercises or the 25 and the overall participation worldwide okay 200 people competed in it you know you typically have like a higher registration first but in a little bit less actually compete but it's a really that's a sizable participation and over 20 people completed all several of those actually hired for India for internships but yeah that's that's a great indicator that the people are involved they use the language they are able to tackle complex problems with it cool let's shift gears let's I wanted to walk you through some some of the content just to give you a better idea for instance we had a lecture on the free transform which is really bread-and-butter of quantum computing oops just doesn't work too well for some reason okay you have to manually step through here so those are basic quantum algorithms that you learn about in the textbooks this is so-called dojo saw algorithm and then we used that algorithm to teach a more advanced concept namely that off to the free transform so got these spectral analyses are very important in quantum computing and a lot of that has to do with the fact that the quantum Fourier transform it can be done extremely fast so on a quantum computer it you have even a faster version of the classical FFT you have a super fast Fourier transform and we try to kind of lead and build up towards that that notion and what you didn't actually can do with these fast Fourier transforms so your intuitively go from n log n as a complexity turn of an algorithm to just log N or log square locks lock square N and then we want to give students a feel for that and explain why that's so powerful so we build up by some well mathematical things first but in week we we kind of showed them spectra of functions and try to teach them what's special about certain classes of functions what can you learn from the spectrum and then we we found that that one of the quantum algorithms pioneers actually works for Microsoft he retired last year but we were able to meet him dan Simon and we there's one programming exercise that's actually based on his algorithm and that's actually one of the things student learn about in that class as well but it's a very common algorithm that leads you up to Shor's algorithm which is an even more prominent quantum algorithm for factoring and then the Fourier transform we tried to kind of mix up very visual elements students get a better feel for what happens for instance if you run Shor's algorithm at some point you will see very sharp peaks over some basis states and that's really where the information is that's what you can extract by using a quantum computer and that can in turn be used for factoring so we try to highlight these connections to classical signal processing also and then there was another lecture I wanted to highlight [Music] another famous algorithm is the so-called Grover algorithm which helps to search for elements that meet a specific specifications I'll think of it you have a predicate and now you want to find an input to that predicate that meets the condition so it's kind of search really right think for instance of a three set formula you try to find a satisfying assignment and this Grover algorithm helps you to speed up the process classically if you cannot say anything about the predicate then pretty much there's nothing better that you can do than brute forcing it going through all the vectors if it's literally a black box but quantumly you can get a square root speed-up for this problem and this just Grover algorithm does that what's nice about the algorithm is so I'm just sipping through the slides here apologies I just wanted to show you that conceptually it's a quite simple algorithm and you can you can understand it once you know the basic notions such as unitary operators measurement and what complex phases are you can actually understand this this problem and this algorithm quite well I wanted to just show you the circuit I think it's a long time till I get there yeah so here that the point is that you do only a squirrel number of queries to your predicate so you want to find a satisfying assignment to the predicate and you do a squared number of n and it's the total number of candidates to this and I think the students grasp this algorithm particularly well so for some reason that problem of finding kind of this constraint satisfaction problem of finding solutions really resonated with them and they gave us feedback that they really liked that algorithm it was one of the things they liked most in this entire class and okay we just wanted to show you the algorithm itself that by the way was also explored in the code so there was there was exercises to code up the predicate so the quantum computing is often called the Oracles and then okay this is the algorithm itself as you can see it's quite simple in its structure it just alternates two operators and you can understand both it kind of you can drill down what is inside that box and it's a very nice algorithm once you understand the basic principle so that's something you can teach quite quickly actually without a lot of math baggage that you might need otherwise that's all there's number theory you need to learn to understand Shor's algorithm and so on a quick look at the syllabus itself so we had topics ranging from an introduction then a quick introduction to Q sharp yeah an overview of what what Shor's algorithm is the fourier transform was a big component to that groves are girls not just mentioned there's also Hamiltonian simulation which relates much more to the physics and we also had a really cool segment about error correcting codes which is essential to build kuan computers it it's a lot related to classical error correction classical codes which students typically did not experience so far in there at that stage in their in their education but I think that was a very smooth and gentle introduction to the topic and then it's kind of clear how to go from there what's the next step if you want to learn more and we proceeded along like the theory part proceeded along very well-established resources so that is in our field is very popular resources such as John Prescott's lecture notes is a professor at Caltech and wrote a really good it's essentially a book but it's available for free then there is a book by Keith high-fat I'll a book by John abide by Scott Aaronson poop by John Waters and other students use the kind of Nilsen and chong which is one of the very common textbooks in quantum computing back to the to the presentation here if I am able to go back yeah we serve it afterwards yes there was a survey we I don't know if he surveyed pre what would the survey pre consist of expectation I'm not a hundred percent sure but I would assume it was we did not pre survey them I mean it was probably like in in the kind of office hours probably we learned about what expectations were but I don't think they did a formal pre-survey but I came back come back can get back to you regarding that as well they did definitely did a post survey um I have a problem here right now okay here we go so um yes so here's a quick quick summary of the final project students gave were allowed to to team up and work with peers on the projects then finally they gave ten minute presentations on the findings and they wrote code all of the class projects had to do with code in that sense they were really carefully selected because you cannot just make up any problem and say now now solve that and write code so there were there were for instance problems in arithmetic to implement addition circuits but to give a new twist on it so it was something that hasn't been done before to do it in very low depth so they're additions addition circuits that you can do in logarithmic depth essentially so the students got the teeth sanctities into it and actually implemented this actually quite cool and there were other projects on free transform itself to implement that was very nice and yeah some simple games there foundations of quantum mechanics that that play in there and that there was actually also nice to see that happening yeah regarding a read out I'm not gonna give give a lot of detail but kind of the word cloud looked like this a lot of people thought it was interesting people felt there was a lot of math in there but people also found it to be difficult and challenging some people found it to be even stressful or time-consuming but also exciting and fun so there was a breadth and kind of we will take those feedback that feedback too hard and especially the feedback that it was difficult and the pace was high so that's actually I have ever side a little bit later that that about what we could do regarding that we asked also about things that they particularly liked what of the content they particularly liked so Grover actually scored very very hard it's not even reflected by the font here the font should be maybe three times the point size it's just that the tool that we used to generate this didn't handle this Grover was extremely popular QFT was popular Shor's algorithm was popular but also topics such as teleportation which are you don't have that in classical computer science at all right it's a new concept people like that and also like the basic the prince the basic things they really liked or defining liked it error correction yeah any questions about that yeah here's a here's some verbatim feedback people liked the fact that it was stimulating they thought it was amazing to learn about this new area and it they were happy that it took it on the more critical side yeah it stretched the thinking some for some that meant also that it was too much in a short amount of time material was difficult they struggled and yeah they're just a workload and kind of to balance that out a little bit more there was a feedback we got yeah so here the learning so this this is now towards the end of the course and by the way if you're interested in getting access to the materials the stuff I just showed the the lecture the slides the written assignments and so on and we can definitely help you with that we'd love to actually engage with you and for that please contact mark sangwoo's the audience is sitting in the back row shoot him an email and we can work with you and we'll be actually wonderful to see more and different curricula building on this would be fantastic we'd love to work with you so yeah what's the learning so some of the homework assignments were too advanced both on the written part and the programming part for sure so we assumed more mathematics than the students actually had so we had actually no data points really about the students maybe we should have done these pre surveys that were mentioned next time we probably should choose a if it teaches again or if others teach that course again we should probably choose a problem subset of the problem set and narrow it a little bit down how many problems we do the competition as a homework assignment initially the coding competition that I mentioned was an assignment and then we converted it into a bonus problem that was too stressful because there were several contributing factors but one is like competing in such a public competition where it's really competitive coding you get the problem and you have to solve it in a short amount of time that's what it's about that is really stressful and not everybody is up for that challenge initially I think eventually it's a really cool thing to do but it's not for everyone and so we will will we decided not to make that a required like assignment next time maybe make it optional extra credit from the get-go and then what we learned also is that yeah you need to have a really you need to have more domain knowledge really to get to get deeper and some trigonometry for instance complex numbers obviously number theory chemistry because as soon as you want to dive a little bit deeper you need to know all these things and if you have to teach them from scratch it takes just a long time it's important to state also the state-of-the-art classical approaches for all these problems which also eats into the time budget for the class right so you want to say what's the best known algorithm previously just to establish the context for instance for factoring you maybe want to say what is typically the the complexity not that you could really drill into these algorithms they are very complex themselves but at least establishing that context and it takes a while and then just for an undergrad audience probably it's better to remove some of those algorithms we covered a really broad spectrum but to focus on fewer would probably be better all right and then it brings me to the end of the presentation thank you very much for your attention [Applause] more questions it's a great question would it have been better to make physics a prereq I think I think that might have made the transition in I'm kind of entering the class and entering the flow of the lectures easier but then you lose a lot of people right from like the subscription you have a much narrow pool of people to work with yeah you could have done it but if you make physics those were all computer science undergrads you if you make physics or requirements then you probably have would have narrowed it way below 50 but it's it's a good question especially when you talk about grad courses then you might have made that you might make that requirement but that that was not major requirement for this class questions okay so first is um did you do any like in-class active learning stuff and if so what did you do like make them design circuits with their neighbor or something oh I see on the spot during the class I don't think that happened a lot in the in that sense that they partnered up with people around them in the class but what definitely happened is we went through the solutions of programming exercises in front of the class and did it in a live way so that one of the lectures for instance I gave I started out by doing kind of showing last week's programming assignment and what was really cool about that was I basically up a lot they and then I people saw what I did wrong they could help me fix it on the spot and then I was able to pass all the unit tests by writing the correct program so often times it was just correct III called it correctly but then you're in front of the audience you just make mistakes and then people I balled it and I think there was learning happening from the students kind of trying to help me in front fix oh you you just had the order of the bits reversed or something like that why don't we try that and then we tried that and lo and behold it passed the test and so I think that is that makes it much more real right you see that other people also make mistakes and you see also the other steer students themselves they kind of it makes a more much more level playing field other than that we didn't make an act like an attempt to put in a lot of active learning in it but it's a great suggestion for the future yeah what's the other question so like I teach this to physicists and I use a lot of like pictures and visualizations I got playing with the Bloch sphere or those you mean visualizations at the level of slides or tools that allow you to say rotate stuff in a we did we did debate whether we should go down that route like for instance introducing the Bloch sphere as a prominent object which is bread and butter in many other courses we tried to de-emphasize that because we thought that's a very physics in notion but they were certain other like visual elements that that were they elected for instance the circuits themselves I think it's really hard to teach it without that notion of the circuit even though once you start programming you really don't want to think so much about a circuit because it's not scalable but the notion of a circuit we also debated and we decided to keep it in the in the class we didn't have a lot of programmatic support for circuit visualizations are kind of that good tools for that but we did not really use a lot of them it was mainly happening at the level of slides thank you for the question more questions so this cars gonna be offered again next year University of Washington or was this a one-shot deal to create it and then we academia yeah that was the intent yeah the intent was to create this material so that the community would adopt it educators would adopt it and it's just useful to to bring to bring forward that new workforce there were several independent spin-off developments there is for instance in an online course where called brilliant they decided to develop a curriculum independent completely independent but they were at some point there was a convergence of ideas and we helped that course by bringing some of the Q sharp elements into the course so those things were mutually beneficial at some point the intent was to teach it once if if it is demand and people want to see it again of course we can think about teaching it again I'm sure Krista would be would be considering it and if as I mentioned if other professors and lecturers would like to to pick it up it would be very nice the word I think already a few universities who decided to adopt the curriculum Maria can you comment it was a university I think in India and IIT taught it and Mark yeah okay a UCLA I was thought it was okay and I'm I signed up with mark and I'm teaching it in Ohio awesome this fall great August and and I'm trying to get Washington State University I'll be teaching it there hopefully next be amazing yeah sounds great all right good thanks thank you 