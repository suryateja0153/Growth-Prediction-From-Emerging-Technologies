 - Hey, if you scroll down slightly further, there's a picture of me. - [Man] Use that as the beginning of this episode please. (upbeat music) - Welcome back to Coding with Qiskit, I'm your host, Jin. If you're new to the series, we cover topics in quantum algorithms each week. So be sure to like, and subscribe. Today we're going to be learning how to install Qiskit and use a very specific circuit library in order to build our first quantum algorithm. In order to access this library, we're gonna have to install Qiskit locally first. So let's go through really quickly how to do this. So Qiskit is an open source SDK used for programming quantum computers using Python. And don't worry if your Python skills aren't there yet. We'll work through things slowly. So the first thing I'm gonna do is navigate to qiskit.org. This will tell me exactly how to install Qiskit on my machine. And there's generally two options for running Qiskit, you can either run it on IBM's hosted Jupiter notebooks, or you can install it locally. And the first thing I wanna do is if I don't have Python installed yet is to just install Anaconda and this will install all the things I need for Python. Click download. I have a Mac, so I'll just do the 64 bit graphical installer and download. And like always, if you have a Windows or a Linux, just choose the appropriate downloader. Okay, so now that Anaconda has downloaded, I'll just open this up. And I'll install. So what I'm gonna do first is set up my Python environment, which just is a good way for me to organize my Python packages so that I have all the current versions of all the packages in one place. So what I'll do is conda create dash N, name of my environment, which will be coding with Qiskit or CWQ. I'll set my Python version equal to three and the Anaconda distribution. Okay and I'm just gonna watch this little thing spin. Okay, now it's done, okay. So I'm gonna proceed, yes. And now that thing is gonna spin some more. Okay, this might take a minute. So now that I have my environment set up, I'm gonna enter my environment by going to Conda, activate the name of my environment, which is coding with Qiskit. And I'm going to now install Qiskit into my environment. So from the Qiskit.org site, just following these instructions, start locally, I'm gonna choose the Qiskit stable installation. I have a Mac, so I'll choose Mac, but it's the same if you have Linux or Windows. Just choose the correct distribution and then I'll copy this and PIP install Qiskit into my environment. So now I have Qiskit installed and I'm just gonna open up a Jupiter notebook so we can get started with our algorithm. Perfect, so I'm gonna open up a new Python 3D notebook and let's get started with our algorithm. So let's build our first algorithm from the circuits library now. In order to do this, we need a few parts, some data to input, a circuit to run the calculation, and then an output. In physics, we often talk about signals and signals represent the transmission of information. And generally we use bases or units such as frequency or time to represent what kind of information that we're transmitting. I'm gonna show you a quick example of an algorithm that's already built in Qiskit circuit library called the Fourier Checking Circuit. The Fourier Checking Circuit is an important tool used from the signal processing domain and is a fundamental circuit used in many other quantum algorithms, for example, Shor's algorithm, which we'll cover in a future episode. These circuits can be run on a real quantum backend or on one of the high performance simulators that are available through Qiskit. All right, so let's get started with the algorithm. So the first thing I'm gonna do is do my imports. So I'm going to import Qiskit.quantuminfo as QI and this is going to be doing the calculation. I'm going to import from the circuit library, the Fourier checking circuit. And I'm going to import my visualizer Qiskit.visualization import plot histogram. Okay, shift + enter to execute that. So for this algorithm, I'm gonna define two functions. They're just lists. F is equal to one minus one minus one minus one, and G is equal to one one minus one minus one. So now that we have our two functions F and G, the Fourier checking circuit will tell us how correlated the Fourier transform of G is to our function F and it turns out that a quantum computer can perform this calculation much faster than a classical computer can. So the circuit will output a probability for the zero zero state. And if the probability is greater than 0.05, then the Fourier transform of function G is correlated with our function F. Okay, so I'm gonna set up my circuit equals Fourier Checking and I'll put in my two functions. F is equal to F and G is equal to G. Okay. Do your circ.draw, see what this looks like. Okay and this is what my quantum circuit will actually look like. So let's run this, zero equals. QI.statevector from label zero zero. We're going to evolve this. State vector is equal to zero.evolve my circuit, and I'm gonna get my probabilities back here. Probs equals SV.probabilities, Probabilities, probabilities. Okay and then I'm gonna plot what this looks like. And remember, I'm only interested in the zero zero probability. Okay, perfect. So I get back a histogram here, and I'm only interested in the zero zero probabilities, which I get 0.25. So what this means is the Fourier transform of my G function is correlated with my F function. So you can try to circuit yourself and see how the outputs change depending on your input functions. This is where we'll stop for today. But hopefully now you have Qiskit installed. You're familiar with the circuit library, and you're able to run your first quantum algorithm. Make sure to like and subscribe, because next time we're gonna be talking about what it actually means to be a slor algorithm and why certain algorithms are better for quantum computers versus classical computers. Jin out. (laughing) You just have a jump cut where I like teleport away. - [Man] Absolutely. (upbeat music) 