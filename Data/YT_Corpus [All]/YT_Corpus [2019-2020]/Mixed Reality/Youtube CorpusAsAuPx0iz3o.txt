 thank you so much for joining today uh my name is cameron mikka and today i'm going to be talking about how you can get started developing for hololens 2 using the unreal engine before jumping in i wanted to give a brief introduction if you're curious to learn more about me my name is again cameron mecca i'm a senior software engineer on the mixed reality design team i've been at microsoft since 2016 and before that i mostly worked in the video game development world at microsoft my focus has been helping our partners and independent software vendors with mixed reality app development i've also worked a lot on the mixed reality toolkit for unity where i'm the author of the standard shader system but recently my focus has been on the mixed rally toolkit 4 unreal as well as ux tools next i'm going to quickly walk you through how you can start developing for hololens 2 using the unreal engine i recommend installing unreal engine through the epic games launcher just like you normally would for any platform just take note to check the hololens 2 option as one of the target platforms during installation to make sure your project runs well in holland's 2 it's good to sanity check your project settings if you're creating a project from scratch make sure you configure project to use the scalable 3d or 2d settings as well as mobile and tablet settings if you already have a project created make sure to sanity check the rendering settings as below i'll talk a bit more about this later in the presentation once you've opened up your project there's a few plugins that come bundled with unreal engine you'll need to enable the two plugins are the hall lens plugin under augmented reality and then the windows mixed reality plugin under virtual reality once your project settings are configured appropriately for hololens the last step is to start an ar session the easiest way to start an ar session is to call the start ar session blueprint node from a begin play event note that node also takes an ar session config which you will need to create that's it for the initial setup you're ready to start creating hololens 2 applications but before you get going i recommend everyone also use the mixed radley toolkit for unreal next i'm going to go over the mixed reality toolkit for unreal also known as mrtk unreal if you've never heard about amber tagan rail that's fine because it's relatively new emeritus unreal is a container around various unreal engine plugins our very first plugin is named ux tools which as the name suggests helps our developers build out user experience elements during our unreal hololens 2 beta having a toolkit similar to what was in unity was one of our top customer requests building on our learnings from mrtk unity we are making amartic unreal more modular which means developers will be able to use features and systems they need without pulling in ones they do not so in this image on the right you can think of emerald decay unreal as a blue container around various plugins ux tools being our first with more plugins coming soon next up ux tools speaking a bit more about our ux tools plugin it's hosted on github as an open source project so you can navigate to the below url right now and check out the code it contains a unreal game plugin as well as an example project which contains tons of examples to help get you started the plugin itself is a collection of c plus plus functionality blueprints example levels and tons of documentation one thing to note we're currently not in a position to accept external contributions via pull requests however please feel free to provide contributions and feedback in the shape of bug reports suggestions and feature requests if you don't want to download and build the ux tools plugin from github it's also available on the unreal marketplace here's a brief overview of the extools development timeline back in february 2019 microsoft and epic games announced that holland's 2 support was coming in august 2019 beta support for that shipped in unreal engine 4.23 in december 2019 we began working on ux tools and since then we've released a few updates in may august and recently october and at the same time unreal engine has been improving to support holland's 2 with new features as well as performance improvements the goal of ux tools is to provide components that make building ux within windows mixed reality easy next i'm going to go over a few of those components first off we have a hollands 2 style principle button this button mimics the visuals and behaviors you find in the hollands 2 operating system shell the button is highly configurable and it's based off the pressable button component already found in ux tools building on top of the hololens 2 style button we have a few toggle button permutations we have the classic toggle on toggle off button we have a switch button a check button and a radio button any of these buttons can be used in groups to ensure only one button is checked at the time and each button can be customized to get your own look and feel speaking of customizing buttons one thing we did was surface all the commonly used customization properties to the top level actor so in this example we've created a camera button it's a custom size so it's extra wide it has a special button icon and a unique label specifying button icons can sometimes be a laborious task to make this easier we made a custom editor window that displays all the available icons in a font our button icons come from font files and are rendered just like normal text another common control found in ux tools is the pinch slider a pinch ladder can be thought of as a hologram that moves along a rail and reports back a value between 0 and 1. here you can see a pinch slider is used to change the color on a hologram or animate the landing gear on a lunar lander just like the pressable button the pinch slider is highly customizable and contains a few exposed properties in the details panel to change the look and feel of the control the bounce control is a useful component that's used to change the rotation or scale of a hologram here you can see these two blue hands grabbing the affordances to scale up the object these affordances mimic the visuals and behaviors that are found in the hollands ii operating system shell we want to keep a few buttons or other controls within arm reach of the user this can be accomplished with near menus near menus provide behaviors which constrain the menu to the user's location and allow users to manually place the menu by grabbing it or pin it to a location i've covered a few ux controls that are often used in conjunction to create more complex menu setups extools contains a few examples and utility components which demonstrate how to set up nested menus or menu hierarchies when interacting with holograms from afar you need some kind of way to indicate what you're pointing at or what you're grabbing that's where the holland's two style hand rays come into play when grabbing a hologram they bend to constrain to the hologram in your hand and when pointing into empty space they provide a dashed line to give you an indication where your next hit target will be constraining ui to the hand is one of the more popular requests from developers and ux tools contains a few components as well as examples on how to properly attach ui to a hand as well as show and hide it based on the hand's orientation or activation status unreal engine contains a workflow called umg to build flat or 2d ui layouts if your application already uses umg or you prefer using umg for creating ui luckily ux tools can be used to interact with any umg component we have a few components which are still marked as experimental experimental means the api might change or the component isn't quite ready for production one of those components is called tooltips tooltips can be used to annotate portions of a hologram the second experimental component currently in ux tools is the scrollable list scrollable lists allow users to scroll through a continuous array of ui elements such as buttons because hololens 2 is a mobile stereo headset performance should always be considered when developing an app extools contains a few shaders to provide holland's two-style visuals as well as material functions that can be applied to generic meshes that perform well on device and fit within the device's fill rate budget if you download ux tools from the github repository it will contain an unreal game project that contains many example levels each of those example levels can be accessed from a central hub level this screenshot is from our next cx tools release and gives a sneak peek at what that hub level looks like with upcoming components and examples because hololens 2 is a mobile stereo device performance should always be at the forefront of developers minds in the following slides i'll go over a few performance tips that we've encountered when creating examples such as kippy's escape the first thing every project for sanity check is that the project settings are configured to be performant on hololens if you open up your project settings scroll to the engine section select rendering expand the vr section and enable both instant stereo and mobile multi-view mobile hdr should also be unchecked for best results if you need occlusion culling for a detailed scene being rendered it's recommended that you enable support software occlusion culling in the engine rendering section this lets unreal do the work on the cpu and avoid gpu occlusion queries which can perform poorly on hollands too if you don't need calling for your application at all it's best to turn it off completely for more details and recommended settings please navigate to the link at the bottom of this slide next step is to perform a course profiling of your application every hololens developer should have the frame rate counter on when developing their application luckily holland's 2 contains a built-in frame rate display to access it open up the windows device portal here's the ip address to connect to when your hololens is connected via usb then open up the performance section and under system performance check the display frame rate counter and headset and optionally display the frame rate graph as well after enabling the frame rate display and you find your application is running below your target frame rate try using unreal's stat unit command to glean more information stat unit will help you narrow down if your app is cpu or gpu bound on hololens it will also display the current polygon and draw call counts note on hololens stat rendering doesn't always render 100 correctly sometimes it renders twice in one eye so you may have to squint a bit to read the numbers here i'm enabling the stat unit command when the user says toggle stats once you've narrowed down from a course level while your application is slow you can start using finer grain profilers to find performance bottlenecks unreal has many great profiling tools built right into the engine which you can learn more about at the below link unreal also supports render dock if you need to perform complex render state inspection render dock is available as a plug-in built right into the engine hololens applications are often fill rate bound fill rate refers to the number of pixels that can be drawn per second by the gpu fill rate optimizations are normally focused on reducing the number of operations that need to be computed for a final rendered pixel this includes reducing the number of objects to render a process the number of operations per shader the number of gpu stages for a final pixel result such as geometry shaders post-processing effects the number of pixels to render aka your display resolution and many other factors we found that the operations being calculated on our lit materials within kippy's escape were rather high to reduce this we marked all of our lit materials as unlit and used a custom material function found within ux tools named mf underscore simple lit to perform simple blin-fong lighting it's important to keep an eye on the number of vertices your application is presenting more vertices mean more vertices the process and the vertex shader and more data to transfer think of memory bandwidth or load times normally you decimate or reduce your meshes in a 3d content creation tool like maya or 3ds max but unreal has tools built right into the editor that automatically decimate a model decimation is quick and allows you to iterate on the settings appropriate for your application it's a good idea to keep an eye on the number of draw calls your application performs you can think of a draw call as your app instructing the gpu to render something unreal automatically batch similar objects together they contain the same measure material into one draw call using instancing if you have actors that are static that you think could be merged together to reduce draw calls try using unreal's merge actor tool to automatically merge meshes and optionally materials together in this screenshot we've merged a bunch of stones that a level designer placed individually note actor merging is a destructive process so it's best to do towards the end of development next i'm going to talk about our mrtk unreal roadmap as well as any extra support you can find online we've already shipped dozens of features in the last three releases of ux tools in our next release we plan to support windows mixed reality immersive headsets as well as oculus quest we plan to further support openxr and then we'll have a few quality of life improvements bug fixes and add a new text box feature as well as graduate the tool tips and scrollable object collections as mentioned earlier emergency unreal is a collection of plugins here's a sneak peek of our next plugin called graphics tools graphics tools will enable you to create beautiful experiences on hololens 2 while staying within your performance budget for more information on general hololens 2 development in unreal here's a summary of links to documentation repositories tutorials and samples one sample i wanted to call out is kippy's escape kippis escape is hosted on github as an open source example as well as a free store download if you want to try it out and we have a postmortem on the making of kippy's escape on docs.microsoft.com thank you so much for listening to this presentation if you have any additional questions about mrtk unreal or unreal in general please don't hesitate to reach out thank you 