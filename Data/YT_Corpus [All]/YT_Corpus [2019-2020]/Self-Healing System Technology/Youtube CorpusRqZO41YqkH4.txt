 Hi, I'm Dave from Solace. Over the next 10 minutes I'm going to introduce you to a key enabler of event-driven architecture for distributed enterprises, called an event mesh. I'll go over what it is, how it will help your enterprise more easily share events through your organization so you can become more responsive, agile, and provide better service to your customers. I'll also cover why Solace makes the best technology to power your event mesh and show you how easy we've made it to set one up. Sound good? Let's get started! First of all, let me introduce you to what an event mesh is. Simply put, an event mesh is an architecture layer that allows events from one application to be dynamically routed and received by any other application no matter where these applications are deployed (no cloud, private cloud, public cloud, etc.). This layer is composed of a network of event brokers. More technically, an event mesh is a configurable and dynamic infrastructure layer for distributing events amongst decoupled applications, cloud services and devices. It enables event communications to be governed, flexible, reliable and fast. If you've heard of a service mesh, you can think of an event mesh in similar terms, but for the event-driven world, while service mesh is geared more for RESTful, request-reply based interactions. the two 'meshes' actually can and should co-exist. Now let's talk about why the concept of an event mesh is important. According to Gartner, "Event-driven computing is central to the continuous agility of digital businesses. Event mesh... provides optimization and governance for distributed event interactions." This quote from Gartner highlights why the mesh is important, but let's break it down and make it more tangible to modern enterprise architectures. Here's what we're finding with many of our enterprise customers. As they think about becoming event-driven, they have legacy on-premises applications. These are static data silos that prevent lines of business, applications and people from sharing information with one another. The goal as you become event-driven is to get all that data in motion and share it with the rest of your enterprise. Many customers want to take that data from those legacy applications and send them to public clouds like AWS or Azure where they can create big data lakes and perform real-time analytics or build and run event-driven microservices. They're also thinking about private cloud deployments like Kubernetes so they can run their software in cloud native ways, as well as iPaaS applications or getting events in and out of runtimes like Spring or Node.js. IoT is another issue as enterprise modernize, how do you connect to devices like robots, sensors or automobiles, or places like factories or retail locations and incorporate real time data from those places and devices with the rest of your ecosystem. The challenge becomes how do you move events between on-premises applications in the cloud and the IoT, or between clouds that all have their own proprietary messaging infrastructure? If you had to create connections between each application and service that needed to share information in all the various locations, it would be a nightmare to build, manage, secure and scale. The solution to avoiding this spagetti architecture, is to introduce event brokers into each of these environments. The applications each connect to their local event broker and publish and subscribe to events through that broker. And critical to the success of building fast, reliable event distribution is the ability to connect your event brokers together to form an event mesh. There are three defining characteristics of an event mesh. First, as I just said, it's made up of interconnected event brokers, which means it's inherently event-driven. Second, it's environmentally agnostic, it can be deployed in any public cloud, private cloud, PaaS or non-cloud environment, and it will operate the same way in all environments. Third, it's dynamic, it dynamically learns which events should be routed to which consumer applications and then routes those events in real time as they occur, no matter where the producers and consumers are attached to the mesh, and without needing to configure event routing. The event mesh takes care of this, rather than the developer having to set everything up each time. When building an event mesh, it makes sense to use the best technology for the job. Solace enables an event mesh with PubSub+ Platform, a complete event streaming and management platform that provides all the tools you need to design, deploy and manage event-driven architectures and stream events through your entire ecosystem. The benefits of a Solace powered event mesh are that it is dynamic, open, simple and everywhere. It's dynamic in that an event mesh built with Solace PubSub+ event brokers is self-routing, self-learning and self-healing, so it can automatically and efficiently transmit events between producer and consumer applications wherever they run. And it uses Dynamic Message Routing, which saves operators the time and effort it would take to identify and manually configure connections between producer and consumer applications running in different environments. It's open, because an event mesh built with PubSub+ event brokers provide native support for popular open standard protocols and APIs. We also partner with leading streaming vendors to build bridges that let more sources and targets join an event mesh, as well as connectors for technologies like Kafka. It's simple because PubSub+ makes deploying, managing and monitoring PubSub+ event brokers easy. Users can deploy a hybrid and multi-cloud Solace event mesh with a click of their mouse and manage it centrally from the cloud. I'll show you more of this interface, called the cloud console in a minute. A PubSub+ event mesh can connect everywhere you need it to, because our event broker is available in three form factors, including an appliance that can be deployed on-premises or in data centers, software that can run in any virtualized hardware or container environment, and as a service in all the popular public clouds and their virtual private cloud environments. That's all fine on paper, but let me show you how easy it is to set up an event mesh using Solace in the real world. I use Solace's PubSub+ Event Broker: Cloud service to create three messaging services: one in AWS and Oregon, another in GCP in Belgium and a third in Azure in Singapore. Using the event mesh view tab within the PubSub+ Cloud Console, you can see all the event broker services available to join a mesh and view what your mesh would look like. Now I'll create a mesh using my three services to do it. I'll give it a name, in this case the highly original "Mesh Demo." I'll add the AWS service in Oregon, add the GCP service in Belgium and add the Azure service in Singapore. Click create event mesh and it's done. In the future version of PubSub+ Cloud you'll be able to use the point-and-click interface to complete the mesh, so at this point we'd be done, but for now we'll have to add those dynamic message routing or DMR links manually. To do that, I've opened the web manager, which is the GUI management console for each of the broker services, here's Oregon, here's Belgium and here's Singapore. Now I'll create the first link between Oregon and Belgium. I click on the Oregon manager, go to the bridges, select DMR bridges for dynamic message routing, click to connect, and because I'm using PubSub+ Cloud, I can log in and it will show me the services that are available to connect to. I want to connect to Belgium, so I'll pick that one from the pulldown list, click configure and it will look for all the connection information. Because I'm using PubSub+ Cloud, all the passwords and settings are pre-configured. Click on Create Link and Test Connection and the system will take a few seconds to make sure everything is set up correctly, and there it is, a DMR link has been set up between the two services. You can see here that the bridge is up. I'll now do the same thing to create the other two DMR links to complete the mesh and fast forward the video to show you the end result. Here you go, you can now see three DMR links between my broker services in the three regions. Each service is showing two links because they are connected to two other services. See how easy that was? Applications can now publish and subscribe to events from any location on the mesh without any additional configuration. I can also add software or hardware brokers to this mesh, the only major difference being I would have to manually input the connection details, so it takes slightly more time. To wrap it all up, if you want to enable real-time data distribution in your enterprise, take advantage of an event match powered by Solace PubSub+ event brokers, which are dynamic, simple, open and available everywhere. To get started with PubSub+ Event Broker and to try building your own mesh, go to solace.com/try-it-now/ where you can download the free software or start a free Solace Cloud account. If you have any other questions please contact us today, we'd love to talk with you! Bye for now! 