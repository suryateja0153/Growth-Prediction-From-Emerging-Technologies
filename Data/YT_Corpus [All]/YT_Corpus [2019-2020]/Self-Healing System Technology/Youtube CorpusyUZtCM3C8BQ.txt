 Hi, my name is Greta Sheganaku and I'm the product manager for Vision AI. In this video, we want to discuss the main use cases for using our Vision AI solution. So to start off when creating Vision AI, which is a test automation tool to help you with your UI test automation, we first looked at the main problem areas that are out there when it comes to your eye testing. And the main problems can be grouped into three areas. The first one is around fragility. The problem that your tests are usually not stable enough and keep breaking. Sometimes you write your tests today they work, you run them again tomorrow. And although the application is still working, your tests start failing. They become flaky. The second problem area in UI automation is around know-how the problem that automation is usually very technical and it is hard to find enough resources to perform all of the automation that you would need in your organization. Especially you often have a lot of subject matter experts in your organization who would know exactly what to do. But as they let the know how on the technology side, they are just incapable of creating the automation, which is a problem that we want to overcome. The third problem area is around speed, and that is the problem that is specially in UI automation. The automation just happens way too late in agile sprint cycle. So I will go through those three buckets in a bit more detail. So you understand the concept of it better. So the first problem around fragility, if you think about it, when you ask a human tester to steer the status dropdown and select in progress, they're capable of performing that instruction on the left drop down just as well as they can. Form it on the right dropdown. But when you look at the code level and what our automation has to deal with it, this code can change over time drastically, be it from one technology to another, to just a small change where the identifiers change, the DM structure changes and so on. And therefore it's becoming hard to adapt your test cases. So you have to change your tests. Whenever you have changes on the underlying technology. As a prominent example, you can look at Salesforce. So when you upgrade from Salesforce classic to Salesforce lightning, usually you have to redo all of your automation because it's new technology. And even after redo your automation, as Salesforce keeps pushing changes to their productions, you will have to maintain those tests over and over again. This is something that we want to overcome. Vision AI use a simple visual clues. So sentence like insert a certain name in the opportunity name field, this sentence is already your working automation. And this sentence can be applied on the new Salesforce instance, just as well as it can be applied on the old one. Meaning your automation recognizes objects and fields on the screen just like a human would. So our task here was really to make the machine, see like us. So it becomes as adaptable as we are. And with that, we introduce the self-healing mechanisms. So Vision AI is extremely powerful. When you go through a lot of application modernizations and upgrades and updates in the underlying technology. And then the other big problem area that we saw out here was around know-how and the problem that automation is too technical. So looking at this code snippet, it is very confusing, but what it actually is, is just this current recent insurer dropped down here at the bottom. And this is the only thing that we want our testser to focus now going forward. So in the future with Vision AI, what you will have to do is to just specify what it is that you see on the screen and what actions you want to perform on the screen. Okay. And the automation will work on any type of technology. So by using only those simple visual clues, you can write your automation once and it would run anywhere even after upgrades or updates of your environments and applications. The third problem area was around speed so that a lot of our customers want to release fast, especially if they're very agile and, developing, and, DevOps practices. So, what does the spring cycle usually look like? You start off with a story card and mock-up of your application goes to the build test and deployment cycles for your application. And when you look at the UI level, what usually happens is that a lot of companies are trying to implement the BDD approach, where you can specify up front what it is that you want to test, but the problem is that those BDD frameworks are not your automation. So you still have to plug in the automation piece to really make the BDD framework work. And this happens only when the user interface is ready and available, which is usually not at the beginning of the sprint cycle. And this is a different concept to unit and API tests. Where in unit tests, you can specify all of your unit tests upfront before you have a single line of code. The same thing with API testing, you can write your entire API tests by just having some API definition files, but when it comes to UI testing the UI usually is created later and later in the sprint. So the automation piece for the UI can also only be created later in the sprint or fall into the next sprint or just not happen at all because of a lot of time pressure in agile development cycles. So, what we are offering now is a way to create your entire UI automation upfront before you even have a user interface with that will allow very fast in sprint automation of your UI interfaces. So Tricentis Tosca powered by Vision AI now really allows you to test sooner. You can shift testing, left that, automating all your tests already based of something as simple as a mock-up or a whiteboard drawing of the application that you actually want to automate. You can also test smarter. So Vision AI really keeps up with all the changes that are happening in the background. And only by focusing on the visual clues, you can test across different applications as they evolve. And in general, you can also test more. So think about all those applications that you could not automate so far, because it was either hard to access the technical layer because they were in a hard to access environment like Citrix and so on, or because the, the language that their application was written in was really hard to automate. These things don't matter anymore. As we just use the user interface and steer the user interface. And most of all with that Vision AI really lets you focus on the tasks that matter. You don't have to spend all your time maintaining the old test cases just because of changes in your application. But you can just specify once what it is that you want to test and be sure that that specification will work across technologies. And even if you start as early as with a mock-up you can already start focusing on your next next tasks and be sure that your automation will work. So coming back to the question, when should you use Vision AI? So our general recommendation here really is to use it in those four main use cases. The first one is when you have frequent technology changes in your application, and it's really hard for you to keep up with maintaining your old modules and test cases. The second big part is when you have a lot of customizations in your applications, that the automation that you want to create on a certain technology is very difficult to create because the technology is cumbersome to automate then also use Vision AI. Another big use case is really for applications that are in very hard to access environments like Citrix and virtual desktop environments. Those are the perfect use cases to use Vision AI as we're only steering the interface and need no access to the underlying tech layer. And another big use case as we discussed is this whole shift left of UI automation approach, where you can really start creating your automation based off something as simple as a model. This is a really revolutionary approach on the market. To see a simple flow on how you can create and run a test using Vision AI, already based off of a mock-up, join us for our next video. 