 Let’s write a program that creates the multiplication table for the digits one through nine. There are nine rows -- a good candidate for a loop -- and each row has nine columns -- also a good candidate for a loop. Each entry in the table is the product of the row number and the column number. To get this results, we’ll need nested loops ; for loops inside of for loops. It’s really important to plan your output before you start writing your code. Let’s look at what the header lines are going to look like. I’m going to have two dashes and a plus sign, and then in the rows beneath it, I’ll have the number a space, and a vertical bar, and let’s just do the first four rows just to get an idea of the process. Here in the main table, let’s give four spaces per number. And then for the second number, we’ll have two, four, six... three, six, nine... and in the fourth row, four times one is four, four times two is eight, and we want things so that the right hand side of the numbers line up. But notice there’s still four spaces for each of the numbers. That means our header row will have to have four dashes for each number, and the heading line above it will also have to have the same spacing. [no audio] And we’ll need three spaces at the beginning to line everything up properly. I’ve put it here in the comments, where each dot represents a blank space. Let’s start with the two header lines. While I could do someting like this: System.out.println( and then count the spaces myself by hand... [typing, no audio] that’s a lot of work, and it’s very error-prone. Instead, let’s use for loops to have Java do the counting for us. The first line of the header starts with three spaces and then the numbers one to nine. We’ll use a loop that starts at one... less than ten, adding one each time... and then use formatted printing with four spaces for an integer... whatever that number is. And that’s the end of the first line of the header. For the second line of the header, we’ll print dash dash plus, and then have another loop that counts from one to nine. And this time, we’ll print four dashes. And that’s the end of the second header line. Let’s save that program, compile it, and run it just to see that this part works. I like to test my programs one stage at a time rather than writing the entire program and then testing it. And so far, it’s looking good. Now let’s get to the body of the table. We see that there are three characters up to and including the vertical bar. and then each of the numbers takes up four spaces. [typing, no audio] Let’s put a comment and, in fact, we may as well put a comment here [typing, no audio] and we’ll write the outer for loop that prints the row numbers. We’ll start row at one and as long as row is less than 10, we’ll do the body of the loop and then add one to row . We’ll print the row plus a blank and a vertical bar... and later on, we’ll print the column entries for the row... [no audio] and then go to the next line. Let’s test that. [no audio] And that also is looking good. To print the column entries for the row, we need a for loop nested inside the outer loop. We’re going to use the name column for our loop control variable; it also starts at one and the loop continues as long as it’s less than ten, adding one each time through our inner loop, where we will use System.out.printf() to give a formatted print four spaces as an integer... the row times the column , which is the entry for that particular row and column. Let’s move this up a little bit to give ourselves more space... clear it out, compile again, and run. And there’s our multiplication table. Again, here’s the nested loop part of the code, with colors and lines to help you see their relationship. In regard to programming style, using meaningful variable names for your loop control variables and indenting correctly are vital for keeping your code organized and readable when you have loops inside of loops. 