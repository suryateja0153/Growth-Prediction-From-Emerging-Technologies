 Hey everyone, my name is Kajal and welcome back to another video in the Webots tutorial series. Last week we learned how to make our custom two-wheel differential drive robot in Webots. This week we're gonna learn how to write a controller code to drive your robot around and to make it a fun interesting project we are going to learn how to drive a robot in a square or any polygon shape for the matter if you are enjoying this Webots tutorial series make sure to subscribe and hit the bell notification so you know every time i come up with a new tutorial so without further ado let's get into it. ** Webots Tutorial Python ** so go under wizards and click new robot controller continue and i'm going to write my code in python so i'm going to select python continue let's call it drive my robot ** Webots Tutorial Python ** click continue and done this is going to open the code in your editor here now it comes with the basic setup which is great as it helps you remember some of the stuff in python you can just write your code you don't necessarily need to write a main however i prefer doing it so let's just add a main ** Webots Tutorial Python ** and i'm gonna indent my code nice tab so the first thing you do is create an instance of your robot which is simply robot next is a time stamp we are gonna simply use 64. next as mentioned here you need to create an object for your motors so let's have a left motor robot dot get motor and then we can double check our names here under children hinge joint device rotation motor and you can see we've named our motor motor one ** Webots Tutorial Python ** let's do the same for our second motor ** Webots Tutorial Python** next let's set the position for our motor to infinity and set the velocity to zero ** Webots Tutorial Python ** let's add a small comment of what we are doing and clean up rest of the comments we don't need next we go into our main loop as mentioned here this is what your robot will do for every step in your simulation this is a great place to read your sensor values process them and make decisions which is usually give commands to your actuators like a motor either by setting position or by giving velocity in our case we will simply give velocity so let's clean this up because we're gonna give velocity let's determine a max speed ** Webots Tutorial Python ** which is 6.28 ** Webots Tutorial Python ** let's have two speeds for a left and right motor for now let's run at half speed ** Webots Tutorial Python ** next let's set the velocity to these speeds foreign and let's hit save now we go into our robot and under controller we select the code we just wrote which is drive my robot ** Webots Tutorial Python ** and there we go our robot is driving straight for a differential drive robot there are two ways to turn your robot around either stop one wheel or slow it down and let the other wheel go at the same speed or turn the wheels around in different directions so let's say you want to go left you turn your left wheel backwards and you turn your right wheel forward and in this way your robot can take a left so let's try that here we'll change our left speed to negative and we'll keep our right speed to be positive so that it goes forward hit save and then play now as i flipped the left speed and write speed we can see that the robot is now turning in the other direction now let's have both wheels at different speed and see what happens as you can see in the first case the robot was turning in place in this case is actually going by taking a circle around a point and this is a big plus of having a differential drive robot it can nicely turn on the spot as you must have seen with a roomba robot and when we reverse the speed you can see the robot is now driving in the opposite direction here's an interesting question for you how would you make the robot drive backwards tell me in the comments below so we just learned how to drive a robot straight but that's kind of boring so let's do something interesting let's drive a robot around in a square or in fact a polygon of any shape so let's get into the code ** Webots Tutorial Python ** we're gonna drive it around in a polygon shape so let's decide the number of sides for a square that would be 4. now let's also decide the length of our side our arena here has small squares of 0.25 meters so let's go with that as the length side now our goal is to drive the robot from its starting position till the end of this corner now we know the speed of our robot and we know the distance so let's just use time as an indicator of how long it should drive straight before it has to make a turn one thing to note here the max speed is actually angular velocity so to compute our time to drive straight we need to compute linear velocity the formula is pretty simple its linear velocity is equal to wheel radius times angular velocity which in our case is max speed from our design we know our wheel radius is 0.025 now with this we can compute the amount of time our robot should be driving straight along the edge of a polygon it's going to be distance by linear velocity so here's what we're going to do let's compute the start time and then we'll compute the current time now if the time to go straight is over then the robot should stop let's save and run our robot as you can see once it's reached the other end it stopped now similarly let's compute the amount of time our robot should be turning let's turn on the spot at the vertex so first let's compute the angle the robot is supposed to rotate ** Webots Tutorial Python ** for a square it's going to be 90 degree but let's make it general so 360 degree divide by the length of our side 360 degree in radians is going to be 6.28 next let's compute the rate at which our robot will turn the formula is 2 times linear velocity divided by distance between wheels from our modeling we know the distance between the wheels is 0.090 lastly let's compute the amount of time our robot should be turning so here's how we can think of our problem from the start point till duration side drive straight then after duration side till duration turn done and then go back to driving straight another way of thinking is keep driving straight unless you are in the rotation time period if you are in the rotation time period then rotate else continue driving straight and this is what we are going to use so if our current time is within the rotation time period then you rotate else you drive straight now this time was computed for our first rotation accordingly we need to keep recomputing our time for rotation for upcoming rotations let's save our work and see what happens it's driving straight turning and then turning again as you can see it's following the square during the next turn you can see that it's drifted away a little bit and now it's sort of going in a diamond shape and it represents real world in the sense that in real world it's usually wheel slippage uneven floor size or something of that sort to fix this you probably need to have some sort of a feedback mechanism we can see how the robot is driving but the robot itself doesn't know where it's going and this is what's called an open loop system where you're essentially just sending in commands but the robot itself has no idea about its own state or the environment to correct our action we need to actually send the signal back so the robot can update its states so that it can know that it's drifted off its location and it can do a corrective action to come back into its system and that is what we call a closed loop system and that is something we can explore in one of our future tutorials i hope you like this video so make sure to hit that like button and if you haven't already don't forget to subscribe also if you have any questions or doubt feel free to put them in the comments below thank you for watching and i'll see you in the next video 