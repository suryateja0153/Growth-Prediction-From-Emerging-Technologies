 [Music] ll everyone my name is John and I'll be talking today about tensorflow jl and interface between Julia and tensorflow so what is Julia some of you probably never heard of it it's a really dynamic yet performant programming language developed at MIT since around 10 years ago it's a fresh rethinking of what a scientific programming language can be like and version 1.0 has finally realized last year to this cheering audience from Julia Khan so I'm gonna give you a whirlwind tour of what Julia is and then talk to you about tensorflow dot Jael so here's a very simple Julia program I think anyone with a Python background can guess what this is doing except this at show business but that's actually on macro and what is John I'm finishing my PhD at MIT I do machine learning by day and open-source software by night and sometimes by day too to the chagrin of my advisor so why consider giulio for one thing it's got an ultra-fast just-in-time compiler so here I'm running an autoregressive loop autoregressive process using for loops which i think is the most natural way to express them and why don't we just run that for a hundred million iterations and Julia and Python and you can see the syntax looks pretty similar between them well Python takes about 13 seconds see takes about 0.9 seconds Julia takes about 0.9 5 seconds not bad and yet powerful metaprogramming so I name from a list background will appreciate this you can write a macro that takes in julia syntax and outputs julia syntax so here's just a trivial toy macro that checks if in numbers less than 0 and prints out a warning and note that since it's a macro it can print out the name of the variable and change the variable in place you can't really do that with a normal Python function and there's this really nice multiple dispatch system where you can define multiple versions of a function and the one that's called depends on the types of all the arguments at runtime so here's a really cool rock-paper-scissor example that someone from the community created and what's nice is I can say that for any shape if shape a beach a B shape a B shape B then shape B loses to shape a and I can encode that information with one line and Julia is growing fast about doubled and github stars in the last year alone we're probably above 20,000 now look things that really started to take off since 1.0 was finalized and now tensorflow about jl so here's a quick glimpse of its syntax it's clearly inspired by Karras and the whole tense of 2.0 world we're now eager by default but graph mode is available if you choose to use graph mode macros will help you out so here are Mac O's transforming native Julia the control flow with this while loop into a graph mode while loop and macros can do other nice things for you here we're visualizing a program with tensor board and note that the labels on the nodes are automatically inferred from the variable names which is what macros enable macros can do other cool things so Francois Kara's Fame posted this really nice example of implementing a model in care us and but someone replied to the tweet being this is really pretty except why are there all these X's I wish we could eliminate those and I've highlighted those in red and luckily there's a Julia macro that will automatically thread a variable through a program and so we don't need those X's in Julia I think that's pretty elegant and you can benefit from really fast past party processing so if I want to tokenize my corpus maybe it's got 100 million tokens and I have a custom tokenization scheme I can just write that as a for loop and I can trust Julia's just-in-time compiler to do the right thing you don't want to write a for loop in Python that goes over 100 million elements you can try if you're worried about weaving Python don't be we have lots of good scientific computing languages right in Julia if you need to use Python we have a very good Python interface so here's an example of calling into Syfy um if I didn't tell you those last two lines where Julia you'd probably think you were just writing Python it's a very simple and we're compatible with a whole tensorflow ecosystem tensor board works note again that the label on the tensor board graph is automatically inferred from the variable you can save graphs in Julia load them in Python and vice versa and soon you could do that for saved models as well so if some of your collaborators are using Python don't think you have to switch to Julia you can use Julia yourself and still work with your Python friends and someday they might use Julia if you want to define a custom operation and use Julia's just-in-time compiler to make it fast you can do that maybe you want to write a ray tracer you can use Julio's really easy for see foreign function interface if that's a part of it and define a gradient in that and just a little case study you can even use Julia's differential equations package and that all just works because of Julia's multiple dispatch so if you wanted to do a neuro load EE like you might have seen that nips that's very simple all right so we still want to do a lot more care us we need your help come check out our github come join our slack chat and download Julia today all right so I think all my collaborators especially Linden who's in the audience and everyone in the tents of four world and I want to thank you [Applause] [Music] 