 [Music] hi and welcome to coding tensorflow I'm Robert Crowe and today we'll be learning how to get started using tensorflow to create and train a model when the result we need is a single number like maybe a price or a probability or in this case miles per gallon in other words a regression problem real quick let's talk for a moment about a regression problem versus a classification problem regression and classification are probably the two most commonly solved problems with machine learning today today we're going to be working on a regression problem so we want our model to look at an example from our data and predict a number usually that will be a floating-point number now if we were doing a classification problem then we'd want our model to look at an example from our data and tell us which class or group it thinks this example is so it might be telling us that it thinks this example is a fish or a bird or maybe a weasel but today we're doing regression specifically today we're going to look at training a model to tell us the miles per gallon of cars from the 1970s by looking at data like their weight the number of cylinders the horsepower just look at these beauties miles per gallon is a single number so regression is the right thing here okay one more thing we're going to be using Kerris if you haven't heard of carrots before it's a high level API for deep learning and it's very user friendly and it's really powerful too and today we're just gonna scratch the surface okay let's get started so today we're gonna be using Seaborn and Seaborn isn't installed by default on a collab so we're gonna pull it with a pip install you can totally do that in a collab you can install whatever you need to okay that's it Seaborn's installed that was quick now we're gonna go through the other imports that we need to do pandas and of course tensorflow itself including Karis okay that's so now we've got version 1.1 three of tensorflow tensorflow includes a lot of great data sets but today we're gonna be reaching out to a dataset that's at the University of California at Irvine it's a great resource they have this repository of public domain datasets and it's a great tool when you're looking for data caris makes it really easy for us to download our dataset you can see the URL right there of the UCI repository then because it's easier to see what we're doing we're gonna give our columns some names and then we want to take a look at our data and and just see what it looks like that's always a good thing to do and pandas will help us do that data is almost never clean even data that you've gotten for something like UCI so we need to make sure that all our data is good values one of the things we're going to look for is unknown values and you can see from this that there are six of them in the horsepower column in this case there's only six rows so we can be safe just dropping them so let's go ahead and do that so we have one column that's different the origin column it's not a numeric column its categorical and usually with a categorical column you want to convert it to what's known as a one hot column so to do that we're gonna first remove the origin column and then we're going to create three new columns one for each country that the cars could be coming from and each of those will only have a value of one when the car came from that country let's take a look at that so we're gonna split our data in two pieces eighty percent of it or you can see they're a fraction of 0.8 we're going to keep in our training data set and the other is going to be our test data set so you might be wondering why did we split our data well we want it to do well on data that it's never seen before so what we're gonna do is split it into two pieces and keep one of those pieces and we're only going to use that when we're ready to test our model and see how well it does for data it's never seen before that's called generalization a model that does well on data that it's never seen before generalize as well so now let's take another look at our data specifically let's look at the miles per gallon the cylinders the displacement and the weight to do that we're gonna use Seaborn's pair plot utility which gives us a nice plot of the joint distributions of each of our features along with kernel density estimation plots or KDE plots along the diagonal if you haven't seen them before KDE plots are essentially just smooth histograms so you can see there are some clear relationships between some of our features okay now let's look at some summary statistics of our features like the mean the standard deviation the minimum the quartiles and the maximum one of the things I want you to notice here is that the ranges of these values are very different and that's not a good thing in general when you're training a machine learning model so we're gonna be fixing that in a little bit the next thing we need to do is make sure that we're not giving our model the right answer meaning we don't want to give it the labels in our training data or for that matter in our test data so we need to split those off from our data sets okay so it's time to deal with those ranges of values that were really different we need to do something called normalization of our features when we do that all of our features will fall between 0 & 1 and the way we accomplish that is essentially by using a z-score we subtract the mean and then divide by the standard deviation so let's do that now so now we're ready to build our model and caris makes it really easy we're going to use Karis sequential which gives us a fully connected model it's going to have three layers all three or dense layers the first to have a Ray Lu activation and the first one needs to know what the shape of the input data is the last layer doesn't have an activation meaning that it's a linear activation and for a regression model that's what we want okay we also need to give it an optimizer we're going to use our ms prop for that and we need a loss function we're going to use mean squared error for that and we need to give it metrics the metrics are what we're going to use to see how well our model is doing we'll give it mean squared error and mean absolute error okay let's go ahead and create our model you could ignore those warnings those things come up sometimes now let's take a look at a summary of our model caris makes it really easy to do that so you can see that we have our three layers and notice that we have four thousand eight hundred and sixty-five trainable parameters even for a very simple model like this that's a lot to try to train but Karason tensorflow make that easy now we can go ahead and try our model even though we haven't trained it and just make sure that it produces results and doesn't blow up let's go ahead and do that now so there now we've got some results from our model and we haven't trained it so of course those numbers are meaningless but the shape is right and it didn't throw any errors so things are looking good so now we're ready to train our model we're gonna train it for a thousand epochs each epoch is a pass through all of our training data and as we do that we want to print a dot so that we know that our model is still training sometimes this could take days we want to make sure it's still training so to do that we're gonna create a print dot class the other thing we're gonna do is split off 20% of our data in a validation set and we'll use that to test our model as we're training it to see how it's doing okay let's go ahead and train our model see those dots we want something like those dots if this was taking a week we'd want to make sure that we knew that it was still going and there we go it's done so we saved a history object and we can look at our training results let's do that now there we go you see we've got loss our mean absolute error and mean squared error those were our metrics and we've got the same things for validation validation loss validation mean absolute error but wait a minute something looks wrong with those numbers the loss and the validation loss are going up let's take another look at this a lot of times plotting will really help to see what's going on we're going to use net plot live to do that and we're going to plot learning curves one for each of our metrics so there are curves the green is our validation error and you'll notice wait a minute the green is going up that's not good this is classic overfitting so how do you fix it well there's lots of different ways but today we're going to use something called early stopping early stopping is really very simple it just stops training the model as soon as the model stops improving one of the things you need to specify is what should it look for in this case we're gonna look at validation loss and how patient should it be how long should it wait before it decides that things aren't getting better so let's go ahead and train our model again but this time we use early stopping and look at that those curves are perfect both the validation loss and the training loss are going down together let's look at how well our model is doing overall we'll look at the mean absolute error look at that it's 1.8 miles per gallon off is that good well you decide but for me if I was trying to predict the miles per gallon of a car by looking at the cylinders and the weight I don't think I could do any better than that so now we're ready to make some predictions we'll make several and then plot them out look at that that's really not too bad if they were perfect they'd all be on that line but they're all pretty close so really not too bad let's check and see what our error looks like we'll use a histogram for that so it's pretty close to a Gaussian but not quite with the data set this small you wouldn't expect it to be perfect so that was great we learned a lot today we learned about mean squared error law we learned about metrics that help us understand how well our model is training we learned about normalization which helps us prepare our data and we learned about early stopping which helps us deal with overfitting thanks for watching tune in next time if you have any questions or comments post them below and don't forget to subscribe to the tensor flow channel for more stuff like this [Music] [Applause] [Music] 