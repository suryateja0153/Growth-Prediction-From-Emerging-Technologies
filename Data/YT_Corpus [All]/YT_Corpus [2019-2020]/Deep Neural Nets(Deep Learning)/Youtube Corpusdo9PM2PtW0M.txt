 Hello This video was made as a supplement to my article, which I posted on www.saraai.com. In which I show the nonsense of using deep learning or neural networks for recognising images and I will demonstrate this in this program showing that you can do it better much better, not using these methods at all I will try to prove it using the MNIST character set, who is such a peculiarly a kind of a ABC every student or person who starts out with deep learning or neural networks For this purpose, I created a program that you can see here, which allows me to operate on the MNIST character set The MNIST character set, as we know, is a collection of 70,000 images with a resolution of 28x28 pixels in 255 shades of grey The MNIST character set is divided into 60 thousand characters as a training set and 10,000 more is a test set The standard character recognition method is that to a specially prepared neural network we introduce 60,000 characters, the network learns and then on 10,000 characters from the test set, we test our network It really works very nicely Recognition is close to 100% And now the question is: Since the recognition is close to 100% then why do you do it differently if it works? Well, actually it works, but it has no practical use at all I would like to show a method in which there is no learning required on 60,000 samples You can, I think, and I will prove it give a few samples, to get the same effect, i.e. a recognition close to 100% Now I'm gonna show it, and then tell you how to do it I don't use neural networks I don't use any dee learning methods I just do it a little differently Maybe now to encourage you to watch the rest, I'll show you how I think it should work And it should work so that I don't have to introduce 60,000 samples I just need to introduce one or more and the program should recognize the characters Let's get started. digit 1 It gonna remember The ones are different, so I'm not introducing one, just a few For example, this one And one more of those more normal I think that's enough, these a few samples Now we can check, because I've made it possible for myself to get on those 10,000 samples of the MNIST test base to test what will be the recognition At this point, 94% is recognizable I didn't introduce 60,000 samples I've literally introduced a few samples Maybe it's not enough, maybe you need to introduce one or two more because people really do write 1 differently. And at this point, these few samples replace the 60,000 I don't use any deep learning method here, I don't use neural networks I'll describe how I do it later, but maybe we should add to make it a little harder, let's add one more digit we add 0, for example It could be People often write such O unfinished little bit  Another one of those more egg-shaped maybe? I guess it doesn't matter anymore And now let's see: we have added 1, 0 Let's see what will be the recognition of these two digits in the MNIST test base We have 71% recognition of 0 I don't know, maybe people write differently it would be appropriate to add two more samples What else is cool about this method I'm describing here? I'll show you later, of course, how to improve your recognition I'll add a few characters, we'll check carefully What's cool? That we can add after all, that's 2 too, right? It won't bother us at all if we add a 2 to these two that we have added before We'll save it We're gonna do it evenly. Saved Then why don't we add three more of these, if we have one? 3, there will be three such dashes We are adding Maybe another one more, because one sample might be too little Okay, we have added Let's check ourselves now Will the program recognize Our sign, which we will add And now let's see what it is? Here we have the display There was 2 Let's enter three dashes We have recognized 3 Of course we also have 0 and 1 so let's try to see if the 0 0 is recognized And the 1 1 is recognized Look, all it took, was a few characters so that the computer can recognize the characters we're entering now, which are completely different have a different number of pixels painted, and they're still recognized Maybe now I'll enter all the digits quickly And we'll see what it will be like to recognize the entire character set I won't bore you Okay, I've added all the digits to the database And we have the recognition at the moment at almost 97% You would have to check which digits are not fully recognized and add them yet Besides, the program is not a commercial version I've been writing this program for a few days, but I've really taken a lot of time these days to do it. And I think I can improve that recognition more or less up to 99% But that's not the point. It's the method. What else is better about this method? This method does not require all digits to be perfectly centred. Straight, that is, specially prepared for recognition. We can rotate these digits freely, even upside down and they will be recognized. Let's try to do a test like this. I'll just draw one at an angle. Will it be recognized? Well, of course it's recognized. Let's try to do something about 2. 2 - there you go. It was identified as 2, right? Although it was very much twisted. It really doesn't matter what the angle of a digit is with this method. And with methods used in deep learning or neural networks such a turn, not even just a turn, but Incorrect centering of this digit would cause a diagnosis error. Incorrect centering or size - as I will write 2 somewhere in the corner it's normally done so deep learning that we have to center this 2, weight and, of course, we also have to adjust the size, which means that we'd have to enlarge this 2 and then we run it through the neural network and recognize it. I found a very good script on one of the pages using of course neural networks to recognize MNIST characters There's a link here, of course, you can take a look And let's see how nice this works. This script is really great. That's great. Look, I'm even doing the side, but it's processed, centred and the digit is recognized. But what happens if we do, for example, like I showed you, if we turn the digits a little bit. Well! I've turned it a lot. but you can already see that there's a problem Here, the signs must be really well prepared, so they can be recognized. With the method I showed you, characters may be bigger, smaller, thicker, leaner They can be written in plain computer font, can be handwritten, it doesn't matter. The system can be used for standard OCR, practically all the documents. Let's try it again. Well, unfortunately. But we're gonna tilt it a little bit Oh, not anymore. As you can see, this is a terribly flawed system. But let's go back to the beginning. MNIST character set is a kind of an abecaddad, for every beginner student or a person who's beginning to have fun with a deep learning, or neural networks. The file consists of 70,000 images with a resolution of 28x28 characters, in 255 shades of grey. It has been assumed that 60 thousand objects constitute a training collection, and the 10,000 are the elements of the test set. Let's see some of these signs. We have the ones the twos are very different, as you can see. And so on. What is the method I'm presenting here? This method consists of Detection the basic shapes in the digit. The human brain is very easy to recognize straight lines. Of course, also curved, more or less He recognizes circles and such basic figures very easily. We're doing exactly the same thing. For example, if we have the digit 6, we check where it starts, where it ends. In this case, it is very easy to see that it is either here or there is a beginning or an end. You can write this digit either from top to bottom, or from this center outside. Let's see how the program does it. We start by finding the beginning or end of writing. It was very easy. Now we can... I've described, there are several methods. how to find these lines that make up the digit. One of these methods is the filling method. Let's see how it works. Let me show you these lines now. From the end of the digit, the system founds in turn filling in this digit, to find the line that makes it. Let's take the others, for example. We have the digit 0 from the MNIST character set Maybe we should take it from the test kit. Look at that. Here we have the digit 9. Digit 9 was drawn this way: the system detected individual points forming a whole line. Let's take another nine. Likewise. A little different, but similar. Now, here on the side, we see how the system detects lines and the individual points that make up this digit. Let's take another one. Here again We have a nine. We detected a line like this, which is much easier to analyze, In fact, the nine are composed of can be said. (system detected) from three lines. The first line is so straight. The second one is straight, slightly curved at the end. As you can see, so curved Actually, all these lines are bent all the time in one direction. So we can say that The nine is actually made up of one line curved at an angle of -342 degrees See how many digits are built in this way, that they are formed by lines always bent in one direction. Let's see Actually, a nine is just a digit Seven is also bent in one direction, but it is a much smaller bend. It's not a 342-degree bend. See? - Detecting lines bent this way so much 0 of course it's bent, just a little bit different, as we know. By detecting this line, we detect that it's just 9 Let's take maybe 6 Likewise. 6 is a little more complicated, in this case it consists of more lines. Let's take another one. We detect points on 6 Maybe we should try 1 yet The 1 is simple. We're actually detecting one straight line. Another one. Maybe 0, we'll see how it is detected. Look at that. See some more examples. How do we detect a point. In case of 0, there is no point as in case of 6, for example the beginning, the end... At 0 we have to take any point from which we start and see what happens next. And let's see... These are the next points making up 0. In fact, to recognize 0 you only need this information as we see it right here. That's the angle that from beginning to end is... angle it creates the line making up 0. Does it seem simple? It's pretty simple. I think any programmer who already knows how to do it, can handle it easily. Let's take maybe 5 yet Let's see. 5 actually consists of several such easy to extract pieces, but it only really consists of two. One bent to the left, the other bent to the right. One curve bent to the left, another curve bent to the right. It's simple, the other digits are built completely different. As you can see, it's very simple. And now, do you think if our brain is using its own network of neurons so that it remembers every point of digit 5? Do we have to remember a new symbol, for example, as I show in this article, if I draw this symbol then do I have to draw these symbols 300-500 for someone to remember? No, I think we remember that right away. I'll draw a second one. Is it the same as that one? A little different maybe, but generally the same. It's definitely different from 5, 6, or other digits. One more of the same. Our brain is great when it comes to simplifying all data that come to it, And even more so when it's as huge amounts of data as the image data. Do you really think the brain will remember pixels, create matrices and compare these pixels with other pixels? No. The brain just it remembers that information, that this symbol is a vertical line. Just... And this vertical dash is 1 Exactly the same simplification, we can recognize not only a set of digits from 0 to 9, which is very simple after all. In standard machine learning techniques or neural networks, if we were to add more characters to this character set from 0 to 9 for example the letters A, B, C, D we would have to rebuild the network every time. Build again. Besides, the more these characters would be, the more mistakes the network would make. In case we save it this way, which means we only save simple information about the starting point, the starting angle, possibly although this is not very important but about the type of line then whether it's a straight line, or maybe it's a line bent into one, bent into other side Or is it a circle? If we remember such basic information, it's how we recognize every sign. And now, what else is important, it doesn't have to be a size 28 by 28 sign. I can make a pattern in size 28 by 28 But if I write this sign now at 1024 by 1024 resolution, the method doesn't change. There will be exactly the same method for recognizing these two characters. What in machine learning methods is practically impossible. You'd have to scale it up and so on. You don't have to scale anything in this method This method can be used not only to recognize digits, alphabet We can use it to recognize various other images, like road signs or other images. If you ever gonna build a robot, who doesn't bump into furniture, then call me, I'll tell you how to do it. If you're interested in how to recognize other images or shapes, or how to find for example, traffic signs all over the picture If there's any interest, I'll make an extra film like that, where I will show you how not to use deep learning or neural networks we can detect such symbols or signs in the image. I guess that would be enough - I invite you to read the article where I reveal a little more at www.saraai.com 