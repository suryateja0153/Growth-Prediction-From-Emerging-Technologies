 [Music] hi and welcome to part three of this series on using Google collab to cold train and test neural networks in the browser without needing to install any kind of a runtime in the previous video I showed you how you can install tensorflow with collab in this video I'll show you then how you can use tensorflow to build a neural network for breast cancer classification it runs completely in the browser using collab and it's really quick to train and test the data for training this neural network comes from the diagnostic Wisconsin breast cancer database you can find it at the URL in the description it has close to 600 samples of data each from a cell biopsy where 30 features have been extracted press L i've pre-processed the data into several csv files so we can just focus on the neural network itself let's now take a look at the code for training this neural network using this data so you can use that network to then perform breast cancer classification yourself let's start with uploading the CSV files now that's a really neat thing in collab that you can load external data into it I'm going to load my CSV Xin to panda data frames with this code next using Kerris in the sequential API I'm going to create a neural network with an input dimension of 30 and that's because each of these cells has 30 features it will then have a layer of 16 then 8 and then 6 and then finally 1 the final layer will be activated by a sigmoid function which will push it towards a 1 or a 0 now we're classifying 2 features so that's perfect the network itself will need to have a loss function and an optimizer defined on it on each iteration it measures how well it did in training using the loss function it then tries to improve on that using the optimizer and as you'll see in a moment the training process has 100 steps with this loop happening once per step the training itself takes place in the fit function here I pass in the training X's and Y's and I specify how many times it will loop where a loop is it making a guess at 2 the relationship between the X and the y it measures how well or how badly it does using the loss function and then it approves on its gas using the optimizer it's coded to do that a hundred times but you can amend that easily and explore the results for yourself as you'll see once it finishes training the loss is zero point zero five nine five showing that it's about ninety four percent accurate we can now test that Network with data that the neural network hasn't yet seen this is the ex test data so we'll get a set of Y predictions for this data now these predictions are going to be a probability they're not a zero or a one but values that are close to zero are close to one so we'll write this code that takes all of the values that are less than 0.5 and consider that to be zero and everything else to be 1 and now here's some simple code that will compare the predicted values for the test set against the actual known values for the same set now there are 114 values in this test set and you'll see it gets it 100% correct now remember earlier we said it was about 94% accurate so why do you think it gets at 100% correct well that's a little homework for you to do post your answers in the comments below and let's see who can get it right and that's it for this episode and in the next video in this series my colleague Paige will show you about how to use different runtimes and processors and how to use your code to take advantage of GPUs and TP use right in your browser so whatever you do don't forget to hit that subscribe button and you'll be able to catch up with it thank you [Music] [Applause] you 