 oh hi so if you're here this video is really dependent on the previous one so if you just watch that you took a break and talk to your plants then what welcome back and I'm here I'm gonna continue the discussion of convolutional neural networks building off of what I did before with the filtering function and take the next step into max pooling so oh I don't want to keep talking about it because that's exactly what the video is gonna talk about and I'll see you in the future because they'll be even more of these after this one okay see you soon now that I've wrapped up talking about the convolutions there's one other there's many other aspects of this diagram but there's one other really important operation that happens in a convolutional neural network that's described in this diagram it's subsampling that I want to add to my diagram and my code demonstration and that is and I'm not going to call it subsampling I'm the common term for this now is called pooling and in particular the operation that I want to add is max pooling so there are different kinds of pooling you could do but max pooling is the standard pooling operation for a convolutional neural network so max pooling I mean it's another layer it can happen at any given point so we could max pool before we apply the convolution but I typically speaking the convolutional filters are applied and then after those are applied we get new images out of those and those go through a max pooling layer so I think to describe I think I need to erase this whole diagram so that I can look at max pooling and then we could kind of come back to this when we look at the full architecture so let's begin with our 28 by 28 image then let's assume I have one filter just to simplify things I had one filter that was three by three one thing I didn't discuss and it's going to be more relevant with the max pooling layer because I'm gonna do something specific with it is there's a term you'll see called stride and stride refers to remember this filter you know I'm not gonna actually do this 28 by 28 but this filter is applied to each and every pixel we take we take this filter apply it to this pixel and this gives us a new image pixel apply filter take the result into a new pixel pixel apply filter take the result put it into the new pixel here's the thing this is 28 by 28 this is a 3 by 3 filter I had to start with this pixel right here right because the edges don't have neighbors on all sides so ultimately this and stride sorry stride refers to how far I pass the filter along as I'm going through the image I don't really have enough spots here but you know I could I could take the filter and jump over pixels as I'm applying it to reduce the resolution of the image in this case I had a stride of wool in my code that I wrote the stride was 1 I just slid over by 1 and we can actually see where the stride would go this ultimately right there the x + + y + + that's the stride so I could say X + equal stride y + equal stride and set the stride equal to 1 so that's what was happening here but even with a stride of 1 if I'm skipping the edge pixels my new image is 27 by 27 so one thing that's really key to how a convolutional neural network works is that the image over time as it goes from layer to layer to layer so this is the convolutional layer with the filters and now I'm going to talk about the pooling layer the resolution is reduced and this has a number of benefits one is images are high resolution with millions of pixels so this the this learning space of a neural network to learn all the parameters of every pixel connected to every filter throughout multiple layers it would just be much too big to realistically be computationally realistic to do so this process of reducing the image down and down and down as the layers is effective in keeping things man but it also has another benefit which is we're trying to boil the essence of the image down into something that will highlight key features in that image and so this is really what the what pooling does what max pooling does a 1:1 thing it does is it really reduces the resolution which I'll show you in a second but it also picks and chooses the pixels that have the highest values to emphasize those what is really being activated so pooling comes with a matrix as well it's not really a filter but it's a matrix and a standard matrix might be two by two and so let's take the case and actually let me erase all this just to zero in on pooling to describe this I'm going to start with an 8 by 8 image and I'm gonna do max pooling with a two two by two max pooling with a stride of two so there are no wait this is not a filter it's two by two is just describing how much of the how many pixels am I looking at at one given time if I'm looking at a 2x2 area of pixels for each iteration of this algorithm and then my stride is to the next set of pixels I look at us here the next one is here the next one is here so for for the for the columns I end up looking at four and for the rows it's the same it's 8 by 8 4 so actually the result after max pooling is 4 by 4 4 by 4 now how does the algorithm works what this sounds like some fancy thing this is actually the simplest thing ever basically for each one of these areas of 2 by 2 pixels take the largest value the brightest color and put it in there so I'm gonna fill in some arbitrary values here [Music] so I'm not gonna fill this whole thing out but you see I don't know how well you can see this but I have the numbers for 8 negative 1 to the highest one is 8 it goes here I have the numbers 3 3 1 9 the highest one is 9 the highest one is 1 the highest one is 10 and so the max pooling algorithm takes these little neighborhoods 2 by 2 max pooling skips goes from one to the other with a stride of two I could have just moved these neighborhoods just by one or by even a larger amount but this is pretty typical this has the benefit of sub sampling the image reducing it but not just you we can do average pooling so you could do average pooling averages all of these but it turns out convolutional neural networks perform better with max pooling over average pooling maybe not in all cases but in sort of like the standard image classification case and this is because what we're looking for our features in the image that we want to highlight and so by looking at an area of pixels and seeing which pixels are activated the most and keeping that one that's going to really emphasize then help boil the essence of the image down into something lower resolution I should add just to be really accurate here and the chat is tell this is offering some different opinions about this that while max pulling is the most common historical example of pooling in a convolutional neural network there are other other researches showing promising results from things like dilated pooling which is a new concept to me that I just looked up and read about some combination you can also do a combination of max pooling and average pooling so there is I think some discussion and research happening there and I'm not here to tell you what is the optimal way to architect your convolutional neural network I just want to talk about and explain the process and look at an example of it which is very common like max pooling so I'm gonna write another function much like convolution but call it pooling same thing happens here I want to receive an image I want to give an X Y I want to return some RGB value that is the highest RGB values within that neighborhood now there's an interesting question here do I take the RGB values from the brightest pixel whatever they might be or do I just take the the highest are the highest G and the highest be independently and they could be from different pixels I don't know the answer of that right now let me just go with actually picking the brightest are the brightest G and the brightest B separately independently so I'm gonna start with the brightest RG and B and I could start with zero but just to be really really safe absolutely in the convolutional process there's the the idea of pixels is gone really just dealing with numeric data so I really should if I'm gonna try to find the brightest a start with in negative infinity because that's the lowest possible number you know in JavaScript that is then I want to look at this 2x2 area and the same thing that I did before in the convolution I want to look at the given pixel and its neighbors and then I could get the RG and B from that pixel and now I just want the maximum I want if this R is greater than that print that what is being stored as the brightest R then that are should be the brightest R which I can do with the max operation right R is the biggest between bright R and R and the same for G and B oh and that has to be one and two this is actually all that I need to do this is max pooling right here but now I just need to return bright are bright G and bright B next I'm going to create yet another image I'm going to call it pooled and pooled is also a blank image however if you recall I'm going to use a stride of two so the resolution of that image is reduced further by half so I'm actually going to take out the stride from here and I'm gonna create a global variable for stride but this stride is only referring to the pooling process because then I can say create image dim / stride dimensions / stride just to add some comments for a moment this is convolutional layer I mean I'm simulating the idea of a convolutional layer I'm not actually there's no neural network here there's no machine learning here I'm just going through these particular algorithms without matrix operations I should add then let's add the pooling operation so same thing here I'm going to go through all of the pixels in this case I can start at 0 but I still need to only go to dimensions - 1 because basically I'm gonna skip every two pixels and I don't want to end up here so this is plus equal stride and this is plus equal stride I can do the same exact thing I can create a variable called RGB which equals now pooling I want to pool what were my arguments the image and the XY and I should probably call this like max pooling but whatever oh no no I'm not pulling the cat the cat was filtered with convolution and then the filtered image is pooled so I'm pulling filtered at this given X Y then I need to figure out where am I putting the resulting RGB values I'm putting them in the image called pooled but that image has the dimensions of half so the old X's X / the stride the pooled y is y / the stride and then the index is so this is why this function really needs the image passed with it I should not have used the global variable it was terrible idea because I want to reuse it but I have a different resolution of image so I'm gonna go back to making this image and then where did I call it here it's a image dot with I needed here image anywhere else oh here image so now I could say index of pixel X pixel Y in the pooled image because I want to say pooled dot pixels pics + 0 equals RGB R and I need to add the load pixels and update pixels and now this should be the max pooling operation go over the filtered image by the stride for every 2 by 2 area find the highest RGB values and then add those to the pixel the corresponding pixel in the lower resolution pooled image let me make the height of my canvas times 2 so I can put the pooled image at the bottom right so the filtered image went off to the right and now the pooled image should go also off to the right and let's give this a try I don't see the pooled image this should be a gee I forgot to add the Alpha in again I always forget this so I need to give it the alpha there we go so let's go back to a known filter instead of having random filters so that was my edge detection and you can see this is just I mean visually what I'm seeing right now is kind of like a lower resolution version of what you have above but if I were to rewrite this with say average pooling I think you would see it different it wouldn't come at the most features these edge features that it's you know in a neural network would be discovering here I'm telling it to look for those are highlighted even more than they would be with just average pooling itself so now that I've shown you the code for both applying a convolution filter to an image and then a pooling algorithm to that image with a variable stride I think that I can now go back and look at the larger rket the larger diagram of the full story of a convolutional neural network that has these components in it and again our reference point is this diagram from the 1998 paper gradient based learning applied to document recognition I also want to highlight for you a blog post that was really helpful for me when I was reading up and researching and trying to learn about convolutional neural networks it's this blog post right here an intuitive explanation of convolutional neural Oaks from night from 2016 this diagram is super helpful this is exactly what I want to talk through basically and there are a lot of nice visual diagrams and animations of the convolution process convolutional filters as well as the max pooling algorithm itself as well here's my best attempt now at the full story of the convolutional neural network we start with an image the first layer is a convolutional layer and I'm writing 2d because a lot of times in a machine learning library you can have convolutions in different dimensions and we're working with a two-dimensional convolution here the convolutional layer has a number of filters the image is sent to every one of those filters and these filters are applied I should say that the pixel the values that come the filters aren't just the raw values from the convolution process they're also then passed through an activation function the same kind of activation function that's in a standard layer or a dense layer so typically this would be rectified linear unit or e Lu the next step is max pooling I'll represent that with little squares so the image that comes out of the convolution and the activation function is then max pooled and then the output there is another image so we take this first image pass it through a bunch of filters max pool then and a whole bunch of other image that if I'm using a stride of two now have half the resolution as the original image so the question becomes what to do next well we could be done and pass this to what I what is the last layer and if we're doing that at some point the Dana does have to be flattened so everything I did in my previous video about ml5 neural network with an image that just gets flattened and passed in that is what happens in the last layer the last dense layer takes these images and makes and has a hidden layer of neurons and each image is flattened and sent into all of those and then sent to the output layer and pass through the softmax activation function that I've described which gives it a probability for a classification if this were a classification problem but what's interesting is in most cases if you look at a lot of these diagrams for example this diagram on the blog post I referred to or this particular diagram here you'll see convolutions subsampling convolutions subsampling let me draw this to give myself a little bit room I'm running out of room and I want to diagram the full story I used so much space here for this image [Music] so here's the same diagram but squashed a little bit to the left because I want to add another convolutional layer and another max pooling layer so I'm gonna add some more filters here but something interesting is gonna happen here so let me actually do fewer filters in this next layer and I'm gonna be really I'm gonna just use - there's only two filters here well these images that result from the first convolutional max pooling process they need to be tested or not tested they need to be sent to both filters so this image goes here this image goes here so in essence we have 1 2 3 4 times 2 times 2 filters and I'm not really drawing this well to have 8 in total so we get 8 new outputs out of this convolutional layer and each one of those needs to be max pooled so now I have 8 images and remember let's say this was 28 by 28 these are all 7 by I'm sorry 14 by 14 then after this convolution process and this max pooling these are all now 7 by 7 so we get these progressively lower and lower resolution feature maps of the original image with lots of different filters applied in lots of different ways and then the final result is essentially everything that I did in my non convolutional neural network with an image just that one hidden layer it's called a fully connected or dense layer and one output layer all of that gets put right here but instead of some original image being flattened and sent to it this whole process has happened and we're sending the data from these 7 by 7 images through the one dense layer and one and I've totally run out of room here so I'm just gonna put oh here output layer and this is where we would finally see is it a cat or is it a dog we would see probability values for the particular classification task one two three four five six seven oops I'm missing one here even though this is a bit of a mess let me go back and refer to the and thank the author of this blog post for this much more thoughtful and precise diagram showing these different layers how the images become lower and lower resolution become these final feature maps and then get passed through what's here is actually two fully connected layers so there are a lot of reasons why you might have different numbers of convolutional layers different numbers of fully connected layers different strides different filter sizes that by the way another word for filter is kernel so this is it I really all I want to do this video was talk through all the pieces as well as show you some code that actually runs through and does those processes to an image itself which I think opens up a lot of interesting possibilities for you if you wanted to create a project around visualizing the process of a convolutional neural network as it's learning now this would be a much bigger endeavor than what I've done here because you need to create these visuals out of all of the pieces as the training process is happening but ultimately what I want to do next is 2/3 things and it might take a while for me to get to them but they will be eventually hopefully in subsequent videos one is I want to just create this exact architecture with ml5 I want to show you how the ml5 I can make ml5 neural network with a convolutional layer maybe two convolutional layers and then a dense layer and an output layer then I can take that and apply it to the previous example where I didn't use convolutional layers and just see how that looks I also like to look at something that we could call a doodle classifier so using the quick-draw data set that I've referred to in a number of different videos could I train a classifier to recognize particular drawings and in fact five has built into it a doodle a pre-trade doodle classification model that's pretty robust so you know I might try to train a sort of like smaller version of that write all the code for that with ml five but ultimately then show you how to use the pre-trained model that's in ml five as well but that uses convolutional layers okay so thank you so much if you somehow made it all the way to the end of this rather long explanation and kind of tinkering around with code demonstration of what the process of convolution and pooling is in a convolutional neural network I hope to see you in a future coding training video I mean I don't really see you but I I feel your presence somehow and so as you write a nice comment it brings me a little happiness to my day so I will see you in that virtual way in a future video and thanks for watching and have a great day that's not convoluted at all [Music] 