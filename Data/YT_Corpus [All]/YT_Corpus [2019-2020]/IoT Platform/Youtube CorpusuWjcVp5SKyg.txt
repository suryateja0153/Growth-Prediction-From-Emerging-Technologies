 welcome back to another episode of   IoT with smartphones In this video you will learn how to use multiple smartphones to detect earthquakes and create subsequent alarms see how you can build a disaster prevention system  in only three minutes I'd recommend watching the video called IoT with smartphones part three on this channel now here's the scenario let's imagine there's an earthquake we all know there are thousands of reliable  seismic detectors installed worldwide, which aim to protect us from disasters. At least that's true for the big cities at risk. But how about the risky rural areas? How could we use our smart phones to do the same job where there are no detectors? Nowadays, we are surrounded by smartphones. The sensors in these smartphones can do both, determine the location of the smartphone's and detect vibration Basically that's all you need to identify a similar shaking within an appropriate proximity and conclude the occurrence of an earthquake To get started, all you need is  a small number of smartphones and a flat surface that you can shake  to simulate an earthquake. For simplicity reasons you want to start  observing 2 smartphones and have them both point in the same direction. Regarding the data of each smartphone you can expect similar amplitudes on the three aces of the accelerometer Have a look in your cumulocity IoT-cloud On your navigation pane you will find  the connected smartphones. On the dash boards, you can see what they measure. For evaluation purposes you may open  two browser windows and display them both on one screen Shaking the surface proofs, all amplitudes are very similar Now, how could your cumulocity IoT-cloud  detect an earthquake? it's easy! All it takes is to model some  simple logic following three steps You can do it in less than three minutes. first step detect the shaking event on a smartphone using the accelerometer the timer starts now. First you want to use the app switcher grid  on the top right to open the so called a parma analytics builder, which is an add-on of your cumulocity IoT-cloud create a new model, given it a name for example earthquake detection and some description and click on OK This results in a blank screen titled accordingly, You can now start modeling the logic On the navigation pane you can see  the two connected smartphones pick the first one as an input block keep measurement input as the block type and select one of the three axes of the accelerometer for the data input Detecting an earthquake in this demo means, detecting a shaking of the sensor and that is to measure a difference  between two time steps So you want to pick a so-called delta block that measures the difference  between two successive events as the difference can be both positive and negative you want to add another expression building block and configure its input to be transferred into an absolute value Next on the list is to define a threshold that can be used to distinguish the normal movements from shaking you want to set this value to 0.1 pause the timer Looks like you're done with the basic model. With this combination of building blocks, You detected a shaking of the smartphone  on the first basis of your accelerometer. Continue the time taking. To create the same logic for the other Axes, you want to mark all blocks, group them and copy and paste this group two more times change the input blocks by selecting the other axes To consolidate your measurements choose an "OR-block" and connect the values of the three axes pause the timer To wrap it up: when either one of the three aces recognizes a shaking this will result in an output signal  or event on the "Or-block" if you want to include more logic, you must consider the compass sensor and gyroscope gain more reliable data. However, for this lab demo you are all set for the first smartphone. you want to replicate this data analysis  for as many smartphones as you like. Again you can do this by copying  and pasting the complete group. You want to give names to the groups  to keep track of your individual smartphones. Then just change the device  on the three input blocks and you're done for each smartphone. Second step detect similar patterns on different devices and detect earthquakes continue the time tracking as the data transfer can vary quite a bit  from smartphone to smartphone it's a good idea to allow for some time delay. You want to set this value to one second. Copy this step for the second smartphone. Now it takes some logic to bring the events together, in respect to the possible delays . with an end block you can create an output when the smartphone's fire at the same time or with another "End-block"  when the first smartphone is delayed or with a third "End-block"  when the second smartphone is delayed. Consolidate the outputs with an "Or-block", done. pause the timer Wrap-up: whenever there's an output on this block, a similar shaking of the two devices has been detected Thus, for this demo you can conclude  this is an earthquake. Of course, there are many more thoughts  that have to be implemented before you can run such a system on a productive level. However, you can take the introduction  of this video as a starting point and go ahead with your friends  to implement the following Third step, send alerts back to the smart phones. Now that you have detected an earthquake, you would want to let the owners  of the smart phones know about it. Continue the time tracking In the navigation pane under output pick the first device and define that kind of message that you want to send. Pick operation output, as the block type. if you want to send a message, type: c8y message as operation name Set the parameter name to "text" and write any parameter value such as earthquake detected, description is optional. Copy this building block and pick the second device from the list, connect the dots and save your model, done. Stop the timer you can now close the editor, and set the system to "Production" and "Active" Admittedly these were very generic examples and of course you are wondering: What have they got to do with the Internet of Things? The answer is simple. What you've seen here, is the basis of IoT. connecting sensors and collecting sensor data in an IoT platform analyzing sensor data and recognizing data patterns deriving information and taking smaller decisions Granted this was very simple example but you've got to start somewhere, in the sky's the limit what applies to one sensor unrestrictedly   applies to the combination of many sensors that are supposed to be independent from each other it is most fun if you work with several people and have several mobile phones at your disposal you can start right now or have a look at some more examples in this video series. Have fun! 