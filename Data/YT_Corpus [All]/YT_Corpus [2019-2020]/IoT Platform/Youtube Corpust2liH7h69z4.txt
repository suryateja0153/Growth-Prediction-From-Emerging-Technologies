 [Music] good to see all of you right sunshine early morning here hope you found some coffee my name is Marco I'm a Solutions Architect at Google cloud and I focus on IOT and that's exactly what I would like to show you this morning I'd like to show you how to build a IOT solutions using seek Fox Radio Network for two devices and Google Cloud so let's get started first I'd like to talk to you about LP one what is LP one I hear you say well it's low power wide area networks with IOT it's super-important okay you might have an IOT device in your home but many many IOT devices are actually out there there may be measuring air quality in a field or up in a mountain somewhere may be measuring some flood gates water levels in a canal or whatever so there are some where you may have thousands of them we have customers who have millions of IOT devices of this code a bit of scale so you want your devices to be kind of autonomous and self managing and low maintenance you don't want to have to go there all the time to charge them and check them they need to just survive on their own so low power means that you can run your devices with battery power so you can easily with these solutions that I'll show you today build solutions where the device can run from a single battery for months or even years and wide area network means that if your device is up in a mountain or in a field it can still connect where to the internet so one way to do that is with our technology partner cig Fox so sig Fox is providing a radio network specifically for IOT they call it 0g not 45t they go the other way zero t it's extremely low bandwidth but it's really really nice for T I'll show you and when you build IOT solutions you unfortunately also need to consider the costs so there's a lot of cost elements test the hardware cost so if you buy or specify a very simple very constrained microcontroller you can squeeze the hardware cost down that's good microcontrollers also reliable because they don't really have an operating system they just get some power and they execute a binary that does stuff like read the air quality sensor reading and send it out so that's it that's the hardware cost with seek Fox you need a radio module that would be a couple of dollars and then the connectivity is something like this from $15 per device per year down to just $1 per device per year so that's nice if you have thousands or millions of devices so seek Fox provide the radio network they build the base stations they connect them so they provide the coverage they currently have about 60 countries covered and 21 of those countries have nationwide coverage now what is lp1 here first of all bit seek Fox and lp1 networks the payload is extremely small that's why it's 0g it's not 5 T the maximum data or sensor telemetry usually that you can send with sick fox devices is 12 bytes uplink so from device up 12 bytes so 96 bits you have 96 bits to play with and now you're like this cannot be it's 2019 what are you talking about 12 bytes crazy it's good you can squeeze a lot of information in those 12 bytes zero bytes can be actionable information if you just send a message with no payload it's still a message it has metadata that can be a heartbeat I'm still here the air quality monitor I am still here one bit can transmit zero or one true or false like how is the water level in this drainage canal is it too low is it too high no zero with six bytes you can transmit GPS coordinates and you still have six bytes left for things like sensor readings multiple sensor readings so that's uplink 12 bytes up and you can transmit about six messages per hour with sig Fox Network so that's about 140 messages per day but usually these sensor readings are sent like every hour etc downlink is then from the network to the device so that could be a command that you send to the device to do something maybe paste on alanine analytics or maybe you want to update the device configuration now with seek Fox you cannot push messages to the devices they are not listening because they are sleeping so that they can conserve power the radio is off so how does it work with seek Fox the device can set a flag so you in your code on the device can set a flag that says I want to have a downlink response so when it's sending something there's a flag and then the network can send back a downlink message which is 8 bytes so that would be a device configuration and maybe some commands now in order for these devices to have highly successful transmission of data sick fox is using narrowband it's extremely narrow band transmission 192 kilohertz radio bursts no protocol there is no protocol so in order to save power on the devices there is no handshake there is no connection to the network and handshake hi I'm here hello no they just send they literally just encode the data and modulate it with radio and send a radio burst they actually sent or transmitted three radio Purse the same message three times they do channel hopping to say they sent the same as it's three times consecutively in three different channels this is increasing the likelihood of the network hearing and receiving the message and then the rest of the time the device should be sleeping especially if it's battery or may be solar powered so 99 point something percent of the time your device can be in deep sleep so nowadays there's a lot of microcontrollers MC use that you can literally put to a deep sleep mode now if there's a sick fox radio there while the device transmitting its consuming some milliwatts of power thank you for joining this session you're welcome and then when the devices has finished transmitting you suit put it to deep sleep and then maybe it sleeps 10 minutes maybe sleeps an hour maybe it sleeps a day when the MCU depending on the microcontroller is sleeping you can go down to nano watts sorry nano amps nano amps of current so the device can actually consume less power than the batteries natural self drain it's you know Perry's batteries lose some power over time so you need to choose some battery types that have less that keep the power longer without any loss of power over time anyway most of the time the devices are sleeping and then the wide area network part of this is the link budget with radio connections radio connectivity the link parts it means like if you transmit a signal from your device how easily can the network actually hear this signal and sig Foxx is really good at that depending on the different countries and frequencies if you look at the uplink FCC so that's here in the US the devices can transmit at 22 decibels that's a radio power and the network sensitivity for receiving is minus 134 decibels so actually the sig Fox radio network can hear the message a hundred and thirty four decibels lower than the transmission power so very very weak signal so in practice it means that if a sick Fox device is transmitting in urban areas where there's buildings and stuff like that you have a few miles of alpha distance to the base stations but in rural areas maybe some fields etc you can have dozens of miles thousands of kilometers range so that's good so let's get to the integration now so sick fox is one option for you to have connectivity especially for remote devices somewhere and Google Cloud can then help with the data so the main point is this your devices emit these sensor readings maybe air quality whatever sick antennas pick up these message sees the sick fox platform can optionally then forward the data forward to messages to a back-end system and in this case we can use Google Cloud and our data services in GCP to receive analyze store and have actionable insights from the data maybe even machine learning so to help with this in January we published the integration the QR code there and the URL on the top bring you to that tutorial so it's fully open source the tutorial gives you the step-by-step guidance how to actually integrate your seek Fox account and your Google Cloud account and everything is open source and all the code is in github it works like this on your left you have to seek Fox devices when they transmit messages with your sensor readings they call the sick system sick platform and then you can configure a so-called callback or multiple callbacks that if you get data from your devices or if there's something else to notify the backend system sick fox can push the messages to a back-end system and that's what we have implemented with the integration in google cloud and we are using cloud functions for that because with sick fox first of all you have very small data maximum 12 bytes per device and at maximum a single device can transmit every 10 minutes so most of the time there's very little traffic unless you have millions of devices so cloud functions are really handy because you can scale them down they appear your compute system appears when there's a message so the payload will trigger the compute so it's event-driven computing and it's server less meaning that you don't have any servers running and you don't need to manage any servers or even any containers so the cloud function will receive the data from sick fox there's of course authentication and encryption for the for the link there then the cloud function will check that the message looks ok its conforming to the sick Fox standards so what is coming to the cloud function is the payload from your device and then metadata around that like what is the device what is the device type maybe what is the sea-cocks operator like us etc so there's the Merida and then the payload and remember the payload is binary encoded maximum 12 bytes once the cloud function receives this payload and metadata it will drop them in cloud pops up cloud pops up is a global message skew so it's a really handy place for you to keep your data reliably up to seven days and then process the data from this message cube with your data processing system so in effect you get a real-time streaming data off payload into cloud pub/sub and if the devices are requesting a configuration update or downlink message then the cloud function will detect this flag that the device is saying hey I want to have a downlink message and we use cloud datastore as a really simple easy handy database service to store the device configurations so you will create the device configurations we check the device ID device type ID if they are requesting a downlink we get the payload the configuration from data store and the cloud function sends it back to the device through the sick fox network also if the sick fox network is sending any service message sees we have a second cloud function receiving those and just logging everything in stack driver bits is the locking system in Google cloud now that is the integration and the integration is device independent it's solution independent it works with any solution with zigge fox because it just takes the payload as is and drops it in pops up but every IOT solution will be different based on your devices and use cases so after pops up it's good to have a device specific and use case specific back-end system for example you can use another cloud function then to look at this payload in pops up or data flow with cloud dataflow you can create Apache beam Dex directed acyclic graphs of data processing steps you can enrich data you can branch it whatever so data flow is great for that and after pre-processing the data you want to store the data in a data store we have many handy services for that like cloud BigTable extremely fast and scalable key value store very good for time series data and a lot of IOT data is time series but bigquery definitely is probably the most likely data store that many people use it's becoming a data Lake if you will so we did with bigquery you can store your data there in real time so the system can write the data in bigquery in real time then your data warehouse is up to date in real time you can run machine learning inside bigquery on your data without moving it anywhere and of course you can have analytics test positive etcetera connected to your bigquery data warehouse and you can use cloud and mail and other machine learning services then to do things like maybe predictive maintenance looking at trending of your sense of values I talked through the functional requirements on the left already but when I created this integration we set some non-functional requirements as well so we wanted this to be server less so you don't have to worry about running server so managing them event-driven and stateless and scale out of course if there's a lot of traffic but importantly also scale in even to zero so if there's no message is coming from your sig Foxx devices the system will scale in and kind of hibernate and it's walking by the messages and that means that's what even driven architecture means the message sees will wake up the system and it will process your messages and of course everything is customizable and open source now with that let's actually see the demo so live demos so first we switch to my sick fox back-end so when you create a sick Fox account you can access to the backend system and then for your devices or device types which are groups of devices you can optionally configure these callbacks so these callbacks are the trucks are seen the sick Fox Network side if your devices are sending data do something send it somewhere else to a back-end system so we can see here that in my seek Fox backend we have some callbacks already configured and if you can see over there the callbacks actually implemented by cloud functions built knit so Google Cloud functions we have different callbacks here for data for service messages etc now as part of the integration of course you can use the user interface but I also made a command-line tool that uses the seek Fox API because to configure the callbacks it can be a bit tedious if there's a lot of parameters etc so we give your humans we make human mistakes human errors so I wanted to automate it and also then maybe you can build a see ICD pipeline that uses these command line tools as part of your automation so to use the sick Fox API command line tool that's part of the integration in github first we can execute callbacks list and there's a configuration file which then has your credentials and your API keys and points to your system in sick fox on the bottom you can see that now for this sick fox device type which is the one for the demos we have five callbacks configured that's right we have five of them here but if we use now the same API and we execute callbacks delete all oh dear God so now the API client said we deleted the five callbacks if we refresh the screen they're gone that's it and let's put them back so simply I just execute create if I can type it there is a configuration file there's a JSON file which contains the callback configuration so my examples and if you need to modify them or add them you can simply modify this JSON config file and add or modify more callbacks so this script will read that JSON file and by default it will create these five callbacks that point to Google Cloud functions there we go now it's back so let's actually now go back to the slides and start using this system let me show you really quickly a piece of the code so this is the sick fox API command line tool that we just used sick fox has a swagger configuration file for the API API version 2 and we generated a Python client in this case it's in Python and how it works is very simple I have I've got the JSON file that contains the configuration the desired configuration for the sick fox callbacks that point to cloud functions in this case and then the script we'll just run through all of those in the template in this case it does five loops and calls the API instance create callback function for each of those callback configuration so very simply to loop through and automatically create the integration so that's handy now let's actually use it so let's have a live demo now I've got here on States my sense of discovery version 3 device it's a microcontroller that's battery-powered I charge it every couple of months if I remember so it the battery lasts a long time it's an off to self development kit that's handy for getting started with SiC Fox and IOT and Google Cloud it's got a lot of sensors and pH sensors temperature humidity there's a magnetic sensor there's an accelerometer light sensor etc and of course a Sig Fox radio so let's now see what we have here so we have the integration which is the middle gray part you saw that or part of that and on the right the right side we have a device specific back-end so when this device is sending data it has a defined payload it's got its sensors and depending on the mode of the device it actually changes the payload so the payload is dynamic but as part of the payload the device is transmitting a value what is my mode mode one is temperature and humidity so then the rest of the payload actually we know that it contains temp humidity information so that's a device-specific payload that labor it sees those 12 bytes actually only four bytes in this case so to handle the device specific data on your right I've created a device specific back-end and we have also published this as an open-source tutorial and let's take a look at that now so let's use this integration with the sick fox same as it device so let me show you the device here it is on the table it's quite small so it's a battery-powered MCU with some sensors built in small lipo battery in there and a button and then let's go back to my laptop before we send any data so remember we've got the callbacks here so if any data comes from my devices these callbacks will be activated and sick fox will send the data to Google Cloud specifically here so now we are in Google Cloud and this is the receiving side of the data this is the integration in GCP we've got the two callbacks here callback data which is receiving the data payloads and the optional callback service which is receiving service messages and logging those in stackdriver and we have two logs here so this is the callback data stack travel logging and the device itself is here so this is this particular device and now if I switch here and I double click this button here we should see a blink blink blink here there it's now transmitting those three bursts three radio bursts and we go back here you can see green callback okay so the sick Fox callback was activated and the arrow turned green meaning that Google Cloud replied with the positive acknowledgment thank you I received the message so sick received the radio transmission and forwarded a message to Google cloud and the axil data is here you can see that its hexadecimal signified that it's binary encoded so eight characters in hexadecimal are four bytes so it's actually four bytes of binary encoded data I will copy it to my clipboard and we I can show you later how to decode it so let's go back now to Google Cloud look at the callback data function and it should have been triggered here we go so this function was triggered by the message just now and if we go to the logging of this function and we refresh the logging here we can see in stack travel logging it says we received a sick fox message from this device type from this particular device ID at this time the data is there you can see the data is still in hexadecimal binary encoded format that's the payload the operator is here and the next message says that simply we pop list a message to pops up to a particular topic so now we get the payload in pops up and then your data processing system can pick it up from this message skew in real time maybe plot function to the data flow and do something with the data now what did we actually send let me show you as part of the integration we also published a tutorial for this particular device a tutorial that creates the device specific back-end that uses bigquery and we need to have a parser because the device is sending binary payloads those are a little bit difficult to you so let's decode the binary messages using the specification of the device and then write to bigquery a normal set of columns and values so how do we do that I have a cloud function another cloud function here this one this cloud function knows the binary payload of this device type seek Fox ends it so the Pops of bigquery cloud function will get the message seized from pops up which contained a binary encoded payload it will decode them and write them to pop something so a big query the same parser also has a command-line tool so that you can do debugging and testing and maybe developing your own binary payloads so it's an example for that so here we can see that we could execute Python same as it which is this device parser possible decoding data for bits hexadecimal string from my clipboard the same that the device sent my I press ENTER and now we can see that the parser is identifying from the mode what is the device mode there is a certain two bit value there that specifies the device mode in this case its temperature and humidity and then the rest of the payload is decoded using that information and we can see it down here that the battery level is now four point one volts it's 54 percent humidity Morris temperature humidity temperature is 20 point two centigrade so it's pretty chilly here and the button alert flag is true meaning that the device sent the message because I click the button the other option is sending it with a timer ok so now we can decode the message that's what this cloud function does here pops up bigquery if we look at the logging of this cloud function now what happens is that this function is triggered when the first function puts the payload in cloud pub/sub so the first function puts the payload in pops up as is as a hexadecimal binary string the second function is device-specific and it knows how to read this binary payload so if we look at the logging of this function we can see here that this device send some data ok that's it but the next row the next row in stack travel logging for this function has already opened up the data we can see here that in addition to just a binary payload here we now have new values we have battery level we have temperature and humidity so that the next step for this function can be this it formulates a bigquery row and then simply writes the data in streaming mode to bigquery so now the effect is that when we send data from sig Fox devices using this integration your data warehouse which can be for example bigquery can be real-time so here we are we are in cloud bigquery and I have a very simple sequel query here select star that's supposed to do that anyway from this table ordered by time descending limit 20 now let's execute that and it's in UK time so the last message he is sent by the device are here the same data payload but you can see in bigquery that we have hand the information here battery level temperature humidity and all the other sensor readings which are not sent now but they are sent in another mode of the device have a placeholder here in the bigquery schema so then you can start analyzing in real-time your data warehouse for IOT data coming from in this case sick fox devices you can have real-time des portes and maybe even machine learning doing things like predictive maintenance trending other things looking at the actual values and everything is end to end real-time now the device can also send configuration update requests so for example here you can see that we have a lot of sort message C's 4 bytes but every once in a while the device is sending a much longer payload string now what is that let's put this in my clipboard I copy that to the clipboard go back to the command line tool and let's investigate what is actually inside this binary payload the parser can now detect that actually this long string here contains both the data which is the sensor readings 4 bytes and an optional configuration so when this device is sending a configuration update requests it's also sending its current configuration by the way I'm currently using these configurations and the parser can decode those and what you can see here are the valid configuration parameters and values for the sick fox NZ device so it's sending all these this is the device configuration so this is the device telling us what it's doing now and in order for us to actually use this and easily update the configuration we can do the following we can use the command line tool paste the received payload from the device here and specify that we write the device configuration in an output file Temps last sentence it dot ini' pom config file return to temp sensitive Eenie so if we now VI if we edit this it's actually the current configuration sent by the device but it's in human readable and human editable format so what we could do for example is change the message period which sees the timing the interval of the device transmitting data one in this device's case means every hour but if I change the value from 1 to 0 I'm asking the device to transmit every 10 minutes so we modified that one parameter value the first one message period I save it and then I run the parser the other way around I want to encode a new configuration from that configuration file that we just edited boom so all this is open source it's in github as part of the integration and even if you don't use this device you can use this configuration and payload tools and parsers as a starting point for you to develop your own binary encoded small sensor readings and device conflicts so that's the main point here so the tool is giving us a new configuration hexadecimal string that's the desired new configuration for the device copy to the clipboard and let's now go to cloud data store so cloud data store is where we keep the device configurations and if the device is requesting new conflicts we can simply modify the value here let's write the new config here I click done and I click Save and that's it the next time the device is saying hey cloud can you give me my new conflicts the cloud function will pick up this value and send it back to the device so that's quite simple ok moving on so so far what we have seen is we've seen the seek Fox callback configuration we've seen the device we've seen the cloud function that receives the data we looked at the logs we did some parsing of the binary payload and we saw that the data lines in bigquery so that's good then you can do your analytics and data warehousing in bigquery and how did we actually do the parsing let's take a quick look at the code I'm using pythons bit struct module here because it's really handy that you can declare a binary payload so remember we have up to 12 bytes of payload so 96 bits and in order to use those 96 bits the most in the most efficient manner you really want to minimize the number of bits and bytes that you use to convey some data so for example one bite can be 255 values right it's 2 to the power of whatever so 255 that could be for example the speed of your car so the speedometer reading easily fits in one bite okay then you have 11 by its left ok battery power maybe I can get by with 4 bits so half a bite so you get the idea you start constructing the minimum number of bits that you need to convey certain values with the desired accuracy you can always drop the accuracy and get by with less bits to Smit the data so here we have an example from this device where first we in the top lines there we investigate the device mode so as part of the payload from the device it sets a certain value mode indicating what is the current mode and then the rest of the payload is dynamic based on that so if the mode value is 1 then the device is in temperature humidity mode so that's here and then as part of the open source parser we have a bit struck that specifies exactly how many bits are used for what values and then on the bottom we can simply call this parser to give us the human readable values or standard Python values like integer and floated cetera from this binary miss now as the last thing what I'd like to show you that was the generic data up and down with SiC Fox and Google cloud a handy thing with sick fox is that it can do estimate it device location without any GPS or GLONASS or other satellite system because the sick fox network is so-called my mo multiple in multiple out everybody's talking at the same time they have multiple base stations and typically around 3 base stations will receive the same message from the devices so then the sick fox network can reverse engineer and calculate an estimated position and location of the device it's not as accurate as GPS of course but it's still nice because then your device doesn't have to have a GPS receiver which could be more expensive than the rest of the device the GPS receiver needs to see the satellites here them and it also consumes a lot of power of course you can have GPS and you can send the coordinates but with seek Fox atlas positioning you can get a rough estimate of the location no matter what kind of device you have so imagine that you are monitoring the transport of some goods maybe some frozen items that need to stay frozen from the manufacturing all the way to the shop so you need to verify the cold chain quality so if you just put a sensor there in the container physical container in this case and okay so only sent these sensor readings you can get a real-time update when for example something starts to melt or temperatures going up and then with this positioning system you can even see where maybe it's on 101 going up to San Francisco something you can a rough estimate of the location so let's see how we could use the same system with that cig Fox Atlas positioning bigquery GIS the new functionality in bigquery for geographical queries and Google Maps so let's switch back and let's take a look at big query there's something else I didn't saw you earlier so when I showed you earlier that now in bigquery we have the data coming from the device very nice yes they are here but if we scroll right there's more columns here we can see that actually as part of the metadata coming from sig Fox when sig Fox is forwarding the data to the backend system it's also including the computed location latitude and longitude based on the sig Fox atlas estimated location of the device based on which space stations actually heard the message so you start having coordinates in your bigquery database and what can you do with those well for example this so bigquery now supports G is so geographical queries so we have a nice visualizer where you can start testing things so specify your project your GCP project and then for example you query bigquery with a standard Seco query but you put there a specific value geo point so you're telling the system that hey these two column values here in my data warehouse actually contain geographical position coordinates latitude and longitude so that's the first part in the Select statement there wkt will then contain the coordinates and then I'm also asking or querying from bigquery the device ID the temperature humidity and battery level from the device data and then let's see what happens when I click run so now we are executing that query live against bigquery and currently we are looking at the last 20 messages let me increase that to 30 messages let's look at the last 30 messages aha you can see that I'm actually from I live in Singapore so when we go back in time more you can see that Singapore starts coming up so basically this is now asset tracking we are tracking my device earlier and if I put the query packed it lasts 20 rows in bigquery everything should be near here what I actually did was I drove around this Bay and my device was transmitting at regular intervals so we got some cut some transmissions there and if we zoom in here to Google i/o you can see that all these messages were transmitted during IO so if I click on one of these you can see that we have Google Maps and we are overlaying on Google Maps map pointers and the data in the pointer is the actual device data coming from bigquery so we don't have any extra tools here all of these are native from TCP and Google tools so we have a nice easy Maps integration with geographical data in bigquery here so that's very handy quite often it's good to know where your IOT devices are and you can do things like geofencing for example have an accent when your device enters or exits a certain radius a certain area so with that I really hope that you found is useful and I hope that you enjoyed it couple of useful links here please let me know how you think thank you very much [Music] 