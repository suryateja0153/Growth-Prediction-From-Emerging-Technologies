 [Music] hi everyone welcome to tools for building better smart home actions I'm Jon I leave the technical solutions engineering team for smart home I'm Gaurav naka I'm a solutions engineer on smart home and a lead on local home SDK that was announced yesterday great and over the last two years we've worked a lot of developers building smart home actions and based on what we've learned from working with you we've put together some new api's tools and processes which we're going to discuss here today and don't forget to use the hashtag aog dove's to share what you learn about Google assistant i/o so just to kind of start off and remind everybody what smart home is there's this great quote from somebody on the team it was nobody likes the light bulb that asks too many questions and what this is about is just that smart home is kind of really focused on providing a concise grammar that's also unified and consistent across different brands so that you get you have one way of interacting with your devices in one way of talking to your devices and you can actually control many devices at once so when I say turn on the lights and it turns on the lights in my living room again across brands it treats plugs and switches the same as lights depending on the name that I give it and become because home graph understands room contacts types and traits it knows that my Google home is in the living room and my lights are in the living room and just to go ahead and turn on the lights in that room when I say turn on the lights and you get all that fur for free with home with smart home when you do a smart home integration you also get both voice UI and a graphical UI that we build and you also have routines that you can set up to do things like you know if you say goodnight you can have it turn off the lights lock your doors arm your security system and that's all powered by home graph state which we'll talk about a little bit later to get started with actions go to actions on Google console and this is your window to configuring interactions whether it's the conversation actions or smart home actions you're going to create a new project and if you're building for smart home actions make sure to select home control smart-home tile we've had some complaints from developers about the discoverability of smart home actions and since then we've improved the experience on the console and you're going to do two main things like provide the fulfillment URL which points to your server where you're implementing the smart home API and you're going to configure the account linking section which is how because we use OAuth to do the account linking between Google account and your account great and just to give a kind of a recap of the architecture of what a smart home integration looks like this is a you know kind of a helpful a little visual here so when you talk to your Google assistant surface your your phone or your Google home or your Google Nest hub you'll say something like turn on the lights that device will send a message up to the assistant servers which does the natural language understanding and figuring out like from home graph what devices you're talking about and then it sends a message to your cloud which is then responsible for sending that message down to the device to take the action that you want and then your device will respond back up to your cloud and then your cloud sends a the response to Google and then Google sends that response down to the device to speak out to the user if it was a success or failure what happened and this is broken into three sets of api's the first is account linking which is done with oauth2 you know just a standard OAuth 2 and the thing to keep in mind here that's a little bit different is that you are the OAuth provider and Google is the client the next set is a set of intents that go from Google assistant to your cloud which are sync query and execute sync is basically where you have an opportunity to tell Google about the devices that the user has so what types they are what traits which is the functionality that those devices enable query is when you Google asks what the state of your device is and you respond with saying the lights on or you know the temperature set to 65 degrees and execute is basically Google asking you to take some action on the device turn the lights on set the temperature turn on the fan some like that and then the the last two if you guys are part of this are api's that go from your cloud to Google and those are report state and request sync reports state is when you have the opportunity to proactively tell Google what the state of your device is and request sync is when you tell Google that the device list needs to be updated for the user and we'll talk through what all that stuff is a little bit so in addition to the cloud cloud path between assistant and your server to implement the smart home API yesterday we announced local home SDK this SDK allows you as developers to run your java strip on google home devices and this javascript contains the business logic to control your devices and discover your devices in the user's local network this local path allows us to get faster execution and better reliability for the whole system because if local path fails for some reason you do have the cloud as the fallback available yeah the local homeless decay stuff is really exciting so here today we're going to talk about kind of three sets of things so there's api's tools and processes so api's that we're going to talk about are really here to help your users have a better experience with the smart home interaction the tools that we're going to talk about are to help you in your development so things that like might have been a little difficult before or you didn't know about hopefully these things will make it a lot easier as you're working and then the process that we're going to talk about is understanding the submission process and so let's get started with api's we have a few sets of things account linking there's some new stuff with account linking that we'll talk about which is really exciting request sync reports state that we mentioned a little bit ago and then also some security updates so let's talk to account linking this is one of the first interactions your users have with Google in terms of your smart home action so a few days ago I was going through this myself I will talk about that so let's look at the quick flow I open the Google home app and I selected the partner devices that I was setting up and I see the webview where I am required to enter the credentials and I accept the permission to allow Google to control these devices after that happens your server your app returns the code to Google and Google servers exchange that with an Access and a refresh token that access and refresh token is used in when Google sends sync query and executes intent to your servers later so a few days ago when I was doing this I get the download I downloaded the manufacturer app I set up these lights after multiple screens I have this device set up and I am able to control it using in the manufacturer app and 15 seconds later I am swearing why I wanted to link this devices to my Google assistant and I saw this page to enter the username and password and I had already forgotten it well some of you will say that that's not me but we've seen our users actually drop off on the setup page and it's a friction well the interesting thing is the other app is already on my phone and I'm logged in so can we leverage that yes we can introducing app flip which is coming soon this is a really interesting way to do account linking and what we do is instead of launching into a web view to do the authorization for OAuth we actually use the app that's already installed on the user's phone so what happens is you start in the assistant you go through that list of actions again you find the one that you want and when the user clicks on it we do a couple things first we see if if you've registered your app for app flip and then we look to see if that app is installed on the user's phone and if those things are true then we can actually just launch straight into your app and allow you to authenticate your user hopefully the users already logged into the app on your phone and you can just use those credentials to go get an authorization code and send it back the other thing that this is this is really great for is it helps with the disclosures and things like that in the scope to let people know like what you're giving access to Google for and then once you're ready you click the button in your app and it goes back to Google again this just replaces the authorization leg of the OAuth flow the rest of olaf's stays the same so once you get a token back so here once you return the authorization code back to Google we do the service server exchange and like I said so this is exactly the same flow the diagram looks the same the only difference is that instead of launching out to the web we're working within your app and so you have a little bit more control in terms of how you want to do that authentication as well so how does this work we use intents on Android and on iOS we use Universal links and this is just a basic way to do inter app communication on these platforms and so let's look at a little bit of code for Android Google will send an intent into your app launching the intent with startactivityforresult which means that basically once you finish there's an activity there's an intent that gets sent back to Google alright so the intent that goes to you gets handled in your activity on create method and there's some important intent extras that come in so there's client ID and optionally scope and you'll want to pull out at least the client ID to do validation and what you can do is you can validate both the client ID as well as the package signature from the incoming intent and you'll want to do this because you want to make sure that it's actually google calling you and not some like random phishing app that's installed and so once you've done that you verify that it's Google you can call your own offer kend you'll want to do this and send the client ID along to make sure that there's a record created in your in your back-end without authorization code so that when Google does the token exchange later on there's a code a valid code for this user in your database and so once you've done that you've gotten a code back from your server you can create a new intent that you're going to send back to Google you'll add a couple extras one is response type which you set to authorization code and the other is the actual authorization code itself you want to make sure to set the result to okay and then you're to launch back in to Google on iOS it's Universal links and it is even more straightforward just to look at just a couple links here so the first one is the length that launches into your app from Google so you own this Universal link and you'll register it with Apple just like you do and there will be several query parameters that come in the client ID same as on Android scopes which you set in the actions of Google console the state which is a string that you just respond back the identical string when you give your response and then a redirect URI which is what you'll use to that's the universal link for Google that you're going to use to launch back to Google and here instead of a package signature you can actually validate the redirect URI as well as the client ID you know again do the same validation on iOS using those couple things and then once you've done that you can call your own back end again with your user credentials that are already stored in the app as well as the client ID once you get an authorization code back from GUP from your servers then you can respond back to Google using Google's URI that was providing the redirect URI and again the authorization code and the state so now we're happy with those lights and we get new lights from the same manufacturer and I go to the same app and I set up these new lights and just like last time we do the setup and now I'm able to control the lights from the app but the great thing was I am immediately also able to control it from Google assistant how did that happen that brings us to request sync so when the cloud sees it your cloud sees a change in users devices list or if you add really new capabilities to your devices you let home graph know that for this particular user something has changed that's the requesting API and at that point home graph calls back the same cinq intent that happened the first time when the user had linked so the good effect is the user didn't have to do any account linking again and assistant now knows about the new devices so the user can go in control and this really provides a very good user experience for your users who actually chose to buy new devices from you so let's look at the curl command equivalent of what happens here it's very simple you let us know the agent user ID that is affected with the change in devices list and you specify the API key that you get from Google Cloud console and called the home graph request sync API and there right and now let's talk a little bit about report state report State as we mentioned is when you proactively send the state of your devices to Google so every time a user switches on a light you say you send this API to Google letting us know that that light is turned on if the user changes the thermostat you send that state and the state data in-home graph is ephemeral and so why does Google need this and the answer is touch controls so we have smart displays and the Google home app that have graphical controls for your devices and basically to be able to draw that that control we need to know what the state is so that we can draw it appropriately and the report State API gives us the state that we need to be able to draw accurate and responsive controls let's look at a couple examples so here we have the Google Nest hub as well as the home app and you can see some controls getting pulled up these are two different surfaces are convenient in different situations but both are showing the ability to control a group of devices which might be even different brands and so this is a really great way to do interactions for users and what happens though is that if you don't provide the state via report state instead of getting the nice graphical control what the user sees immediately is a spinning dial while we query for the state it's really kind of a jarring experience and so implementing this is fairly straightforward there's just a few steps to get report state working that you need to do the first which is just a one-time thing is to go enable the home graph API and then you'll create a service account key which is just a one-time thing again and then at runtime in your service you'll generate a JSON web token or jok which is a verifiable method of representing claims securely between two party servers and then you'll create a report state JSON payload and you'll call the API now let's walk through each of these in a little bit of detail so to enable the home graph API you'll just go to the Google Cloud console select your project and then under the api's and services you'll go to library and select home graph and search for home graph API and click enable pretty straightforward the next again this is just a one-time thing as you'll generate a service account key and here again in the api's and services section you'll drop down to credentials from library where you were and you'll click the click the create credentials button and you'll just go through the steps to create that we recommend JSON type is it's a little bit easier to work with so now that your server has access to your service account key and we have to call the repository notification API to let home graph know of this change in state we really need two things first is a token to communicate with home graph and second is the payload so let's look at the first one so to create the token for Google to verify your service we'll need a few things first this is s this is a service account email which you can get from the JSON that you downloaded the scope and audience will remain same pretty much for because you're calling the home graph API and you need to get the token the secondly IAT the current time is what you will specify here and you have to make sure that the expiry is typically an hour from the current time and this is specified in seconds once you have this information handy there are libraries available in pretty much all the server-side languages that are out there so check out JW T dot IO for more information about the libraries for your specific platform and framework and you should be able to take this information and generate the token and finally you make sure that you sign this token with the private key that's in the service account JSON so now that we have the token let's look at the payload so when the Dervis device changes state and it lets your cloud know of this new state you're going to create this JSON payload and you see here we have the agent user ID for which this device list has changed its state and then we have two devices here the first one is on and it's online and the second one probably a lockers or a door and it's locked so you specify this JSON and finally let's call the reports alien notification API and let's take a look at this in the form of a curl command which is very straightforward the token goes into the authorization header as a bearer token and the body becomes the report state JSON payload that we just created and you make a simple post called to the home graph report state and notification API and that's it at that point all your smart displays visual displays and Google home app should show you the latest state for your devices all right so next we're going to talk about enabling security use cases for smart home with Google Assistant how are we going to do that well we're going to use two-factor authentication or - FA - FA is basically a second factor validation something like a pin or eight acknowledgement and it's used to make sure that the person making the request is actually authorized to do so and so why is this important well we heard your feedback and you wanted to be able to enable smart home on devices like locks or security cameras security systems or even windows we launched a couple new traits this week lock unlock and arm disarm the two FA is really really useful for and the neat thing is that all of your devices any and action for execute and query can use to F a so if you have something you want to protect you want to make sure that there's an acknowledgement you can do that and the other thing to keep in mind here is that for pin type protections you actually own the pin so it's owned in your service you can change it as frequently as you want even on every interaction if you really want to so let's look at a couple different examples of of how this works so the first is no challenge which is basically the same is a normal interaction where you say okay G turn on the lights and assistant says okay turning on three lights the second is entak needed and this is where you might need some sort of acknowledgment you just want to make sure that this is really what the user wants to do in this case the users are asking you to heat up the living room to 100 degrees which your service might get that request and say like that's pretty warm that's really outside our range of what we'd recommend a room to be but we can do that and so you might want an acknowledgment here and just ask the user are you sure and the user says yes and then you can go ahead and do that and finally we have pin needed which is asking Google to unlock the door and here we want a little bit more than just a confirmation so we ask for a security code and the user provides that and then once you have a code that's correct they can go ahead and unlock the door and you can actually see this in practice in our sandbox with a cookie jar that's protected by two-factor authentication to keep the kids out yeah definitely check that out is cooler than the code but the code is very simple as well so let's take a look so typically when we when the user wanted to control a device we send an execute intent to your server right and without two-factor authentication your server returns a success if it's able to control the device but for this case if you wanted to implement the two other two-factor authentication you will return an error back to Google for that execute response and this error as the status and the error code will be challenged needed and one important thing you have to specify is which type of challenge you need it could be pin or it could be AK so that point assistant will announce it to the user and either ask for an AK or a pin and now Google calls another execute intent to your server and in this case the pin will be specified in the execute intent so pre straightforward pretty much exactly how you do an execute and process an execute intent but this time it has the pin your server validated and if it is a valid pin takes the action that user requested all right let's move on to tools so these tools are here to help you in your development of smart home and we developed a lot of these really based on our experience supporting you and your development as well as feedback that we've gotten directly and the first thing we're going to talk about is a brand new tool that is called a smart home test suite and this is something that we very recently launched and it addresses this major problem people have had when wanting to go live with their actions the end of development you're done you want to publish it and make it available which is that previously we required devices to be shipped for certification and now you know we realized that this is hard for a lot of people shipping devices is expensive it's easy to miss those emails back and forth the process was a bit opaque and there were sometimes multiple rounds of testing and especially if you're international and how to deal with customs and so what we're doing here is we're actually giving you control over the process you can test from your desk there's no need to ship devices and it helps to give you clarity and insight into the certification testing so how does this work well the basic flow is that you will start by developing in action you just kind of need the bare bones to make one thing work right so you'll do Oh F sync execute and report State for at least you know making sure that one thing and and works and then after that you'll account link your developer account and make sure that you can use it so just do a smoke test make sure that you can turn on your light or something next you'll set up a Google home right next your computer and crank up your sneakers volume or you can put headphones on it and the reason is because the test tool actually generates TTS it generates commands to say ok G turn on the light and the google will pick it up and then try to take that action it's kind of a cool and end test like that and so then you can load the tool and run it and you can actually run this tool as much as you want while you're in development and it's great for test-driven development because you we don't send the results from the tool back to Google until you're ready and then when you are ready to launch you can use a forum linked in the tool to submit your results so another thing that's really cool about this is that it's only in the browser this is a browser-based tool doesn't send results Google until you submit that form and so with that we we do need a couple pieces of information to make this run will request the agent user ID so that we can identify which specific user to pick out and the service account key and these two things are needed for a home graph API that will allow you to pull devices that you own and you own the service to out-of-home graph and we basically use the same mechanism for this test suite as well as the another tool that Gaurav will talk about in a minute and once you've provided those couple things you the project ID should just get filled in automatically if you provide a valid service account key next we do a home graph sync and we ask home graph to get that users devices and in this case we get a light with the traits on on/off and brightness and then once we have the device we can click Next and the tool will just automatically generate the test cases based on the device types and traits that you've you've synced next you can see it start running and it'll just speak out the commands and it'll go to the Google home and then the whole thing will happen and you'll report stay back and we can pick up those those reported state events and you can see you know the progress where it isn't the test as well as in the log area you can see if the tests are passing or failing which is really helpful and then once you're done and if you have any failures you can open up a spreadsheet that gets generated and exactly where okay these tests were passing and then this one was a failure and see why it failed and so we tell you here's the results that we expected and here's what you gave us and that's where the discrepancy is so they you can very easily go and fix that and rerun the test and then once you're done with that you can just submit your results in the form that's linked and you're good to go so this is great because integration test can be hard and especially now this involves voice your server your devices so you really want to use that and I use that personally for the new traits that I am working with these days it's amazing check it out so ok moving on to report state tool now one of the things that John mentioned about smart-home test suite is that it relies on report state working so it can check the state properly but what if report state is not working so here's a tool that'll help you do that so we again need the same two key information the agent user ID and the service account key based on this information we can query home graph get the state of the devices that home graph sees and if there is a discrepancy between what home graph sees and what your server is saying some debugging may be in order so this is the tool that gives you a view into what home graph is able to see and after you fix the issues with the port state you know it should all work with the GUI controls all right next up is a tool called stack driver and stack driver is some of you might know is actually just a generally available tool provided by the Google cloud platform that is for scalable logging but here we're gonna actually talk about how we use it for smart home and one of the things that we've heard from developers is there's this kind of frustration around a lack of logs and a lack of insight into what's happening on the Google side if there's a failure and what we're doing with stack driver is providing those assistant side logs so that you can see if you know you get an error TTS that comes back from Google once you tried to take some action what actually happened and the other neat thing about this is that stack driver allows for integrations and so you can actually create a service or you can subscribe to these log events and have them sent straight into your own logging service so that you don't need to go to multiple places to look at logs you can also parse the logs that are coming in for analytics and write your own metrics based on that so let's look how to enable this the first thing you're going to do is you're gonna go to the Google Cloud console and you're gonna again pick your your action there is your project and then you're gonna open up the menu and go to the logging section and it's under logs next is this resource picker drop-down that you'll select and when you click that you're going to select the Google a system action once you've selected those things you should see logs coming up and here is actually something that I was working on a couple weeks ago where I had back-end failures and you know this is the sort of thing that if you're using maybe an HTTP proxy like nginx our Apache in front of your service to handle the web requests and then those like will forward on the request to your service if you get a 500 it might actually not be getting forwarded back to your service and so your services logs might not have this failure in it and that's where stackdriver is like really really useful as you can see those failures that maybe your service doesn't log because it doesn't get those requests another example of that might be if you have all failures where the credentials are expired or maybe not existent on the assistance side those will get logged here too and it'll it will give you an indication that there's an off failure and like I said you can integrate this using Google cloud pub/sub to have those stacked driver events sent straight into your own logging service if you already have one and you can again peg metrics based on the various types of failures that you get to understand areas where you need you might need improvement and we have this great tool it's a sample on github that really just walks you through how to do this it walks you through how to create an integration with stackdriver and then also to parse out those logs for for metrics and it's it's a smart home focused example so John just showed us as error with sync response on stackdriver so now how do you debug in case you actually send a 200 back so you think your sync response is right but a system did not like it and it showed the user account linking error sync validator comes in handy at that point so on our documentation for smart home we have embedded us validator it says simple input box where you paste your sync response and let the script tell you if it sees any errors with your sync response so like you see here fight is not a valid device type it probably needed to be light and darkness is not a valid trait it should be brightness it also tells you type errors so for example the name in this case should have been a string and once you fix these sync errors you know your account linking and sync both happen to work and you know it's a better user experience and you can fix these things easily we've talked about a lot of api's and tools that you can leverage but what if you're just starting with the smart home and API and you know you want to create your first action you're going to check out the code lab and you can actually do it in the code lab area right after this talk or you can go home and check it out on the web so the goal of this code lab is to create a virtual device and then be able to control this virtual device using assistant so you're going to implement the sync execute and query endpoints and also request sync and report State so it's a complete package it's a great way to get started with the smart home API alright and now we're on to the last section which is understanding the process that we use once you're ready to submit your action and publish it so let's talk about the submission process a little bit and clear up you know kind of what happens so that you understand what's going on when you click that submit button we're also making some improvements to make this easier and smoother for you and and throughout the throughout the process and so here's how to submit and and what happens the first thing you're going to do is submit passing results in the smart home test suite using the form that's linked in the tool so just you know really simple make sure you're passing the test suite second is that you're going to go and fill out company and branding information in the actions on Google console just make sure that you've filled out everything that we asked for and it will make things go quite a bit faster the next move over to the Google side and so this might actually be a bit of a back-and-forth we might reach out to you with things that need to be updated and stuff like that and those would come out of two things so there's a functional certification that happens where we review the results that you submitted for the smart home test we as well as a policy review that happens to make sure that you're in compliance with all of our policies and then once you pass those two things you're ready to go live we have some tips that we've kind of collected over the couple of years about how to make this as smooth as possible and to you know kind of avoid back-and-forth and the first thing that's really really important is to use the appropriate types and traits this is something that we see it's kind of a common issue and you know we see things like using on/off as opposed to start stop and there are cases where you might have a robot vacuum and start vacuuming is a much more natural grammar to say then turn on the vacuum you know another one to keep in mind is like temperature control versus temperature setting one of them is for thermostats and the other one might be for your oven and then finally also making sure that you're using two-factor authentication where appropriate so you know if the lock a security system you really want to make sure that you're using to FA the next thing is again just making sure you're passing the test suite not a lot to say there but definitely run the test suite as frequently as you like the next thing is to make sure that your descriptions match the locales so let's say that you're you know you're ready to launch your smart home action and your shipping devices in Japan and you want to launch your action there that's great make sure that instead of submitting a description that's in English you submit one that's also in Japanese if you're selecting Japan as locale the next is making sure that you're just in compliance with all of our policies for aog and then you'll want to make sure that you supply a valid privacy policy for each supported language so again you've submitted a Japanese description you're going to submit a privacy politics written in Japanese the next thing is to make sure that you've implemented all of our api's including reports state requests sync and query these are really critical and in fact the test suite won't work well if you don't implement these things it won't work at all if you don't implement report State you'll want to make sure that account linking is working and this might seem obvious but once you launch your users are going to try to do account linking and start interacting with you and if account linking doesn't work they won't be able to do that you'll have zero users you'll want to make sure that the cloud-to-cloud latency is consistently under 900 milliseconds which is just kind of where we really find it to be very noticeable if there's cloud latency when you say turn on the lights and then it takes more than a second for that to happen it's pretty noticeable the next is to make sure that the authorization grant in your o auth flow grants permission to Google and not something else we don't want to see permissions granted to Google assistant or Google home or nest or anything else just Google and finally make sure that the icon that you provide is 144 by 144 circular with a white background cool and if you are a maker or someone who's just doing this for fun definitely add the assistant and the voice control to your devices in your fun project and you don't have to worry about the approvals so use it and then finally all the things that we've talked about today and the documentation for this - lives under our Docs at developers.google.com slash action slash smart home and it lives inside actions Google and click under the smart home section and this will guide you through the api's and the tools and everything that we just talked about today so finally thank you very much for coming here last two years has been a thrilling ride for us on smart home and we've worked with many of you in the room and outside this room and we really thank you for all the feedback on the API is on the tools and our processes that you've provided that has helped us improve our tools and all the api's and processes and we can't wait to see what you guys do with these tools and the actions you build thank you thank you for joining us [Music] 