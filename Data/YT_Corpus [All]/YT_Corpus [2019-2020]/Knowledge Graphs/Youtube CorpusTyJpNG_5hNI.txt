 today we are looking at Roth an important data structure in the computer scientist arsenal graphs are important because it can be used to represent essentially any relationship between entities like a write network representing cities connected to other cities by a direct line during the video we'll be covering some definition and describe different type of graph finally we will be looking at out represent them from a computer science point of view first let's define what a graph is a graph G consists of a set of vertices V together with a set of edges E and F connect two vertices together Anette represent some from operation shape between two vertices an empty graph is a graph where the set of vertices V is empty on therefore the set of edges is also empty notice that a vertex may not belong to any edges as shown by vertex K for example K could represent a city on an island that is not connected to any other cities on the mainland via rail world graphs have many properties and we will express them when unaware they are needed in this video we need to define three properties related to the number of edges in a graph a graph is said to be danced when the number of its edges is close to the maximum number of edges that is of the order of the number of its vertices to the square on the opposite spectrum a sparse graph as few edges relative to its number of vertices usually of the order of the number of its vertices a complete graph is a block in which each pair of the vertices is joined by an edge a complete graph contains all possible edges on therefore is a dance graph on the left hand side you can see an example of a complete graph to pause of six vertices there are many type of graphs and it's very important to be able to recognize them in particular when you want to use an algorithm to solve a problem you may need a different algorithm to serve the same program depending on the type of graph the first type of graph is an undirected graph an undirected graph is a graph in which the edges have no rotational direction that is the edge UV is identical to the HVP you it means that if you're not you is in a relation if not V V is also in relation with not you it is a simplest type of graph when example of such graph is a social network nodes are people on edges represent the direction or relationship between people like being a friends study of social networks from application in many disciplines such as sociology economics biology and counterterrorism in contrast a directed a directed graph also known as a digraph is a graph in which edges are orientation in this case edges are represented by an arrow when considering edge from u to V I will use the terms tools origin or tail to refer to the node view on target destination or head refer to the node V knot at the photograph as an edge UV so that V you may or may not exist an example of such graph is a graph representing followers in a social network such as Twitter I may follow a person such as a famous actor however it is unlikely is that this celebrity follows me back this means that the research relationship following is directed study of such graphs can be used to determine influencers within a group of people I know another example is the structure of a website containing many pages each page is considered a vertex on the net exist between two vertices if the source page has a link to the other target page so far we have seen unweighted graph that is the edge AB no Association associated weight a weighted graph is a graph in which edges contain a certain weight so weight represent arbitrary values such as distance cost quantity flow and so on for example the graph shown could represent cities connected by railroad on the weight as a distance between the cities a weighted graph can be directed or undirected edges in a weighted graph can be denoted as a triplet UVW where u is a source V is a target under values associated weight example of sub graph are flow networks where edges are pipes under die intersection between pipes flow networks are also used for transportation problem such as maximum traffic through roads or analysis of bottleneck in production factory with various workshop on tools usually wait a strictly positive however in some cases they might be negative a negative weight could represent the energy used to go from state a to b where as a positive weight represents the energy produced to go from state B to a in some de Graaff the weight of for the edge UV may differ from the weight of edge V u this is the case for the edge between not B and C this could represent a road having full lines going from B to C on only three from C to B this would allow mobile going from B to C in a given unit of time and a higher weight now that we understand what a graph is we need to address the issue of representing a graph on a computer that is what the structure should be used to implement a graph careful consideration should be taken as a choice of data structure can have a huge impact on the performance of some algorithm as well as a reliability of your code the simplest representation is an edge list or an array of edges for a weighted graph it is a list of triplet UVW containing the source to the destination V on the right W of an edge in our example so edge from HD is represented by the triplet a G unone the main issue of this representation is a lack of structure for example to find the list of all nodes in a graph we must traverse the entire list furthermore what about nodes that are not connected 20 years or nodes a solution to this problem is to you have two lists one for the edges on one for the nodes so edge list of an undirected weighted graph compare contain pairs U V where u and V other nodes connected by an edge in this case the edge is AG and da are both represented by the pair AG C graph implementation is rarely used with slag of structure another simple way to represent a graph is an address and C metrics the cell mu V also noted M square bracket u square bracket V represent the edge weight of going from not you to dot V so rows are the source node on the columns as a target node for example to wait eight of the edge BC is stored in the cell at the intersection of the second row on third column you may have noticed that so far I do not put a value in the cells when the corresponding edge does not exist there are several conventions represents the absence of an edge in an identity matrix when know it exists between not view and v NV is equal to plus or minus infinity or equal to zero so choice between the three values depend on the type of problem we try to solve it is usual to solve to use a negative infinity for a maximization problem on the positive infinity for minimization problem when considering unweighted graph such as some C matrix contain only zeros on one mu V is equal to 1 if there is an edge going from not do to not be an MeV is equal to 0 otherwise in the case of an undirected graph so matrix M is symmetric such as mu V is equal to M V you a better alternative to the edge list is adjacency list an address on the list represented graph as a map from nodes to the list of edges in this representation will not only keep track of its outgoing edges an outgoing edge of not U is an edge where u is a source in the case of not see we only have two tracks outgoing edges see towards B with the value 6 uncie to up D with a weight of 3 not that do not B does not have any outgoing edges and therefore so not B is mapped to an empty list as I said earlier it is important to understand the different data structure used to represent the graph and especially knowing which data structure will be more suitable for your problem to this hand will be comparing each data secured against three dimension the first one this basically need to store the graph the second one or efficient easy to find the weight of an edge or to see if that edge exists on finally iterating over all edges of a graph the task that many algorithm need to perform when considering the space used to saw a graph so at least on the attention see list perform better on sparse graph for example a graph of of a thousand node requires a matrix of a million cells on the other hand if on average each node has a degree of 10 that is the not as around 10 incoming and outgoing edges we need to store only 5,000 pairs of value less than 1% of the matrix is used to store useful information the remaining 99% is just a waste of space whether if the graph is danced since the number of edges is of the order of a million I'm stirring a million pairs of value in a list become far less efficient than a matrix to find the weight of an edge address and see metrics are extremely performant we say it is in constant time which means in lemon term that it is almost instantaneous to retrieve the value of what about the size of the graph on the other hand using address and Z list or edge list means that we need to traverse the list until we find the edge of interest before being able to return the weight of the edge we say it is linear with respect to the number of edges e another word in the worst possible cases so edge is the last one of the list and we have to look to at all the edges before finding the one of interest so more edges on the graph the left of amount is a loop cap operation finally iterating of the whole edges is more efficient using at least or adjacency list it particularly true for sparse graph again considering a graph of a certain node containing around 5,000 edges it will require to visit all 1 million cells of the identity matrix so difference in performance is less of an issue for duns graph now that we have a good idea of what graphs are on each represent them we'll be able to explore some of the many problems that can be solved using graphs 