 well in this video i want to think about some more uh vocabulary around drafts and i also want to think about um the different kinds of graphs we have um you know whether they're directed or not whether a graph is a tree whether a tree is a binary tree and so i have this picture on the left that we're going to use to have a bunch of examples and and so the first word that i want to remember is connected and so looking at this graph over here on the left is this a connected graph and the answer is no it is not a corrected it is not a connected graph and um and the reason why is there is not well connected means that there is a path between any two nodes and that's clearly not true we have kind of the main graph and there's an island over here on on the right what was a path a path was a sequence of of edges not reused so for example um if i'm looking at this here i could have a path from d to h and that path might be d b a c h as a path but at least the way i'm defining path in this course um i couldn't say d b d b d b a c h because i'd be kind of reusing that so so connected in path those are two um key terms that we'll have um the next idea that i want to talk about is a is a dag and a dag the easy way to remember it is well it's a directed a cyclic graph right so if you're trying to look at a graph and figure out if it's a dag um you should go one letter at a time and of course the easiest letter here is graph right if i'm looking at this picture over here uh it's obviously a graph right so i have the g down what about directed is it a directed graph no i have to inspect these edges and the edges aren't arrows right so there's kind of it's a very symmetric relationship and so if i wanted to draw this as a directed graph um i i could do this and now i actually have a directed graph um so the next question is well uh is it a cyclic and uh so let me put that down well first off what is directed right so edges are arrows they have a direction what about a cyclic is this an acyclic graph and the thing that probably catches your eye is this little pattern here um you know kind of all these edges form some sort of uh some sort of um it looks like a cycle but it's actually not and the reason why is that we care about the direction of these edges right so acyclic means that uh that you can't uh you know no path ending you know starting and ending on the same node right and so this is acyclic right i mean i can't i can't go a b g i can't go back to c right so so it's a cyclic right i can't cycle back to a so um this is uh this is actually an acyclic graph right because there's no cycles here right i can't cycle back back to where i started another notion is weakly connected um is this a weakly connected draft so weakly connected means that there would be a path uh there is a path between any two nodes ignoring direction and that's not the case here right i mean i still have my little um island uh even if i ignore the direction of the edges you know i can't get from x to a um some more vocabulary that we're i'll talk about we have are going to talk about roots and uh and leaves uh a leaf i guess and uh these are gonna be relevant especially when we start talking about trees right so tree is maybe the next thing we talk about after after we define these two things uh but this notion of a root and a leaf is also applicable in directed graphs like this and so root is basically any node with no parents and and so maybe maybe i should add these words as well what is a parent what is a parent what is a child and uh and a parent is um the node from which an edge leaves and a child is a node from which an edge arrives right so that's parent and child and so a root is a node with no parents and so that means that uh that that really i don't have any incoming um edges right so it's basically the child of no one right so i don't have any uh edges arriving in here so looking over at this picture on the left um how many roots do i have in this graph um i see two i see two roots i see a and i see x those two don't have any parents what about a leaf so a leaf is any node with no children and i see a bunch of those over here right all of these on the bottom don't have any children why doesn't have any children um and so so i can almost imagine like the root kind of almost being like the top of the graph no parents maybe leaves at the bottom with no children i mean i could have drawn that differently but these are definitions already hold even if i kind of flipped the whole graph upside down oh and then of course we have um we have cases where we have um some nodes that are neither parents or children and then finally you can imagine i could add a note here that's just all by itself and then in that case it would be both a root and a leaf okay so so what is a tree a tree is a dag with two extra properties and what are those properties so we have one and two and one is that it has exactly one root okay and and so right away i mean i can see this is not a tree right i mean we already talked about how this one has two roots a and x um the other property is that uh every node except the root has exactly one parent okay those are the two properties so i wonder i wonder if i could fix this up um you know one way i could do it is i could say something like g dot edge from a to x um if i did that i would have exactly one root or or i guess i could just kind of get rid of these two um and that would kind of satisfy this first thing and have exactly one root so i guess i want to take a moment and look at this and kind of decide for yourself uh is this a tree according to my definition and uh and the answer is no and the reason why is that i have to say that every note except the root has exactly one parent and look uh g has two parents um you know one parent is b another c so this is not a tree and so i could fix this up right i guess i could um where is g you know i could just uh kind of delete she all together um or i could kind of get rid of one of the parents i guess i'll get rid of this uh the parent b right because uh that one already has a few children so so i get down to this picture and then finally yes this is a tree so this is an example of a tree right here okay so you can kind of see we're narrowing down i mean we talked about graphs kind of first and then we're like well some drafts are directed and then some directed graphs are directed acyclic graphs and then some directed acyclic graphs are trees and um and i'm going to introduce one more here that we're going to talk about today and that's the binary tree uh and that's a tree which means that everything i've said about trees in general applies everything i've said about dags applies but there's one more rule and that rule is that each on each node has at most two children so that's what a binary tree is so binary means two and that's why where the names comes from having these two children and most so if i look at this picture over here uh is this is this a binary tree and well it's not see if you can figure out why it's not what node is kind of getting us in trouble um the trouble is with b right b has three children it's allowed to have at most two children and so there's different ways i could fix that up right i guess i could um you know i could get rid of the f node for example so this would be an example of a binary tree let me go back another thing i can do is if i'm willing to move nodes around a little bit i can actually turn any tree into a binary tree so i can keep f but i just have to put it some other place and so really what i could do is i could look at any leaf i have for example you know d or e or g or h i mean those all don't have any children and so i could move it down there right so instead of saying from b to f uh maybe i'll just say like from e e to f um and that would be fine that would be an example of a binary tree right um now this kind of feels tree-like i mean sometimes we can have these very perverse cases right let me leave this one up because it's kind of a nice looking tree let me give you an example of what else is a binary tree kind of a degenerate binary tree if i wanted to i could have d come out of f right i could do that and and kind of these other nodes i guess i could have uh c where is c coming from c is coming from a i can have c coming off of d right and so i can have that and i guess really i could if i wanted to um i could where is g coming from g is coming from c i could really have g coming off of h right so i have this whole thing now and um and this really starts to look like a linked list and guess what this is still a binary tree because i never say that most nodes have to have two children i just say that that's the maximum they can have so this is technically a binary tree maybe kind of a degenerate one right it's not really using its full flexibility okay so i want you to think a little bit about where we might see um trees whether they're binary or not in in real life and maybe just try to think of one example in your mind before continuing um one example that people often uh bring up is the family tree uh is that a tree well it kind of depends i mean maybe if uh if we were kind of living in a uh patriarchal society where we only cared about kind of the paternal lineage well then yeah maybe you'd start with some great great grandfather and then trying to branch off all the children but but really i think that's not the tree that most of us would really care to look at if we're trying to understand a family history really what we should have instead of having a book with a family tree is we should have a family dag right uh kind of every every no and every person has uh has two biological parents right and uh and it's directed right i mean there's kind of these generations drawing down uh but it can kind of cross back and forth right i mean a person could have many uh many um children and then everybody has at least well has exactly two biological parents so so really forget about family trees uh we have family dags what would be an actual example of a tree that we might kind of see in the real world um well anything where we have kind of a strong hierarchy um you know in a lot of corporations right there's a ceo at top and then maybe some vice presidents and then maybe some directors and then managers and then down finally to like you know regular employees i have a very strict hierarchy there um in the world of biology if you're ever thinking about evolution uh you might kind of look at a tree of species right so that might show up there um so lots of different cases you might actually see trees right any kind of case there where there's a hierarchy and so what we're going to be doing soon is when i look at cases where we can take data that doesn't really necessarily have a hierarchy to it but we're going to impose our own hierarchy on it and that's going to let us kind of store a lot of different kinds of data in trees and the advantage is that if we put some hierarchy on the data we can do certain operations faster right like if i'm looking for a certain piece of data i can find it quickly and so that's what's going to be coming up we're going to be talking about binary search trees how can i impose a tree hierarchy and a bunch of data so i can quickly search for something i'm interested in so i'll break it off there 