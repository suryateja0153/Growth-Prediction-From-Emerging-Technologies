 today i will present to you one of the most interesting topics in my field of study which is a graph theory um i know the topics might sound a little bit intimidating but what you need to understand this presentation is quite simple so um if you can do the basic math like simple additions or um simple modifications you are pretty good to go and also what you'll need is the observation skills and that's probably all you need to have for understanding this presentation um before i jump in um can i ask like if any of you guys have been familiar with this topic before a little bit a little bit okay um yeah i hope you get something out of today's presentation i hope it'd be useful okay uh okay about today's agenda uh first i'll go over some definitions uh to see what the graph is and next we are going to explore one of the uh most interesting questions in graph theory which is the shortest path problems and then we are going to see some examples and we are going to recap it at the end all right and also feel free to interrupt me any questions you may have just don't be shy okay all right let's dive in uh the question is uh what is a graph uh if you have been dealing with data before you might have been familiar with the concept of graph uh on the left one you have the graph on the x-axis and y-axis and the right one you have a bar graph to represent some data and but uh this is not the graph we are going to talk about today what we are going to talk about is quite a little bit different and the definition of it is that graph is a collision of nodes and edges and by nodes here i will use the red circle to represent a node and the edges will be it is just a straight line so basically nodes can represent any objects it can be people it can be animals it can be just just anything and the areas will indicate some relationships between two notes and that might not sound clear but uh let's take a look at some examples here okay uh here i have a note that represents howard and i have a node that represents mit and they both can be connected by the ish that says they are in the same city of cambridge is it clear on this one yes all right and uh i can have the notes of matt and ecs and both are the department at mit i have akin this is me who is the students at mit and i study math and ecs i can have a list who love math and bob who hates math and alison bob are rival is it good okay uh okay uh i would like to make some notes here that this graph is actually quite messy it has like so many kind of notes you have schools you have departments and you also have people and at the same time you also have so many kind of edges you have the same city of department students and many more so um in theory um this is not wrong uh in one graph you can have so many kind of notes and so many kind of edges but in practice we usually refer to a graph as only having one kind of notes and one kind of edges and what it means by that if you take a look at the right graph you can see this graph has nodes that are the states in new england and the edges will is an indication if two states are neighbor already still on the same page yeah and this is uh i also have some examples so you can probably have a better understanding uh the example i'm going to use is a new representation and probably you guys have seen facebook before and what we are going to do is uh facebook actually have a very nice way to present the network as a graph and to do so he can have the node to represent a user and h2 represents a friendship between any two users for example this diagram here you can see list here has list has age that connects to emma shane and allen that means uh list has three friends which is emma shane is it is it okay is it yeah okay i just want to ask like to make sure just everybody is on the same page like um just a quick questions like uh how many friends does john have four four yeah well they are yeah there are four friends of john uh bob uh jill shane and leah okay still good okay okay i have another question for you uh on the right i have a graph who's whose notes are some states in the u.s you can have many new hemisphere massachusetts and many more and the edges will represent that there is a road that connects two nodes together for example this age is a road that connects main and new hampshire this age is a road that connects vermont and new york so basically you can view this graph as a map and there are states then there are road technique states together yeah so um here's my question you want to drive from maine to maryland which is the this circle to this circle and to go to use a road you need to pay one dollar for each road you take yeah the question is that what is the cheapest route you can take green figures you can go along to the left edges left edges yeah uh new hampshire vermont new york uh pennsylvania and maryland yeah yeah that's perfect um there are actually two uh ships route here which are indicated by the green lines and whatever route you takes you need to pay five dollars and uh this is what we call the shortest path problem i will uh explain it in in a minute but um if you guys have any questions if you don't understand the graph you can ask me okay uh let's move on so um the shortest path problem uh it is probably one of the most important questions in graph theory uh computer scientist has been dealing with it for decades and it also have so many applications in real life and the way we formulate the problem is that we are given the graph and we want to find the shortest path in term of the number of edges to go from one node to another like we just did to go from main to maryland and it's actually easy to solve by guys if the graph is so small they need kita did it pronounce correctly yep yeah he just solved it in like 10 seconds and it's pretty easy if the graph is small but uh the question is like if the graph is large how do we do it like on this one if you want to go from the left note to the right note it's probably impossible to solve it by eyes because you know there are like 100 nodes and thousand edges so uh to solve these problems computer scientists have come up with a very nice and very simple procedure to find a shortest path and we call it the breadth first search or bfs for short and we are going to do it now and i'm going to list the instructions on the left and we are going to solve it together on the right so to do it we are going to start with uh leveling the start node which is main here with zero and then we are going to see that from main you can expand to new hampshire so we are going to put one at new hampshire and then from new hampshire you can only go to vermont and message sets so we will put two here and if you do the same thing from boom one and messages it you can only go to new york committee card in rhode island and we'll put three there and we are going to do it again and again until we find maryland which is five is it clear on the procedure yeah yeah that's good okay so um we found maryland it's level five meaning that uh to go from maine to maryland you need to take five edges uh however these procedures only tell you how like the number the least number of edges you need to take but it doesn't exactly tell you like what path you should be taking so the question is um how do you find such a pack that that cost you five dollars and the answer is uh what we call backtracking and it is quite simple to so what it means by by tracking is that uh you have maryland f5 and you have minute zero you want to find a path that goes like five four three two one and zero and to do that on the left one you can go five four three two one and zero and on the right one you can go uh five four three two one and zero and these are actually two pads that we just solved earlier my eyes is it clear for everybody yes okay sounds good so um how do you guys feel about this example is it like uh too hard too easy or just okay sorry it's all right all right everybody okay um if this is uh not too hard for you i have two questions that might be a bit more challenging for this one you still have a map you have to have the same graph with the nodes of the states but now each road will cost you differently like for example from maine to new hampshire it will cost you one dollar and from new hampshire to messenger sets it will cost you two dollars so basically like the numbers above the edge will tell you the amount of money you need to pay for using the row you still want to go from maine to maryland but you still pick the same route i'll tell you here that um the old one will cost you 11 like one two three three and two yeah can we do better um i think in the lower part of the graph we can uh take the right route this time so it would cost four dollars yeah yeah that's a good cash um you could go this way you only need to pay for all right how about the upper part and you just find the charter way the cheaper way well we can go from new hampshire to massachusetts to connecticut to new york yeah yeah that's correct and this is actually the cheapest path we can find so this uh type of question we call it the weighted shortest path problem it's basically the shortest path problem with some variations so here every age will have the corresponding weight in this case the weight is just the amount of toll we need to pay for using the road it's already still good okay so um as you can see the traditional breakfast search will not work on this graph because it will just tell us to go on this way be of the old way but the actual shift route is just to go on the green line so the question is how can be solved by using the bfs the answer is we need to do some modifications to use the vfs to solve it we can uh add an intermediate node here so we're basically going to split up the roads so from one road that costs you two dollars it's going to be split up into two rewards that cost you one dollar for each row is the diagram clear for you yeah yeah and also the same thing uh with the road that cost you three dollars can be split into three rows that cost you one dollar each and you can transform the graph from the um graph with the weight to the graph with intermediate nodes as you can see message is set to rho ellen two dollars will be split into two roads and you can do the same for every single age and from here you can use the bfs like we just did before i'm gonna just show you how it goes because it will take too long you have zero one two three four five six seven eight nine and we can do the backtracking to find the actual shortest path is it clear for everybody yep yeah sounds good okay okay i would like to end with some a couple of examples that you may have come across so these are the actual examples in real life of the bfs so the first one is the cheapest flight transit if you have used some traveling engines before like you will want to go from one place to another but uh if you do the search it will tell you what is the cheapest route what is the transit so in this photo you are given the origin and destination and price of several flights and for example here you want to go to boston to los angeles you can use the breakfast to see that this is actually the cheapest route you can find and another example that i have here is the minimizing the signal delay so if you want to call a friend like at least one call about when a hobby so the signal actually going to bounce off a lot of cell phone towers until you reaching the and from the signal to go from one tower to another tower it has some delays so we can we can model this as a graph with the node to be the cellphone towers and the edge to represent the delays from toward the tower and we can use the refreshers to see like what should be the fast the route that signal actually minimize the delay yeah is the example clear to everybody yep yeah and that's pretty much all i have for today um just want to recap everything up uh today we learned what the graph is and we see how to solve the shortest path problems by the breadth first search both on the uh one without the weight and the weighted one and we also saw some applications in real life like root planning and minimizing delays and yeah that's all i have for today if you guys have any questions i will be happy to answer it i think everything is clear yeah it's clear for me too no questions from me it's good that's uh yeah that's all i have for today thank you thank you guys 