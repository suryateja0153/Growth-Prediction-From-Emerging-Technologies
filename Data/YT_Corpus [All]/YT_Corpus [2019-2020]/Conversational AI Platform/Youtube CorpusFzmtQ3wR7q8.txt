 welcome to deconstructing chatbots I am Priyanka Vergara and in this episode we will learn how to create an app engine front-end for our dialogue flow agents [Music] so far in this series we've been focusing on learning the basics of conversational AI and building an agent once the agent is built you may want to integrate it with the front-end of your choice to give it a look and feel of your own website well today we will learn to create a custom front-end for a dialogue flow chat application on App Engine using the Django framework you can use any front-end framework or language you like django is just an example we are working with here but before we begin here's what we are building there'll be a text input and a submit button to send chat messages all the messages back and forth will be visible on the chat window alright so let's see how this will work the chat app will be served on App Engine we will build our app in Python using Django which is a python-based free and open source web framework App Engine will interact with cloud sequel for any database requests and it will interact with our dialogue flow agent we are the dialogue flow API in this example we'll be using the appointment scheduler agent that we created in the third episode and we enhanced it in the eighth episode to integrate with Google Calendar now with that background let's dive in and see how to make this work check out the link in the description below to download the source code for django app we will be deploying on App Engine let's start by creating the cloud sequel instance in GCP console once created take note of the connection name also create the database with username and password if you don't already have the cloud sequel proxy then download and install it you'll find the link in the description below start the cloud sequel proxy with the connection name we copied while creating the cloud sequel instance this establishes a connection from your local computer to your cloud sequel instance for local testing purposes keep the cloud sequel proxy running the entire time you test your app locally while we are in GCP console let's download the service account key as well from the hamburger menu navigate to the API and services click on create credentials button drop down then select the service account key name the key and make sure JSON is selected then click create the JSON file will then download on your computer open settings start py in my site folder in two places replace your username and your password with the database username and password you just created this helps set up the connection to the database for both App Engine deployments and local testing also replace cloud sequel your connection name corresponding to the host replace your database with the name of the cloud sequel database you created when done close and save settings start py now let's set up the dialog flow detect intent endpoint to be called from the application for that navigate to view start py file in the chat folder and change the Google project ID to your GCP project ID appointment scheduler dot JSON file is used to authenticate and authorize the app to make calls to the dialog flow API you replace that file with your own JSON credentials that we generated earlier to run the django app on your local computer we will need to setup a Python development environment CD into the project directory run the command virtual Ian we env - P Python 3 to create the virtual environment now execute source env /bin slash activate to activate the virtual and we just created you will see env in the terminal which indicates that you are in the virtual environment now execute pip install - our requirements txt this will install the requirements for Jengo dialogue flow and pi my sequel then run the three migration commands to setup the models Python 3 managed or py make migrations make migration poles and migrate at this point we are ready to start the local web server for that execute Python 3 managed our py run server once the server is running navigate to localhost colon 8080 now we are ready to deploy our app to app engine for that we need to gather all our static files in one folder using the command Python 3 manage dot py collect static then run g-cloud app deploy to deploy the application on App Engine this may take a few minutes but once done you will see the link to the deployed application in your terminal navigate to the app and verify that everything is working fine today we learn how to create and deploy a dialog flow front-end on App Engine using the Django framework I'm excited to hear which front ends you are integrating dialog flow with tell us all about your use case in the comments below I hope to see you in the next episode of deconstructing chat pods if you liked this video and would like to see more such content don't forget to Like and subscribe to our Channel [Music] 