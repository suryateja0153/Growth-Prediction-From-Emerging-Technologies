 welcome to deconstructing chatbots I'm Priyanka Vergara and in this episode we will learn how to integrate a dialogue flow agent with a back-end system like a database calendar or a CRM and each hat part you build will need to connect to a back-end to transfer information to and from the business logic within dialogue flow we are able to make that connection using fulfillment fulfillment is a piece of code which is deployed as a web hook and lets your dialogue flow agent called the business logic on a pour intent basis during a conversation this allows you to use the information extracted from dialogue flows natural language processing to generate a dynamic response or to trigger action on your back-end let's take our appointment scheduler chat bot from previous episodes and implement a fulfillment for scheduling appointments well currently our agent identifies the users intent of scheduling an appointment and provides a static response indicating that the appointment is set up now in a real-world scenario we need to set up that appointment on a calendar and also check for any scheduling conflicts which requires us to integrate with a calendar so let's jump into our dialogue flow console and see how it is all set up click on the gear icon near your agent name to open settings locate the google cloud project ID and click on it to open the project in GCP console navigate to the hamburger menu icon and locate api's and services click on enable api's and services and look for Google Calendar API once you find it enabled API on your cloud project now under the same API and services within credentials click on create credentials drop-down to select service account key under create service account key select the new service account from the drop down and enter an account name make sure JSON is the key type and then click eight in the pop-up select create without role a JSON file will be downloaded to your computer and you will need this later so take note of its location before we close it out though copy the client email now open Google Calendar and on the left click the plus sign and select new calendar enter appointment calendar for the name of the calendar and select create calendar next go to the appointment calendar that will appear on the left click add people and paste the email copied from that JSON file then select make changes to events in the permission drop-down and click send at this point we are ready to go back to our dialog flow agent and set the fulfillment click on fulfillment and enable the in line editor check out the link in the description below to get the required code for package dot JSON and index tortillas open package dot JSON file and copy and paste the dependencies into fulfillment do the same for indexed rjs as well grab the calendar ID from the Google Calendar we just created and replace that in index torch's next copy the contents of the JSON file downloaded in the service account setup section and paste it into the empty object service account check out rest of the code make appointment function contains the responses to the user and create calendar event function takes care of grabbing the entities like date time and appointment type and creates the calendar invite it also looks for the calendar conflicts and throws exceptions once you're done click deploy at the bottom of the page now we have one more thing to do before we can start testing click on intents and go to the scheduled appointment intent scroll down to fulfillment and enable web hook and save now we're ready to test in the simulator on the right query your dialogue flow agent with something like set an appointment at 4:00 p.m. tomorrow and then respond to the follow-up queries after getting the required information you will see that the appointment is added to the appointment calendar you can verify that if you ask for another appointment at the same time slot your agent will respond back with an appropriate message since that slot is not free alright so that was a lot let's summarize what we learned today we enhanced our appointment scheduler chat bot by creating a fulfillment through inline editor enabled Google Calendar API for the GCP project and used those API credentials to connect our fulfillment cloud function with Google Calendar and finally we were able to test our agent by creating appointment requests on the calendar don't miss the next episode of deconstructing chat BOTS to learn more of our conversational AI please like and subscribe to our channel for more such content [Music] 