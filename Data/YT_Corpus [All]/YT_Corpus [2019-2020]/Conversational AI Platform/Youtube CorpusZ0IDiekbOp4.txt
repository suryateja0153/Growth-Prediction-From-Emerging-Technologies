 What can you do when your bot does not understand the user or the situation is too complex? Join Robert Standefer for Principal Product Manager and Artur Laksberg, Principal Software Engineer for this special build edition of the AI Show to learn how to integrate a human into loop. They will show you how to build bots that combine conversational AI, and human agents for delightful customer experiences. Make sure you tune in. [MUSIC]  Hello, and welcome to conversational AI and human agents working together. We are Artur Laksberg and Robert Standefer from the Bot Framework team. We have a great session for you today, so let's get right to it. We're going to kick off the session with talking about augmenting your bot with human agents. Then we have some cool stuff from Omnichannel and LivePerson to show you. Many customer care systems combine conversational AI with live agents. Users may want to talk to a live agent, either because their bot doesn't understand the user, perhaps because of an AI limitation, or if the request can't be automated and requires a human action. Microsoft Bot Framework is an open platform that allows developers to integrate with the variety of agent engagement platforms. When a bot detects the need to hand the conversation over to an agent, it signals it's intent by sending a handoff initiation event as shown in this C# code snippet. The event contains two components: the context of the handoff request that's necessary to route the conversation to the right agent and the transcript of the conversation. The agent can read the conversation that took place between the customer and the bot before the handoff was initiated. Microsoft Bot Framework supports two models for integration with agent engagement platforms. In the first model, known as a bot as an agent, the bot joins the ranks of the live agents connected to the agent hub and responds to user requests as if the request came from any other Bot Framework channel. The conversation between the user and the bot can be escalated to human agent, at which point the bot disengages from the active conversation. The main advantage of this mode is in its simplicity. An existing bot can be onboarded to the agent hub with minimal effort, with all of the complexity of message routing taken care of by the agent hub. The second model is known as bot as a proxy. The user talks directly to the bot until the bot decides that it needs help from a human agent. The message router component in the bot redirects the conversation to the agent hub, which dispatches it to the appropriate agent. The bot stays in the loop and can collect the transcript of the conversation, filter messages, or provide additional content to both the agent and the user. Flexibility and control are the main advantages of this model. The bot can support a variety of channels and have control over how the conversations are escalated and routed between the user, the bot, and the agent hub. Now, developer Hannah Olliges will show us how Bot Framework integrates with Omnichannel for Customer Service.  Hello. My name is Hannah Olliges, and I work as a developer on the Omnichannel for Customer Service team. In this video, I will showcase how to utilize the capabilities of a Bot Framework bot in the Omnichannel product. Omnichannel for Customer Service is an add-on to the Dynamics 365 Customer Service Enterprise or Customer Engagement plan. The digital messaging offer lets customers connect anytime, anywhere, and on the channel of their choice. These channels include LiveChat, WhatsApp, WeChat, Facebook Messenger, Twitter, Line, SMS, and other channels. Agents can handle customers from these many different channels in one seamless experience. In addition, Azure Bots are easy to add and optimize. These bots can handle routine, repeatable customer requests and free up agents to handle more complicated requests. They also support handoff to human agents in Omnichannel. Not only that, but the bot can act as an agent assistant during a conversation and can offer additional insight or information based on the customer messages. Bots can be authored through code or with Power Virtual Agents. Power Virtual Agents are Microsoft's code-free bot development platform. The Power Virtual Agent allows you to implement the transfer of the conversation to a live agent by inserting the transfer to agent node at the appropriate location in your conversation topic. However, Power Virtual Agents are out of the scope of this video. In this video, we will dive into configuration of a bot and the necessary Azure Resources, integration of the bot in Omnichannel, bot capabilities, and escalation to a human agent along with a few post escalation scenarios. We will not be going over how to author a bot in this video. Just a few notes before we get started. In order to integrate a bot within Omnichannel, you will need an Azure subscription, a Dynamics 365 license, and a bot that is built using Microsoft Bot Framework and registered with the Azure Bot Service. Now that we have that out of the way, let's jump right in. In Azure, navigate to the Microsoft Bot Framework bot registered with Azure Bot Service. Go to ''Settings'' and fetch the Microsoft App ID. You will need this later. Ensure that the Teams channel is also enabled for the bot as Omnichannel requires this. Next, you will need to create a new app registration in Azure Active Directory. Navigate to the ''Azure Active Directory,'' then to ''App registration'', and select ''New''. Type the display name you would like for your bot and "Register". Then copy the application ID. You will need this for the next step. Now, we will integrate the bot into Omnichannel. The first step is to register the bot as a user. In "Advanced Settings" of your Dynamics 365 application, go to ''Security'' then ''Users'' and add a new user. Ensure you are adding a new application user. Fill the application ID from your app registration step, type the name of the user and to the primary e-mail. This e-mail can be a dummy e-mail as the bot agent will not use this. The user type is the bot application user. Next, you will paste the bot application ID from your Bot Framework bot fetched in the first step, "Save". After the bot user is saved in the system, manage the user roles, and add the user as an Omnichannel agent. After adding the bot as an Omnichannel user, it's time to add the bot to the Omnichannel conversation flow with other human Omnichannel agents. Bots can integrate with a human agent in different ways. One scenario is to have a bot and an agent in the same queue. In this instance, a bot acts as an agent, and we do not need to add special configuration other than to add the bot to the same queue as the agent in Omnichannel. Another scenario is having the bot and agent in separate queues. In this case, the bot can escalate the conversation with the customer to an agent for various reasons, such as when the customer request has surpassed the bot capabilities. Let's apply this second scenario to Omnichannel. I have already created a workstream and queues in Omnichannel. However, I need to add what are known as context variables and routing rules. Context variables give us access to context paths from the conversation to Omnichannel services. Routing rules determine which queues to use and when. This particular bot sends a variable called BotHandoffContext in the handOffContext object during an escalation scenario. For more information or sample code, you can visit aka.ms/bfhandoff. Back to our scenario, we need to add this variable name to the workstream context variables. Next, add routing rules for the bot and agent queues. For this example, the bot will always be the first point of contact for a customer. When a BotHandOffContext does not contain data, route the conversation to the bot queue. Add a condition statement to reflect this. As stated before, the bot adds a value to the bot handoff context variable during an escalation scenario. Therefore, when the bot handoff context does contain data, route the conversation to the agent queue. Add a condition statement to reflect this as well. Now, we're ready to start a conversation. Here we have a Microsoft Support website from the customer's perspective. This chat widget is connected to the bot we configured in the previous step. In this example, a customer wants to know about upgrades for their laptop. The bot responded to the customer inquiry with an adaptive card showing a knowledge article that the customer may find useful. After the bot has resolved this customer inquiry, it seems the customer has another question about scheduling an appointment at a nearby service center. The bot can help the customer with this issue. Not only does it know the nearby location, it also suggests available appointment times using suggested actions that the customer can select. The customer then asks about billing. Since the bot is not equipped to handle a complicated issue with potentially personal data, the bot escalates the conversation to a human agent. This bot notifies the customer of the escalation with a message. Switching to the agent view, there's a notification in the Omnichannel for Customer Service application. The agent also has desktop notifications enabled, so if they are away from the app, they can still be notified. The agent already has an ongoing conversation. However, because of Omnichannel's multi-session capability, starting and managing other conversation is simple for an agent. The session show up on the left-hand side as Session tabs. Once the agent accepts the conversation, the agent can see the full conversation between the bot and the customer, as well as an agent specific message containing the issue summary. In addition, the agent can see the customer sentiment at the top of our chat window, which indicates the overall customer satisfaction and will continue to update in real time as the conversation progresses. The agent also gains a 360 view of the customer. This view includes previous conversations or cases the customer may have had, as well as a contact card and other various information about the customer. If the agent is unsure how to handle a customer issue, they can view an agent script on the right-hand side of the screen to guide them through the scenario. The agent can also interact with the smart assist bot if they need help through the scenario. This agent assistant bot is listening to the customer messages and displays potentially useful information that the agent can use to solve the customer issue. This customer is having some issues receiving their refund. The bot finds a knowledge article that many refunds are currently being delayed due to maintenance. The agent can select this article to send to the customer. Once the agent has handled the customer issue, they may want to get post-chat information about the overall customer satisfaction. If the customer agrees, the agent can transfer this customer to another bot designed to gather information about the customer experience. Overall, bots can enhance a customer and an agent experience. They are easy to implement and they integrate well with Omnichannel for Customer Service. For more information, visit botframework.com.  In this section, we'll see how you can integrate Bot Framework bots into LiveEngage LivePerson's Intelligent Engagement Platform.  Hello, and thank you for your time. My name is Kyle Stamey. I'm a Director Partner Sales at LivePerson, and I'm excited to take you through our vision for conversational human in the loop and how Microsoft Bot Framework bots can loop in LivePerson's conversational Cloud in conjunction with human agents. At our core, LivePerson is a conversational company. The conversational space is very important for sales, for your brands because ultimately, conversations are the best way to identify, respond to, and fulfill your customer's intents. Conversations are effortless or they should be, conversations are natural, conversations are personalized. LivePerson holds deep rooted heritage in the conversational space. We've been in the business of conversations for over 20 years since we invented web chat back in 1995. We work with a global network of brands and partners today to support conversational in messaging typically we've lead within our industry with an AI platform, some of which I'm happy to show you today. When you look at conversational, when you look at brands, intents in the space, brands have typically tried to have conversations with their users via a website, via app, via IVR, potentially via chat on a website as well, or bots in a website. But unfortunately, when a human is not in the loop, when agent cannot have that personalized conversation, it results in the unintended consequence of creating walls or a digital fortress. Our intent is to help reduce the potential friction created by these walls to help you say goodbye to friction and help you interact with your clients to build those effortless, natural and personalized conversations and connections. The best way to accomplish this is through conversational commerce, which is what we do, which is what we specialize in, the ability to fulfill a customer's intents on the messaging channels they prefer. The primary way to do this is to implement guided, automated conversations with bot and human agent to remove friction and to allow a seamless messaging experience for your users. Our conversational Cloud helps facilitate this through our tango. The tango is the ability for a conversation to go from bot to human, for a conversation to start with the bots be handed to a human or vice versa, for a conversation to begin with human and be handed back off to a bot. I'll like to take a minute now to show you what this would look like in the real world. [MUSIC] This tango can be facilitated in two different ways as it was detailed at the begin of today's presentation. Our recommended way is what we call bot as agents. It is easy. It's a wizard-based deploy. It provides for seamless delegation and escalation between human and bots. It provides the ability for a conversation to be passed between bot and human agents. It provides the ability for you to leverage LivePerson's 14+ front-end channels, including WhatsApp, Apple Business Chat, Google Rich Business Messaging, and more. It provides for unified bot and human agent analytics. It allows for continuous learning from both bot and human conversations, and it is result of loosely coupled design with a very little LiveEngage specific code more which can be seen in our developer site. A secondary option, intended primarily for more advanced custom needs, it can be done via bot as proxy. This still allows for that seamless delegation and escalation between human and bots, for the conversation to be passed between bot and human agents. It also allows you to leverage Microsoft Bot Frameworks front-end channels. More information, if interested, it can be found via the URL listed there. Ultimately, human-in-the-loop helps businesses scale and succeed with a brand's currently existing resources. As mentioned, deploying a bot with a connection to human agent helps build those conversations, helps build those effortless, natural, personalized conversations. As highlighted by some of the examples you see below, whether it'd be increasing CSAT with an airline, whether it'd be increasing efficiency with the Japanese Telco or increasing spend within a hospitality brands. Next, we'd like to show you a demo. In conjunction with that demo, if you're interested in exploring LivePerson's human-in-the-loop solution with Microsoft Bot Framework, please go to the Azure Marketplace and search for LiveEngage, our listing there is being finalized and should be up soon. In the interim, if you have any questions, needs, requests, you can contact me directly via my e-mail, kstamey@liveperson.com, and I also encourage you to visit our developer sites, developers.liveperson.com. Thank you very much for your time today, and please enjoy the rest of the show and our demo as well.  Hello. This is Kevin Rasachak, a Solution Consultant with LivePerson. I'll be walking through connecting your Microsoft Bot to LivePerson's LiveEngage platform and showing a couple of consumer experiences. Once you've built your bot in Azure, you're ready to connect it to LiveEngage. Navigate within "Bot Services" to the desired bot. Under the "Bot Management" field, you'll select "Channels". You will have already set up the channels in advance of the following steps. Here within the web named Web Chat channel, on the right side is Edit. Here you'll be able to retrieve the direct line secret, which can be found within that Edit field. Go ahead and select "Show" to display the key, copy, and save this for later use, to be used within LiveEngage in just a moment. Now, within LiveEngage, navigate within the left vertical menu to "Manage Conversational AI and Bots" identified with the bot icon. Within this field, select "Third-Party Bots". To connect the bot, select "Add bot". I, for demonstration purposes, have already pre-configured and set up the connection with the Azure Bot and will show what fields you'll fill out to connect the two environments. The first field is assign agent. The fields identified with an asterisks will have already been set up in advance of moving into this field by creating the user and skill for the Azure Bot. This can be done on the admin field in, again, the left vertical menu under "Manage Users and Skills" within the circled human icon. You can see agent is called out within the drop menu and then the skill group that is tied to the Azure Bot. Next is leveraging messaging for a conversation type. To take advantage of asynchronous messaging, please select the "Messaging" option opposed to asynchronous engagement such as chat. Next, is error handling. When events such as the bot not recognizing the intent, an emergency intent is recognized or any other form of error occurs, leveraging the Bot Framework, API, and C# code, as described in our tours in Robert session earlier. This is where you will structure the message so that the consumer and agent will receive these messages and identify which agent or agents will receive the hand-off based off of this skill group and use case that the bot is deployed for. Lastly, is connecting it to the Microsoft environment. Under the "AI Vendor" drop-down field, select "Microsoft Bot Framework" and the "Direct Line Secret" is where you will apply the saved direct line secret code that you've leveraged and found in the Azure environment. Lastly, "Direct Line Endpoint" is identifying the region in which the bot is being deployed in. Go ahead and select "Done", and the bot will be established within the environment and connected. Now, on the right vertical buttons, select "Start the Bot". Once the bot status has moved to online, you're now ready to connect your bot to the desired consumer endpoints. In order to deploy that, navigate to "Manage Campaigns and Engagements" within the tag icon, and here you can identify what are the desired endpoints you'd like to connect a LiveEngage platform to and allow the consumer experience. Down at the bottom of the field, select "Data Sources". Here we'll be demonstrating a web messaging engagement and then SMS engagement. You can see that there are additional endpoints that you can leverage to connect to consumers, as well as integrations and APIs as data sources to be applied. On the left side of the screen is the agent workspace that will retrieve that escalation and hand-off from the bot itself. On the right side is a demonstration web page with a web messaging tag tied to it. I've just navigated to the Azure Bot that I've connected to and consumer would simply select the "Web Messaging" button that can be deployed anywhere on a web page and then connect itself to the bot itself. I'm going to ask, what is the capital of France? The bot will provide the response as it's recognizing the intent. Then the event that it does not recognize the intent, it will then operate as an escalation and human agent hand-off. As you can see, it moves into the agent workspace on the left, entering the queue of concurrent conversations that the agent is handling. Now, the last piece to be shown is how that looks within an SMS engagement. So just like as was shown within web messaging, we are connected and communicating with the bot itself, firstly. Here, asking the capital of Italy, bot will respond back with the appropriate response. Again, instance of unrecognized intent or error handling, transferring that to a human agent in that event, and as you can see, pulling into my queue of concurrent conversations and thus identifying itself as an SMS engagement both within the consumer information window and in the left queue of conversations with the device as it has been an unauthenticated endpoint. That concludes the demonstration. To close, we will leave you with links to a couple of helpful guides. The links to LivePerson's knowledge base and developers portal, which can be publicly accessed. The first is a guide on how to deploy the web messaging LP tag onto your web page, and second, a guide on connecting third-party bots as shown in today's demonstration. Thank you.  Thank you for watching our session. We really hope you enjoyed it. We're excited about what you do with the Microsoft Bot Framework, and be sure to check out the other bot framework sessions they build. [MUSIC] 