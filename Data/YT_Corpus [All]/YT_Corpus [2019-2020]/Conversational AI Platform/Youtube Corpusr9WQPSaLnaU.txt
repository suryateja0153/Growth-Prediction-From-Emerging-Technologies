 Join us for this special Build edition of the AI Show where Christopher Whitten, Principal Software Engineer, will talk all about the Bot Framework Composer. The presentation will go over the different features of the composer, and explore its connections to the Bot Framework SDK. You'll learn all about modal dialog, simple recognition, response generation, and so much more. Make sure you tune in. [MUSIC]  Hello, everyone. My name is Chris. I'm an Engineering Manager on the Bot Framework, and in this session, I'll be talking about Bot Framework composer, Bot Framework's new, collaborative conversational AI development environment. In this session, I'll be giving you an overview of the tool. I will describe and demonstrate different authoring functionality. We'll talk about how composer is driven by the Bot Framework SDK, specifically adaptive dialogs, a new technology also being announced to build this year. I'll talk about Language Generation and Language Understanding, how composer integrates with Bot Framework Skills, and finally, I'll show you how you can use composer to deploy your bot directly to the Azure Bot Service. The Bot Framework Composer is an integrated development environment, the developers and multi-disciplinary teams can use to build bots. Within composer, you'll find everything you need to build a sophisticated conversational experience. The visual dialog editor tools to train and manage language understanding, language generation, and templating systems, and are ready to use bot runtime executable. Bot Framework Composers open-source on GitHub and installable as a desktop application on Windows, Mac, or Linux. When we think about conversations, we think about it in different building blocks. The first is language understanding or LU, what the user says, and how we can parse that information and extract intent, what the user is trying to do. The second is the dialog system, conversational flow between a bot and a user that often includes business logic and different service integrations. The third is language generation, the response object sent back to a user, this can be spoken, or textural, or even a card. Finally, we have memory, the internal state that bot maintains and uses to achieve is functionality. Adaptive dialogs has memory scopes, user, conversation, dialog, and turn. These scopes have different lifetimes within a bot, conversation or turn, and can be used interchangeably to meet the bots needs. Bot Framework Composer brings all these together into a one-stop shop experience. In this session, we will build a Rolodex bot. It collects user contact information like name, address, and phone number. I'll introduce some concepts from adaptive dialogs like Triggers and Recognizers. I'll talk about how flow decomposition can be used to better utilize dialog composition for reuse. I'll talk about composers integration with Bot Framework Skills. Finally, I'll deploy this Rolodex bot to the Azure Bot Service. Let's get started. For the first demo, I'll give you an overview starting with the EchoBot template, I'll show you Language Generation, Triggers, Recognizers, and Dialog Composition. When building a bot with composer, there are two main authoring components. The flow editor, then the form editor. The flow editor is where you can visually lay out the nodes into edges of your conversation. It has branching representations for if/else or a switch condition. It also has a loop representation. The form editor is where you can configure those nodes based on the Bot Framework SDK interfaces. It allows you to author Language Generation and Language Understanding Inline. Triggers and Recognizers are two concepts in adaptive dialogs. Triggers allow you to produce flow based on events happening during a conversation in your bot; Recognizers allow you to define a language understanding model for a particular dialog. With this selected, you can author intense, provide sample utterances, and even label those utterances to extract entities from the user's input. Here locally with a web app, I'm looking at the homepage right now, which is your place to manage all of your available bots. You can also see different examples that demonstrate more sophisticated conversation techniques. I'm going to create a new bot by selecting the "Create from template option", and I'm going to choose the "Echo Bot". The Echo Bot is essentially Composer's "Hello, World!" example, something that echoes back whatever the user happens to say to it. I'll click "Next", and give it a name, and it drops me on the design page. What this has created is a single dialog called Rolodex. Dialog has to predefined triggers as part of the template, the unknown intend trigger and the greeting trigger. Rolodex is an adaptive dialog, it has the ability to attach a recognizer to it. I'll come back to that in a little bit. If you look at the greeting trigger, you'll see that there is some flow here. What this does is it loops over a data structure inside the bot, and then has a branch condition to determine if the person entering the conversation is a user. If that condition is satisfied, it will send this welcome user template, something with also precreated as part of the Echo Bot template. We can look at this content by hovering over the invocation of it here on the right. We can easily go edit that template by moving to Bot responses, going into Edit mode, and here we are. We're dropped in a fully editable surface of the LG file format. If I go back to the design page, and back to the greeting, I'll see that the updated content that is authored is now available as part of the syntax highlighting in the LG Syntax here on the right. Let's start this. When I click "Start Bot" was happening is Composer's sending a signal to it's managed C# bot runtime. When it's done, I'll be able to start the Bot Framework Emulator and have conversations with it. It's done. I'll copy the location, go to the Emulator, and connect. Welcome to the Rolodex bot. Perfect. If I click "Restart" a couple times, I should see some random responses, which I am. Great. Let's add a piece of content to this greeting. If I click this node, the action flyouts pop out at me, and I can select an action from this list. All of these pieces of functionality are part of the adaptive dialog in the Bot Framework SDK. I'll click Send a response", and just say "hello testing", and restart. Yeah, let's clean that up. So in going back to the Rolodex entry dialog, I will now assign a recognizer to it. I have the option at the moment to choose from the regular expression recognizer or the LUIS recognizer. Let's choose regular expression for now. When I've done that, I can now add new triggers that are called intent triggers. I'll call this intent trigger "Collectinformation", and give it a simple input regular recognition patterns like add user. So this is saying that when the user says add user, I have the option to build flow off of that. Let's test that. So the Rolodex bot is trying to collect some information from the user. This is where we can go in scaffold that out. I'll create three new actions. All of them are text inputs as part of the ask a question module. First, we'll ask for their name, then we will ask for their e-mail, and then we'll finally ask for their phone number. This is just the scaffolding of the nodes. In parsing the user's response, we have the opportunity to assign the value that the user said to a location in the bots memory. I would do that here. I'll assign this response to the dialog.namememory property. This response to the dialog.e-mail property, and this response to the dialog.phonenumber property. Let's test that. One more thing that I forgot. Let me echo back whatever the user just said. You'll see I have an error here, and I don't have the ability to start the runtime. If I click on this red icon, it navigates me to the notifications page, where when there are errors or warnings in your bot logic, it gives you an opportunity to see those rolled up in one page, as well as deep link to the location where the error exists for correction. This is great for fast feedback. I'll restart it, and we'll test this now. Chris. Chris@Microsoft.com, 206-800-555. Great. Okay. So that's the regular expression recognizer. Let's show the LUIS recognizer. Adding LUIS, means that you can provide machine learning immediately to your bot to parse and understand intent and extract entities from user utterances. Instead of adding a hard-coded add user property, I now have the ability to provide trigger phrases, some training data that would be sent to the LUIS service when generating the model. When I restart, it's going to prompt me to publish to LUIS. Let's do that now. That's done. Let's test it. It's great. I got a LUIS traceback, which means that it hit the LUIS endpoint and was able to extract the collect information intent with a pretty high score. Perfect. One final thing in this demo. I have the ability to decompose this flow and create new dialogs that they can be used for reuse. I'll demonstrate that now. By selecting the flow that you want to move, you can then just click the "Move" button and say, give it a name. I have created the Collect User Information dialog that encapsulates all this flow. Now the Rolodex collect information intent, does nothing but calls that external dialog. When you begin a new dialog as an action, inside the adaptive dialog, you have the ability to select any of your dialogs available. This means the collect user information can be invoked anywhere within your bot. This is great for encapsulation and reuse across bots. For the next demo, we're going to be talking about the different authoring functionalities as it pertains to Bot Framework Skills and how you can call skills from Composer built bots. Skills allow you to encapsulate older bot logic, perhaps V3 dialogs or V4 waterfall dialogs or really any sort of service that exposes a Bot Framework Skill manifest, so it can be called by a bot inside Bot Framework. Composer has some experiences inside the authoring application to discover and manage these different skill endpoints, as well as call these different skills inside of your dialogs. Additionally, there's an authoring surface inside Composer to generate your own manifest for a skill. So any Composer built bot, can itself be available as a skill. Onto the demo. Here with the Composer web app and with the Rolodex bot loaded, where I'm now going to demonstrate the different integrations with Bot Framework Skills. Composer has the ability to discover and call skills within any dialogs and it also has the ability by authoring a skill manifest to expose a Composer bot itself as a skill. Let's demonstrate that now. The Skills page is a place where you can connect to and discover skills via the skill manifest. I have a local skill manifest being served here. I'm going to paste it into the form, give it a name. I now have the ability to go back into my flow and call that skill using the begin skill dialog. In the unknown intent trigger that we were using earlier in a demo, the flow was just echoing back whatever the user said, on turn.activity.txt. But now we're going to do something a little more functional, we'll actually forward that activity onto the skill. So I'm going to begin a skill dialog and I'm going to call the HelpDesk skill that I just discovered. I will send, turn.activity.text just like this. I no longer need to emit this back to the user and that's it. I've now hooked the Rolodex bot up to the HelpDesk skill. I'll restart the bot, now we'll test it in the emulator. Now instead of hitting the collect information intent that I did earlier in our demo, I'm going to just say some random text. "Hi, welcome to the help desk. How can we help?" Great. So it hit the skill. I actually have the HelpDesk skill here running locally as its own Composer bot. We can look at its manifest. It's very simple. Users can offer this to express different capabilities of your Bot Framework Skill. I'll just quickly add an additional piece of content and demonstrate how easy it is to author and work with different bots like this. I restarted the skill but I won't restart the parent bot, I'll just restart the conversation with the Rolodex bot. Welcome to Build 2020. Hi, welcome to help desk. How can we help? Testing, testing. Great. So normally one would do something much more functional here, where they would instead be, maybe accessing a QnA Maker knowledge base or providing some other service integrations to try and fill the user's requests. For this demo, I'm keeping it simple just for explanatory purposes. Our final demo of the session will be an overview of the provisioning, deployment, and publishing mechanisms inside Bot Framework Composer. Composer has a page that we call the Publish Profiles page, which allows you to define a local or remote publishing profile, this can be for deployment to Cloud services or other scenarios you're trying to accomplish. This also has the capability to support versioning or rollback scenarios. I'm going to demonstrate provisioning a Azure web app through the Azure Bot Service and take that resulting configuration payload to apply and create a new publishing profile in a Composer built bot. I have provisioned the web application and the resulting JSON payload that I was referring to is right here. I can copy this information and go ahead and edit the existing publishing profile that I have for this bot and simply just paste it into this published configuration and hit "Save". I now have the ability to publish to the selected profile, which I've named the Azure Bot Service Profile. I have the Azure portal registration here, that I can immediately test. Rolodex bot welcomes you, add user, what is your name? Chris, so on and so forth. Saw that in earlier demos. I will quickly go make a very quick change and redeploy it to the Azure bot service. Let's collect some information. I'll restart the bot and then I will go back to the Publish page and just hit the Azure Bot Service Profile and the "Publish to the selected profile". I'll give it a comment to represent the change, call it V2 and here we go. Publishing has started. Okay, that's done. This may take a little bit of time to show up here in the Azure portal but we will give it a few chances. Here we go. Welcome to the Rolodex bot. I'll say "Add user". Hi, let's collect some information, connect some information, whoops, that's a typo. What is your name? Chris. What is your e-mail? Chris. There we go. That's it. This marks the end of the Bot Framework Composer Overview session. I hope it's been informative. I've had a great time demonstrating different capabilities of the authoring application. The two links I have here is the, Get Started link on, where you can download and install Composer either as a desktop application or as a deployable web app, and also the Rolodex bot that we've been working on is now at the link there below, if you're interested in seeing all the great work that we did. Thank you and enjoy Build [MUSIC] 