 good morning everyone welcome to operational aspects of SDN session my name is general strategy i will share this session i will have some announcements for you that probably OA you have already heard from class in the previous session the posters are displayed in the exhibition area you can look at them and the poster outsource our at the afternoon afternoon coffee break will be there and and and you can talk to them demonstration is also scheduled the whole day during the coffee breaks and and the ranch breaks please check the schedule on the online website there will be extra events both sand and workshops in the evenings so you can join to the these extra even see if you wish and please fill out the feedback form you can do it by the website or online the cause for me application and the last announcement about the gala dinner if you want to have extra tickets you can have at the registration desk and the shuttle buses for the gala dinner will be announced this morning for all the past participants because the schedule is it slightly complicated i don't want to go into the details our first presenter will be periodic impala just women he's graduated IIT Kanpur holds PhD in computer science from university of south california los angeles well-known personality at iit f authoring and coding several different routing protocols he is called also door also more than 30 different RFC standards he is detective chief technology officer for the Juniper development and innovation team I guess your throw is yours thank you so it's it's a mixed thing whether you want to be the first speaker after a coffee or the last speaker before lunch I think I prefer this the other thing is jet lag hit last night so I have too much nervous energy I have too many slides I probably face them with 20 minutes to spare but I'll actually try to go through them a little more meaningfully so I want to talk about sdn and I know hits a buzz word a lot of people talk about sdn nowadays so I'm going to give you three aspects of SDM and a small reminder and then try to talk about the the aspect of SDM that I care about which is the abstraction so I'm going to talk about sdn for programmability and i'll define what i mean by that i'll talk about automation very very briefly but some people think about sdn as automation and then i'll talk about sdn for abstraction so the first one I call sdn as a network OS and the last I call Sen as a compiler and i'll tell you what i mean by that so programmability is about I have you know I have an operating system that I that I like and you know that operating system will give me some base levels of AP is it will also give me some apps but usually the apps that are there they're good but they're not completely sufficient for me so I want some more apps on top of that so I can go to end of the vendor and say give me ABS on top of this OS or i can write my own so programmability is typically about being able to write your own apps so you want to improve performance you want to improve scale or you want to come up with a new feature and so or sometimes you just want to play so so you get this API and you use that API to do all these new things so that was the first sort of view of form of SDN at least the one that the onf the open networking foundation came up with which is I want to separate the control plane and data plane call that my network OS so similar to an OS on a box on a server or on your laptop I have a network OS I write applications on top of that and I transform network states from a current state to a desired state and that's what Sdn is so that was the definition of SDN by this so Software Defined Networking automation is typically about I know what I want to do i do it at small scale I you know I prove it on one device approved on 5 devices I get the idea of what I want to do now I want a framework in which I can automate this for hundreds or thousands of devices or in some cases tens of thousands like in a data center in a cloud data center so what you need to do is to parameterize what you just did on your one and five devices you need to try to anticipate situations that you didn't find in your five devices but what you might find the real network or in the real data center and then you need policies or rules to handle exceptions and then you can say okay now I have a an automation to do on whatever I was doing typically configurations sometimes reacting to situations so again the rest is up to you so you have this framework you have some tools and you know so you heard of puppet in chef I was going to have to be careful how I say these things so and you build your automation from there some people think of this as sdn I'm not going to go further into that and the last one is you have abstraction you have a low-level language which is what's on your devices so that the machine language for x86 the machine language for mips and then you have these high-level languages that abstract away a lot of the details of the machine allow you to express yourself in better ways many cases imperative languages that says do this do this do this if you see this through this else do this loops whatever very prescriptive and sometimes decorative languages like Haskell or functional languages where you say what you want not how to do it and then you say okay for my particular what I want to have happen this is how I'm going to express myself and I will have a compiler that translates from my high level specification whether it's imperative or decorative down to a lower level you know what the Machine understands so I'm going to give you a quick picture of what that looks like you have an SDN system you have your requirements that you specify in this high-level declarative statements and then you essentially compile them down to what the devices will accept so this is what I what I consider sdn as a compiler and the basic idea here is abstraction so we have these three paradigms you can have programmability you can have automation you can have abstraction so this is not a value judgment I'm general you have programmability it's not the same as automation which is not the same at obstruction there are definitely overlaps among these so for example when you're doing abstraction you're saying what you want to do in a sense you're building something new and so in a sense you're programming but typically the programmability is for features that you don't have whereas the abstraction is for features that you have what you want to manage in a higher level level way or you want to take existing features and combine them in a new way so if you keep these kind of different you say okay there are these three aspects of SDN I do you know since we're in this in this group that talks about operational aspects of s the end again not a value judgment it depends on what you're trying to do abstraction and automation are trying to improve your operational sides they're trying to make it easier to run your network programmability is an interesting one especially for the irony community you want to play with the network you want to do something different but for the for the operator for the one who's running the network having all these really clever guys going around changing the data plan change the control plane and then saying go ahead please manage this is an operational challenge so from an operational point of view automation and abstraction maybe the aspects of st and that you care about from a research point of view programmability might be what you care about the last thing I want to remind people that we used to have everything was software-defined Network I mean routing switching your people built custom asics for it but routing i mentioned cisco here but someone reminded me that IBM did the same on a risk out of 6,000 they turned it into a router and it was a general of this computer and everything was software the control plane software the data plan of software so whether it's cisco whether it's I BM this was all software-defined so we kind of tend to forget that and say oh this is this new thing we came up with in the last three years there's actually you know for some of us older people like me it delicious irony in this whole term software-defined networking so that gives me liberty to interpret Sen any way I want so I'm going to use the abstraction model how did we get here people think of SDN as the separation of control player and data plane again from an operational point of view yes that's important that's nice I hate putting academic out there and having you guys throw something at me but that that's what does happen from it from people who actually run the network they say hey there's a really important part you've forgotten which is a configuration which is which is the management aspect of of devices so the actuality of a router is the control plane data plane control plane is interoperable yes their problems but mostly it's interoperable the data plane is interoperable it's a configuration that's so different from one rabbit or another even from 10 s to another one version to another so how do we how do we deal with this and for me that's where I want to take sdn so inserts trying to separate control plane data plane what I want to separate is a configuration call that orchestration because the nice new buzzword that everyone likes and the goal is to have service agility to be able to create new services from existing services not to create new services like from programmability point of view and to be be able to do this much easier so freedom from physics that that ideas from virtualization so if you if you think about computerization you really say I don't want to be limited by what a box can do and you know picking up a box and putting it somewhere else all those physical attributes that make my life difficult so I think we can have similar concepts in network virtualization so you have these ap is so what's new about this we want to be able to define so I said configurations not standardized so we want to make them high level standardized and modular so I can click things together much more easily and so I would encourage you guys to look at open config open configure at where the number of operators Google BTW and a few others who are saying i want to create and a standardized way of configuring bgp of configuring mpls i will use the lowest common denominator i want to write these all in yang so this is what this goal the goal here is open configure the start I I would like to see them do things more abstractly but that's where they're going and then you transform this high level sort of device independent things to device specific data models and that's that's basically what we want to do so what this whole system really looks like in more detail is I have the service requirements and the decorative statements and somewhere here there is well so you can see here that the these databases that are here you have service configuration database you have networked elementary database and you have a device database and what you're going to do is take this high level service requirements use the telemetry to say how do I do this where do I put these services casement is a very important part of this then analogy that you should have in your mind is compute virtualization so if you go to Amazon AWS or if you go to your own private cloud and say I want to run a new app you don't get to say I wanted on this server you don't get to say this is the service specifications that I want you get to say I want four cores or four votes virtual CPUs I want a gig of memory eater bit of a terabyte of data storage and maybe 10 gig of network connectivity and having said all this the orchestrator the computer orchestrator will place your app on one of these devices on one of the servers so here you want to do a similar thing you want to take the service requirements take the network telemetry and place the the service on one of these devices or a couple of these devices I'm going to skip this slide the idea is that Sdn doesn't only apply at the edge of the network replies in the access in the core and a V for those of you who are fans of nov but I want to get to abstraction and the important thing about abstracting today we spend a lot of time focused on the device we want to say this customer is connected to this port on this V line to this physical device and this is the service that they're going to get and placement is a very important part of that and what I want to do with abstraction is to say let me take away some of those details can I now specify the service in a slightly more abstract way can I remove some of those details and let a computer actually fill in those details so I'm going to give you one example that to hear you can study the others at your leisure or you can completely ignore them it's up to you but I'm going to take a service data model which is a VPN or close user group whatever you want to call it and say how do I think of this in a more abstract way so if you don't know vrf this might or EV pm's or you know whatever your favorite VPN is this might not resonate as much but if you think about your favorite type of virtual private network and how you would configure that on a Juniper or a Cisco or whatever your favorite devices you specify a lot of things that maybe you shouldn't have to so for example for the clothes user group I want to say I need to tell I need to tell the network where are my endpoints who are my which one is my customer and waiter to come into the network and I need to say things like is this an IP VPN is this an ethernet VPN what's the topology is it any 20 that hub-and-spoke what is the connection bandwidth but I don't want to you'll give too much more than that I don't want to say what is the technology so for example I'm going to use the example of an ethernet any-to-any VPN I could do that as a VLAN I could do that as a vpls I could do that as something new relatively new called an EVP an do i as an operator want to say those details yes I do I become a geek but I shouldn't want to I mean the problem is as and this is why I think we're where we are with networking we love playing with these knobs we live specifying too many details we need to say step away somebody wants ethernet connectivity that's what I'm going to give them and whether that particular customer or that particular entity gets a VLAN or an EVP an should depend on other things and let the computer figure it out so I definitely don't want our specific details so if I were to take that particular example I have a template which is which is what my service looks like and I want to put in details like this is for be of a who which I will leave unexpanded I'll say that the endpoints are ABCD in my network this is an Ethernet VPN and the topology is any 20 and I might also say you know I should get multicast with this or this seats up front so i should get multi cash with this or this only unicast and then I say okay the connection is essentially everyone gets one gig except the headquarters gets 100 gig so but notice that there is no mention of whether this is running over Jim plain ethernet is that running over mpls is it a VIP is it using v GP or LDP for signaling you know all those details and I don't even tell you which pease the provided edge router this connects to this is a the job of the orchestration this is a job of the thing that says I'm going to take your requirements and then say knowing that this router is very busy and this one has lots of capacity or lots of fib space I'm going to place that customer so assume that ABC will assume that a can connect to three different devices which one do I use for this particular VPN well let the computer figure it out that's that's the point of this whole thing so then I get down to the next level which is when I compile it down to a physical device so i'm going to say i'm going to use mpls i'm going to use BUP for signaling the technology that I'm going to use is actually II VPN not a VLAN I'm going to have to actually put down some draw targets for this because this is bgp based the connection of already said where it is but i'm going to pick pe1 p3 p4 in my network and the physical interfaces probably also the vlans and so now I'm getting down to more and more level of details but from my point of view as an operator I should only have to specify what I did when I said this is my customer and these are the endpoints so so essentially what you have is you specify a certain level of detail and then the computer the program whatever you want call it orchestrator the SDN system using telemetry using the current state of the network says this is where your service goes and that's for me what Sdn is it's the ability if it's an analogy of compute virtualization for networks its ability to specify what you want in a higher way and allow a computer to join the dots I give another example which is more about LSPs infrastructure I'll skip that I don't know how I'm doing on time but I want to come back to this thing they probably have many many different ways of expressing data models the one that juniper used for a long time who is basically XML standards we had an internal schema and what the industry is moving to is you're specifying the data model structure in yang and then specifying so that's more like your template and then when you fill in the details for a particular service you again use XML so XML has a lot of nice properties like I said the open configures are using XML about two years ago nobody knew what XML is today the 200 XML models sort not XML sorry yang so nobody knew what yang was today that 200 or more drafts in the ITF with the young models for everything including probably never mind so so that's that's on the language that I think we should go for it is typically for describing configuration that lives on the device but I think you can use the same thing for expressing sir this is in a more abstract way so I mentioned telemetry i'll come back to this just briefly that telemetry is a very important part of all this and the thing that as you say i'm going to let a computer do more and more of this i think you also need to give the computer more information to be able to make intelligent decisions so everyone thinks about Europe a pilot flies the plane well pilots don't fly planes especially commercial jets are flown by computers and the reasons are fluent by computers is they're measuring all kinds of things like micro currents and temperature pressure all kinds of things and optimizing how the plane flies at a speed and a granularity that humans cannot do and I think the same thing applies here if I want to optimize the service and in fact not just places service the first time but move a service from one place to another this is something we typically don't do so if I give you an ethernet VPN you're stuck on this particular box you're going to stay there until I you know have actually a special event to move you from here to there and but if you look at a vm a virtual machine your app is going to run on this server and then because of telemetry you know that service too busy or something happening your app will be picked up and moved somewhere else and you don't actually know that that's happening we should be able to get to that kind of agility in the network and so we need information for that we need telemetry so in talking about all of this we have to interact with the Sen system and so I'm going to go over that very very briefly you talk about programmable networks but here I'm talking about API where I give you the service requirements I'm going to specify them in yang I'm going to give them to you in xml and but i'm going to give give them to you in this abstract way and you're going to then have to you being the svn system place this and so on so how do I interact with the SDN system I have this API typically netcong for restaurants which is how i'm going to transfer my service requirements to you i also have an API from on the SDN system going down to the box again netcong or restaurant telling the box the details that I want the difference between the two is the API above what people sometimes call the northbound is higher level more abstract less details and the API below is everything the box needs to actually implement the service so um we use data models for this and the important thing here is oops that API is a very language specific very syntax oriented data models are really capturing the essence of what you want so you can derive the API is in c and java and Ruby and Python whatever your favorite languages from the data model and this is actually a very powerful paradigm the other thing that we don't have enough information about today we don't have enough research into it between Sen systems how do I interact so for example the SDN system on the ride could be my VPN and the smm system on the Left could be doing the infrastructure planning and the one on the right needs the one on the left to know whether I have enough core bandwidth to satisfy my my VPN requirements so that's for further study so to conclude I want to say that essentially we what the view of svm that I have is you want to get away from the boxes you want to you want to think in a more abstract way you want to separate service configuration from the devices not control plane from the data plane but the service provisioning from the control and data plane you want to specify this artifact II in a device-independent way oh s independent way you want to use telemetry to optimize service placement not just the first time but on you know maybe every day every week going to move services around you want to compile these abstract specifications to device specific models in all of this you're using data models and you want to mine for these services continuously so if you look at all of this this is exactly what you know operations is about I want to specify a service I want to place the service I want to monitor the service and I want to move services around to improve them how you interact with them well use data models you use their models at a high level you use telemetry to feed this with the right information to make decisions we have to still figure out how Sdn systems interact with each other whether they're cooperating sdn systems or hierarchical sdn systems and we have to standardize these models so today like I said open configures during the first step here they really care about bgp and mpls configuration at some point we want to couldn't you know talk about how do you configure services and so we want to take what they're doing much much further questions any questions from the audience if not I probably I have a one you mentioned decorative languages and you listed younger as an example for for that that can be somehow you do you think that young can fulfill all the requirements of data center service provide their access networks is it possible with the end or younger or so to be very frank with you I think it is but I don't have proof a wide enough proof I think the big part about yang is today we use yang device specific models and so the important part as you said the decorative part is can I remove these details and you don't specify enough that I can tell the network what I want without specifying all the other details so I think one thing is can Canyon be used in a more abstract way than in you know then it is today the second is can it be used in all these environments and I think the answer is yes but we have to prove it is that yeah you can extract abstract how much you want but some some of these technologies are not interchangeable right some of them provide some features and some of them provides other features right sorry so you you would still have to be able to put details sir yes and so there's two parts to that there is the part where you want to know you know I decide that so in the internet example that I just gave you I decide I want to do an EVP n but this particular device may not be able to do EVP and maybe the only thing it can do is a VLAN so I need capabilities coming back from the box so the SDN system has to know what is the capabilities of all my boxes so that's one and then the other thing is I to know and this is what telemetry will give you more details about you know maybe this can do EVP ends but it's your has no more space in its fib so what do i do there but I think we have to say okay what are the details we need to give and one of the details would we don't need to give and this this process of moving away from the box is starts with us you know we have to think about the network differently and I think that's the biggest thing about sdn is to say stop thinking about the boxes starting about the network and the service and when we do that we'll remove some information maybe we'll remove too much and then as you said we come back and say no I need to put that back so I think it's a may have to play with this we have to find the right level of abstraction thank you very much for very useful a presentation or next present early Giulio bara who holds a PhD air and he's an associate vice president for technological augmented research at Florida International University dr. ibarra is responsible for strategic planning and development of advanced research networking services including the development and management of impassive international international exchange for honor for research and education networks and his principal investigator of America's life class-m light as a NSF international research network connection funded project and evo present present this presentation about this m light there we go ready good morning it says okay great great good morning everybody my name is Julio yatra i pronounced my name and status correctly so being in Lisbon and I mean sorry in Porto I want to make sure you hear my name as it's supposed to be pronounced I want to this presentation here will inform you of our experiences with the use of SDN and a project called am light am light provides international and internet intercontinental research education networking services and this is a presentation based on the paper that's on the website authors are myself as principal investigator Heidi Morgan as co-principal investigator and Geronimo bezerra chief network engineer for 4am light ok so first let me tell you a little bit about who we are with our project thank you ammolite is a project at Florida International University it is a project funded by the National Science Foundation through a program called the international research networks connections program this program funds a number of projects for connecting the u.s. to different regions of the world the my project primarily focuses on us to Latin America connectivity there are projects that connect the u.s. to Europe and also to Asia our partners are in Latin America the academic network of San Paolo asp the national research and education network of brazil rmp the regional academic network of latin america red Clara the end of Chile Rihanna and also one of our science collaborators is the association of the universities and research and astronomy aura let me inform you a little bit about the resources involved with am light the exchange points involved with this project ampath is an academic international exchange point in miami florida at interconnects latin america and caribbean research and education networks to other rends throughout the world the Southern Lights international exchange point in some Paulo Brazil interconnects the Brazilian research education networks and also to the red Clara regional network of Latin America and then am light provides the international links that connect the u.s. to Latin America I'll talk a little bit more about the the infrastructure involving am light let me also state that the my project is for Latin America so it also includes connectivity to Mexico with our collaborations partners in California and Texas this particular talk is going to focus though more on the connectivity to South America ok let me tell a little bit about what the am light topology looks like today we're currently operating a set of 4 10 gigabit links that's based on two topologies one is our sdn layer to ring this ring connects Miami some pollo Santiago Chile and back to Miami in in the logical diagram that you see here it is the red ring in the center I mean a green ring in the center the other topology is based on mpls a layer 3 ring connecting Miami Fortaleza rio de janeiro some pollo and then back to miami and that's represented in the yellow I also included a map in the upper right corner those links there are representative of the operators of the submarine cable systems we currently are using two operators and they they provide the physical diversity that we need for this project that we use for the redundancy services that are part of the M light network in the in august of this year we're scheduled to add a 100 gigabit link between Miami and San Paulo and I'll briefly mention that that link will be used for experimentation and then evolved into production services for our project for am light we have we have a number of let me take a little bit about the connections that we the organizations that we're supporting there are 13 different research education networks that use this infrastructure and through their connections into the the the campuses there are over a thousand universities and research centers throughout Latin America that are served by these links so it is a very important facility that that is currently in operation and so I want to share with you a little bit about our experiences with sdn with with that this network so before I get into what we actually did with sdn limite a little bit before how the network was being operated before sdn so with the the coordination or the configuration of circuits on layer 2 circuits this work was mostly done manually with static VLANs there was a high degree of coordination involved it involved a lot of different teams in involved with the different networks that the circuit was provisioned on we use the RT the perv VLAN RSVP protocol we had this capability because on the SDN ring or the ring that would support sdn was using brocade technology and so this was a feature that we had to use but this later on we realized presented some opera interoperability issues with our other partners their network because not all of them use brocade so that that became a challenge for us this constrained some of the redundancy capabilities that we would be able to implement with our network operators the redundancy on these two rings that I showed you in the previous slide one methodology we use was based on Q and Q the other one was based on layer 2 VPNs to be able to do this interoperability and set up the redundancy we had to use some additional ports to implement the redundancy across these rings we were successful in achieving this and the infrastructure was operating quite well so there the in terms of operations the reasons for moving to st n were to be able to and i'm going to talk to you a little bit about this right now in the next slide but it was to really improve our capability to to provide better services to our users not because the network was lacking on any functionality now the two key motivations for for moving towards sdn was improving operations efficiency and introducing network programmability and let me tell you know talk a little bit about each one of these now so in motivation the first motivation with improving operations efficiency we were observing that request for layer 2 circuits were increasing the provisioning process with becoming more complex with this infrastructure we were setting up temporary circuits for demonstrations also permanent circuits for different types of projects so the complexity was increasing as the the infrastructure developed this required quite a bit of coordination with all of our collaborators and you know the amount of time and effort that the network engineers were we're spending was getting to be rather significant we measured this based on the number of phone calls number of emails going back and forth there's a lot of engagement of different network teams to provision these circuits we also were involved in having to work with different technologies that different network operators are using as well not everybody was using Ethernet as their or let's say brocade technologies providing ethernet some people were using SDH and provisioning ethernet over SDH others were provisioning their circuits over over routers based on mpls so there was a mix of technologies and as you can imagine and most of you realize a number of you we've worked with with you on these projects the troubleshooting can become quite complex in dealing with these kinds of situations so we we observe that that some circuits took weeks even months to to get provisioned we've had cases where it involves multiple continents you know South America the u.s. connections out to Europe we had some connections at the Asia as well so we we really realized that something had to be done to improve this the other reason for moving to SD n was to introduce that work programmability into our environment we really couldn't support applications that were interested in having more control of the network and being able to work in a more dynamic fashion we really had little to no support for network of where applications we only were able to provide researchers with visibility on the status of the network using SNMP so for novel applications our capabilities were rather limited with the infrastructure as it was just providing essentially transport to the different network users so I'll talk to you now a little bit about the the scenario that we ended up deploying so we deployed open flow 1.0 and we use the hybrid port features of the brocade switches that we had deployed in our in our network between Miami and and some pollo this was a decision that we made given some of the limits that we had to work with with open flow 1.0 but with there were some trade-offs in using this this feature of brocade to improve operations efficiency we deployed Internet tues OSS orchestrator we use Oscars and the the I DCP protocol for inter domain provisioning of the layer 2 circuits and we also later on added open NSA and made available the NSI protocol which is a standard and we encourage our network users to use NSI as much as possible for programmability we we used internet to flow space firewall and flow space far wall provided a ization layer it's a hypervisor that essentially allows the applications to spin off virtual networks and I'll talk a little bit more about that but this this gave us our first introduction into introducing sdn into our links and this was done last year and it's been a good story and with this slide here I want to show you our architecture a damn light using these technologies so from the from the bottom up if we we look at the data plane that we have here we have our switches you see at the at the left two switches that are deployed in Santiago Chile called Andes one and Andy's too we have two switches deployed in Miami called empath Warren an empath too and the fifth switch in some paulo brazil at southern light and these switches now are are managed through the virtualization layer provided by flow space firewall and we have our control plane integrated with that infrastructure and the i don't know if you can see clearly here but these if i can point with this anyway the the boxes above the virtualization layer you see there are purple boxes labeled sdn IP oh noes fiber these are test beds that are currently operating and each of them have their own flow space they have been allocated slices and they're essentially contained within their address space using the infrastructure so that don't collage it in with each other basically taking advantage of the virtualization capabilities provided provided by flow space firewall the the boxes in yellow are actual applications that are running today and operating the amoled infrastructure that provide transport to the network connected to my so here we are using OSS to provision circuits and those circuits connect to other networks in the US such as internet to connect aes net and essentially have connectivity to other networks that are using these protocols as well and so we have Oscars for the interdomain capability and open NSA based on NSI we have the ability of our demos now are using this infrastructure and we have a new project that I'll talk briefly about later for developing a software-defined exchange infrastructure so these are all implemented as test beds at this time and we have the capability of supporting new test beds essentially as the gentleman before me talked about they can bring their own application and controllers provide their own northbound API and we can support that and that's something that if you're you have interest in collaborating with our collaborators in in Brazil this capability is available today so I'm going to transition now we just talked about the deployment strategy and our architecture I want to share with you some of the findings that we reported in the paper that you have available at the on the website for the conference so there's a number of categories that we use here for measuring the the result of this of this project on the left side here we have our our direct connectors in the my project that are running these protocols we have other networks that are also running IDC p or n SI and then we measured other networks that are not running these protocols to see what the difference is were before and after Sdn was deployed so one measure that we use was average time to provision a new circuit the other one was average number of emails exchanged between network operators before Sdn we measured an average of about five days to provision a circuit directly to our connectors once the SDN services were activated using the orchestrator OES s it took less than five minutes to provision a circuit in terms of number of e-mails back and forth with the different network teams before Sdn on average it was about ten with Sdn now it's zero with other networks that connect to our direct connected networks the before Sdn because you had now layers of networks connected and more engagement involved it took an average of about 12 days to provision a circuit now it's it's it's still less than five minutes to do this number of emails exchanged was about 65 when you're dealing with layers of different networks now it's it's zero so you could see that we have increased our operations efficiency in terms of provisioning quite dramatically with the use of SDN and open flow and the numbers just get worse as the networks extend further out especially if if these protocols are not being used so with you know we the numbers here that you see or the columns as you see here with dashes essentially are the same numbers as you see before Sdn no change and improvement with introducing network programmability we we observed the categories here on the left here Network view provisioning defined by the user multipath experiments and flow controlled hop-by-hop these are different categories that we used to to measure the difference before and after Network programmability was introduced so with the use of s with without the use of SDN essentially all we had to offer are our users was SNMP for for visible visibility and to have just some understanding of the state of the applications on the network after sdn we had we had now SNMP as well as open flow available that applications can use provisioning defined by the user that was not available at all before sdn multipath experiments only static capabilities were available now with with sdn we have full open flow access through a dedicated slice users are able to do whatever they would like to do within that slice and the same thing with flow controlled hop by hop I was another so the main point of this is with with network programmability this is what we have identified as a real step forward with our project now network aware applications will be able to use this infrastructure to really experience some some some innovation capabilities and use em light as a as a platform for innovation so just some lessons learn from this this work some some gotchas for us in working with legacy protocols and old switching line cards they made our deployment more challenging we had to work around this by dedicating additional ports to figure out ways of making these connections without impacting production out of band control plane services for open flow this was a challenge we had to essentially use one of our partners networks to provide IP transport between the exchange points so that we had ban control between the controllers and the switches in the data plane in the future our plans are to explore and add new features especially related to troubleshooting and security as I mentioned we are going to create a software-defined exchange in the am light environment we have quite a few different networks that have deployed open flow and so essentially they're open flow islands that need to be connected and with the sdx capability we're looking at inter connecting these islands over this international infrastructure between the US and Brazil and are also in our roadmap is to migrate to open for a 1.3 some of the features in open flow 1.3 will definitely improve some of the issues we discovered like for example network convergence time the infrastructure when we've lost connectivity between a switch in the data plane with the controller the network convergence time can be significant OpenFlow 1.3 provides some functions to be able to improve that I want to thank our sponsors the National Science Foundation collaborators in Brazil that support em lights and also in Latin America these are our award numbers for 4am light and number of other projects and our documentation is available at this website here Sdn em light net our papers are there you can find out more about what we are our deployment experience with sdn on am light thank you very much okay watch video any question from the audience also a really big improvement well done and your customers are happier yes one question I have is if we marry the two presentations you could think about using open flow southbound from your controller and the interface that you give northbound to the entrance to manage their networks could be based on something higher level rather than then programming flows and you know acl's and stuff and that might actually give you a better level of confidence of the customers doing the right thing and not messing up some acl's that somebody else might be using or something and and sort of try to marry the two so I mean the fact that you are using open flow down to the switches doesn't mean that you need to give open flow up to the N runs and that's just for thought that's true that's true this is a something that we can support today we we have the virtualization layer based on flow space far wall but essentially a researcher or an operator could bring their own application their own controller and plug it into the environment and essentially provide their own northbound API so that that capability is there today vehicle yes the question is really not related to what the gili t was asking is precisely what the security model george or following how you identify and how you assign rights or permissions to the different participants in the in the unlight project to to deal with the or to take access to the to the api's the were you using which is a security moville your drop line in the in the project ok so we primarily we provide slicing capability to allow the user to deploy their their their test bed and and be able to work within that slice so this is this is one way of providing isolation and security between a different test beds now further up on the stack with that that's something that we we will certainly we we have a conversation with the user just to make sure that what they're doing is not going to impact our production environment we also identified here but we actually have a test environment that we would actually connect the users controller and application test it their first make sure that it's not going to create a problem in the actual environment here so we have the Brocade technologies there we have a number of other open flow switches we have the capability of testing the users application before it could cause any any any kind of issues for us one minute so so two quests yeah sorry yes so one thing the operational aspects and the efficiency of that wouldn't really required you to use open flow right so so because you could just do that with netcom really you could just do an open NSA and then netcom control that right you don't need open flow for that so the reason you chose open flow was that to give your customers more programmability of this right or why and really what's the use cases we adopted open flow because it's becoming more of a standard and we have in the network that we connect to in Latin America we had a number of test beds that were already using open flow and so this started to provide a common language in which we can configure the switches and isolates you know create a controller that talks open flow and gives us a way across all the different networks that were using to be able to provision the the layer two circuits in a much more effective way so open flow provided this it could be something else but I think that's a lot more hard and that's creative said in this presentation it adds other problems in operations right well I could I kids well I could I could say that from from our point of view it's simplified a lot of things you know in terms of our we measured efficiency it really simplified the the whole process of of deploying a layer 2 circuit across multiple networks and the the tools that have emerged are available with open flow so for example the the the Oscars protocol the the open NSA the api's talk open flow and so we basically use these capabilities that were available for the academic networks now I'm not saying there's not other things but for our particular community of users and and the resources that were being developed these were available for us to deploy and open source that we could we could make use of ok thank you very much thank you for the presentation again our next presenter will be there think transm who is working for internet for more than six years now earlier he was at the University of Nebraska currently his research interests focus done international engineering and related activities he are he will replace Eric Boyd the senior director of Internet to in this presentation because I couldn't make it this year Oh apps this is not a lot the beginning I think the presentation thank you so what I'm going to do today hopefully in about 20 minutes or so is go over what the Internet to network looks like these days because some of you may not be familiar with that and then talk a little bit about some of the experiments and projects that were developing using primarily virtualization tools with sdn sitting underneath them that was a mistake that's five and which one and this one okay all right so this is what our current network infrastructure looks like each of those large red dots are al to us nodes they are either brocade or juniper switches there are roughly 30 some of them out there these at this point there's been two or three that have been added since this diagram was done they are interconnected at a hundred gig all of those gray lines or hundred connections that that connect the switches together there are still 10 routers that live in the network they're not shown on this particular diagram but the ten routers each have dual 100 gig connections to the co-located switch in the the city that their app and then we show a number of the various connectors and so forth that are that are currently having connections into the into a l2s the software stack that we're employing at this time is a little bit more complex than the one that we used to do there was a point in time when pretty much all that we did at Internet to more or less actually when I started or prior to that was live up here at layer three and you know basically we had a layer three network people connected to it and they we gave him routes and they gave us routes and everybody moved topic and it was a reasonably happy environment what we do now is we have multiple layers of services that we offer we have our most fundamental service which is a basic circuit or wavelength service you know we have something on the order of 16,000 miles of fiber in the u.s. that we have the n88 potentially an 88 wave system deployed on optical system deployed on and and we're happy to make wavelengths available to that are interested in coming at that level so you find a couple of organizations that have utilized that capability above that we have the network virtualization service as implemented with flow visor which Julio is talking about and that's where primarily the rest of my talk is going to be focused around is at that particular layer above that one instance of it is al to s advance their to services and then on top of that in turn is layer 3 and then there's some above the net kind of stuff that I'm not going to talk about today so I don't know why I put a pie in here I've never really understood why you put a pie in here but but actually I sort of do you can think of you could think of this as being the original instance of Internet to so simple unitary thing that everybody understood everybody knew how to use more or less anyway what we're looking at trying to do now is is break it up in a more interesting way and make it make it more capable of delivering not just delivering advanced services but letting people develop advanced services that live inside this infrastructure where we don't necessarily have to be in control or or manage the service or even offer the service we simply give them the resources to create the service and each of those different slices represents an opportunity perhaps for for some group or individual to to create some some tools service whatever it is they wish to call it that provides them some capabilities so basically we're looking to create a situation where we give control of some a virtual piece of our national network to organizations to do it with what they are interested in doing I will talk a little bit about the fact that we aren't doing of doing this at random we do have a vetting process and as you might imagine but what what we hope ultimately is that this this approach to providing an infrastructure and providing a service to the the community that we serve will allow them to prototype advanced applications a little more quickly perhaps develop new services that that we would not be able to do in our production environment to give them place where there is the possibility of doing experimentation and and hopefully have them sufficiently firewalled off from our production network that that that experimentation isn't going to impact the production traffic that we have right now in terms of the development of virtualization there is basically three slices operating OES s which is basically the AL 2 s the advanced layer to service that internet two offers that's our fundamental layer to service that we also run all of our layer 3 traffic over and so forth Genie site manager which is a service that Genie operations folks run and oh no switch I will you've heard a little bit about already but i'll talk more about later on so you saw a version of this actually from Julio as well this is a somewhat different although very similar approach basically we have our switches these are the broke aids and junipers there's 30 40 of them however many there are they talk open flow to flow space firewall okay full space firewall in turn talks open flow up to a controller that lives inside one of those kind of application worlds so right now we're you the knox control or inside of Oh ESS there's another instance of it there that also uses Knox oh noes uses a some other I'm not sure actually what controllers they use and so forth and then there's an API that goes up to the actual interface to the to the user community you'll see this this is going to show up in a couple different places here it's basically the same every time it does but it just gives you a sense of where it where where this hierarchy goes and again what we're what we're really focused on is right here so right now we are in production support of open flow one point oh we have 1.3 in testing both in in testing and flow space firewall and 0 ESS that testing is taking place in an ongoing way I mean it's it's sort of give and take between the vendors and an hour developing development community we are experimenting with broke aids 5.8 be implementation of open flow 1.3 that I'm not sure if that's entirely accurate there's there's been quite a lot of movement on some of the revision levels with brocade so I'm not sure if I 58 b is the correct one at this point but but the point remains that we're working with them on that and we are continue to work with juniper on on implementing their the requirements of open full 1.3 on their boxes as far as hypervisor support right now it will it will do both layer 2 and layer three matching we have a vendor supports for for those provisions of the Juniper code and sometimes those things change pretty quickly so don't don't take it as gospel that those numbers are exactly correct at this point but they're probably pretty close Oh ESS 116 is the production version it does have a layer to trace in it if you're interested in checking that out one of the things of course it's always difficult in layer 2 networks is understanding what what pads you're taking and how to how to discover paths for diagnostic purposes and so forth so that that could potentially be useful and we are we are accepting third-party controllers as I said but as I also said we aren't doing this sort of just because you show up on our doorstep with a controller that would be a friendly thing to do I suppose in some instance but our production people might not like it basically if you want to get access to a slice of the Internet to network you contact a knock knock at internet too tight ed you asked for and in subsequently receive a question error that we have developed that basically goes through and I don't know you know what all of the questions are at this point but basically tries to determine if you if you've got a Bible a viable option that might work we expect you to download close base firewall and work with it in your environment and test it make sure that your application works against it correctly I'm sure for instance Julio did this at great length with their stuff before they before they started doing the work that they've done with the virtualization tools you submit your package to the knock and it's you know it's always helpful to have documentation I mean you're you're a engineers almost certainly know very well how to run this and I am a hundred percent positive that they wrote it in such a way that it is completely obvious and transparent how that application works but nonetheless a little bit of documentation is useful to the the NOC folks who will be testing it logging being able to log you know errors if if they should by chance occur is also of course very useful the Internet to knock will test the controller against our test environment and if everything that's out correctly they'll deploy it and give you a slice and off you go so these are just basically the kind of things that that were that we're hoping to to find from whoever submitting it the most important piece of all of this is the last one you know a little patience always goes a long way in these kind of activities because it is it is something that's fairly new and and it's it's it's a it's a way of approaching doing networking that is fairly new and subsequently it's perhaps not always as well understood as we think it is just a few a few things that are probably important you really do have to be able to run this stuff against a brocade or juniper that's what we have right now and you know you really need to test against those devices testing against beasts which is probably it's okay to you know for a whole lot of very good reasons but it is not going to necessarily tell you if your stuff will work with our switches so you really need to test against that environment your traffic will not be mixed with our production traffic in the same slice so you you have to when you get your slice it is empty there is nothing there you have to be able to generate traffic if you're going to figure out what what's happening the internet to knock runs your controller you do not run your controller in this test environment that may change over time as comfort levels grow and so forth but for the time being that's the way that it's that it's being operated we often ask how good our open full 1.3 support is taking a bit of history from and r afford our OpenFlow 1.3 support is very good as long as it's open flow one point oh and for those of you not from Detroit the the references to the fact that you could buy a Model T in any color as long as it was black so you know we haven't got unlimited servers either if you need oh if you need a whole lot of servers you're probably going to have to figure out how to provide them for whatever purposes you might need them we have a few but not not a lot moving along in 2015 we continue to to to work on this stuff one of the goals for 2015 is to get NSI built into l to us right now it uses IDC p and for a whole lot of reasons that's that's probably not a very good idea any longer it's on the roadmap I don't know exactly when this is going to happen there's testing going on and people are getting comfortable with various levels of it and we'll see where it goes the owners deployment actually many of you may have seen it was a press release i believe earlier this week about the fact that the that oh noes deployment has in fact occurred and it is working and i'll have a little a couple more slides later on to give a little more a little more detail about that continue to work on 1.3 continue to support both of the the OSS and flow space firewall tools which are by the way open source people are more than our welcome to a download them and use them to whatever degree they want and and as we get more opportunities to provide slices and deploy slices for people we hope that you know we sort of get better at it and be able to kind of enhance that process so it's a little quicker and a little simpler and so forth we'll just skip over that we've already seen that so what well yeah what the next couple things I want to talk about or just a couple of ways you might imagine using our our environment to solve certain kinds of problems so one problem that very frequently comes up as again as julio pointed out getting getting circuits for instance across multi-domain environments can be something of a challenge you know I mean personally I don't mind emails although by the time you get up to the 50 and 60 emails to get a single circuit built it does get just a little bit frustrating on occasion and and and any way that we can that we can work to to achieve the kind of goals that he was able to achieve zero emails is pretty is certainly desirable so so one of one of the things you could imagine doing is is use virtualization to create a multi domain layer to service and and and I'll go through in some detail here exactly what i mean by that but it would presumably span some combination of campuses networks exchange points and renz whatever whatever the scope of it might turn out to be and and so what do you have to do well you know you got to have some common commonality you probably all have to have open flow running you probably all have to have a certain willingness to to to collaborate with each other to trust one another well enough to actually provide provide that level of service etc it's got to be some understanding about local control and that you have the ability to pull this stuff out if it turns out that it is creating a problem I mean one of the things you really want to be able to do is protect your network again you know protect your production environment against the vagaries of experimental control and so you know you need to have fast back out if you really need it the real goal here is you use the words elysian I may be an illusion i'm not sure you want to basically give an organization the ability to make it look like their network spans all of this environment so so what you're really doing here is you're you're not actually prototyping a multi-domain layer to service what you're really doing is prototyping expanding your layer to service across multidomain so it ends up looking like a single domain service that crosses multiple boundaries and so you don't lie any longer have the issues around how are you going to exchange content between multiple domains because you've effectively made it a single domain for at least that that virtual slice so what do I you know what i mean by all this well so you've got a switch I mean imagine that's man lam okay a switch that I run so I could put this whole you know stack of stuff on top of man land and operated as an open flow enabled switch with flow space firewalls sitting there and so forth and then I might decide to do the same thing in a second switch maybe the the wick switch in Washington or in McClain and and I might talk Julio or someone into doing it into a third one I'm he already how so I don't have to talk them into it and and so now you've got these three exchange points that are effectively operating this set of tools okay so that's all nice that's great you know that maybe it helps them control stuff in the switch or not I mean maybe it you know technically it's a good plan just as an operator you know doesn't matter you can tie these together and and actually this is a little bit premature because initially of course you'd tie them together within aside just sitting off the you know some some just sitting off to switch directly off the hardware level but you could also you know you could use NSI to Tanner connect the these environments and use that as the tool to build to build circuits across domains and so forth you know truth be told that would work just fine but you could also imagine doing something like this you could say well you know let's let's sit down and talk about this we want to actually run say we want to run Atlantic wave okay something julio's been calling me on the phone about and saying you need to have a meeting with me and I keep ignoring them belated so i'll talk about it now so imagine you wanted to run atlantic wave this way so you could say okay let's create a virtual switch in each of these in each of these instances of flow space firewall and let's put up a controller will call it the a wave controller or something and now that now controls a certain set of resources in each of these physical switches and so you don't now have to talk to mainland wicks and am half in order to get a switch belt you just go to the VA wave controller and you tell the switches build me a path and it does so you've essentially flattened this whole thing out from three domains down to one domain I mean you could do that in fact we've sort of played around with doing that and we should play around with a little bit more it doesn't even matter if these are individual switches right this can be a whole network this could be the Internet to network or this could be the an light network or whatever whatever instance of a network you want or to think about with multiple switches in it and then some others and you could expand this out across whatever whatever whatever extent you're comfortable with in terms of being able to manage that many switches and so forth and in fact this is sort of what the genie controller does does for us right now they have that's what they're doing in their in their slice of our network essentially you could also let me think about this one a minute I remember what that one's for ya okay you could also now not think about this as just crossing exchange point boundaries but expanding networks into other environments okay so so now you've got you know you've got your your you know your a wave little instance going there that just connects up those exchange points and and allows you to to get paths going between Miami and New York very very efficiently if you want to but now you can also say well you know what we can give we can make another set of virtual switches here if we wanted and we can put in other controller up I mean I use o es s as the instance of controller doesn't need to be 0 ESS obviously it's just one that DZ to write in boxes for one thing and and that could turn out to for instance being on or genet right nor genet could work with us they could expand in some in into a set of places within the internet to network that were of interest to them for whatever reasons I don't know what they might be and now they don't they don't now even have to think about traversing man land right because while their traffic would go through there they're not really traversing Madeline they're they're utilizing their slice of that switch which now looks like a piece of their network and the these little green boxes all look to them like they're actually pieces of their network so what you've done again is you've taken this whole complex set of switches that are interconnected and have different administrative controls and etc etc and you flattened it out and made it look like a single thing two three okay well we'll talk fast so let's anyway that that's sort of the the conception a a conceptual thing you could do and to some extent we've experimented with a little bit of that and and will continue to do so as I said we've also gotten an implementation of almost done so oh noes is something that we worked with oh n labs to develop or they did a lot of the developments we're helping them deploy it they have a service called Sdn IP so you know as long as I've been doing this stuff with internet too which is longer than I might imagine sometimes there's always been this this sort of little fringe group that's been sitting there going why do you need routers we you know just build a layer to network and put a route server up and don't don't put these big huge expensive routers out there anymore they're just a waste of money that interfaces or horribly expensive we can do this some other way so what these what these folks that are in lab don't have done is created a an SDN base or an open flow based tool that in fact does that to to some significant degree so the initial effort of the initial prototype that we that they is you don't use all that utilizing the oh no slice is some folks at Clemson Duke Florida International Indiana Giga pop Indiana Internet to the max facility at Maryland and the University of Utah they've all deployed some sort of a small routing engine doesn't have to be any big deal it could doesn't even have to be a real router it could just be instance of quadra or something and a person sonar node we deployed this slice they've connected up to it initially we're doing this with private a esas and private eye peas just because that would seem like a one it was just simpler to organize that way in terms of getting figuring out who's addresses you were used and so forth but we will quickly be transitioning it into using public IPS and and eventually running real traffic on it and I'm just going to skip this and go to the interesting parts here so this is what it looks like essentially there's a small box hanging off the salt lake city switch there's a number of them clustered around down in the southeast among different switches down there Jacksonville and a couple of them hanging off Atlanta a couple hanging off Washington one hanging off Chicago and not sure where the internet to one is and then there's these some oh noes boxes up here and they basically oh yeah and then there's this actually is also implemented at this point this is a whole South American version of it so basically what happens here is that you have these you have these little routing boxes sitting sitting off over here right and they basically inject routes that go up to to the BGP speakers up there right so you have to do bgp right you mean you can't get away from that but then what oh noes does basically is it takes that bgp information and it converts it into layer 2 and puts in rule sets to move the traffic so the routers are never involved in the actual passage of traffic okay everything everything that moves from that persona or box for instance to the one on the top happens inside the layer to network inside the slice without ever having to reference out to the routers as soon as as soon as the environment figures out ah this is what they want to do they build the path and then the traffic goes that way just kind of a very high level and no doubt lacking in detail of description of it but that's essentially what's happening here and essentially what you've been able to do them is create an environment tab that doesn't have routers but has routing now you're still I mean you're kind of saying you still have some bgp speakers around the edges because you have to do that but that's about all and and this actually is some interconnected at this point to a European instance of this as well as the u.s. instance and it's connected to the the South American instance that I showed before so we actually have this running between you know Europe u.s. South America and every indication I've seen in the notes and such is that it that it works that it's working just fine and I'm you know we will be continuing to work with these folks to to develop this to to understand how how it can be improved and implant you know enhanced and so forth and no doubt there will be a goodly number of reports and discussions about it at future events so I'm done thank you for the presentation any question from the audience hopefully I can answer them here so what's ya nice nice to see routing without Reuters but the question is how reliable do you consider this communication between with switches and bgp speaker self they also basically it's sdn controllers essentially has to be to have this network operational because if you have a routing protocol on top the same box right so if some part of the network fails or you don't access some pop or whatever you don't lose the routing functionality yeah you know I'm going to have a little hard time with that because quite honestly I'm not that familiar with how the internals of SDN IP work but you're absolutely right i mean if if these if any of the the route announcements from the bgp speakers fail at any point obviously you're not any longer going to be able to run traffic into that environment so you're in fact i believe they're doing this with multiple multiple backbone devices you know redundant servers were done you know and they're trying to get to the point where that you know that whole oh noes infrastructure is as redundant as it can be made to be and you know presumably if you were doing this in a production environment you would not be doing it with a single link you know coming across like this right you're going to have multiple links into the environment you're going to be doing multiple announcements in order to make sure that the the information is there and so forth and and you know doing the same normal things that you would do to try to create any kind of a production environment is my understanding as I said I'm sure you're going to see a lot more detail about how the onus activities develop as as they have more experience with the test bed and and more time to to kind of internalize what's going on and report it back yeah maybe the last question I have a question too personal so am is that also an idea about what is what is the architecture the performance measurement architecture for such kind of for this yes oh well right now I mean basically all they're using the performance the persona boxes for is just traffic generators essentially just to you know to get some to have have some have something out there that you can verify yeah in fact you know to sit there traffic is going from A to B and then so forth and so on ultimately again if this becomes more of a real environment of production environment then you would start doing / sonar meshes and and and dashboards and you know all that kind of stuff to verify where you know that all the links are still available and checking Layton sees and and that sort of thing I don't actually know the answer to that right now quite honestly I haven't I haven't had a conversation with the owner or the o/n lab guys about exactly what they're doing to to verify yeah you know honestly I think right now they're not very worried about performance they're really worried about does it work and and once you get once you get past the yes we have in fact gotten reliable connectivity we understand what we have to do to get new sites hooked up and so forth and yes we can start transitioning this into using real you know real production traffic then they'll start being I think a lot more detailed about how they're going to do performance verifications and so far i recommend keeping keeping conductor and discuss in detail what was the real usage thank you very much for our presenters or three presenters for the nice presentation and the couple of reminder please visit the poster presentations and demonstration and give your evaluation feedback and now lunch thank you 