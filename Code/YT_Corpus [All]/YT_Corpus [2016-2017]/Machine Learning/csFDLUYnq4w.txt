 I'm going to demonstrate machine learning in a simple experiment here live first I have to create a new experiment there's a list of templates I can choose from the list here is quite extensive there is an experiment tutorial or what I'm going to choose here is a blank experiment and this experiment is presented to me as a blank canvas in the center as components to choose from on the left side and properties on the right side what I first need is a name I'm going to call this the income experiment and there is the option to import data so there is a data reader I can just drag it from the left component list to my canvas and on the right side I can now choose from various import technologies so all the data available to me on the internet I can basically import into my experiment for the sake of time I'm going not to import any data I'm going to use pre imported data here in a adult census income to a database this database I can visualize by clicking on the circle and selecting visualize from the menu and you will see the data here I have thirty two thousand five hundred records of data say giving me a lot of information about census data available age of the person education mercial status occupation relationship race up to the income each part of the data can be visualized as a curve so here is the age distribution of my database and as you see the income which is going to be important for us has been split into binary value people earning more or less than $50,000 this is because true or false or binary decisions are a bit easier for machine learning or self trained models to predict then exact values and for the sake of time we're going to going to resort to this binary model so what I want is to have an algorithm train itself to be able to predict the income this income for values or for people it has never seen combinations it doesn't know based on these 32,000 records it can use to learn from so what we're going to do is first we need to only select a couple of fields I use the data transformation manipulation functions there is a project columns function I simply hook up the data to this project columns function and then I launched a column selector and tell it to only use the age field the education field the mercial status field the relationship field we want the race field the sex field and we need the income field with these fields selected I have now filtered my data to only the fields needed in my experiment now I want a machine learning algorithm that is good at predicting this kind of data and you see in the machine learning part of my selection menu here there is a lot of initialized model there is this classification model and there is the two class boosted decision tree two class means it's great at predicting true or false scenarios as we have in our model and what we need to do is we need to train this model so here is a trainer that is capable of training a model we just connect our model to this trainer but of course it tells us it needs data to be able to train the model so what we want to do with our data we want to split the data there is a split data function and we connect our data source to the data splitter and we just tell it to use 80 percent 0.8 of the data to be fed to the left output here result data set 1 and this one is 80 percent of the data we have we feed into the our trainer and then after that we need to tell our data model trainer that the field called income is supposed to be trained so the model the trainer now knows that the model is supposed to be able to guess the income based on all the other data it receives after training the model we want to score our model see how well it has performed and then we want to evaluate our model to visualize its performance just connect these together and we basically have an experiment that allows us to train train and then score a model the score model function here is still unhappy it tells us that it needs other data to compare how the model has performed so these twenty percent of the data we didn't use it in our data split we use for our score model function so the model scoring function has data it knows that the trained algorithm has never seen before and it uses that data to find out if the algorithm actually is capable of guessing a person's income so now we save this experiment and we run it meaning all the steps we have now put on our canvas are going to be executed in the cloud so not on my local computer I don't have the computing power on my laptop here but it is actually quite quick in the cloud to execute this model and I can now visualize the evaluate model point here and I'll see a curve the curve leans to the left which means that it is very precise in predicting or quite precise here in predicting the income of a person would this curve be exactly in the center diagonal it would mean that the model is absolutely guessing randomly and having about 50% of proper gases would it lean to the bottom right side of our field here it would mean that it is very precise and always guessing the wrong answer which doesn't make it a bad model because if you create a model that is always but very very predictably wrong you can use it and just always take it's the opposite of its answer to fulfill your you're computing need so now we have created a model that is about 80% right usually here as I see there is more detailed data down here that I'm not going to explain now but we can now set up a web service so meaning we can tell our system to save our trained model in a finished trained model that is going to be reused and published as a web service I want the entry point of our web service to point to where we actually feed data into our experiment our model our trained algorithm the output be the answer of the scoring of our model meaning seeing how well what the answer would be and how precise it will have been one thing I'm going to change here is I'm not going to provide the income at all because the model has now learned to be able to predict the income by itself the web service basically is a function in the cloud that allows me to connect any software to this function and have my software ask this service this web service here is some data about the person what would the income of that person be and the web service responds with a value and a percentage of how sure it is that's why we connected to the score model function and that means it's usable in other programs I have created a programmable interface now that allows me to predict incomes I save this I have to run it once to be able to publish it I publish my web service after it's run and then I get all I need to test and to productively use this web service in my other systems this may take a second here but here is the interface so using this in these two interfaces here I can now talk to from any piece of software in the cloud or on my computer here is the code needed even to this train this machine learning train model or here is a test function I can now enter a fictitious person let's pick 44 years age doctorate married safe spouse relationship is own child and the race would be white and the sex and female this person it's older date I'm going to deliver it's going to be evaluated by our trained algorithm and the result is this person would earn more than fifty thousand dollars with the chance of over 90 percent here 0.9 that's the accuracy that the algorithm predicts for this answer from our trained model this concludes this small demonstration of machine learning and I hope it showed how easy it is to get started still it's a complex field of data science but it is very easy to get started with a small model and grow from that for any system you want to create 