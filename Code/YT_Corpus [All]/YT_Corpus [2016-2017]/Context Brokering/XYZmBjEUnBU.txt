 in this episode we talk about building an API for many different devices when to build native apps and how to automatically pull metadata from various sources actually we talk about more than that but you'll see hi and welcome to the scalar code podcast my name is Christophe Lim Blair and I'm the host of the show you may know me by now we've got about 22 episodes and this is the second episode of 2016 I want to wish you all a very happy new year I hope you had a fantastic 2015 and that you're ready to get some work done in 2016 I'm personally very very excited about 2016 because I've got a major announcement that I want to tell you about but first I want to welcome you Skylar and I want to ask you how is how's your 2016 going so far do you guys have some exciting things going on at plex for this year do you expect some big big improvements or changes yeah we are super excited in general excited just to be here talking to you today Christophe 2016 I think is gonna be great for us I'll get in trouble if I spill the beans and anything about the place so I'll be doing my best not to get a couple guys who've been doing the CES tour and all that stuff but yeah a lot of big stuff in the cards for us for sure see my job is trying to get that information out of you but I'll try not to make you spill the beans and get you in trouble speak speaking of spilling the beans I want to thank my sponsor Linux academy.com for sponsoring this episode but also for hiring me that's right that's the major announcement Linux Academy just hired me this week we've been talking about it for a few months and finally finalized it I'm super excited and that's why I think that 2016 is gonna be an incredible year for skeleton code 2015 was already fantastic and I'm ready I'm gonna be keeping the show and I'm gonna be doing more of that so the show plus links kami at the same time is just a super exciting for me I do want to say that you know the reason that I joined Linux Academy is because I truly believe in the way that they teach the content that they teach and they cover courses on Linux AWS DevOps and OpenStack it's not just something you sign up and you pay a monthly fee and you just kind of watch the videos and then go on your merry way you actually you get to practice on real servers so you're looking at the content and then you have that you apply it you're not just memorizing you're actually applying and if you want then you can take that knowledge and go on and get a certification which makes you more valuable in the workforce or just in general it helps you understand more of what's going on so I just highly recommend it you know I wouldn't have joined it if I didn't believe in it fully and really believed in it so I definitely check it out you can get your discount that's still going on for twenty two dollars a month at scale your cocom slash Linux Academy and I look forward to see you seeing you there because we do have a community so say drop by and say hello but anyways Schuyler back to you back to this episode I getting really excited here and I'm super excited to have you on the show as well so thanks a lot for being here can you tell us a little bit more about who you are how you got started with plex and what you do there yeah so I got started with plex actually because it was started by a few friends of mine who I'd worked with before in the past so we had previously been doing some let's just say less exciting work a little less consumer focused more of an enterprise kind of thing they kind of went off on their own and start this fun media consumer focused products gonna keep an eye on what they were doing and when it became obvious that they really were gonna be able to turn this into a real thing I had jumped at the chance to join him so I've been there coming up on five years now she started to believe how long did it take before they started getting some of the traction and and you jumped onboard it was probably in their opinion I'd say it was a real thing for about a year before I joined and as a hobby it goes back gosh I don't even know a couple years before that oh yeah so it's not one of those things that you know the media writes up about it and it's an overnight success which doesn't really exist in the first place so it's always interesting to know how long things like that do take to develop and sometimes you know you'll go for months and nothing happens then all of a sudden it takes off so it's really interesting and what do you do at a plex so over the years we've done a little bit of everything we started as a really small group now that we've grown my main role is as one of the directors in the engineering organization on mostly cloud things so we've got a rails API two servers in the clouds some DevOps things and just for good measure the Roku client which has always been kind of a little pet project of mine so shout out to Roku I think you were introduced to me as the director of stuff in the cloud or something like that like that's the guy I need to talk to you so can you tell us a little bit more about Plex I know it's a thing for media but what specifically can people do with it yeah I think the simplest explanation and I props here and make sure it is your media everywhere so basically what our goal is to give you one place to kind of organize your media and then empower you to access that anywhere so you feel like everybody these days has some media on their computer somewhere you've got photos videos music so we want to give you one place to kind of organize that and then you can access it anywhere pull it up on that computer but also pull it up on your phone on another computer in the house on the TV on to work while you're on vacation 3,000 miles away kind of your media truly everywhere so how does that work you have one central location where users upload their videos and sound music or whatever it is or is it stored locally on their on their computers how's that work yeah stored locally is is the main model so you'll download plex media server on your computer I use computer sort of loosely there it could be Oh laptop could be an old Mac Mini that you tossed into a closet could be something like an as basically anything anything capable of running software can probably run a plex media server and the reason we chose that model is that that's basically where the media lives so we're a little difference in that regard I think to a lot of startups especially me being the the cloud person to be telling you that May first thing you need to do is install some software on your computer because that's where the media lives so if I've got media at my house I'm sitting right next to a time capsule right now that's got a bunch of photos and music on it so the simplest way is for us to have plex media server running kind of nearby that data and then expose it everywhere well that probably saves you quite a bit on cost as well because you don't have to store that on the servers or maybe you do I don't know we'll learn about that in just a moment but what so you have a plex media server and then you have the clients that connect to the server so that's the main difference between the two the client doesn't actually store any of the files or well except when it's transferring them but the server has all the files is that right exactly yeah the the clients kind of have gotten smarter and smarter over the years but the idea is the clients can be fairly dumb and that has allowed us to run clients all sorts of places so you know iOS Android sure but also things like Smart TVs that aren't always as capable as something like a phone or a computer DLNA clients yeah Xbox Playstation you know pretty much pretty much anything can act as a client in that model because the clients are fairly simple just consuming the media we're gonna talk a little bit more about that actually a lot more about how you're able to to handle so many different kinds of clients and what approach people should take to if they want to build an app like that or if they expect a service to live on so many different clients so I'm sure there are some things that you've roadblocks you've run into that you hopefully can share with us but so that sounds great when you have a media server that's really close to you right maybe it's in the same house or right next to you like you said but what about if you're in a different country you're thousands of miles away how do you still stream quickly how do you avoid latency issues and things like that yeah it can be a problem in the simplest you you are gonna be capped by your upstream bandwidth so if I install plex media server at home and then I go on vacation 3,000 miles away I can stream but if my upstream bandwidth is terrible then it's gonna be a limiting factor there are a few ways around that you can choose to sync content before you leave either to your phone or to the cloud we have a product called cloud sync that would basically say I know I'm gonna want to watch that so I'm gonna sync it to the cloud by the time I get there that means I can stream it directly from the cloud and that's using my own personal cloud storage so whether I've got Dropbox Box Google Amazon you know any of those I'm sort of choosing to store an optimized copy in the cloud so that I'll be able to stream it without worrying about my upstream I actually did have an issue like that because every time I do an interview like this I really want to get as hands-on with the product or the company as possible and I'd never used flex before because I haven't really watched that many movies or I don't know I just use different kinds of ways of listen to music and things like that but my brother does and he's been talking about it for a while probably over a year now and it always piqued my interest how does this work this is really cool and so I installed Plex on my computer or actually it was in the web browser and we'll talk more about the differences there but so you have an app that Plex is that TV that you can load in a browser and then you can share your libraries with from people so he shared his library with me and I was streaming a movie sometime during the evening and at first the quality was great it was streaming purpley but then it started buffering a lot so I kept having to gradually lower the quality so you said a few ways to fix that that issue but do you are there any other ways that you guys are envisioning that could help with that problem because like you said the upload width is usually really capped and it's kind of small so how do you work around that yeah right now is kind of choosing ahead of time to know you're gonna want that available externally and then sort of pre transcode it that way looking forward we'll continue to investigate ways we can make that better in the example you gave you kind of manually stepping down qualities it's possible that we can kind of optimize that for you and say well instead of you noticing that it buffered and changing can we do that on the fly that's that's the thing that we'd like to play with yeah it's it's an area that we are actively looking at right and we're now going to talk too much about video in this interview even though it's super interesting I already have two other episodes that you can check out one with Wistia and one with Netflix where we cover transcoding and streaming and that sort of thing so I feel like we already have a good bit of content on that I want to focus more on different things but do you ever envision actually moving from this local host to actually uploading on the cloud your own cloud like that and then slapping a CDN in between and and doing it that way does that does that make sense for you guys or is that going to be way too expensive it's it's at least interesting enough to think about I'd say like I said right now the most compelling reason not to be in the cloud is that the data is not in the cloud like my most of my media collection is stored at home anyway so it makes sense for the server to be home but that's something we're keeping an eye on it people are increasingly storing media in the cloud and it's it's interesting enough to think about at least sure okay so moving on when you install it locally how does that work do you set up some kind of like you call it a server but how do you how does that work on installation yeah basically the the media server itself is a software package written in C++ they'll run just about anywhere Mac Windows Live xn as platforms running on various flavors of arm then pretty much anywhere so you basically just install that and run it and then it will open up a port that you can connect to how do you secure that especially if you start sharing the library with different people yeah so when when sharing enters the mix that's when kind of the cloud starts to become more a piece of the equation so we have a service at plex TV so if you go to just plex that TV that'll be kind of our main marketing site with downloads and all that but it's also where we're hosting the API so sharing basically works by you install the plex media server on your computer and then it goes and talks to plex TV and says hey I'm a new server I belong to so-and-so and here I'm available at this IP address and this port so that kind of connection information is stored at plex TV even though none of the content is so now oh your brother who's at a different location different IP address we store that sharing information at plex TV and then when he connects he'll talk first to plex TV and it kind of brokers the connection it'll say oh so you you've got your own server which you know about but you also have the shared server it's currently at this IP address and this port so it's kind of brokering those connections and also serving as authentication that's what a token based authentication scheme right ok and I actually checked the networks or network connections before this interview and that's when I could see there was a primary server connecting and then shortly after that there was something called Titan and Titan had a different address that it was connecting to and it was switching from the primary to the Titan and so I was like hmm what is Titan then I asked you and you're like well it's probably the client that you're connecting to I have no idea what Titan is but that's probably what it is which which was interesting I'll have to ask him if that's what he named his could you manually actually name that yeah definitely yeah so out of the box will will try to kind of set some defaults and depending on the platform we might be able to ask the the OS we're kind of a friendly name but you can always give it a manual name if you want so yeah I would guess that someone shared a server named Titan with you and so when you go on a plex TV and you check the HTML code you see that there's very very little code actually on there but you are loading two different JavaScript files and then all of a sudden all this data flows in and all this HTML flows in I'm assuming that's the API can you talk a little bit more about how that works yeah so apoplexy TV it has kind of an amusing history but basically it's just the the front end for a single page application in the JavaScript application so the shell of it is really small really simple just kind of exists in order to get that authentication token and then pull down the the main app which none of the big javascript file it pulled down and then it's kind of off to the races that's using the API to get a list of servers and once it gets that list of servers it'll talk directly to the server and say you know hey it's me it'll authenticate and what content you have in your library and kind of get that first-class media browsing experience what's powering the rails API what kind of architecture do you have behind that the the rails API nothing too too exciting to be on honest is disappointing but it's it's kind of evolved over the years when it was very first created Plex the TV was called Michael X back then and it was mostly just a really simple C it was rails 2 back then I think really simple rails 2 application to just kind of crud of having servers and then choosing to share them it's growing up a little bit since then upgraded rails and but nothing too too exciting technology-wise it's a rail stack with unicorn and sidekick for workers and what else is interesting I don't know what where are you hosted so we've actually two of our earliest employees came to us from Engine Yard and so they got a set up on Engine Yard years ago and we've been happy engineered customers ever since so it's built on top of Amazon so it's ec2 instances under the hood but managed through Engine Yard to give it a little bit kind of simpler management can you think of or can you even share the kinds of stats that you have running on those I like the number of requests per second per month or something like that you know the other day I made a point of looking that up so that I would answer because I knew you would ask I totally forgot I think I've got it better let me see yeah yeah so like one of the one of the more common endpoints looks like we were getting about 21,000 requests per minute on that endpoint so that kind of gives you a sense obviously times n endpoints but yeah so when I'm trying to think of you know you have the JavaScript you the rails API that's for my desktop or laptop what about for cell phones or smaller devices like that do you build a native application and does that communicate with the rails API how much of it communicates things like yeah yeah definitely so I'll work backwards on those so the the applications the client applications generally speaking start by talking to the rails API they talk to plex TV and that's mostly just to kind of discover what servers are out there especially I think if it's on my laptop my IP address might change my port might change all these things so it's kind of step one is talking to plex TV but it's mostly just that initial step to get the list of servers and their connection info from there the client is usually talking directly to your plex media server so it'll kind of be step one and get a list server step two and from this point on mostly talk to him directly to them as for native the answer is mostly kind of all native and therefore bespoke for each platform not a lot of shared code which I know is something you're curious to talk about neither either now or later but yeah mostly native on those platforms is there a reason why you should so do that yeah I think we've actually changed a little bit over the years but I think for us it was mostly just putting user experience first kinda wanting a first-class experience and for us that usually meant going native and really specific on each of the platforms we like to say that rather than building kind of one app and having it run on 20 different platforms it's kind of the same app with the same look and feel even if that was a nice Plex look and feel just wouldn't be that satisfying instead we would rather do the old possible plex app on each platform so when you're on your iPhone it feels like Plex but it also feels like an iPhone so if you went back and forth from the iOS app and the Android they're similar and they both feel like Plex but they also you would know which one was which even if you took away the the chrome of the device and they definitely feel platform appropriate more recently we have kind of accepted the wisdom of seeing what we can share between those because that arguments mostly about UI more than anything else frankly so we have experimented with taking some of the kind of complicated bits and seeing if we can write those as shared library and natty nothing I've done that and you have that experience under your belt if somebody was following your footsteps would you still recommend taking that approach is there anything you do differently yeah honestly I would probably do it the same way for a couple reasons one of is that my forms benefit from that sharing anyway so if you were just talking about iOS and Android 2 that is it's you know sort of a known arts on how you might build a shared library those could both use but when you start talking about you know Roku and these Smart TV platforms it's just kind of different languages harder to share so that that's one reason is we've been kind of knowing that we were only gonna be able to share on a subset of the platforms anyway might not have leptin and the other one was just that it was it was hard at long term maintenance it's gonna be a big win but there were some real headaches on building those shared libraries so if we had tried to do that from day one I just worry that it would have taken us longer to kind of get a nice app out to market mm-hm did you have to to build different teams to build these different apps or did you kind of adapt and learn on the go or how'd that work yeah I we we tried to cross pollinate for a lot of reasons but at the end of the day it is kind of a team for each platform for the most part so we've got an Android team we've got an iOS team and they definitely know each other and get along and talk as much as possible but at the end of the day it's mostly different people working on those one question we get sometimes at Lenox Academy is why should I pay for this when I can just google for answers or watch YouTube videos that cover a similar topics and that's a great question the most obvious answer is because our instructors have carefully laid out all the content in order and in the same place so you don't have to look for it plus the content is updated so you're not stuck with outdated information but that's not the only value you get from it you also get access to three important things first the community we have a community where students and instructors can interact stuck on a problem will help pass their certification we'll celebrate with you this also ties into the second point which is instructor help again if you're stuck on a problem you can email support directly and get help or again you could go to the community the third big one is our hands-on environment sure you can learn by watching our YouTube video and probably forget most of it or you can jump in our real servers and practice what you just learned a minute ago that way it's fresh on your mind and you'll remember how you did it we're adding lots of great new courses which you can access with your unlimited account for only $22 a month sign up now at skeller cocom / linux academy and drop me a message in the community I really look forward to seeing you if you're not sure whether this is for you or not send me an email at Kris at scale your code comm and I'll personally help you figure it out go to scale your code comm / Linux Academy and I'll see you soon it seems like we're really making advancements and trying to bridge that gap between the native feel and the web-based feel where you have different things like PhoneGap and whatnot but I don't feel like we're quite there yet do you think it's ever gonna be really really close I am a skeptic I'm rooting for it because I I want to live in that world I I want PhoneGap to be this awesome experience that feels native right at once run it everywhere so I love the people are working on that and I I hope that it gets there in the short term I think I'm just I don't know if I'm cynical or skeptical I'm right how much of it is native so I know that you said a good bit of it is especially the designing that sort of thing but how much of it can you keep on the device because every time I've tried to build an application and connect it to a cloud or something like that you do sometimes kind of feel that latency in between the two how do you reduce that latency how do you make it fast it's in that sense I would say it's mostly native with which helps so I mean we're certainly getting data over the over the network via the API but that is kind of unavoidable for us so can you get a sample of what kind of data well so say you're you're browsing the library were mostly returning that as XML so we used to have an XML representation of your say photo library with kind of rich metadata as you drill down and kind of going from you know trying to one thing we certainly try to do is tune how much metadata and how big that XML is based on where you are in the browsing hierarchy so we need to kind of have two options where one would be send everything right off the bat so that future browsing is really fast but that initial load is painfully slow so I think we've kind of erred on the side of try to make that initial request small one given to kind of render that step of UI kind of a I don't know a level of detail approach how much of it can you actually cache we probably more than we actually do I think we've been nervous about caching too much just as a lot of the library stuff won't change but just enough does things like view States you know if I watch it on some other clients and then I'm pulling it up here and I want to see the next unwashed Epis so did you know reef etching that list fresh than I might get some steel data there so we do catch some but I think we have erred on the side of I don't know caution mhm and you again you catch that need natively yeah what about for the web browsers what kind of caching do you use there when they're talking to the plex media server then same answer not a lot of caching before the actual application itself we'll try to let the browser cache that yeah well I I'm not sure how much of this you've actually worked on so let me know if you can't really answer this but when you were or when you look at this kind of UI especially the streaming but more specifically plexes it seems kind of like not complex in a bad way it looks really nice right and it's kind of you can tell there's a lot of design going into it the animations and that sort of thing but a lot of times when you go on websites the animations really slow down the experience I didn't experience that with Plex at all can you give some tips on what you guys have been able to do to reduce that that jittery lag or whatever you want to call it yeah I think they call it yeah I I don't know that I have any I didn't work on it enough to give kind of good tips or answers but it's something that we care a lot about so I I'm glad that that it seems like we might be winning I'll have to see I have this you know you guys have a blog and I've been trying to read through some of those do you have an engineering blog by the way we don't actually the the main blog is written by our founder CTO main engineer kind of all of the above so it is occasionally technical but we don't yet have kind of a dedicated engineering blog it'd be nice to say like the way that he writes yeah I get the chance to tell him tell him he's really good writers funny and it's hard to write these kinds of things in a funny light and make them enjoyable to read especially when it's more technical kind of stuff I know from experience so yeah good job on that for sure yeah all right moving on to actually I had one more question I skipped over looking about notes here is I when we were talking about connections and switching from the primary to the other server I also noticed that some of these connections were through WebSocket yeah what is WebSocket first of all I'm kind of the family of html5 technologies and they basically allow an app running inside the browser to keep connection open to some other resource part of JavaScript sandbox it can't do something like open a TCP socket the way that kind of native code could so we mostly use it as an alternative to polling in order to stay fresh with data so one one simple example maybe is when you add a new library within your plex media server so you're inside the web client kind of managing your media server and you say oh I've got some videos in this folder and the media server goes off and is scanning all these things in and finding metadata and doing all this work rather than the web client continuing to make polling requests every you know every second through every and milliseconds it's able to just have one WebSocket open to the media server and it updates to it so it allows the web client to have a much snappier interface gonna get those updates in a push way rather than having to have to pull what do you think would be some other use cases for something like WebSocket that's my favorite one is that kind of that push rather than ol approach I think the canonical example is probably chat programs if you were to if you were to go on some sort of WebSocket tutorial page I'm sure they would have you're writing a little chat client that's something you can just go in your web server and I think you guys use nginx and go in there and configure it to to have that yeah for the media server it was actually a bit of an adventure because the media server doesn't use nginx in the cloud we do but media server it's all kind of bespoke built on top of boost libraries and it didn't end up being too hard but it was probably harder this who just finds a library and drops it in right it's never that easy especially when it's you implementing them you hear about all these you you're gonna start implementing something and you're like oh this is gonna take just you know a few a few minutes maybe an hour or so yeah you start implementing it you're like of course I've got a completely different use case of course I do alright so I am kind of curious about the transcribing and how it works especially it since all this is seems to be happening locally can you give us a little bit of detail of how they're transcribing works yeah so for the transcoding we're transcoding sorry we use an open source library F MPEG which is just an awesome open source library for any sort of media processing especially video so basically the plex media server comes with our kind of variants of ffmpeg to do that on the fly real-time transcoding so if I it's especially interesting to us because of the variety of platforms so I might have something fairly innocuous some video format on my machine but if I'm trying to stream it to iOS Android Roku Vizio Smart TV and Xbox and all these things they all have little tweaks on what they can and can't handle so mp4 is are fairly safe but some of them are optimized for streaming some of marts MKV is are like pretty well supported but not quite as well WMV files are pretty Microsoft specific these days so that transcoder kind of gives us the ability to make sure that our users don't have to worry about that I think anyone anyone who is forced to understand all those formats that I just don't wish that upon anybody so we really want to be able to say like you have a video file I don't care what format it is just drop it into Plex and we'll worry about what needs to happen for that to be consumed on all all of your if that means transcoding HLS so be it transcoding go live on TV no problem smooth streaming fine that sounds like an another tough challenge because if you were storing all these videos on your and server then you could have machines that are specifically optimized for transcoding I want to make sure I wasn't saying try thinking again so but here you're doing it locally on these people's machines you don't know what kind of CPU they have they may have really slow machines how do you how does that work is that a problem it yeah it's I think a blessing and a curse I don't know what percentage of those two things that are III have certainly read with a little bit of jealousy some of the other engineering blogs I think Dropbox at a famous one where they talked about how they pre transcode the first few seconds of every video on Dropbox and then as you play at they go we better do the rest that's a lot harder without kind of knowing that you have infinite computing resources on the media server so there's no real trick that we've employed to it I wouldn't say it's something we kind of constantly think about ways to improve the main thing is just being aware of the kind of the the power of the computer so we you know if you're running on an ARM based as we'll just say you know what you can't transcode will let you remix so again this is one of those things that I don't wish upon anyone to understand but remix thing basically means that you take you kind of unpackage the the container of the video but the actual video stream you would just copy as is so if you had an MKV file with h.264 video in it but the client needed an HLS container you could remix that h.264 video from the MKV to HLS so that's something that might be easy enough to do yeah and all regardless of the processor but actually converting that video is another story and as we get into things like 4k and h.265 that's even more intensive yeah so it's it's it's definitely a challenge something we constantly look into ways to do better and I could see it taking a little while to to go ahead and transcode in all those different formats and different resolutions and that's sort of thing all across the board depends on what kind of machine is is there yeah definitely yeah and the other challenge is just that even if we chose to pre transcode because it's not our servers it's your media server on the plus side it means that we're not paying for the storage so that's you know good for our bottom line I guess but the downside is that you know we're kind of mindful of wasting that storage so if you've got you know if you've got a spare heart I'd write if we were to pre transcode every single file your usable space on that hard drive would shrink to you know 20% or something like that yeah so we have to be a little kind of I don't know mindful respectful so one of our recent features that we launched last year was called media optimizer which basically lets you choose whether you want to pre transcode maybe a subset of things and at what quality so one example is maybe you would you know most recently added home videos so so maybe I'm thinking I'm gonna share home videos with my family and I wanted to be able to watch any home video but they're probably mostly gonna watch the recent ones think it's gonna be more unusual that they go back and watch the ones from years ago so that's kind of a I don't know a roundabout solution to this problem where we say okay well let you choose that maybe we can get away with pre transcoding just this subset mm-hmm this is really quite different from the other two interviews I mentioned earlier with whisky on Netflix where they definitely have a lot more flexibility when it comes to transcoding and and caching as much of the content as possible and yeah this you guys have a totally different set of challenges that you have to meet so it's yeah it's unique I were occasionally jealous of some of Netflix's use cases also all right what makes it fun have you been able to read some of their content and that's been helpful to you yeah yeah definitely mmm I love their they have a great example of an engineering blog and Larry I love that they've been kind of open about challenges and how they've attacked them I hope I can get some more of their their people on here on the show there's so many different from server optimization to all these different things that's super interesting another interesting thing with plex is the metadata that I believe you pre populate right how do you find that yeah so that thing for us we basically the interesting about metadata is that there are tons of sources and we made a decision early on that we don't really want to become our own source of metadata we don't want to manage those huge databases of all of the media ever created but at the same time we kind of need to be an intelligent layer that allows you to access those so what we basically do is work with as many of them as have good data so taking music as an example I guess you know gracenote has a great library last.fm has some good information discogs does musicbrainz does we kind of sit on top of that so that when plex media server is scanning content it will look at it try to find a match and then ask our metadata servers and from all of those things so hold on sorry you need to get out just for a second oh you're back now sorry about that yeah so basically the we can sit on top of all of those and pick and choose kind of the best features from all of those so without any I don't even have a good example off the top of my head but just hypothetically for the music case somebody might have we the good Asians and somebody else might have really high-quality album artwork yeah so rather than just choosing and saying alright we're gonna do everything based on this one source we can kind of have we call them agents you can have an agent that runs against each of those and then we call them combiners that kind of looks at the results from each of those and then says alright I'm gonna take the summary from here and the artwork from here and then present that that's a client are you saying this is automatic or is this actual human being that goes through and checksum automatic so we we've kind of so we've written those agents ourselves and kind of made some default ordering decisions based on general quality that we've seen so thank you tell well so in the album description example you know you could just you look at a few albums from each and it becomes obvious the you know one of them is kind of user submitted and poorly written and another one one access to some database of kind of I don't know official reviews or interesting and then do you pull that in and store it on your machines or servers instead of having to rely on on somebody else yeah so we kind of have that distilled version and then any time we need to we'll fetch kind of the original source to either to refresh what we cached or just to grab something if we didn't find it in our our cache awesome so I think that concludes most of the questions I had for you recording how plex works is there anything else that you think we should cover or that I missed um I don't think so the challenges or other things you're working on or anything like that probably not get us this yeah yeah there's always another challenge but I think we I think we got the big one right so now we can learn a little bit more about you then what kind of career advice would you have if somebody was interested in and working on this kind of application or working in the cloud or anything like that yeah I give different career advice to different people I thank you based on the context but it's probably a good thing I think depending on the cloud thing you're interested in the we we've actually been kind of unreasonably fortunate in this regard but we have had a ton of people for me just kind of find ways to work with us and pitch in who then ended up getting hired full time which I don't know if that works at a very high percentage of companies but it's been an interesting lesson that you know if something interests you just go work on it because there's kind of two outcomes one is you were interested in it anyway so you kind of had fun learning about it end of story or you had fun and caught the attention of somebody and turned it into a you know a full-time paying gig which is awesome this kind of no no huge downside in that regard yeah the other advice I think it's just I don't know you can't be afraid to put yourself out there which is the hard part but exceedingly true and then the one piece of advice that I probably do give to everybody is because it was from my own life is to not be afraid to kind of use people you you know learn about opportunities I think when I was first getting a job at a college had a degree in computer science and I really wanted to just you know get a job the hard way like submit a resume on some website and have them pluck it out of the pile and be amazed and then offer you a job which it turns out is incredibly difficult ended up taking a job through someone I knew and once you get in then you have this opportunity to actually do good work learn and kind of prove yourself every job I've had since then has somehow been traced back to you know demonstrated accomplishments so it's like getting that first job they're really hard there are a thousand additional ways to get a second job just by going into the first one and you know working hard learning and proving yourself really interesting the whole time we were talking about this I kept thinking of what just happened to me personally where yeah you know I was still in college I just graduated actually last month and I've been doing this show for about a year now and the way that I met Anthony at Linux Academy Anthony's the founder of it is through the show I reached out to them and I said hey I really like what you're doing I've got some sponsorships slots open would you be interested and that's how I got the conversation started I didn't even know him at all or anybody on that team before then but we just kept working together and we both really liked what we were respectively doing and that's how you build relationships and yeah they went ahead and offered me a job so I yeah I back you up on what you said a hundred percent because it just happened to me so it's it's not just you didn't just come up with that on your own and saying some or whatever you want it's it actually works it's true so yeah good good note to end on I really appreciate your time Skylar thanks for for sharing with us and for taking the time to do this I know you guys are pretty busy so thanks a lot yeah and I wish you guys the best of luck in 2016 you got that way reach out to you or it's anyone that Plex how do you recommend they do that the flux TV is the website to kind of get any general information my email I'll just say is really guessable if you know my name and that and then we've got forums that are kind of a good place to get information about the product any problems that's kind of the number one place is we have developers and community members in those forums helping people out are you on Twitter social media hey technically I have a Twitter account but no that would be a terrible way to get a hold of me imagine I take a lot of abuse for kind of being a an anti technology and social networking person on the team so anyway somebody really wants to get in touch with you I'm sure they'll figure it out I figured it out somehow so they can do it I know it's possible all right well thank you all for listening if you have any questions or if you want to thank Scott for his time please leave a comment below the video or reach out well I guess don't reach out to him and Twitter but you can reach out to me at scale your code doc or at scale your code or on Skelly code comm slash contact if you're listening through iTunes I really appreciate a rating it really helps reach a broader audience and if you don't think it deserves five stars I would love to talk to you and know why and how it could improve the show so please reach out to me either at at scale your code or scale cocom slash contact don't forget to check out Linux Academy for a discount at scale lucam / linux academy thank you so much and have a wonderful 2016 see you next time you 