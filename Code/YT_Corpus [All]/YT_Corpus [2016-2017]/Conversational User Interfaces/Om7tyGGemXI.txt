 welcome to AP iia over the next few minutes I will show you how to get started with our platform we'll start by creating some simple music player functionalities we're in the developer console and here in the music player agent an agent corresponds to a bot app service or device that you would like to add conversational user experiences to there are two main concepts that are important to creating interaction scenarios on API III and those are entities and intents entities are objects that you'll want to interact with so for a music player agent perhaps we have a list of some different artists or songs here are a couple different artists that I've added for demo purposes and you also see that I've added some different ways that you could refer to them by the next step is to create an intent and intent Maps what the user says to action should be taken in your business logic an obvious intent for a music player is well to play music in order to train the system I provide examples in natural language of what the user could say then I specify which action should take place when the user says something similar to my examples I can also add a speech back response down here now let's test it out I'd like to hear mmm so we see that the intent was matched at the Play Music intent the actions play in the artist is mmm so what you're getting back is this structured JSON object with the resolved query action and relevant parameters thus far we've only looked at single query and response but maybe now you want to support commands related to these queries like play the next song for this we use contexts contexts are like topics and discussion and they help us coordinate the conversation all we have to do is set an outgoing context in this intent so I'll say I'll call it playing music now I can create a new intent called next song I provide a couple examples here and I can set up playing music as a conditional incoming context now we can try it out could you please play Madonna we see that the put context has been set to playing music so now I could say I'd like to hear something else and it says okay skipping to the next stop and it matched the next song intent alternatively you could also use slot filling to achieve similar functionality where we can create a flexible nonlinear dialogue in one single intent for example let's say that the artist in song are required so I just check these boxes here and define a couple prompts or if the user doesn't mention them I've also gone ahead and added a speech back response and I can try it out I'd like to hear something by Eminem now asks which song I'm in the mood for could you please play lose yourself says playing lose yourself by Eminem now that the intent has been trained you can work with our API directly or through one of the SDKs to get adjacent representing the meaning of the command you can also use web hook by providing URL where the command should be sent and fulfilled of course this is just the beginning with API you can design advanced conversational user experiences for all of your products 