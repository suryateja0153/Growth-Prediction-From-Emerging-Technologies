 hello and welcome to lesson one in this lesson we will discuss connecting the Android devices wirelessly by the end of this lesson you'll be able to define the Android wireless api's explain the steps involved in network service discovery describe the process of p2p connections with available Wi-Fi networks and describe the steps involved in setting up Wi-Fi p2p service publishing and discovery in this module we will learn about the Android wireless api's these API is enable communication between the Android devices that are connected to the same local network and they also enable communication between devices that are not connected to the network but are present at sufficient proximity to each other network service discovery NSD enables an application to publish a network service or seek out a network device providing the network service with which it can communicate NSD enables a wide range of applications such as sharing files between devices playing games with users in the same room receiving images from an NST enabled webcam connected to the same network remotely logging into a machine on the same network most network api methods are asynchronous listeners are generally registered to handle responses this means that an API call returns immediately without waiting for response but passes a listener object an Android system uses these listener interfaces to pass the response to the application note that all network operations involve unpredictable delays and hence should not be performed on the main thread several methods are available in android such as background operations and helper threads now let's discuss network service discovery which involves the following steps registering a service on the network if our application is a provider of the service discovering services available on the network so that our application can check if it can communicate with the service provider connecting to a service on the network to start communication unregistering the service before application closes so that no other devices can see the service for the application to use network services the application should declare the appropriate permission in its manifest file in case of NSD service discovery it is Android permission internet registering the service is required only if our application provides a service this has two steps one is creating a registration listener object and other parameters and the other is making an asynchronous API call to register service the first step is to create a registration listener object that handles the registration event callbacks NSD API uses the callbacks in this interface to inform the application about the success or failure or registration or unregister ation of events the service name is a string which identifies the service applications on other devices detect our service by using this name for example simply chat is a service name that provides a chat service this name must be unique on the network service type is the one which specifies a protocol and transport layer the application uses for example HTTP underscore t CP specifies that the application uses HTTP protocol over TCP transport layer port number identifies a port for each address and protocol through which the devices can communicate after establishing a connection discovery protocols should be used for connection we use domain name service based discovery international assigned number authority IAA has published a list of standard protocols and port numbers if you intend to use a new service type it is recommended that you reserve a service type and port number with ia na for demo purpose we will obtain an available port on the device a registration listener must implement the following callback methods a reference to the NSD service info object is passed to all these callbacks in addition to other parameters wherever necessary let us talk about each callback method on service registered is called when the service is successfully registered on the network on registration failed is called when a failure occurs during service registration an error code is passed to indicate the exact error on service unregistered is called when the service is unregistered successfully an application that provides a service must unregister before closing on unregistered failed is called when some error occurs while unregistering the service an error code is passed to indicate the exact error to register our service we get a reference to the system service object of type context NSD underscore service then we build a NSD service info object for our simply chat service which uses HTTP protocol over tcp transport layer NSD manager dot register service is called with parameters service info object the discovery protocol in this case domain name service based discovery and the registration listener let's talk about how we can discover NSC services available on the network the process of discovering is very similar to that of registering here again there are two steps creating a discovery listener object and other parameters and making an asynchronous API to call discover service first we have to create a discovery listener object that handles discovery event callbacks the NSC API uses the methods in this interface to inform our application when the discovery is started when it fails and when the services are found or lost lost means is no longer available service type specifies a protocol and transport layer to look for discovery protocol to use and we use domain name service based discovery the discovery listener must implement the following callback methods on discovery started is called when the discovery is started successfully on service found is called when a service is found and passes the service info object corresponding to the found service in this step it is a good practice to check if the application discovered its own network service or if it is providing one if a service we are looking for is discovered we can connect to it but before connecting we must determine the connection information for that service by calling resolve service open bracket close bracket API on service lost is called when a service it was previously found is no longer available on discovery stopped is called before stopping the discovery on start discovery failed is called when the discovery fails and provides the error code that indicates the reason for failure on start discovery failed is called when the stop discovery fails and provides the error code that indicates the reason for failure this step which is resolving a service resolves the service that was discovered in the previous step once resolved our application receives the IP address and the port number which is required to make a connection to the device providing the service to resolve a service create a resolve listener object that handles a resolve event callbacks and SD API uses the methods in this interface to inform our application when the service resolve operation succeeded or failed the resolve listener must implement the following callback methods on resolve failed is called when the service resolve operation fails it provides an error code to indicate the reason for failure on service resolved is called once the service is resolved our application receives detailed service information including an IP address and port number using which the application can establish network connection to the service after successfully resolving the service information our application can connect to the service using the Android Network api's let's now discuss the importance of unregistering a service if our application provides an NSC service it is important to close it before the application is closed unregistering will help other applications from seeing the service is still available in trying to connect also the service discovery must be stopped when the parent activity is paused and it must be restarted when the activity is resumed our application should override appropriate life cycle methods of the activity to start and stop the service broadcast and discovery as appropriate for example we could call register or discover api's from activities on resume callback similarly unregister and stop discovery from ondestroy callback p2p is an acronym for peer-to-peer the Wi-Fi p2p ap is enable applications to connect to the nearby devices without the need for devices to be connected to a network or access points applications running on a device can find other devices nearby and begin connection and start communicating using Android Wi-Fi p2p ap is android Wi-Fi p2p AP is conformed to Wi-Fi direct certification the range of Wi-Fi p2p is larger than that of the range of the Bluetooth range following steps are involved in setting up a Wi-Fi p2p connection between two devices set up appropriate application permissions set up broadcast receiver and peer-to-peer manager initiate peer discovery filter the list of peers connect to appear disconnect peer connection let us discuss each step in the subsequent screens we need to declare appropriate permissions in the applications manifest XML file for our application to use Wi-Fi p2p ap is the following permissions are required Android a permission dot access underscore Wi-Fi underscore state Android not permission dot change underscore Wi-Fi underscore state Android dot permission dot internet although p2p does not require an internet connection it still uses Java sockets which require internet permission to use Wi-Fi p2p we need to listen for broadcast intents to tell our application when certain events have occurred in our application instantiate an intent filter and activities on create callback method and set it to listen for the following Wi-Fi underscore p2p underscore state underscore changed underscore action indicates whether Wi-Fi p2p is enabled or disabled Wi-Fi underscore p2p underscore peers underscore changed underscore action indicates that the available peer list has changed Wi-Fi underscore p2p underscore connection underscore changed underscore action indicates the state of Wi-Fi p2p connective has changed Wi-Fi underscore p2p underscore this underscore device underscore changed underscore action indicates this devices configuration details have changed get an instance of Wi-Fi p2p manager by calling get system service and passing context Wi-Fi underscore p2p underscore service and initializing the p2p manager the initialized call returns a Wi-Fi channel object that we use to discover peer devices create the broadcast receiver class that listens and handles the Wi-Fi p2p state changes in the broadcast receivers on receive Open bracket close bracket method handle each of the above Wi-Fi p2p state change cases register the broadcast receiver and intent filter when the activity is active that is in the activities on resume open bracket close bracket callback method initiating peer discovery to start searching for peer devices nearby called p2p managers discover peers and manager dot discover peers open bracket em channel p2p manager action listener closed bracket semicolon M channel is a Wi-Fi channel object received when you initialized the peer-to-peer manager p2p manager action listener is the listener that implements methods using which the Android system tells our application if the peer discovery was successful or failed Wi-Fi p2p manager action listener object implements the following callback methods on success open bracket close bracket is called to indicate the application that peer discovery started successfully on failure is called to indicate the application that peer discovery failed with an error code that indicates the reason for failure after we invoke the discovered peers open bracket close bracket API call any change in the peers is notified to our application via intent with action Wi-Fi underscore p2p underscore peers underscore changed underscore action application should register a peer list listener object which implements the following callbacks public void on peers available Wi-Fi p2p device list peer list is called when a list of peers is discovered by the system we can iterate over the list and decide whom to connect with note that on peers available returns all the peers that are available now including the ones that were discovered in the previous call if our application is managing a list of peers flush out our existing list and create a new one the last step in establishing a p2p connection is selecting a peer and initiating connection from the list of peers received via on pairs available callback method choose a peer create a Wi-Fi p2p config object and call connect from p2p manager object we get the device address from the Wi-Fi p2p device object Wi-Fi Protected setup is set to push button configuration PBC we pass the action listener object to the connect method which implements callbacks to notify the connection result following your callbacks of action listener interface onsuccess is called when connection to the device is successful the broadcast receiver we created earlier will receive an intent with action Wi-Fi underscore p2p underscore connection underscore changed underscore action when the connection is successful on failure is called when the connection attempt fails with an error code that indicates the reason for failure earlier in this lesson we learned how to broadcast network services discover connect and communicate with devices offering known services between devices that were connected to a network or access point however Wi-Fi p2p service discovery allows us to publish services and discover services of nearby devices directly without the need to connect to an Access Point steps involved in Wi-Fi p2p service discovery are quite similar to those in network service discovery following steps are involved in setting up Wi-Fi p2p service publishing and discovery set up appropriate application permissions create a local service and register it if your application is providing service discover nearby devices that offer Wi-Fi p2p services connect to a peer device and begin communication let's look at the steps in the subsequent screens as you are familiar by now following in the permissions required Android permission change underscore Wi-Fi underscore state Android dot permission internet although p2p does not require internet connection it still uses Java sockets which require internet permission create a local service and register it if our application is providing service create a Wi-Fi p2p service info object populate it with information about your service in the current example we create a hash map of parameters that we use to create Wi-Fi p2p service info object a hash map is a collection of key-value object pairs that the discovering device will receive the receiving application is expected to know the keys and extract values to determine the exact service offered Wi-Fi p2p DNS ST service info represents Wi-Fi p2p or Wi-Fi direct service info class which is used to broadcast p2p services the first parameter to new instance is the name of the service instance in this case it is underscore simply p2p the second parameter is a protocol name dot transport layer the last parameter is the hash map of key value pairs and manager is an instance of Wi-Fi p2p manager by calling get system service in passing context dot Wi-Fi underscore p2p underscore service and initialize the p2p manager M channel is an object returned by the Wi-Fi p2p manager initialize call action listener is a Wi-Fi p2p manager action listener object that implements the following callback methods onsuccess open bracket close bracket is called to indicate the application that peer discovery started successfully on failure is called to indicate the application that peer discovery failed with an error code that indicates the reason for failure discover nearby devices that offer Wi-Fi p2p services setup listeners to receive service response and service records broadcast by service providers dns SD service response listener implements following callbacks on dns SD service available is called with the actual description in connection information dns SD text record listener implements following callbacks on dns SD text record available is called with hash map of the service published by p2p service publisher that we learned earlier along with the service hash map device info structure results will passed the receiving application can maintain a list of available devices and services offered by them this can be presented to the user via a user interface to select a service to establish connection call add service request to start receiving service responses to service response listener call discover services to start receiving service records to text record listener m channel is the channel object returned by Wi-Fi p2p manager initialize call action listener is the Wi-Fi p2p manager action listener object that implements following callback methods on success open bracket closed bracket is called to indicate the application that peer discovery started successfully on failure is called to indicate the application that peer discovery failed with an error code that indicates the reason for failure the last step in establishing a p2p connection is to select a peer and initiate connection from the list of peers choose a peer create a Wi-Fi p2p config object and call connect from the p2p manager object this is similar to the Wi-Fi p2p connection which we discussed earlier after connection is established devices can communicate using an own protocol such as sending print request to printer let us summarize the topics covered in this lesson in this lesson we define the Android wireless API s for wireless connections we discussed how to discover the network service we explain the steps to register the service we explain the steps in resolving a service on the network we listed the key points in unregistering a service we describe the p2p connections with Wi-Fi connection setup finally we describe the steps involved in setting up Wi-Fi p2p service publishing and discovery this concludes the lesson on connecting devices wirelessly you 