 hello everyone welcome to an introduction on evolutionary algorithms before I go on to introduce myself I want to make it clear but I don't expect you to have any pre-existing knowledge of the subject or any scientific background this introduction is intended for everyone especially those who are interested in learning about something new because of this I'm going to try to explain everything in plain English so Who am I my name is Shahin and I'm a lecturer at the Bournemouth university which is on the south coast of England my PhD thesis is from years ago as well as my current research interests include evolutionary computation so for me this is something I find very interesting and a topic I enjoy talking about this is also my first public facing video so please bear with me whilst I adjust to the format here is the presentation overview I want to get you excited about evolutionary computation before I tell you what it is hopefully this will give you an incentive to engage with the rest of the video and convince you but it's not a waste of time then I'll very briefly tell you what it is before moving on to a high-level example of how it works this includes a quick activity so if you want to take part please have a pen and paper ready we will then conclude with some recommendations for further reading and tinkering so why should we care about evolutionary computation one of the reasons I give when I'm trying to get people interested in the subject is the variety of potential applications here you can see a short list of just a few areas where I've applied evolutionary computation starting of the more serious and higher impact applications and moving on to what I feel are the more fun applications because of evolutionary computation I've had the opportunity to not only work on these kinds of projects but also work with brilliant people from the associated fields for me this is one of the most rewarding parts of working with evolutionary computation towards the end of my PhD I had the opportunity to apply evolutionary computation to a concealed weapon detection system this type of application concerns the safety of others and any improvements made can positively impact this safety it can also be applied to designing AI behavior for video games where for example we can focus on creating a Mario who is greedy and wants to collect as many coins as possible there are many applications for evolutionary computation and we've barely scratched the surface in these last few minutes finally let's talk about what evolutionary computation actually is it's a nature inspired approach to optimization which is the process of getting the most out of something and making it better during this process we are in the search for the best or optimal solution to a problem it's inspired by this idea of survival of the fittest from Darwinian evolution and Mendel's modern genetics the general idea behind the whole thing is that if biological evolution can produce something as amazing as humans over many generations and we should be able to use the same process artificially to evolve optimal solutions for vehicles aircraft spaceships and so much more to dispel any overhyping it's worth noting that in practice evolutionary computation offers approximations of optimal solutions to difficult problems often it can be overhyped as the all-powerful hammer where every problem in existence is a nail this isn't the case now on to the fun stuff how does an evolutionary algorithm actually work here you can see a flow diagram of a simple evolutionary algorithm you can see different stages which flow down to the bottom and then loop up back near the top let's go for each step one by one whilst working through an example the first stage of any evolutionary algorithm is initialization we can think about this stage as some kind of Big Bang where we create our initial population out of nowhere we call a group of solutions to a problem at any stage of the progress a population and in this case we have randomly generated our solutions it's important to define our data structure often referred to as a chromosome in the context of evolutionary algorithms this chromosome simply stores a set of items or genes which describe our solutions we can think of this as some type of blueprint here we have a population of six solutions which I have labeled a through two F each solution is defined by its own chromosome and here you can see that each chromosome stores six different genes these describe the lengths of the arms legs torso and the size of the head for each solution with our initial population generated we move on to the evaluation stage this is where we figure out the fitness of each of our solutions the Fitness is often a single number which gauges how good a solution is the higher the number the better the solution we need this information later on if we're going to apply this idea of survival of the fittest of course this Fitness value depends entirely on the problem we are trying to solve in this case I have made up a simple problem for the purpose of this demonstration below you can see a track of a hurdle in the middle for this problem we are trying to find the stick figure which is best suited for completing the track which involves getting over a hurdle we'll use the numbers below the track as the fitness value because it indicates how far each stick figure made it so we need to evaluate each solution this means making them run the track one by one solution a is up first it's worth noting at this point but I have no experience with animation so these stick figures will simply begin at the starting line and appear at the furthest they can make it it also appears that solution II has lost its confidence here we can see the solution I only made it up to the hurdle because it doesn't have long enough legs to make the jump solution a receive the fitness score of 250 which it seems happy with now it's solution bees turn it appears the solution B has made it past the hurdle and achieved a fitness score of 350 now for solution see it appears the solution sees wide head has prevented it from getting closer to the hurdle so it settles for a fitness score of 240 solución these turn and he scores a painful looking fitness score of 320 now for solution ease attempt it rolls a respectable thin the score of 10 as we can see with solution F not every solution is built to perform well on the problem this is jus the random nature of the evolutionary process unsurprisingly its Fitness score is zero and now we have a fitness score for every solution in our population now that we are in what is called the generational loop where we will try to improve our solutions over and over again we need to figure out when to stop looping so that the process doesn't continue forever this is called the termination stage at this point we would check the current state of the evolutionary process to see if we've satisfied some of the rules for stopping these rules would be defined before starting the evolutionary process here I've given an example of some of these rules which we will refer to as termination criteria the first one is wherever the goal has been acheived so maybe we have an ideal fitness score in mind and we'll check our solutions every generation to see if any of them have made it if so we'll stop otherwise we'll continue maybe we just want to run the evolutionary process for a specific number of generations so we'll check to see if the current number of generations has reached the maximum allowed or we simply terminate the process when there is no longer any significant improvement being made through the fitness scores from generation to generation for the purpose of this demonstration let's assume the termination criteria has not been satisfied so we can continue to the next stage this stage is called selection and this is where survival of the fittest takes place if we were to pick free solutions from this population to produce offspring for future generations which free would we pick typically we would select the free solutions with the highest Fitness score because we expect these free to contain the most valuable genetic information and we want this genetic information to be passed on to the new solutions now it's time for the variation stage here we will aim to use our selected solutions which we can refer to as the parent population to produce new solutions which we can refer to as the offspring population one method of variation is called chromosome crossover here you can see the same chromosome from before but this time I placed the red line in the middle indicating two different halves which I have color-coded with blue and green will now use this red line or the crossover points to mix two parent solutions to produce a single offspring solution let's use the following scheme we're going to pick the parents with the highest Fitness score from it we will take the blue part of the chromosome will then pick the solution with the highest Fitness score from the two remaining parents and from it we will take the green part of the chromosome you'll stick these two halves together to form our new offspring solution and then start the process again but this time with the parent with the next highest Fitness score let's see what happens here we can see parrot B and parent C have produced offspring D I've color-coded the parts of a stick figures to indicate what has been passed on to the offspring and which parent its come from next we can see parents see and parent be have produced offspring II you may notice the same parents have been selected for the crossover but in a different order which has changed which parts have been passed on to the offspring now for the last offspring we can see parent B and parent a have been selected for the crossover and now it's time for the quick activity if you want to take part please just use a pen and paper to sketch out what you think offspring solution F will look like your 15 seconds start now you and there we have it I hope your offspring F looked similar if not you can see with the color coding how we arrived at the answer now we're done we've crossover however if the only method of variation we ever use is crossover then we'll never introduce any new genetic information into our population this is because every generation we will just be mixing together the same genetic information which we started with at the initial population to solve this we use another method of variation which is typically used together with crossover this is called mutation with mutation all we do is select a random gene on the chromosome of a randomly selected solution then we add a random number to this gene this introduces new genetic information into our population this is important as it allows us to explore different types of solution which may perform better on our problem here you can see we've selected solution e at random selected its head gene at random and added some random number which has made its head wider for six solutions you now see will be taken to the next generation as we loop back round to the evaluation stage and here you can see with this simple example that the population for generation 2 already looks better than the population for generation 1 as we saw on the hurdal problem the solutions with longer legs seemed to perform better now imagine that instead of stick figures we had solutions which described the structure of a bridge and the problem would be simulating vehicles crossing that bridge I hope this simple demonstration has helped you understand the evolutionary algorithm process so if you're interested what can you check out next you can check out this link which I will also put in the description here evolutionary computation is used to design a vehicle and test it within a physics engine it can be fun to watch and also allows you to tinker with some of the settings which can be interesting if you're interested in reading something a bit more in-depth I recommend this book and these academic journals if you're interested in my publications please visit my website where you can find up-to-date links and information depending on the feedback I receive and when in time you are viewing this video you may see an annotation here linking you to a follow-up video where I cover more areas of evolutionary computation and we've made it to the end I hope you'll be leading this video with some understanding of why evolutionary computation is exciting what it is how it works and some ideas of where to go next thank you for watching some of my contact information is on screen and also in the description I look forward to hearing your feedback and any requests for future videos thanks again 