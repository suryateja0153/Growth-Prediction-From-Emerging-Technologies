 so thanks everyone for coming this morning if you have any questions before we get started comments when I say something I think all right so we'll get started security so we talked about three things somebody tell me what they are and why they're important I mean besides lovely how many jollies not answered on board right what does that mean we're going to al-amin and white have report only the intended people should be what we need all in all access certain information only internal people look into intended GF gap only authorized in 10 people without integrity click on Roanoke College person can modify our team big formations yeah so no unauthorized person who change or modify or add in creating the right everyone without elderly always there's just an hour or so yeah no interruption of service so it could be or degradation of the service to unacceptable levels you could think of maybe if I could attack the new york stock exchange just make it a little bit everybody else is great slower or my trades faster right it's not really about the service they still get service but it looks like a factory and I make all money I don't want to do that otherwise I probably be here you know that's so yeah so that's important so availability these are all very high-level concepts but they are important to the security of the system so i think i may be ended classified i'll do it again so maybe he right perfect code executing hannah perfect bug-free works the first time you compile and run it code why not I don't terrible evil everyone will be bad programmers review Shane rock human yeah right and what I give it to make mistakes right we made errors it's part of the one little part of being human if you place it at least a software that would be cool but probably in general yeah I don't know kind of boring if nobody ever made any mistake number so yeah so software's developed by humans humans aren't perfect therefore the software is not perfect right and so this shows up in software right we're developing software because a human error can introduce a bug or a fault all right so what I mean by like 12 your fault was I made with their kind of nervous when you think of as a blogger of hopefuls unintended performance the program what cat says performance like asses on passionately what it was supposed like task of school yeah so some kind of like an unexpected task that it did perform that well as close to that was when I was unexpected yes something that was unexpected yeah yes now you've been devoting software for years right what are some of the mistakes you made yes it doesn't do what it's supposed to do it doesn't do it it's supposed to do it did what it does what it's not supposed to be or it doesn't it's not supposed to do you hate faded Tyga pretty good HK or something yeah it fails on specific data so i could work for kind of ninety ninety-five percent of tests of the data input but that five percent caused the crash right that would be definitely a bug or a fault with us developers yeah breaking functionality it could have worked before but it doesn't work today right for the exact same book right those kind of things happen tonight more cheat code was that like not secured not secure in what sense like days a login page if you're trapping the credential then you're getting login for society any other furniture that also it went to the home page and I'm not secured like it's working fine but it yeah I guess it's kind of a little bit unintended behavior right way it shouldn't behave that way but it is right but it's still function crack together and we're excited thing every side effects like one man with the kids I think operating system yeah so maybe you're programmed leaking memory right but it's still running correctly it's running right before work clothes but after it dates you say we ballooned up to 2 gigabytes and three days four gigabytes of memory and then also get shut now funny story i like talking about that is the initial one point 0 version of Ruby on Rails so let me know the company and or the guy who created your gun rails I should have looked this up beforehand because I are waiting for me to know the answer actually don't know when he goes by the name ehh it's I don't you know I think David something something there yes there you look how things work for the company they work for me they make beta an update spacing project yeah thanks him so he was making base camp and they have these chats that you released now where the initial version of Ruby on Rails was so bad memory right leaking so much memory that he had a loop that would restart it every 10 minutes that's how they were doing in production yeah he didn't tell that when he had this awesome page explaining Ruby on Rails and it's really cool framework right and they eventually fixed all those bugs but I mean I guess it worked but no it's a pretty big vault and are all software faults security bucks I think that's not necessarily not necessarily what do you mean better obviously all fall surprised you don't have to always be security-related shake think they could possibly just compute a value and correctly it doesn't have to do what's the security just compute a value incorrectly that generally could be a security falter or you can meet you i pod the UI altima sentra gets one pixel off won't be something like it's not trying to tax or something if your program is behaving unexpectedly then you're violating in tech the integrity of it performance so you're trying to put the correctness of the program inside the Tegrity and then saying look if filing the entire program therefore it's a security problem yes I did this kind of our bet is it the other day where points would be and is different from in what sense is something which is not in the specification and is no points of view and it is something that it would be like many issues okay so instead problem terminology so for me they're always saying errors false bugs me they're exactly the same section whatever we would consider a problem with the software it's not doing what it's supposed to be doing some kind of calls for error or bug we'd always anything so the question is is any problem with the the program of either doing unexpected behavior unintended behavior or under anthony behavior are is any of those a security bug for all of us that why not you'd mouth know if you buck adobe security everybody i had a really good job I'd like interior is let's say it's pretty fault your software bugs based on how we defined security you've got confidentiality integrity and availability so maybe it falls outside of those two vodkas and it present yeah so so a subset the disagree I don't think we can prove that not all that I mean bugs are not security bugs because there might be a innovative way that someone will find out in the future that could be used to exploit that bug so maybe all four it's goodbye security bugs that's one way to look at it right that actually happens a watch right the history is like we've known about buffer overflow actually see examples of gnome-like buffer overflows for a problem in the early 80s it was until people started actively exploiting it they're like oh this is actually a serious problem they're not just programming faults right it's actually a security problem so I think I don't know communities answer high levels know right I think it's pretty clear you can have a bug like let's say the text is moved one pixel to the left or to the right it's hard to imagine a scenario where that is a security problem right where that violates the comment job utility of availability of the system right so that's like a pretty simple fault but then you have the cases so somebody's talking about you know you I problem or text is missing right is it depends on what that text is in the context of the system right if it's the price of an item well now I'm where maybe it's a discount that could be applied to a purchase or something like that right that affects with the customers pay and I could be violating the integrity of the system or or something you have to think creatively they can sow bugs don't just exist in isolation right it's all about in what cut the context of what system right but and generally we can say in most cases not all security faults or security bugs so then so if you have a fault some kind of software fault chopper crashes soccer is not performing if it should be it's doing something unexpected it's not doing something expected it could be a security bug down or we will use the term from here on out vulnerability soham our ability exists in the software right or I'll exist will say in the system at this point now and so it's only when that so is I don't know is a vulnerability let's say you know there's a vulnerability in your system is it a bad thing are they all bad are they all equally back no why not recently way to really say it couldn't tolerate such fees for some reason that would be able to look any time an effect on what on the UI Automator at least Debenham late it's coming to go all aces beats how that affects good so is it actually a vulnerability because I affect the security of the system given that a 20-mile of time wise one Oh No No maybe right they may be but they're not all so we're kind of taking the subset approach right so some faults I mean you have to think very hard right but I think that would probably any case respondus security even then suppose the case of Friday tiny was a little different from what was the bank and footboard of the front gate come on effect they use it a lot and but it's a price change garages and then thats point we have to talk yeah well it's going the example that was used earlier about let's say i have a login form right that's a login form where we type in our user name and type in our password but it doesn't actually check the password it just lets anybody that really bad in every single case no now what would be a situation where it's not that I mean we're we're facing me as a login form was what does nothing with the login information and gives no extracts s2o logged in users yeah or maybe let's say it's on this machine inside of a secure facility that you have to be a military personnel about access right it's not even network accessible right it could be accessed only by certain people they have a key card to get in to so you can access it I mean it's not great so it still could allow somebody to get in there we see there's all these steps that they have to take to get there so ritzel vulnerability is I kind of think about it it's always a factor 8 it exists in the system but it's just sitting there I'm doing anything right and it's just part of the system so it's only when somebody actually tries to exploit that vulnerability or use that unattended functionality so that's what we call when it's triggered or exploited that's when it actually compromises the security of the system so kind of way to think about it is the vulnerability is a problem in the system that could compromise and affect the security but how that actually gets exploited may depend and you need a no knowledge of all things right need to know what is this one rebuilding the system what could it allowed tackling at a base level what is this vulnerability and then how could a attacker actually exploit this like I said if you have to have physical access to the machine that's a lot worse than actually that example Dropbox a few years ago had this problem with their website where you can just type in anybody's email address in any password or actually checking the password it's a huge issue right that's a major major issue you know incredibly critical very important affected the security of their application there but now you're talking about the same problem in a different scenario it becomes different right it's about the exploit ability how easy is it to exploit that user so if you think about some vulnerabilities like let's say they require the user themselves to type in a very special sequence into a text box and then hit enter and the proto practice right so it's probably mul nur ability because it was actually availability of the system how easily exploitable plenty of the set of tax that they need to do yeah it all depends on so you're the attacker right you have to somehow trick the user to type in the special sequence into this box and hit enter I'm possible people do it all the time has anybody seen those things on Facebook where it says copy and paste this thing mark actually if you look I think if you go on facebook now they've disabled the developer console and they disabled pasting JavaScript into URL bars because they wanted to stop these kind of behaviour because i was working you know how many users just facebook compounds at a billion tons of users are things with all these users some people are going to fall for it right the happens all the time not if it's you know custom software on the desktop it's probably may be hard to convince somebody to do that but no it's ok ok software security should be easy right right just right perfect software you get done my rescue scale just kidding just so is that actually enough let's say we live in a world where we can write perfect software is this enough why the coach with blemish new requirements might come in yeah so let's say we write perfect software once and the perfect team that wrote that perfect software leaves cumin and maintenance programs come in and have to develop the future ex and extend that right Google aren't so perfect to the one who else by users there you're saying the users are perfect yeah so we have users to think about right if we make them so you think about every remember Windows Vista who did write the user account control the UAC so it would pop up every time a program hey this program trying to run as administrator do you want to allow it and a happy now it's a good security feature but it happens so frequently that users just got the habit of always looking yes yes yes yes yes so then what something really bad did happen they just like guess without thinking about it right yep you know I wouldn't call that a perfect security features a very good security feature that didn't take into account that users aren't perfect yeah well Stan isn't perfect subject digital so you would might be like okay this is my perfect software but I might still be able to do you know exploit certain one with ability or you know make it do things it's not supposed to do what size perfect perfect perfect perfect I say it's perfect it's perfect enough that it it does exactly what it's supposed to do does nothing more nothing less no software faults in the software look at the equator looks perfectly the requirements are perfect yeah it's a whole another issue you know the life is that the software using might get difficult in the future in like it can break down the software yeah right so and how many do we does anybody really just write a software piece of software entirely from scratch so you start with C use the C standard library message nothing else no right it went crazy right we use program languages we use the libraries of this programming languages use third-party libraries we use frameworks those frameworks use libraries and other third-party things which those things probably use other things right all of this is getting into your making soap okay so yeah so we yeah we talked about we need that perfect software and get perfect users so we train them all so what else ever reads still perfectly clear that i can't get back those take on the syllable backwards along servers thank you one piece of software they just go back with more foil yeah so let's say all of our software perfect calls out the hardware could also do that for ya the hardware can be back to learn what about let's say i write this beautiful piece of software i give it to everyone in this room and you go and run it's perfect and then you go and run it are all of your installation is going to be perfect why was that the requirements was that such an operating system the environment yeah the configuration right so now we have to make sure not only do we write the software properly but that's configured and exactly the right way this is a big problem in PHP PHP had special configuration parameters to enable magic quotes that would automatically quote input that came in well if you install that same application that secure on one server and you take it to a server with a different version of PHP that doesn't have this it's now insecure so yeah you have to make sure that the software is perfect so so imagine this we have to make sure we're using a perfect operating system right because our application trust that the operating system is doing thing correctly it trust that the operating system is keeping the integrity and confidentiality so you know why would i if you write this beautiful perfect application great I'll just find a vulnerability in Linux and exploit it and now I've got your application are your death even though you wrote a perfect application and your perfect users and you've configured it perfectly so it's not enough that we need all we need cocoa you talked about hardware with some other things go wrong this one's we're trying to do is think get this adversarial mindset yeah so I'll ass off to the dependent immediately any soft and really get converted to machine level machine level bits and bytes and uppers it has to be processed through the processors and that depends on the transistors and that depends on the behavior of electrons and many of which may depend on the temperature so that is the head sequence anything can go wrong yeah that's literally I think I privacy yeah so we're not actually in this guy's I gotta go put the privacy or a sex on the side because it is a whole separate thing about you know what if maybe I've done it perfectly but maybe I'm giving up my privacy to do so or something like it is definitely a component but that's a whole other issue yeah so talking about transistors there's actually this story so when I took a grad class in a pure architecture our professor told us the story that there was these two supercomputers that I think the military created and they were done exactly identical and they had one that was going to make up a place cuz it fits let's it had one in like San Diego and I had one in Denver and one in Denver had twice the error rate as the one in San Diego so they go through they look at all the parts they prepare um replacing them it's all fine so they realize what's the big difference between well what's the difference between san diego at denver becomes richer elevation yeah exactly right so Denver's the mile high city right so it's at a much higher elevation and so when you add a much higher elevation you have more cosmic rays hitting your system and so they found out that's what it was it was the higher incidence of cosmic rays at that elevation caused random vid flips to happen in the system which would eventually cause the system to crash you crazy right so they put lead shielding on it and like all the props in life like nuts to think about yeah so what about your hypervisor may be running hypervisors VirtualBox Liam Blair we're running something in the clouds running on top of a hypervisor kem what about so we talked about hardware what's controlling the hardware was it firmware 10 power yes power to there's code that runs the hardware right each almost every piece of hardware your system has some firmware that's running it it actually have people that have shown that so there's code that controls your network card and so they found a buffer I don't know if it's exactly about for overflow but they found a vulnerability in the firmware on that network card so you can send you one packet and exploit your network card and from there your network card has direct memory access to the entire physical memory of the machine so that they can completely control and own your hypervisor your operating system and all of your applications just from one packet that never gets sent up to your operating system things can stop at the network card so yeah you that's super easy you just write perfect software you have perfect users not only do you have to write your own perfect software give to somehow I'm sure or rewrite everybody else's software that you depend on you have to configure that software perfect a perfect operating system use a perfect hypervisor run on a system with perfect firmware and run on a system with perfect hardware right so they've actually been research done that shown that you can actually feel the CPU such that with a certain number of instructions the CPU drops down into ring 0 so it has complete access like operations level access so something that you can actually build into the chip itself to be able to control the system so this is why I still have a job right so this is not easy once you start listing it out of thinking about all the things you actually have to do so kind of what i said on monday is we need to learn how to develop secure software or some strategies techniques to develop secure software but we also need to learn software and security so we I don't want us to be talking about these things at a high theoretical level about these type of ulnar abilities and I wants to really understand the technical details of how these vulnerabilities exist so we're going to answer some of the questions like how does software break right what are the types of ways that software can break and cause security problems and to do this one of the main my main goal in this class of the sides making worklog a lot of fun doing a lot of cool interesting projects with phrase that way I want you to develop an adversarial mindset right so that's the key thing about securities you need to be able to look at a system and say okay what are the goals of the system what are the intentions of the system what does the system actually allow me to do and then what's the difference there how can i force the system to do something and not only that what does it actually mean for the application right is it actually a security vulnerability so this is the key thing that we're going to go so this is why we're looking at all of these software problems are going to talk about bugs to develop this mindset because without this how can you know how to defend a system and develop software securely you don't know all the ways it could go wrong and you can so I can teach you about all the different vulnerability classes all that kind of stuff right but what I really want is for you to have the mindsets you can go find entirely new classes of vulnerabilities so you can look at the new that crazy you know things protocols technologies Bitcoin you can look at that and say huh what happens if I do this or do they think about this or what if i send the exact same transaction twice to somebody how does that change or affect their model where does this data ago when I throw that at this system where is it go who touches it is does it get tweeted up to twitter is it input from twitter does it get sent to a third party as a part of an xml file all these kinds of things who processes this data so let's say I've give that into a system maybe I find out it's not vulnerable there but then later every week an email gets sent out to all the users containing some of that bad maybe I can influence that email what can I do with that these are the kinds of things I want you to think about and really the other thing is what assumptions is this system making because this is really what it's about is you want to try to violate these assumptions and this is why I really like like security because to be able to do this effectively I'm gonna make every seen the matrix or heard of it maybe yeah you need to be neo you need to see the system and be able to see all the pieces house all fit together and be like a hot if I do this everything breaks right that's what you need to be able to do and that's why this class is very workwise is because you need to know everything all of you we're breaking down all the abstraction layers here we're not going to talk about hope you're just seeing here's a buffer overflow is here's a seed program here's exactly how GCC version compiles to x86 assembly here's how uses the stack in that assembly and here's how it does function Franks and function calls and look with the buffer overflow we can control this return instruction pointer to be able to execute code of our shoes right that's being able to look through and see the matrix and be able to see everything and manipulate it to your dear will that's nice we're going to pray practice a hands-on breaking of software to be able to practice software and security questions there so yeah this adversarial mindset is very similar to testing mindset right so this is something at Microsoft that really like we had esta software developer engineers and test I think which they're getting kind of rid of a little bit but I thought those guys were amazing some of the people on my team were great so like I felt this feature that was all cool and it was like my very fun I think I was an intern at the time and they came back and they were like actually when you have to launder and it's on the second monitor not the first monitor is when a problem occurs and like it crashes there's like what everything's a test that right I should have and so as part of that it's doing weird things looking at corner cases trying to think through how did this how does the software developed would probably didn't they think about that kind of stuff so it's part of that what we're going to do now we're going to look at to try to develop this adversarial line set I find it very helpful to understand and look at the history of I call it soccer insecurity or hacking or big incident at that stuff because I think it really does help frame the context right so we can understand our current situation right so we understand why you're here at a class about computer security and why we think is important okay yeah previous concept I can see the cutest yeah so that's innocent yes so and it's the difference to me between software engineering and software security or computer security it's I'm gonna care about finding bugs right you can find bugs all over the place right I want to find bugs that allow me to compromise the security of the application so to do that you need to understand that application itself right to a software engineer or to a software tester any bug is free right you can crash program if you can do whatever thing is it's one pixel off that's a buddy for me I don't care about that until it affects the security but you'll find that mindset that says no okay now i know i got this functionality and maybe that thing itself doesn't allow you to do anything once you find another flaw you can put them together and say hi can leak memory i can leak one memory address and that allows me to do buffer overflow which loudly the other thing and actually exploit it to feed a SLR and all this other stuff and now I probably on the program so yeah it's me nuts is a difference they're very very similar these similar techniques but the big thing about security is you need to understand that application or universe and the application and the system in its context because ultimately you know you need to be able to convince somebody else that it's worth fixing but it is a real problem so if you can't say yeah you have this one pixel off but see that's what important because it affects your confidentiality whatever whatever that would be hard to sell but you know you need to be able to put that in context yeah all right so to me the history of security incidents hacking is actually tied really closely to the development of the internet does any know in the internet first like the first beginnings of the internet started from that dark but what about ty boogie around decade assembly from the 70s aside we've got a long time so look everything I hope pretty familiar with the internet it's taken maybe a networking course i'll be very good so the internet is the network of networks right and they're each network is autonomous right which actually is really important because it means that there's an open architecture and every network is different in that's different administrative domains with different goals right so the asu network operates a lot different from the UC Santa Barbara network which operates a lot different from the Microsoft Network from the Google Network right all these kinds of things and it's built in that they can actually do this and have their own thing and so I think it's kind of an understatement right the internet is critical to our lives because I mean not use the internet today so hard hey I may be just out of like 10 15 25 rolled over here maybe you could say that but happy hard but you have to have not have checked your phone for any emails or text messages or anything like that looked at the leather what the weather was like today all that stuff right so brunch everything ok so back in the seventies DARPA created a project called the ARPANET and so the first four knows basic sciences so the first four notes does anybody know what they are the universities or Institute's it's close that the university to use yours in Utah Dallas sir nope you should go to Austin no my team was that UCLA yep Berkeley Berkeley nope MIG know how we get car might I can say this my alma mater UC santa barbara was one of the first notes the stanford research institute and the university of utah so actually a little funny backstory about this is these schools are kind of selected for a little bit political nah not political as like national politics but I heard they included you talk because they didn't want to just fund the three California institutions so then the other states would complain that you're only funding projects in California so that's kind of why you Thomas Kuhn I gotta think that s our I was probably included too just like a university thing they had some like private institutions involved oh yeah so this is the map this was the internet UCLA UCSB s RI and Utah and then you can see the different machines here so this is in those boxes it has the machine so the 360 at UC Santa Barbara the system 7 the 942 the PDP PDP 10 I i'll be honest i don't know all these things are so the crazy thing about this thing that we use in every single day that's connecting our fridges to news feeds and our TVs to our ads and stuff started adjusting for these four nodes and it was based so the other thing i really like little tip it is it didn't start with tcp it started with another protocol called a network control protocol so in the 80s as more nodes went on january first 1983 they just move they moved the whole entire networks to a completely new protocol tcp IP i think they call it the flag day dunno they did this I do this so very much here today how would you do this I turn it off and turn it back on who's going to do that the system of autonomous networks kind of your questions I don't need to do it say I honestly thank you virtually impossible to do something like this today that's what they did is actually great so one of the professors who was retired at Santa Barbara he's been there since the mid 60s and he was involved in my lab and so in his office there's a book about this thing this thing it says he says internet directory on the side or ARPANET directory or something like that I was like hey what's in this what's in this book you like oh that that's just a list of every computer on the internet in 1980-something and the name of the administrator their phone number and their email address yeah the network is so small they just just saw they decide that they call people and they all decide on a date and they decided they were going to switch over from any they just did it yeah they turn it off and turn it all back on with new protocols and that just worked I guess this is crazy think about you can't do that now right every every now be man just want like ipv6 has to be magnets compatible what we currently have we cannot completely move from ipv4 do we just break that we go think about like economies would crash coming in probably would be good we can ammonia yes about the same time in the 80s DARPA funds development unix and the important thing here is that it's tcp/ip implementation introduced the socket programming abstraction which is used in almost every network application now so then so I don't know if they did it concurrently but ARPANET in the 80s the internet grew beyond just ARPANET and just the universities and MILNET is the military network so the military's version am a good day they were connected and then the military realized oh it's a terrible idea to lend random people have access to our military network so I'm a completely disconnected I don't know I don't know they still are good question maybe they'll thought there had think it'll take before you the mill net still officially separate I would assume it would be because no yeah the top secret stuff would be but about a boyfriend so minutes that are just completely off you can email now people that's within the last 10 years interesting great and then I like this that the NSF created a super computer network and we have super computers you need to transfer data incredibly fast in one location to the other so they built this awesome network on this backbone of 56 ok I think about the time right it was like a 6-foot that's that's fast back then right oh you're good so the 90s and the early 2000s this one everything started to explode internet wise incredibly fast growth in both size and volume so what was the killer application of the internet was a good netscape yeah i say more generally the world wide web to web really was the key driving factor of the internet pretty much up until that point only nerds were on the internet perfectly frank right so they had an email they got mailing lists or I'm analyst ahead usenet and a bunch of other services ftp but there was no you know there were clunky and it wasn't until in 1991 Tim berners-lee at CERN creates the world wide web he used it to his ideas he wanted to he work at CERN so what a certain built as a cook go to church yeah the Large Hadron 29 lymphocytes the timer yeah tomato yeah a big lighter thing which is huge right so this he worked on this you know to help this purpose project and they have a lot of people a lot of different resources and everybody moving every place and he was like huh it would be really useful to have someplace people to go like get a list of losing one offices and with their clothes off work and they like it be great to like be able to like because the idea of hypertext was around so he's like it'd be great to like click on some of these names then go to their web page you can find out more about like their to get more information about them and then you built this simple Const implementation on the next step operating system and released it and they spread like crazy and I'll say the internet explodes it's really hard to get a feel for how would be the Internet has become how big the web has become and how much it's really changed so here is a graph this is the number of websites in existence from actually 1999 which I guess we extended it to make said you wanted to beat one right all the way up to now I'll be honest oh another exact methodology for determining this so you can see Scott let's see I thought the internet was big and like I'll say 2006 not even like 120 million websites in 2006 and now 2015 we're at like I don't know round we're hovering around a billion websites this is probably only public ones right it's probably not counting all the internal stuff you know how you count something like facebook yet one website that has a billion users right so this growth is just absolutely insane it was funny as I was looking at some of my advisor had a picture from 2006 so this is just 99 to 2006 you see the same exponential growth through there we came to see it here because the growth is so big so in a prequel time this is a really cool visualization I like of the internet so this is a visualization of networks and now they're connected to each other based on real data so yeah it's cool and you can see some of the backbones there and white that are transmitting high volumes of data yeah probably not over 50 60 would you say posted up the arrival of meanings in 1990s no that's actually not so well I don't know actually the interesting thing is that Tim berners-lee created his implementation on the next step operating system which was the computer when Steve Jobs left Apple he founded the company next and they made actually a really cool operating system which is actually pretty fun to programming and all this stuff and so he developed the client and the server application on next for next step it didn't I think this internet didn't the web didn't really take off until people ported it to other languages and that kind of stuff but I don't necessarily that it was specifically linux or I think in the 90s it wasn't huge I think I was work there's more berkeley he loved berkeley and a lot of sun okay yeah i was at mci worldcom for internet company like dial-up 9500 cool but it was all who's all the UNIX it was all right so some variants of UNIX and see right yeah that is using I mean what pages your interactive stuff is all down for CGI through right all right so this is going to be a brief overview of some of the incidents we're going to talk about there's a lot of dissidents but I kind of take something really right and I'm stretcher comes out with one hacking is where he came from so 19 2828 bell ringing in also in the end of 1972 Bob Metcalfe published in RFC so it's an RFC request for comments yeah so it's with I don't know specific task force but I'm basically issued this document that will look at about what he saw the state of security then in 1972 in 86 german hackers tried to obtain secrets to sell to the KGB which is crazy interesting story in 1988 was the first internet worm which is also really interesting in 94 kevin Mitnick every people heard of kevin at nick's name some of us all right famous hacker who attacked broke into the san diego supercomputing center and more recently in 2010 i really like this one albert gonzalez received a 20 year sentence for hacking so Tina's hacking group stole it was 200 million credit cards and they were cotton about 20 years prison and there's a dot series of so many more we talk about Hartley you talk about all kinds of stuff good neighbor machine I don't hey hey I don't know much about it I think I'd be good for crypto class because I think that's more relevant there for me these are what shapes our current thinking about software security right so I'm we patented I said as much like a big month I think these things definitely did essentially like the internet work and if you're in agony with it might be worth a especially with him the security community which was just started was talking about it worry about it thinking about how do we solve those problems okay so it all starts with Captain Crunch so what does captain crunch for those that maybe not from this country I don't know there's cereal and some point that used to have yeah it's a serial so it's just a box of cereal and captain crunch is the mascot so in 1972 the guy named John Draper he found that the whistle that comes in a box of Captain Crunch produced a sound at the 2600 Hertz frequency that's what it looks like so if you want to go to the store bye Massa captain crunch so you can feel part of the hackers period John braver totally welcome this is the whistle that produced that sound so why is this matter what kind of what who cares I was that a phone dial tone yeah so it turns out that the 2600 frequency was used by 18 teen of authorized long distance calls happen is and i'll be honest i'm not an expert on telephony systems especially circuits which and all this stuff and exactly how they work but the basic idea was when your phone call would go over the network and when you would make a when it would authorize you to make a long-distance call it would have to communicate that fact from your operator to the other operator to the switches in between right and it used frequencies over the phone so it used it would make a salad of 2600 to say yes this person is good to go so well John Draper found out is what we now call phone phreaking so he aliases hacker named Akane captain crunch he built this blue box are we out of time alright so we'll continue the story of all right Julie 