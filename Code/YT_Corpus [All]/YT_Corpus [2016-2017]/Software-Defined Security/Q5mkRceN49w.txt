 So, software is what controls our computer systems. We get things done by running software that we write, or somebody else has written for us. And, we're going to talk about exactly what are those bugs that actually turn into vulnerabilities. We're also going to talk about how exactly those bugs, or others get exploited. So the vulnerabilities that we're going to talk about come because of memory overflow. Keep in mind memory overflow means that the amount of memory we have for a certain data type is not sufficient so the data type runs over the allocated space. And an attacker is actually able to exploit a program by inserting new code sometimes in certain part of memory. And also then directing or transferring control of that code to the instructions that the attacker has introduced in this memory that we're talking about. Stack is the area where we allocate space for dynamically created data items or variables. So the most common example of when you use a stack is when you make a function call or a procedure call. When we do that, the variables that we need to execute the function code get allocated on the stack. So, as you make function calls, or procedure calls, for each call we create what we call a stack frame on the stack. This stack frame essentially you can think about, gives us the scratch pad or the memory that we going to need for the execution of this function. It's created when the function is called and it is discarded when the function finishes and returns. So what exactly is stored in the stack frame? Part of this we're going to allocate space for local variables that are going to be used by the code defined by the function. Also parameters that we're going to pass. This is data that we're going to pass to the function. Those arguments or parameters are going to be stored in the stack frame. And we also store control information. So remember when you call the function, you are doing control transfer, from where you were, to where this function code is. When you get done with the function, you have to return to the point from where you had made the call. And the vulnerability that we're going to explore today, which is buffer overflow, stack buffer overflow is actually going to manipulate the memory that is in this frame. Before we actually get into the details, I should mention the software vulnerabilities that we have. An attacker is allowed to call a program that you run on your system. The program may have an interface that allows legitimate users to make calls to it. And when they make those calls they are actually going to pass some data, so the entry point here is actually a legitimate call that could be made by users of this program. They pass certain kind of data and the attacker is going to pass data that is not what we expect. As a result it's going to lead to this overflow that we're talking about. 