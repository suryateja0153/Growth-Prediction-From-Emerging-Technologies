 excellent right thank you very much for coming back from lunch nice and promptly I do realize I'm tearing you away from food my name is Daniel Jones and I'm the CTO of engineer better a UK cloud foundry consultancy in the last few years I've been working with cloud foundry for a variety of different organizations and more recently one of them was a global wealth management enterprise now if you've worked with for the financial services you know they can be a little bit antsy about the information that is leaked about them especially if that's not from one of their own members of staff so this talk is grounded in the experience of operating cloud foundry at Global Wealth Management Enterprise unfortunately I can't give you really specific details because I'll be breaking NDA's and all sorts so we'll just have to be a little bit more abstract when I'm talking about a global wealth management enterprise what does that look like okay billions of dollars there are billions of dollars at stake if you include parent companies that we're actually talking trillions of dollars but again I don't want to give it too much information away because the stakes are so high security is of paramount concern right so there's going to be lots of policies in place to make sure that people's money is safe because the stakes are high there will be multiple data centers this is something that we're seeing more and more certainly in the UK with financial organisations adopting Cloud Foundry that they have their own physical tin datacenters and they want to be operating Cloud Foundry in each of them as well as having multiple data centers they're going to have multiple Cloud Foundry instances in each data center so in terms of architecture we're talking about multiple data centers with a big enterprise load balancer at the top I'm sure you can guess what kind of brands and then Cloud Foundry instances in those with local traffic managers routing traffic to them got a production Cloud Foundry in each datacenter that is serving traffic to end-users so customers of the business and their non production Cloud Foundry instances as well which from app as operations teams point of view are still production right because your app development teams are going to be pretty cross with you if your Cloud Foundry goes down whilst they're trying to develop their apps as we go through this talk I've got the privilege of being a cloud foundry ambassador at the summit I'm gonna share with you basically if we were having a chat out there and you're a financial organization the advice that I would give you the lessons that I've learned and the things that I think would help you before I go any further can you hit the squeaking through the microphone should I stop wondering about because this floor is really squeaky no I kept shouting at me heckle throw something if it gets too squeaky for your liking so we do find you know the kind of organization we're talking about with briefly touch on the architecture so what is the advice that I would give you if you're going to integrate Cloud Foundry into an organization like this or any organization really it's really important to define success what is it you're trying to achieve by adopting paths in this organization are you trying to allow people to develop the apps they've always been developing and get them into production quicker you're just trying to reduce time to market have you got a load of monoliths on tin that you're trying to migrate turn into cloud native micro services and deploy onto a path or maybe you're doing something closer to innovation accounting where you're trying to enable new types of application that didn't exist before new types of things the company couldn't do before that are now possible all of those things are going to require focus in different areas and if you're not clear about what it is you're trying to achieve then where do you focus your operations resources this isn't just something for CIOs and CTOs who are spending their money on Cloud Foundry this is relevant for the operations team as well if you're doing a migration for a monoliths on tin it's a cloud native micro services friction is going to be your enemy yeah the app teams are not going to want to move from their comfortable world would have change control requests and putting things on pet servers if there's friction in the way however if you're trying to enable new types of application then fund functionality features are going to be much more important you're going to want to have new data services for example maybe stick of Cassandra in there that they're not used to be clear about what it is you're trying to achieve measure it continually prove improve against it if you're bringing pail foundry into an existing organization with some heritage and some legacy there's going to be an existing context right before you came along with your hipster paths they will have been getting along just fine with bureaucracy and rules that have had in place for years those policies were created at a time when they didn't have a pass right so they're obviously not gonna fit anymore however the people that you're talking to that app development teams for example will still think that they apply an example of this was a development team that we were working with who insisted that they could not put they could not use cloud foundry they could not use the PA's offering in this organization because their developers weren't allowed to push stuff into production right so the whole self-service thing went out the window for DevOps people that's crazy right because we want to go from ideation to production and looking after the whole thing all in the same team but if you don't have all of the assumptions that go with DevOps and continuous delivery and CI and all those sorts of things then actually you can understand why this might be a bit scary the idea of having some cowboy code are sneaking a backdoor into a financial system sticking it straight onto a production server so we were talking for SAP development team trying to get them to on board onto the pears insisted that note we can't do that there's this policy over here it's been etched into a stone tablet we can't possibly change it we went to the security in the compliance folks we asked them about the regulations that informs that policy why do we have this policy in the first place how can we change it how can we work around it how can we have a new policy what if we insist that all of their code is under source control everything is delivered via CI what if we have static analysis as part of that what if we lock down all of their production spaces so that humans can't log into them but only automated systems can what happens if we use a tool like IBM's Erb and deploy I don't if you've used the ERV and deploy it's got a big horrible enterprise-e GUI but it serves some really useful really useful purposes in the context of Cloud Foundry now it's got really granular use permissions much more so than Cloud Foundry itself everything's audited including all the binaries that it pushes so not a temporary cache like you find inside Cloud Foundry actually archiving every binary push to every environment and more importantly than all of those it served as one place that we could do secret injection so the Paz operations team wrote some tooling to interplay properties that urban deploy the tool knew about into manifests which it would then push into the production spaces we took that to the security and compliance folks they matched it against the regulations they're like yeah this makes sense we can do that we went back to the development team said yes yes you can use Cloud Foundry that policy now doesn't apply to you you're going to find these policies resist when people try and insist that they still apply even though they don't reinterpret the regulations come up with new policies appropriate for the time the comment of policies that you will encounter are likely to involve some amount of manual approval right wider enterprises like manual approval well for lots of reasons one of them being that they'd like to have someone to blame they'd like someone to be responsible for making a decision also you will find that in large enterprises the IT organization and the app development organization could be completely separate legal entities right and it's the IT organizations responsibility to get keep to make sure that things are done sensibly that all the rules are applied and things like firewall rules are correct and match up to what they should do having those manual processes in the critical path of what your app teams are trying to do is going to prevent your paths from being self-service if your path is not self-service then it is platform-as-a-service okay there should be two S's empowers make sure that you've got the right s and not the wrong one so an example of this was in an organization where they had this idea that they wanted a declaration of everything that should be configured for an app team to use Cloud Foundry and this was actually quite a good idea right so all of the spaces they wanted all of the users all of the roles for those users user provided services that IP addresses and ports of things they were connecting to all in one place that one place did happen to be an Excel spreadsheet which wasn't ideal but it was raised through a change control ticket and since operations team who you know tap away on the CFC Li and make it all happen that meant that there was a stop in the process it couldn't be self-service people had to raise a change control requests wait for it to be implemented that introduced friction so when you're trying to convince people to start using your pass because it's a sensible thing to do you're taking them out of their comfort zone but you're not really making their life that much easier resist any temptation to have manual processes in the critical path of getting apps onto your PA's as well as manual processes for the critical path of users of your path so manual processes in the workflow of your customers it's really important to not have manual processes in the critical workflow of the pad Operations team itself okay I mean the keynote yesterday was talking about automation taking over the world really important right if you have loads of slow manual processes sooner or later someone is going to come along and disrupt your company and do everything much more efficiently more productively than you that's probably why you were using Cloud Foundry in the first place right to protect yourself against that the problem with manual processes is that they take time and by the time that you realize that they're becoming painful you won't have the time to automate your manual processes because you're spending all of your time on manual processes you get stuck in a trap you can't get back out of it again the book in the background there scarcity describes how people get stuck in traps when they don't have enough of something there are psychological effects that have been proven and demonstrated when you don't have enough of a resource and when you're aware that you don't have enough of a resource be it money be it time you can only focus on the task right in front of you your ability to plan into the future your executive control is inhibited you are less able to do abstract problem-solving and dig your way out of that hole don't get yourself into this trap in the first place you might be tempted spend the extra time up from automating things everybody that I talk to when I was going back and creating this presentation and the different teams that I've worked with over the years really wanted me to make this point to you don't get yourselves into that trap so why isn't there more automation enterprise right why is it not the the default state of things that everything automated already well one reason is that bureaucracy is yesterday's automation ramp and I'm sure that in 50 years time people will be looking at all the automation that we've put in and complaining about it just as much as we do as rules and policies right that was the better alternative than chaos and anarchy another reason is that when people that practice continuous delivery talk about automation we're actually talking about autonomy ssin in the Toyota Production system which inspired lean in the Kanban development methodology to each Yano talked about autonomy chien being automation with the human touch and that human touch was common sense it was error checking right it was making sure that a machine wouldn't rampantly do the wrong thing that if pieces came out the wrong shape or size or whatever that the system would shut down of course as DevOps folks we're not going to deploy something without smoke testing it we're not going to deploy something about blue greening it when you're dealing with trying to bring automation into an enterprise sooner or later you're hit upon that person who tells you the war story ivar well we automated this thing a few years ago and it rampantly went out of control and it was a disaster and it's span up VMS everywhere and we're never doing that again they don't realize that we're thinking about autonomy ssin and we probably don't realize that either when you come up against hostility for automation demonstrate your autonomy ssin show them the smoke test show them safety checks that mean that it's not going to rampantly go out of control and do bad things the other thing about manual processes is that they're soft right they're squishy the fuzzy around the edges they don't have hard edges like an API if I send a request to the cloud controller and I get it wrong I'm going to get told very quickly that I did the wrong thing right I get an error message I get some pain delivered to me I get told though I have to go back to go and I'm not going to collect 200 bucks that pain is information that informs me that I need to do things differently the information I'm receiving in this picture by the way was that I should do what the men on top of me were telling me to you want to be like an API and pass on that pain to your users anecdote about this remember that spreadsheet I was telling you about with all the user provided services and the IP addresses and the ports and things like that one team had 4646 user provided services for one app yeah because it's a large enterprise they've got lots of heritage of PA's databases forty-six used provided services with lots of different IPS and ports for each one of them day before a production release they realize they've got connectivity problems okay and they want us to debug into it so we say send us your spreadsheet so we can look at the canonical list of all the things he wants connected I'm afraid we can't do that what had been happening well they'd been sending change control requests in without the appropriate information and then phoning their friends in the path operations team who was trying to do the right thing yeah he was trying to help out fellow workers he knew that they were under pressure he knew they were under deadlines so when the request comes in of oh I know we haven't put the spreadsheet on but can you just have this rule I know we haven't put the spreadsheet on can you just take that rule out can you just change this port to that before long in a diverge completely their solution that they wanted us to enact was to go through every cloud foundry on every day sensor down the list of all the user provided services all the security groups and all the firewall rules from the SDM and try and create that list of them or answer no we're not going to do that you're going to miss your production deadline because you've not done the right thing now that sounds really harsh right it is harsh but it's fair if you absorb that slack then information gets lost the whole machine continues to be inefficient if I was an API if the PA's operations team was an API they would not be able to get away with that if you're going to move your users towards automation you need to train them that they can't get away with those sorts of things you need to re-educate them and their behavior you can't phone Amazon Web Services and say all over that request I sent you can you just you know that's what I meant I know I didn't type that that's not I meant train them to use automated systems pass on pain be like API we can't be all stick and no carrot right that would that would be bad if we carried on like that with every single request then nobody is going to use our platform we want to help people be successful we're passing on that pain and educating them for the sake of making them more successful so we need to understand their context more right this when I read this I nearly fell off my chair and then I wanted to print it out frame it and stick it up on the wall in my office unfortunately if I did I'll be breaking my NDA so this came about where the pass operations team wrote a bit of tooling which if you're running Cloud Foundry and especially a commercial distribution of it is a quite a good idea it swept through all of the non production spaces and turned off apps at the end of that units working day if you're an enterprise chances are you're running Java if you're using Java you cannot say hello world in anything less than half a gigabyte of ram you straight spring boo wonderful as it is you know you can't get done much done without much RAM you will also have a load of apps called manifest yeah more that you probably don't need to be running that will be using all the RAM on your Cloud Foundry so they swept through and turned them off product owner emailed his engineers saying look I realized that restarting our apps is scary but it's part of the brave new world of cloud native I had never thought that restarting apps could be scary it just totally blew my mind I didn't even think that this would be a concern of this so why was it a concern of this enterprise IT is awesome at what it does but it has a slow rate of change so they develop an app at the end of a long Gantt chart put it on a pet tin server that never changes doesn't move and it stays there for two years without being restarted it just runs now all we're tillens restart them all the time so they're not used to it that made me realize how much of a gap there can be between those worse if you're involved in PA's operations hopefully you get things like DevOps and continuous delivery but the your customers probably don't and we need to bridge that gulf we need to make sure that we understand the context of where they're coming from if Cloud Foundry is a new thing to your users then it's going to get blamed for things right if there's a problem it's going to be the new thing it's not my code it's that new thing you're making me use I've run out the lost count of times that I receive phone calls or email something along the lines of well my application works perfectly fine on my machine but when I push it to your Cloud Foundry it doesn't work so I think you've got a problem with your pass at which point right you've got two choices you can do the enterprise thing you can throw away hundreds of thousands of years of human evolution where we evolved to be social beings that work well together and have emotional responses to each other's faces and things like that and send a passive-aggressive email looks at the other apps and I've looked at the monitoring it all looks fine to me must be your problem mate go back and fix it or you can do something else you can find out where they sit and if they are in the same building as you you can sneak up on them without them seeing you sit yourself down right ie you've got a problem with your app on Cloud Foundry let's work through it together Oh plug in a keyboard and we'll work through this one together you can turn people around from people that host are scared of your platform into advocates through pairing with them you can educate them show them all the tips and tricks of how you debug things explain how the internals of the past work if you just send people passive-aggressive emails they're not going to get all of those benefits whilst I'm talking about pairing if in your past operation seems you're not pairing you should be doing it now pairing is not just for programming okay when you are debunking live production issues you want another set of eyes on what's going on in case you do something really stupid like say delete all the admin users you want another brain to help contribute towards that problem what's more important than all of that though is the learning and the exposure of knowledge when you send an email out that says that oh well there was this problem and these were the symptoms and I did this to fix it fast priority of semantic knowledge right that's like remembering facts for a multiple-choice quiz don't know about you most people don't remember that kind of information very well when you're on a journey with someone debugging problem solving constantly then it's you're using your episodic memory you remember journeys you remember experiences much better than you remember discrete pinpoint facts pair with people in order to expose that learning make them remember things so even if you start bridging that Gulf and establishing a lot of context with people you will get people that break the rules and when I talk about breaking rules I really do mean rules because there's likely a service contract between the operations team and their app development teams one organization I was in the service contract was Val shalt write 12 factor apps thou shalt not put monoliths on Cloud Foundry no no no unfortunately one team insisted on writing their session state locally so whenever use logged in got written into this Cloud Foundry here these didn't know about it if we need to upgrade this Cloud Foundry then the users will be moved over here and logged out and lose work in progress what could we do about that not a lot we wrap as operations team we don't have the levers to be able to go and chastise people hell we even got them to sign up to a contract that said they wouldn't do it use the simian army approach we wrote some tooling for a that was run on a CI server that would talk to the global load balancer using its REST API and switch off traffic to production cloud foundries during production hours randomly we told them that we were going to do this we gave them lots of notice we were very kind to them but they knew now that it was going to happen it wasn't a remote possibility in their heads it was a forcing function we made them change their behavior for the better to make more resilient systems if you've got people that are new to writing cloud native apps and struggling with the idea of developing designing for failure how to check out a project called chaos Galago it's a service broker that will restart apps at a random interval you give it a probability and a duration and it will randomly restart apps that might help people on that journey so that keeps the app developers honest what about as operations team if you don't take anything else away from this talk I want it to be this okay continuously acceptance test your platform every minute of every day what do I mean by acceptance tests in your favorite bdd framework whether it's r-spec Omega lambda behave in Java tests that exercise the functionality of your platform from the users point of view low-level infrastructure monitoring is great right knowing that a service had a problem if a server falls down in the middle of the woods and there's no user there to notice it does anybody care well probably but not at four o'clock in the morning when they get paged out of bed I don't get distracted by low-level monitoring and data metrics use acceptance tests to find out whether you've got a real problem an example of an acceptance test that we were running a CF push test it would check out a fixture it would push that app it would hit that app it would check the response it would stop the app it would remap the app the root for the app it would start it again it would hit it again it would stop it again it would delete it we did that every two minutes on every cloud foundry in every data center which also tested our platform to a certain extent but we did the same thing for our data service as well rabbit MQ Redis those sorts of things that meant we had great confidence that the system was working it was on a CI server so we had a great wall board within red and green boxes publish that to the app teams publish it to your stakeholders everyone will know how well your platform is performing that works well for the day-to-day running of your pass what about when you need to do two upgrades okay and I've talked about having multiple cloud foundries which is a really great pattern for insulating yourself from failure despite all the cool things that people - ops manager and Bosch can do you can still irrecoverably balke Cloud Foundry in the course of an upgrade you need to be able to divert traffic to other cloud boundaries if that happens when you're doing upgrades you need to check that your apps are still working why would I need to do that you asked me there's a perfect obstruction between pairs an app unfortunately it's not that simple especially when it comes to build packs long story short open SSL issues lots of upgrades upgraded our Cloud Foundry picked up a new bill pack apps we're using the new build pack ask the app development team can you test your apps there works on this non-product I found REE we don't have any automated tests it's an enterprise they plan things three months in advance on a Gantt chart the offshore testing team is busy doing something else so they didn't really give it a thorough test we upgrade all the production Cloud Foundry is next thing you know somebody is debugging byte arrays in hex for a week finding a bug in Kerberos in the open JDK make sure that your apps have automated tests that you've got hook into their CI system if they do that you can trigger tests against your upgraded Cloud Foundry if not have a contract with them that they will expose an endpoint that you can hit that does a dummy transaction something meaningful with all the behavior of their application if you're gonna have multiple cloud foundries have a development Cloud Foundry you should be writing some automation and some tooling which is changing the state of your cloud foundry make sure you're not using the same one that your users are like development teams some numpty once run wrote a piece of code that was creating some users safe for only creating users and of course you should have realistic test data right you know so people understand the purpose of your code only problem was that the realistic test data was admin user we will recognize that a little it's realistic and we need to tear down the data we create in the tests yeah don't do that have a Development Cloud Foundry if you're using windows apology so any Microsoft folks in the room if you're using Windows and you're trying to develop Ruby on Cloud Foundry you're gonna have a bad time you will lose weeks to various issues with things like nokogiri and compilation you can use Linux or OSX that's what the rest of the ecosystem uses you will be more productive because you can leverage more things that the community has made if you are using Windows where you find yourself an enterprise that's using Windows you can be pretty productive with mingw which is minimum renew tools for Windows which gives you bash and corneum you which is a bit like I term but with completely different short keyboard shortcuts use that in the past works really well I was gonna tell you about a load of bash scripts that we wrote to make targeting multiple Cloud Foundry is easier and then we did some stuff to print out cf home to bash prompt some of you always knew which one we were targeting instead I'm going to tell you about flex which we've written and is a simple shim that will allow you to manage multiple cloud foundries and run one command against all of them still works with all your favorite plugins it optionally fails fast so if you're deleting something maybe that doesn't exist on some and it does on others it will cope with that what's more exciting than that though is cf converger which i've been hacking on wasps I've been over in Santa Clara this is a system that will take a yam or file and it will make your Cloud Foundry look like you described in that yam all file right so hands up quickly if you use Bosch cool enough people write with Bosch we know that snowflakes are bad we say make the world look like this Bosch and it goes and does it with Cloud Foundry though we all think it's fine oh well you just fiddle with your state and change this and change that and if we find someone will back it up converger will take you yeah mph I'll create orgs spaces users user provided services and that can be run against multiple cloud boundaries so if you have to make a cloud found you look a certain way or say you set up an app across multiple cloud foundries this will help you another tool that is handy if you've used a software-defined network is something made by some friends of mine it's called Virgil it will sweep through Bosh look at where your Diego cells are and will dump out a load of Jason describing firewall rules based on your security groups and so hopefully giving you some useful links the tools talked about some lessons that I've learned hopefully you can apply let's move away from the challenges and look at some of the successes this is something that I tweeted about last year open SSL issues have lots of upgrades to be done this work involved a pair in the past raishin seem occasionally leaning over going to ops manager next and then carrying on with their work so it took a couple of days but minutes of people's time rather than hours the folks that were there were embedded in this enterprise estimated two years of scheduled weekend maintenance every weekend for two years this is several orders of magnitude better than the status quo right that is why you are all here that is why we are here because Cloud Foundry gives people that orders a magnitude better improvement in their productivity I really wish I could share with you the story of this this is from a product owner who emailed out to his engineering team to the IT directors the Paz operations team this product release took us weeks instead of months because we're using Cloud Foundry because we're using a powers instead of physical Tinh servers again that is why we're here not because it's a bit better because it's a lot better define a success make sure you're clear on what your objectives are measure them and continuously improve against them reinterpret regulations rather than reapplying existing policies if it's not self-service then it's platform-as-a-service defer demonstrate or Ptolemais ssin when you find hostility to automation pass pain on be like an api at the same time build empathy through pairing and understand their context educate them help them learn shake out rule breakers by using the chaos monkey approach how testing contracts so you can make sure that you can upgrade your cloud foundries in a timely fashion and most importantly of all do continuous acceptance testing against your platforms all the time so you have great confidence that they're working I'm Daniel Jones from engineer better if you have any UK Cloud Foundry requirements please talk to me if you want to ask any questions about Cloud Foundry generally I'm an ambassador and more than happy to help do we have time for questions yes yes we do there's about 10 minutes of the next people are in so if there are any questions please stroll up to the mic tumbleweed ok right well thank you very much [Applause] 