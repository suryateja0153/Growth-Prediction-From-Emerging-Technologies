 you hello all and welcome to this we're actually doing this live from pucon here in london and andy is back east in the united states and he's andy goal sign is our principal software engineer and he's been working on openshift for a number of years so i'm going to let him introduce the subject of services Lincoln's and catalogues we've got a number of folks here sitting with me from pro tab on so I will let them talk through my microphone and the Q&A session starts what we're going to try and do here today is let Andy take the first 20 minutes or so to present the state of services leggings and catalogues and how to get involved in it and how to help where the Trello cards are where the stuff is and github and all of that and then we'll have QA via the chat room and if you just type it into chat well read back the question and if you're having to be in the room with me here you can actually talk live so I'm going to mute myself for now and let Andy take it away so thanks Andy for joining us today all right Thank You Diane so my name is Andy goldstein I am a principal software engineer with red hat I'm the team lead for our cluster infrastructure team which focuses on Cooper Nettie's so within openshift are a big part of the foundation is Cooper Nettie's so today's talk will be covering services linking and catalogs as they relate to both Cooper Nettie's and open shift so here's what I'm going to talk about today services linking and catalogs so for starters if you're deploying something into Cooper nutters or open shift whether it's a series of micro services or a large java application for example those things are going to be deployed using pods and a pod is just a collection of containers and pods come and go though you probably need some way to consistently reference database or a web service or a memory cache that your micro services or your applique need to talk to so that brings us to services what is a service it is an abstraction that allows us to not have to worry about pods that are transient and it instead gives us a consistent way to to reference your database or your cash or whatever you're trying to talk to so a service inside of Coober Nettie's an open shift is something that sits in front of pods via a label selector and I'll have an example where you can see some labels and how the service is able to select which pods it is going to communicate with the service has a static IP address which is extremely useful for consistent communications additionally we have dns integration if you have that enabled in cooper teddies and it's also out of the box with open shift so rather than having to remember an IP address you can use dns to communicate with your services and the service acts as a load balancer in front of the pods that it is it's sitting in front of and requests that go to that service are delivered most of the time round robin among the pods that sit behind it there are there is another use for services within the cluster as well you can use a service that instead of talking two pods or sitting in front of pods is used to provide a link to an external or off cluster destination so an example would be lets say your IT department has an existing oracle database or an existing web service that has been around since before you deployed openshift and you want to be able to reference that service in the same manner that you would use if you were referencing a series of pods that are fronted by a service and so in this case as a user or an administrator you would manually manage the endpoints that that service is sitting in front of instead of having a label selector that takes care of that for you automatically so here's an example service I have a service here it lives in the namespace Andy it has a name of DB because it's a database service and then I have a selector that is going to match on two labels the first one is DB name and it wants to find pods with a DB name value of postgres and the second one is for the environment and we're looking for a production pod and in addition to specifying a selector you specify at least one port and this makes sure that the service is listening on port five four three two and it is targeting port five four three two inside of the containers or inside of the pods that it's sitting in front of so here's a graphical representation of what that might look like you'd have your DB service that gets a cluster IP address I picked one at random here 1000 dot 15 and you'll see three pods two of them pods one and two have matching DB names and environment labels for postgres and prod and you can see each pod has a unique IP address the third pod has a different value for the environment label stowe in this particular example the DB service is going to communicate with pods one and two but not pod three and to the right of the DB service I have listed what the DNS entry would look like by default for this particular service it's the name of the service d be followed by the name of the name spacer project which in my example is Andy and then dot SVC cluster dot local so how can you talk to the service there's two ways you can do it I just mentioned dns and there's one other mechanism which is environment variables and cooper Nettie's an open shift will automatically create environment variables for you that allow you to to look up the host and the port of your service and these environment variables are automatically created and automatically injected into your pods when they are created and started now there is an ordering issue you do have to make sure that your service exists before the pot is created otherwise the you won't have these environment variables accessible in the pod and that's why DNS has an advantage because DNS is going to work any time regardless of if you create the service first or if you create the pot first so how do we find services I you can definitely run OC get services or cube control get services and this will list all the services in a single project not super easy to make this work across projects you can have it lists services in every project but that's going to give you everything and it's going to be hard to to filter out the weeds it's not a curated list it's just literally every single service that you have access to will show up when you run that command across projects and similarly where it's not a curated list if I did want to to expose one of my services so that other users could find it effectively if I wanted to publish it there's no command for doing that right now which is why I have some question marks after OC there you could grant users read-only access to a project but even then the default policy for the viewer role I don't believe gives you access to two things like secrets if you needed them to to to communicate with a service for credentials and and doing this granting it's pretty broad if I give somebody read-only access to my project they get to see pretty much everything in there and i would probably much prefer it to be more restrictive where i could explicitly say i have a net CD service that i want to share with other people but i have a post-grad service that i want to keep to myself within my project so what's missing in services they only have the IP and the port reports specified for communicating with them and there's no way to easily associate any sort of configuration details or credentials that you would need to use when communicating with the service and case in point is username password that sort of thing you you don't have any environment variables or files or anything that represent those credentials unless you take the appropriate steps to get those into your pods via secrets or however you plan to do it but there's no way to associate that with a service right now so one thing that we're proposing is being able to link configuration details and secrets to a service and the proposed command that we have is OC link and so I have two examples here where i'm saying i would like to link adb cred secret to my DD service and i would like to link a DB config map to my DB service and what this will do is add a new annotation that contains a list of the referenced items and this is just a proposal for right now it's a lot easier to prototype an annotation than it is to modify the api and maybe one day assuming this is accepted we would get this to evolve to an actual field on the service itself so here's an example secret and config map item you've got the DB cred secret with a username and password and you've got the DB config map with some arbitrary data in there I just happen to pick color of green what does it look like after I run OC link you'll see that this is my service that's the same Andy namespace and DB name but I've got some new annotations now so after I run at OC link you would see these Cooper Nettie's io / references annotations and by itself this doesn't doesn't really do much but what we can do is service linking so I mentioned before that environment variables are automatically injected for all of the services that exist at the time that the pot is created and that's something that we are probably going to deprecate so that you have to be more explicit in which services a given pod depends on and so what we'd like to do with service linking is provide the ability to link configuration credentials and services do basically anything that has a pot or a pod template so pods replication controllers deployment configs and openshift deployments from Cooper Nettie's jobs demon sets and anything else that might come along as we grow so let's take an example deployment config this one's pretty basic I've stripped out some items that aren't relevant to this example but I have a deployment config called front end it has two replicas I have a selector to find and I have a single container that's running the andy / front-end image whatever that happens to be and it exposes one port on 8080 so what would it look like to do linking here I'd like to reuse the proposed link command and the example is OC link service / DB DC / front end and this would link the service and any references so that would be the config map and secret that I had in the example I'd like to bring those along with me so that when the service is linked to the deployment config we get that information automatically added without having to do any extra work and this linking could happen as environment variables or volumes and files I'm going to demonstrate just environment variables in this example so here's what the deployment config would look like after we run the linking with some of the other irrelevant pieces removed you'll see that there's a new env section under my container and I've got five environment variables here I've got DB underscore host and DB underscore port which come from service and then I've got the DB underscore username and password which come from the secret and DB underscore color which comes from the config and so all of this just happens as a result of running OC link and now when the deployment config is deployed and we have an actual pod or set pods that come from it the code running in those pods can make use of these environment variables just because isn't it it's a convention that we're attempting to establish so there's still a lot of things left to be done when it comes to thinking about service linking one big one is we'd like to find a way to do linking inside of templates so a template inside of open shift and hopefully eventually cooper Nettie's is a list of items which could include things like services image streams build configs deployment configs individual pods etc and right now there's no easy way to define a service in a template and define a a pot or deployment config in the same template and have a way to designate that the service should be linked through the pod and so that that's one item where we could use some help another one is finalizing the environment variable and volume conventions and just what the user experience looks like around that a couple more outstanding questions are should we do the server side we do a client side if we do it client-side it is fairly easy to get the moving parts going but it means that every client would have to implement the same or similar logic vs if we do it on the server then it's implemented in one place and all the clients can take advantage of it and then finally unlinking is something like that needed and if so what does it actually mean do we remove the environment variables in the files or what so definitely some items still to figure out there which moves I'm going to move on to service catalogs now so what we're proposing is a curated list of services and you can have one or more catalogs inside your cluster users or administrators would be able to pick which services they want to publish to a catalog the catalogs would be able to display services across multiple namespaces or projects and so this solves the problem i highlighted before where if you run OC get services and you only see either services in your name space or services across multiple namespaces this solves that problem and the fact that users are publishing them means it is a curated list we want to provide the ability to list and search and then finally what good would a catalog be if we couldn't actually consume the services in that catalog so what are we proposing for publishing a service to a catalog OC create catalog entry give it a name in this case and EDB I'm saying that I want the entry to reference the SVC / DB service from my name space I want to put it in the default catalog and I'm going to give it a description of Andy's TV service and this will create a catalog entry for that service and here's a sample of what that might look like so you can see that the the name is filled in as and ETB the catalog is default it's got my description and then I have a reference field in here that references what namespace the service lives in what kind of resource it is in this case of service and the name of that particular resource which is DB and similarly if I wanted to take a look at what service catalogs existed i could run OC get service catalogs and in this example you can see default finance and IT and then if I wanted to see what individual entries existed in a given catalog I could run OC get Service Catalog entries default and then I would see Andy DB which was the one that we just looked at and then I've got some other examples here for rips a brightest memcached and at CD so how do you use a catalog entry well because the services or whatever is in the catalog can come from multiple namespaces and you may not have access to two get those resources from a given name space we're doing something similar to persistent volume claims where we're having a service claim and the service claim is a resource that you would create that indicates your desire to use an entry from the catalog but it doesn't exactly give you the immediate ability to just reach into someone else's project and and get access to their data so here's my example OC creates service claim my DB being the name and then I specify that I want it to come from the default catalog and I'd like to use the anti-tb entry so what happens when you create a claim we will have some code running in a controller that processes the claim and the first thing that would happen is that claim would be evaluated to determine if it should be admitted or rejected and that could go a few different ways it could be an automated decision where you've got a policy of some sort that determines who's allowed to who's allowed to create claims feels allowed to consume catalog entry items from particular catalogs or it could be custom it could go through some sort of workflow process where you need to have some manual intervention where a manager needs to approve a claim for example and finally once a claim is admitted it will be fulfilled in whatever manner is necessary based on the type of the entry that's in the catalog so here's an example let's say I've got my catalog entry that we were looking at before for Andy DB and on the left I've got an Andy project that has the three resources that we've been discussing today so far the DB service the DB cred secret and the DB config map and John here wants to create a service claim to use this particular entry from the catalog and so John creates that service claim and once it is admitted the controller would go and create something that looks just like what's in Andy's project you'll have a my DD service a DB cred secret and a you config map and these items represent basically copies of the data that is in Andy's project at a point in time and the the service itself would most likely be configured to point do Andy service so if you if you attempted to connect to the my DB service it would just redirect or potentially be a cname over to the Andy service or to be a DB service in the ante project so I mentioned that there's different types of catalog entries for entry references one of them could be serviced and that's the example that we just looked at where you would or the controller would copy the service and any associated configuration and secrets it'll copy that information into new resources in the destination project so that's where John's project got new resources with the data copied from Amy's project another type of reference could be a template so this would be a way to publish a template so let's say that I have a template that creates a net CD cluster for example and as I mentioned before if I don't want to necessarily give every user access to all of my templates I could pick this at CD template publish it to the catalog and then they would be able to create a claim against that template and the system would provision that template for them in their project and then another type that we're considering is a service broker type and this is similar to what other cloud vendors provide where you can basically inject a set of catalog entries into the catalog and then all of the provisioning and linking and unlinking and D provisioning is handled by an external service / Broker so there are still a lot of to do's and this is where we are really looking for community help and community input I'm going to be starting some design and prototype and would definitely appreciate any help if anyone's interested in providing some assistance we are looking for feedback on the user experience though all of the examples that I presented in this presentation so far are not set in stone so we want to make sure that we get the best user experience both from commandline perspective and from the the web console perspective which I didn't even haven't even discussed yet so any feedback on user experience would be extremely helpful feedback on the service broker API we need help defining that so that we can make sure that that has a good user experience other things we need to figure out our TLS support so for example if you've got a an external service for even an internal one and I and I create a claim and I get a new service for my project if I try to make a TLS connection to that service it's probably going to have the wrong hostname so there'll be a mismatch because I'm trying to talk to my service in my project when it's really the certificate is valid for a different project so we need to figure that out security is a big one figuring out who's allowed to publish to a catalog who's allowed to consume various items or entries is something that we definitely need help with multi-tenant networking if that is enabled then just creating a cname for example from my new service to the original service is not going to work because most likely the the network won't allow those connections to go through so we need to figure out how to poke those holes appropriately and then finally just keeping data in sync if I have a config map or a secret and I go ahead and do a claim against that and then the original data changes say the password changes I'm not going to be made aware of that unless we figure out some way to handle that so these are a series of to do's I'm sure there's probably a lot more and we definitely will appreciate any community help we can get so in closing I want to thank everybody for listening and the first link I have on the page here is the Trello card that we have for the proposal that exists upstream and the Cooper Nettie's repository the second link is to our open shipped origin code base and the third plank is to Cooper Nettie's and I want to thank everybody again for listening and I will turn it over to questions at this point all right thank you Andy there's one question right off the bat from rich carpenter around the security stuff and he says in the example of the DB service claim with the project client making the claim need to get their own credentials seems it might be a security risk to have any other projects making the claim have access to the same credentials as the creator of the service right so um we definitely appreciate that and what we are thinking is that that will probably be multiple phases and for starters we most likely would just have the credentials be shared but we are definitely interested whether it's with template provisioning or the service broker model or another one that we've yet to come up with we do want to to provide the ability to generate / whether it's it's per pod or per project or what the appropriate scope is we want to be able to generate unique credentials so that not everybody is sharing the same single set and since I'm wondering Andy if you could pull up the Trello card that you mentioned and just show that on the screen because maybe not everybody is aware of our our process from the community point of view of how to comment on Trello cards sure give me just a second to pull that up here you guys have oh yes hi Andy this is christian eastern Rozen from 41 so i would like to know when one would be a bi-level the serviceworker support what was the question when will we have service broker support yes I don't have an ETA on that at this point we need to define the API and then I there are still several moving pieces to figure out for starters there is no code for any of this right now it's all theoretical though I am planning to start prototyping very soon and like I said we will definitely appreciate any input and collaboration on any part of this including the service broker true in alandi this is who I am commanded from promise line and I want to know it's a question about security how can you manage your own service in a public service catalog for example if I want to change something in something in a sacred or in a complete data a how can i change that and reference in every everyone who is claiming that service right so that was one of the the bullets I had on my next to last slide with the items that we have to still figure out so keeping all of that data in sync we don't have a path forward yet or a solution yet but it is definitely an item that we are aware of and we will be working to to address okay on another question were in your proposal i miss a sony information about the security policies I of one service in a Service Catalog for example a if I have to look upload my service to a service for example the default said miss cuttle everyone can change I can update that service oh no I suppose that not so maybe we we need some security config to uh we need to act at some security config to that service yes I definitely agree i if you're looking at the screen now I have the proposal that I've submitted to Cooper Nettie's and highlighted is security and figuring out what to do there I agree one hundred percent with what you said and I think what's probably going to happen is there will be an initial round of prototyping just to make sure that what's in the proposal is feasible and that probably won't include security to start off with but we obviously wouldn't want to really ship anything without security built-in so i will be planning to have discussions with with other members of our teams who specialize in security especially around access control in Coober Nettie's an open shift and it is something we need to solve all right let me just check and see it looks like there's a couple other questions popping into the chat um let's see from Lee Calcott um it's curious as to whether there is a vision for a federated Service Catalog where and services are shared across the open shift deployments so I guess I need some clarification on that is that a question about if you have multiple openshift clusters would you are you asking for a way to have entries in one catalog in one cluster be made available to another cluster he's saying yes okay that wasn't something that I had been thinking about but if that's something that you were interested in I would definitely appreciate some more details on that use case see if he pipes in with a little bit more Maya and that certainly can be submitted as feedback to the Trello card that I have on the screen right now it could be submitted as feedback to the proposal that's inside that the trelig are links to so either of those would be a valid way to to get that feedback to us I mean he's now saying sure he's built the cisco endure cloud service catalog and he'll he'll do is worse to help you out all right thanks Lee more there's another question from Mike can there be a service or similar object that is referenced by other projects instead of copied so you could create an object as a DB DB connection or a prod DB and publish it and other projects could reference it in their project yeah and it's a very long-winded once up and keep going um yeah I'm reading it yeah and I'm gonna find Mike and take him off mute let's see like if you unmute yourself you can talk and add some context to that question so I think that that question Mike probably needs a little bit more context of what you're trying to accomplish I could I got understand the question so I don't have an answer right now I I think the goal here is just to avoid having lots and lots of copies of services in individual namespaces that all point back to an original service so that if the credentials change or the config changes you don't have to to refresh that sort of thing I think that's I like that we just need to figure out if you do have the multi-tenant networking plug-in enabled a way to be able to to poke those holes appropriately and also from the the if you're writing an application or micro service and you're deploying it to a project you obviously can can talk to whatever your firewall allows you to talk to but it's certainly easy to say I just want to go to the service or DNS name called DB and don't have any it's not a fully qualified name and because of the way that DNS resolution works in the containers DB would be resolved to DB dot whatever your project is dot service cluster got local which obviously would require that you have a local service but you can also reference services by dns name that don't belong to your project and the only issue or potential issue there would be if the multi-tenant networking plugin doesn't allow you to make that cross project top so it's definitely something that's worth thinking about but I will say that you are not going to be allowed to get access to secrets in another name space for another project so we you probably are still going to need to have a have to have a copy of that in your project locally alrighty then I'm not seeing any other questions in the chat looking around the room so Andy from your perspective what's the best way you mentioned Trello before adding in use cases and comments on Trello is that really the best way for people to contribute at this juncture um that is certainly a good way to do it I like that just because it's it's not an email that's just sent to me that potentially gets missed and it allows all the members of the community to see what people are interested in and collaborate on it to either the Trello card or the Cooper Nettie's pull request would work for me okay so if you could throw that last slide up again just so we'll end on having those those links there for everybody to share didn't reduce the second my I think I saw on that Trello page that this was a proposal that was in the works for 3.3 school yeah so we are hoping to get something in 433 and we are trying to figure out in addition to doing the prototyping we're trying to figure out where this code is ultimately going to live we would like to have it be something that users could run on Kuber Nettie's as well as openshift but it it's probably not the Service Catalog portion of it is probably not something that would be considered a core Cooper Nettie's feature edition and whereas linking i think is probably has a better chance of getting into the core project so we just need to figure out the best way to deploy this and get it integrated into the cluster whether that's koo benetti's or open shift and that's going to be part of the prototyping that's going on awesome well thank you very much for taking the time to do this presentation today I think it's opened a lot of eyes there's also an awful lot of interest in getting this work done sooner than later so I'm sure you'll get some comments back on that Trello card and a few volunteers to help you in your prototyping efforts and once we've got a prototype up I'd love to have you back to show it off um on the as another commons briefing in the not-too-distant future definitely i'd be happy to do that let's see there may have been one more question that pops in well i think that's what we've got so thanks very much for coming today and please reach out if you have more questions and join us on on our weekly community meetups there are thursdays um 10 to 11 on IRC channel 4 openshift dash dev so um that's that'll be tomorrow depending on where you are in the world alright thanks again and we'll talk to you all next week you 