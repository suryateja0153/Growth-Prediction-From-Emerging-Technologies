 alright good afternoon you guys are you're really committed to being developers if you're showing up at the last day last session this was only added a couple days ago to this track schedule so I'm actually really pleased to see these many people here my name is Tyler jewel I am a founder and CEO of a company I run called code Envy but I'm more importantly a project lead for an open source project called Eclipse che Eclipse che is a next generation platform for the Eclipse Foundation as a type of IDE let's just get out on the table the elephant in the room this scar on my face that everybody was asking apparently like all the week long people are talking more about my scar then the presentation in the keynote I got it there's what is a story I'm telling anyways in that I got it on my 40th birthday which was monday this week here I turned 40 but second half of my life and you know I just wanted to do something youthful and my neighbor was irritating me so I challenged him to a samurai sword fight it wasn't a clean kill right that's a good story you know the truthful story was middle of the night get up walk right into the wall full speed covered in blood everywhere I was yelling at my wife get the camera get the camera this is the coolest thing I've ever done that we gotta record this his people people won't believe it but uh turning 40 is a very interesting development for me you know midlife right and for the most part programming and development is for right or wrong is thought of as a young man's or a young woman's sport you have it's a very a lot of youthful energy that goes into development this perception that you have marathon sessions and that are requires stamina and energy and it's something that you do when you're very young now myself I got a degree in computer science I thought I was going to be the world's best programmer graduated in the 90s got a job it turned out it wasn't very good programmer didn't like it that much went into evangelism and instead and join be EA in the 90s and spent a very long time at be EA and wrote books on Java traveled around the world did lots of presentations for them and I got to work as an architect on a variety different projects and I loved it because it was empowering and it made me feel very knowledgeable and informed I then proceeded to desire money so what do you do when you're an engineer and you desire money you go into management you know product management climbed the corporate ladder and in 2010 I got super sick I got ill and I was out of commission for nine months you know offline and when I finally healed myself i SAT there and go you know what am i doing i miss this technology skills that i had i really missed them honestly and I'm like I need to get out of management absolutely out of management this is just not the place to be and I sit down with the Eclipse IDE and the time and I'm going to do the pet store app I'm going to do maven I'm going to tomcat everything very popular common configurations and three days later I couldn't get the damn to compile and I'm sitting here I am frustrated I am irritated and I'm humiliated as well how can someone who had all these skills you know who felt this empowered just go eight years beyond and suddenly can't get anything to work and and I'm sitting euro like I'm trained I should know how to do this can you imagine all the people who don't have these skills children you know adults right whomever it is and and one of the things that is very important to me is that technology should always be approachable I mean because that's what's exciting its enthusiasm it's excitement with that and and it was in that frustration where I'm sitting here like I don't want to be a manager anymore I want to reacquire my technical skills and and this other irritation that I have and that's just this very simple idea you know this stuff should just always work you should be able to click a link and then on that link everything shows up that you need in order to build your project and and of course you know like you know in in this kind of silly way that things happen that was the idea for code in D which was we are going to build a company and we're going to make it possible for people to click a link and inside that link is going to be a workspace that has everything they need and next thing you know I'm seat founder and CEO which you know management position here we go again right on this whole thing and off to the races that we go so let's talk about this idea very simple idea anybody anywhere should be able to contribute to a software project without contributing any software and I want to talk about that and how that led to eclipse J and then Samsung was generous enough to work with us on Eclipse che to build this arm some Arctic ide and I'm going to talk about how we use that to build the IDE and then actually use that to program these devices here so first what's a contribution there are three things you need your IDE you need your project files and you need your runtime now in this case a run time for a workspace is anything that you need to operate against the files so whenever you do a compliation analysis a debugging that is an activity it requires a process that process needs to do something against the files now you need that run time to exist you need those software to be there now in desktop IDEs the traditional interface is that the workspace is a personal unit of work it encompasses your project files and then it integrates with the IDE in the runtime now your traditional runtime is localhost right we install the IDE on our computer localhost is here I get a workspace but all that run time component or localhost runtime the issue with that is localhost is not scalable it's not my gradable right it spin to this machine so if you want to allow someone to have a workspace on demand it's virtually impossible to do that if your local host if your local host or if your workspace on your desktop is using local host so there's all sorts of limitations that come with that so eclipse che is an effort to make workspace is universal and in order to do that what we did at a very simple level is redefined the abstraction of a workspace so if previously it was this abstraction now a workspace includes not just the project files but it also includes the IDE and its runtime so that when the workspace is generated it has everything that is needed for the developer to develop right away so what do we mean by that so the first thing is is that NJ workspaces bring their own runtimes so when you create a workspace we're actually booting up a runtime inside now we're using docker for this you can have one run time or many runtimes the next thing is is your projects which is your source code are mounted into the runtimes itself so they're mounted onto that so they're married together and then every workspace serves up its own unique browser IDE the IDE is inside of the workspace itself and then that way anybody with a browser can who can get access to the workspace will have access to the IDE and then ssh is in all these workspaces as well so that the desktop IDEs can link into it we then take these workspaces and chey itself as a server it's a workspace server and you can host up multiple workspaces which then allows you to share them with multiple users right it's browser accessible it can be a shared entity in that regard and because of the way that they're constructed these workspaces have strict recipes and stacks which allows us to dehydrate them for storage and then rehydrate them in any other location we can actually move a workspace for a machine to machine from machine to cloud cloud to cloud and it will have identical state as when it was running before including the tools that were inside of it such as the debugger the compiler the state of the projects that were inside of it we can rehydrate them where we need to do that and then on top of that because it wouldn't be an eclipse project if it was just a solution on its own all of this stuff is extensible customizable and programmable each work spaceships its own Russell API so that you can actually link to the workspace and program the workspace itself and the chase server has its own rest api so that you can create workspaces destroy them all programmatically whether it's local or remote on the end one natural benefit of this you know a lot of people were very you're like initially alarm that you know programming through your browser but one interesting benefit of this is that because it's just a server product you can embed this and chey workspaces in any place that you can run servers so one place that we run it is actually on the Arctic device itself right and so when you have in a server that can host workspaces that serve up a browser-based IDE you can provide IDE experiences inside of any other product out there so you plug the product in get the IP address put the IP address into your browser and voila you've got an IDE on the man without the developer having to set up anything to go along with it so there's a lot of potential with this so I'm going to give you this great demo about che itself and then we'll do the Arctic IDE but the Arctic IDE is a custom Eclipse chase embley an assembly of Eclipse che is a combination of the core platform with custom plugins custom branding custom stacks templates and an installer and then what we've done with it is we've added device discovery so that we can discover this device that's connected to this network here we then have ssh connectivity and management so that from the workspace we can connect to the device and have a interface there we inject the web terminal so that we can get multiple bash Michelle's going we've got a GDB debugger and we also do some work with the SDKs and run times all right so with that let's elmo it or demo it I'm whatever the whatever that key word was that secret phrase sorry a demo now I understand what Elmo man that's helm oh i thought it Lucy this computer here I am I'm duplicating it was working I verify you plan another thing I'll get oh we're having momentary technical difficulties yeah hello magic I'll tell you what if we can figure out projection technology and the DMV we're going to be rich those two those two problems solve those two problems and you are going to be rich okay all right so I'm going to do a java project to get started with as a to show just change a neural and then we'll get to the Arctic IDE so we're going to create a workspace and when you create a workspace traditionally you just typically pick your software code repository and you pick your project type in this case because every workspace has at least one run time you also need to pick your runtime and the runtime is the stack of software that you want to have installed inside the workspace in order for the project to do what it's going to do now in this case it's a java project so and we're going to do a tomcat spring based application and it's going to require maven it's going to require a secure shell demon in there we're going to want Tomcat installed I think it's tom cat ate that we need to have installed and a spring pet clinic application as well so i'm going to choose a blank project that we do section i mean is that better that zoom good okay good great I could I could import from get or github or subversion if I wanted to but I'm going to take from a blank one and we have this stack library here and you know the stocks tell us essentially what is going to be installed in that and and this is just a fancy representation of a docker file so we use docker containers to be the runtime for the workspaces and what this says is that we're going to do a jdk 8 from oracle it's going to install maven 332 is going to get Tomcat 8 and I can show you what these darker files look like if we didn't want to do that we could write a custom stack here where we could provide our own dockerfile we could import another one lots of lots of options that are here but once I've chosen Java then you know we've got the workspace with its runtime we need to give it some space you know so give it some ram here that's going to be the size of container and then I want to do the Java Web spring project and I'm going to go ahead and build that now when I say create this project it goes off and actually creates the workspace and in order to do that it will create a docker container for that with the two and a half gigabytes of RAM if that docker file has not been built it will build it and create an image out of that if it's referencing an image that's at docker hub it will download that image from docker hub as well and this can work behind a proxy if you need to do that and so the first time it can take a little while and I'm going to skip that step because I've already opened up a workspace here and after that workspace is booted then you just you know say it'll give you open the IDE and wha-la the IDE opens and and here we are you can see that i'm in a browser i'm running a server on this IP address it's 192 168 28-28 you can see that i'm in a browser because i can just shrink it and in enlarge it at the same time of nice browser professionally designed like the force you know I des need to be in balance so we have a light theme to go with the dark theme as well so that the force is always in balance here we've got a very nice editor it's an Orion based editor which gives us all sorts of functionality we've got the little navigator over here you can do different tab indentations there's syntax analysis for about 150 languages here when I open this up it detected it as a maven project you can see that it's got the maven pom here and as part of that it automatically downloaded all my maven dependencies it saw that it analyzed the dependency list automatically downloaded them and and that's absolutely wonderful because once those dependencies are downloaded I can start doing things like autocomplete and content assist and so in this case that was pretty fast and you'll find that actually the performance is just as fast as anything that would be on your regular machine I can explain why that's the case but its context sensitive so here i'm in the class and it gives me class level intellisense i can come up to the import statements here you do control again and now I get a import level package level intellisense here is auto complete for the packages which is nice I'll do go away and it's going to give me a warning message here oh I never use this import well that's not very good and so i'll just hit all to enter and i can remove that unused import oops type it wrong there we go remove it all good and so lots of intellisense capabilities and this intelligence goes pretty far for example i can come where's my class into the class air will go create a new Java class call it my class we'll just do public void mine my method write some java code return samsung developer conference dan is my friend don't forget the semicolon and you know gives me some it gets rid of the syntax errors there I haven't saved anything it automatically does it here and now in this class here I may want to use it you can see result hello + user name and let's just do a first of all let's instantiate my class and that's that's good tax errors here so sorry drawing my class it already knows that it's there and and if I do a plus MC dot thank you there's my method already in my auto complete because it's so zoomed in it's redrawing kind of weirdly so there we go and we change written some code I so intellisense and it worked fast it was I was typing as fast as I could and it was keeping up with me now I can do this in the cloud because that what we're doing architectural e is the browser is just a thin dumb client the work space itself is actually running on a server and that workspace has a run time now when that work space boots up we put a che agent inside of that workspace and when we created a project that was a maven project type it said AHA this workspace now has a Java project it now needs Java services and so we inject the Java agent that's running on the server inside the workspace and then we download the JDT which is eclipses java abstract and intellisense capabilities and that stuff is running inside the work space on the server next to the code so it's running it's running as the same speed that it would be running on your desktop we've just located it on the on the on the server and then what our agent does is it provides a restful api wrapper around those JDT services and the browser interfaces directly with that so when the browser came up it's actually communicating directly to my workspace to that server agent that is then communicating with the JDT services which is giving the intellisense the intellisense is working at the same speed as it would in any other location it's just doing it remotely for us and we're propagating the results back and just to show you know the the awesomeness of this I hit shift f6 twice I can come in here and you know refactor this in this you know again all in the browser without having to install any software and here i did a refactoring it's showing me the before and after of what it will do i'm going to hit okay and you will see in just a second when i zoom back in that my class was renamed my class samsung in the editor it's been renamed in the fire tree it's also been renamed up in the top editor and inside of it it's been renamed here so in the browser without installing any software we just performed a class level refactor refactoring command on that ok so we have this that's all well and good I want to typically compile it so I come in here and our workspace it's a runtime so guess what you can get a terminal into your workspaces so I'll just open up a couple of terminals you know we can take a look around I can run midnight commander if you really wanted to in your workspace on this that's always fun to do and I can come into the projects and here's the same project in my terminal that I have there but what I really want is I want to build it I'm going to go ahead and launch this build and what we have is this command structure which basically says hey here's this workspace here this workspace machine and I'm going to run this build command against it and off it went and essentially what we did is we took some command and we injected it into our remote work space that's running on that server and it's now executing in that workspace and in this particular case it's maven dash f against that project it does a clean install it then copies a war file and it puts it into a tomcat directory that command is completely editable the one that we just ran was here and it was a maven command and here's the syntax for that so you can add and change these commands as you see fit and you can see that it compiled is great i love that and let's just go ahead and launch a a server so i launched another command and you can see that this is another maven command that's actually starting tom cat which is that project that we have it's going to go to town here and in just a minute once it gives us the all thumbs up here on the boot i already started doing it it gave us a preview URL and was it not done was it going on here oh it wasn't done there we go all right and there's our application again off on this dis out those applications running in the workspace inside that workspace we launched a tomcat server it deployed our project code inside of that and it gave us a preview URL and I say hi Tyler and you know hello Tyler and then we appended that Samsung developer conference dan is my friend right so we launched the workspace we didn't have to install any utilities we got a project we edited the code we compiled it we ran it and we can go further with this we've got a debug mode here I could add a debug configuration this is a java server and it's 8000 debug yep close this i created my debug fiction I actually want to select that debugger and then I'm going to run that debugger and now it's connecting to that application and and here I've got my Brent debugger I didn't set any break points so that was a mistake there but there I could set a breakpoint and we could run it through again and it will pause let us change the variables look at the thread stack on that so again all distributed without installing any software okay so uh pause their questions on che did before yes well he grows his hand so fast yes you know if you do that at two in the morning and you're not too careful you end up with a scar so be careful then keep eyeing it via an emacs yes yes it's a it's a standard Orion editor feature comes with you right editor on that so uh you know go to you know go to town on the editor he's not even paying attention ok any other questions on yes sir yeah yeah if you're busy coding and you lose connection with the server because so the workspace is still running actively there and so when you reconnect again the workspace is is still is still there what you're going to see is you're going to see it like I'm not connected to the server you're going to see these error messages there but the workspace is still running the the bigger issue is that what we do is that if the we have configurations on what to do if the workspace goes idle now idleness here is measured by user activity not by hey I've got a command running and so if a user goes idle like when we run this at a cloud scale with hundreds of thousands of users concurrently you might launch a 20-minute compliation but if you go away for ten minutes that's 10 minutes of idleness and so in that situation we actually snapshot the workspace and snapshot its entire state save it as a docker image put it in a docker registry and then it's offline the workspace is stored and then when you come back online you get a new container off of that snapshot at image and then the browser reconnects with that there so there's a whole sequence of what to do when you have this idleness situation now when you run che on your desktop by yourself the default configuration is unlimited idleness we won't do that but you can imagine if you start running this as a server and you're starting to support multiple users concurrently these things are taking up RAM they're taking up a lot of RAM so you know idleness and snapshotting become really important okay Arctic IDE so um did you do okay i thought i had a workspace already running must've lost it was him out which one is which yep this is the article okay so I'm just switching over to a different workspace this workspace has the Arctic IDE installed on top of it and just going to go out and show you the sequence of how i created this real quick so if i launched back into the dashboard if i wanted to create a new project i'm going to create a new workspace in the ready to go stacks we've got an arctic stack that we've built we also happen to have an android stack google android studio watch out and in this arctic stack we install fedora 23 we have the Arctic SDK tools we also installed gdb and a DB which is the Android debug bridge now this workspace when you go and create it it's created in the server out in the cloud and in this case it's on my server here so this workspace created i created a see project here a very simple blink is the standard Arctic hello world scenario and inside this workspace I have not connected any devices yet but you'll see that there's a little happiness Arctic icon here and I'm in my workspace and you can see that I've got a DB which is the Android debug bridge so this is a utility that was not in my java workspace but it's in here and just for fun I can do ADB devices and it comes up and you explain here you can see this identity and what that is is it uses ADB devices I've got this USB cable connected to this perfect device here and it will use that to identify the device right and so I can actually use adb Android debug bridge to communicate back and forth over USB I can compile this code so i just run this build and it just does a arm compliation we have arm utilities in here and that lack of output means that it built successfully and so I can edit I can build and I can run all the same sort of things that we just saw in the Java project but it does do us much good without a device so what I want to do is add a device we're just going to come in here and add an Arctic device and Will's call it the text session one and because we have the discovery that we did it's using the adb a bridge and it discovered that this device is actually connected to this network on this IP address here so we're going to grab that IP address and we're going to then use ssh and we've got an ssh protocol we connect what was that yeah it's the space issue live bug here we go man all right ah ok but you see that we added a device down here and now by the way you can add some more sessions and now what we've got is a terminal on the device so what we do is we did a chain machine a workspace machine for this device when we get a valid ssh connection we do a couple of things the first thing we do is we install our own proprietary Pat our own web terminal onto the device and it runs as a server on port I think like 4411 or something like that and we open it up to this particular browser so that the browser now on this particular device when he opens up a terminal we get this bash shell so there's no midnight commander installed emacs is not installed but things are installed and and I'm actually on the device itself here I'm going to remove the bling because I've used this device before but the next thing you can do is once you have your projects which are in your workspace I need to get it onto the device so i can come over here push the device and it sees that it's the device that's there i can push it it's pushing the device it gives me the happy gleam green light and if i do an LS dash al there's the blink and elmo me elmo me thank you they get the right is it Lucy all right pulp fiction I can run the blink and I'm running on the device and off it goes here so from within my IDE on this laptop I'm able to both work in my local workspace here connect to the device compile locally push those binaries onto the device and then run it here and there's off blinking here on that we can do debugging on this as well and the debugger can either be local to your application in the workspace or the debugger can run on this device the way we do it is we actually install a GDB server on the device which supports debugging for ADA Python C C++ Java you can do a different kind of Java there go if that's your sort of thing and you run the GDB server with your binary on the device and then the debugger from the workspace will connect and give you debugging capabilities as well the one thing we wanted to do that we haven't gotten to yet non Elmo me Suzy Charlotte every good thank you all right the one thing that we want to do is if you notice I had to push the binary onto the device in the next version of what we'll do is we want to create a very web Webbie like development experience since we can take over the device and install our own software onto it we're going to install an rsync client on to it as well and we will Auto rsync the entire project structure from here from your workspace onto the device so as you're building and modifying files they're automatically pushed onto the device so all you have to do is decide whether you want to run it or not and we can auto setup the debugger as well so what that didn't happens is that you can edit save run edit save run edit save run without having to worry about sync push sync push on that great so you switch me back over to this primary machine here thank you yes how'd it get started with this we love it first if you were all hanging out on your computers to go github star us this is open source project it's Eclipse public license you can definitely participate in project but give us all the stars it's hosted at Eclipse org slash che / Arctic or you can just go to eclipse.org /a we'll get you to the right place uh we give you a basically a vagrant file to install it you get a vagrant file and you just do vagrant up and what we do as a server mode whether it's out in the cloud or local we actually set up a vm and inside that vm we run a Java server which is che we install the Arctic runtime we install all the Arctic plugins that you need and you'll get it on that IP address well 28-28 8080 and it's just ready to go you'll need a board you'll need the discovery of the IP address only works over USB but otherwise if the board is connected over ethernet or Wi-Fi the ssh will work permanently on that so what we do in our office where we have three or four boards hooked up we've got them with static IP addresses we gave them them host names and they're all on wireless so once we've got them set up we don't need to discover any more our engineers have them all programmed in and they just go to town on that they're excellent so we have like five minutes left thank you so much QA they've asked us to do the questions if we can into the microphone so that we recorded for others but if not thank you so much this is awesome this was a great project thank you Dan and way for championing that we really enjoyed building this and we have a lot of ideas of what we're going to do for the future on it the questions oh thank you really love the work what about dependencies like for instance if i needed to app to get something in my bun to like is there any way of yeah so these questions about the dependencies the sense there doc your workspace is powered by docker containers they're all from some base linux image which could be a bunt like our standard ones or a boon to the one that we did here is fedora and so if it's Fedora you do the dnf which is their package installer on a bun to its I think we use yum and you just run that right in here because you have root access to it now when we create your workspace the project's get added in dynamically anything else that you install like packages and Vermont that changes the state of the work space itself so in order to maintain that state if you shut down the workspace you need to snap shot it if you just shut it down that internal States going to be lost but if you snap shot it will then rehydrate it when you start that workspace again and it maintains it how does it actually get to the device like when you like did the push to device yeah is that when the dependency gets on the device um so the dependence so when you do dependencies it's all in your local workspace and all those dependencies become part of your project tree okay and thats / projects and you can have multiple projects they're mapped to different repositories and then you push your projects either folders or files or the entire project onto the device and it drags it along with it so so you as a developer then have a choice do you want all those dependencies in your workspace that we then sink or do you have them pre-installed on to an image of the device so that your applications will run when they get onto that last one can you just mention something about the vet like the rest api to j yeah yeah the rest api to che so there the its rest we have we have a line my blanking owner thank you thank you Brad swagger actually the swagger configurations are stored on both the server and the workspaces themselves so I don't know if you can switch back to Charlotte Thank You Austin yeah if I just come here I think if I just do swagger on this that there we go yeah so on the same sweat I just take the same URL and I just hit / swagger on it it actually loads all the api's that are on this chase server and you can interface with them right here and there so the the the user dashboard and the IDE are just clients that are using these restful interfaces now this is the server itself the actual work space each workspace gets a unique identifier and so each workspace has a custom set of restful api so that changes because what happens is based upon the projects that get loaded in each project has a type and that type dictates different plugins that get installed which change the RESTful API so in our Doc's we tell you how to get your workspace ID and then you can do that workspace ID with another swagger annotation and it will go and get the RESTful API for that workspace and you can program at eyes it the the purpose of the chase server is cruddud create read update destroy workspaces the workspace is where you actually do the work so its projects project management project typing and tell us since all that sort of work there this che project by the way SI p runs che inside of all their products now so all their new products like the Hana cloud they run the chase server and they have built their own web IDE that uses our restful api s and so it's actually really gorgeous and it focuses on database driven applications Red Hat built an open shift IDE off of this who else there's other projects of the same sort of substance of Samsung that are coming that I can't talk about yet but it's intended to be highly extensible yeah I know it's awkward to come up in you know they're related to that recipe I am for example if I want to make sure that my project can pass on a different stack yes is there a way to use that rest api to automate kind of this process so you're thinking about i have a project and they need to cross compile it for different architectures or something like that are there's you could in theory use our api to do that because you know our API will launch a workspace which is a docker container and then you can invoke commands inside of that so you could have work spaces of different architecture with different tools for cross compilation and you could invoke it we're not really a CI system so so it's it's not really intended to say here's a job and I want to run this job under 40 different configurations iterate through your I'll sleep inside that container right the the files the project files are mounted in so the project files are actually in two locations so NJ there's long-term storage which is outside the workspace itself that they are and then when the workspaces started they're mounted in now on a desktop that effectively means it's just a soft link but in a distributed system it's actually they're located in separate locations and we have an rsync protocol that keeps them in sync so as the developers working in his remote workspace off in the cloud it synchronizes it to long-term storage for protection as well thank you yeah okay well if that's not it this was the end of the session I hope you guys all had a great conference I know we did thank you so much I'm going to hang around for like the next 15 minutes and hang out answer any questions help you get started with it if you'd like thank you so much everyone 