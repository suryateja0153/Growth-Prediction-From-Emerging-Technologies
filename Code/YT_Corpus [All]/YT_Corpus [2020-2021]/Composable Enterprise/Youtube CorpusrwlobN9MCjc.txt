 Welcome. This session covers the IBM cloud developer certification section 4.1, enhancing cloud applications using managed services. In this section, we will introduce IBM Bluemix caching services to enhance performance of your applications or services running on Bluemix. After completing this module, you'll be able to understand caching services available on Bluemix, describe the usage of caching services, and demonstrate how to improve performance of Bluemix applications by using caching services. IBM Bluemix offers two elastic caching services, one for caching generic data and another for caching HTTP session data. The data cache service is a general purpose caching service that allows one to store application data in a distributed manner. The session cache service is a specialized service that stores HTTP server session objects in a distributed manner for HTTP session replication. Both services provide data replication and failover capability in the case of data loss. By using caching services in Bluemix, you can start applications or services more quickly, check the status of application resources, and scale out or scale up your application instances in a flexible manner. The caching service is an example of a composable element that can be used to build applications quickly. In service is continually maintained by IBM acting as a managed service provider. Bluemix caching services uses technology called a data grid. This is the same technology that enables WebSphere extreme scale caching solutions. The application data cache logic used in the demonstration application for this section is very much like using WebSphere extreme scale in an on premise installation. Let's take a closer look at the data caching service. Bluemix data cache is a distributed cache used to improve the response time of an application's presentation layer by caching responses to frequent user requests, enabling developers to build responsive applications. It supports distributed caching scenarios for web and mobile applications and leverages the technology of a data grid in which you can store key value objects for fast access. It also provides a NoSQL-style key value storage service. With the caching capabilities of the data grid, you can perform, create, retrieve, update, and delete operations remotely. The data grid replicates data so that cache components may be restarted without data loss or degraded performance. The NoSQL style in memory data grid provides a distributed key value storage service that resides in memory, providing linear scaleability, predictable performance, and fault tolerance of the web applications data. The data caching service is fully managed with built-in auto scaling, the abilities to specify time to live data eviction values, and supports various locking methods. Since this is a fully managed service and there's no capability to provide object relational mapping, the Bluemix data caching service must be used as a side cache solution only. The data cache service is intended for use by cloud resident applications. It supports distributed caching scenarios for web and mobile applications and stores key and value objects in memory for fast access. The developer creates the service and binds it to an application. The integration with the service is simple. Applications are able to obtain credentials from Bluemix V cap services environment variables and provisions is done automatically and quickly. The data cache service includes support for several different web application types, giving the developer flexibility. Supported web applications include any application that runs in a WebSphere Liberty profile run time environment, any web application that can run in a web application server, and any web application that can integration with a REST API. Supported run times and build packs include standard WAR files running in Liberty run time environments, Liberty build packs running in Liberty run time environments, a standard WAR file running in any other run time environment such as Tomcat, and Node.js packages running in the Node.js run time environment. The data cache service supports both Java and REST APIs, enabling rapid communication with the application layer. Let's take a look at the session caching service now. Session caching improves application resiliency by storing session state information across many HTTP requests. It stores and persists HTTP session objects to the data grid. If a server outage occurs, application users will not notice as alternative servers can still access that session object. The session caching service is backed by special purpose elastic in-memory storage system providing low latency data access and transactional semantics. .supporting HTTP session failover is important for enterprise applications as data for each HTT session can survive a server outage. The session caching service is easy to use. Java applications using standard J2EE HTTP session caching require no code changes. Session replication replicates the session data across the data grid to avoid a single point of failure. By providing a NoSQL distributed key value storage service, the following features are also exposed. Low latency data access, transactional semantics, dynamic scaleability of both data and transactional capacity, data replication to prevent data loss during system outages, and an integrated web console to monitor service instance performance and usage. The session caching service stores and persists HTTP session objects to the data grid so that they do not have to be stored in the memory of the web server. No effort is needed to manage and replicate the session data, avoiding a single point of failure. Just like the data cache service, a developer requests the service and binds it to an application. Provisioning of the service happens automatically and within seconds. You can deploy the following application types when connecting to the session cache. Any application that runs in a Liberty run time environment, including Java applications that can use a native Java API. Supported run times and build packs include the standard WAR files and WebSphere Liberty profile run time environments and any other application using the Liberty profile build pack. Elastic caching services provide data caching capabilities by using cache catalog servers and container servers. Service instances are deployed into private Bluemix service virtual LANS to improve security. Load balanced provisioning servers create the grid instances for high availability and provisioning server handle basic service operations such as provisioning new grids, binding and unbinding service instances to applications, and activating or deactivating service instances. Provisioning servers manage and orchestrate the data cache capacities on all service instances and manage data replication and failover capability. Elastic caching provisioning servers use the Sonata engine. Capacity scaling is performed by adding or removing collections of caching servers and cached applications from cloud applications are handled via Java APIs or HTTP REST APIs. To get started using caching services in Bluemix, first pick your favorite development tools like Eclipse with the Bluemix plug-in or DevOps services. For the session cache service, there is no special coding needed as long as the web application is already using the standard J2EE HTTP session APIs. For the data cache service, typical way of instrumenting a caching call is shown on the slide. This code example shows you how to connect to and use the caching service from a Java application. This slide demonstrates how to deploy an application to Bluemix and bind it to a data caching service instance using the Cloud Foundry command line interface. It's important to know that you must specify the dash B option and the Java build pack URL when you deploy into the Bluemix environment using a Java run time other than the default Liberty profile run time. If you bind a service to your application while the application is running, you must restart the app using a CF restart command or repush your application so the service binding takes effect. You can also use the Bluemix console to deploy, bind, and test the application with the various services if you so desire. After you connect your application to the data cache service, you can monitor your web applications cache usage. Statistics are collected and can be viewed using the data cache service instance dashboard inside Bluemix. The monitoring dashboard provides views of space used or the total caching capacity based on the service plan level. Total capacity shown includes one replica of the data stored in the data grid. Cache contents where you can query and view the data being cached, throughput measured in transactions per second, transaction time measured in transactions millisecond, and cache hit rate measured in percentage. The data cache service can be provisioned using Bluemix boiler plates which are prebundled with Java and Node.js run times. This is a good way to evaluate the service using your preferred language and run time environment. The airport sample application is provided as an introduction to the IBM data cache service and IBM session cache service functionality on Bluemix. It uses the data cache to store airport information and the session cache is used to store the airport search results. It demonstrates simple create, read, update, and delete functions to IBM data cache services and IBM session caching services. The sample shows how large amounts of data, in this case information about thousands of airports worldwide, can be stored using IBM data catching service and IBM session caching service on Bluemix. When using the sample, the time taken to complete any crud operation is displayed demonstrating the speed of accessing data in the data grid. The airport sample code can be downloaded from DevOps when you search for caching app. Here's a list of useful book marks on the topics we covered in the section for your reference. Please post your questions or find the answers on the Bluemix community website given by the URL on this chart. 