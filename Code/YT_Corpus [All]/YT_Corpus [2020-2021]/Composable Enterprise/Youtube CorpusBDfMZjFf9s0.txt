 Hello and welcome to our course on bluemix. In this video we will introduce the IBM bluemix cloud platform and give you an overview of all the great features it has to offer. IBM has created bluemix to be your cloud development platform of choice. When you are finished with this course you will have some hands-on experience with the type of rapid internet application development that it can support. So what is bluemix? Bluemix is built to support rapid application composition building with IBM third party community open source and your own code. You can select from a broad set of ready to use services spanning sql and no sql databases, messaging, cognitive, Internet of Things and more. With bluemix you can create new applications quickly by composing these building blocks of the API economy, and then you can deploy these applications in the cloud with global reach in just minutes at a high level. Here is what bluemix has to offer: Bluemix is a combined enterprise-grade platform as a service and infrastructure as a service, in a simple developer experience. This makes it the ideal platform for the next generation of always available and highly scalable applications. It does this by providing multiple compute platform options that developers can choose based on their application needs. Bluemix is delivered to match developers and clients hybrid cloud needs. It's available in public single tenant or dedicated and on-premise deployment models. Bluemix is available globally in IBM cloud data centers so you can be sure where your data resides at all times. Bluemix has a catalogue of over a hundred and thirty services ready for you to use with your application, and all of this runs on open architecture and technologies like cloud foundry, docker, and openwhisk. Let's look at a range of the infrastructure as a service and platform as a service compute options that bluemix gives the developer. This ranges from highly flexible and high-performance over to the rapid application deployment options. Bluemix bare-metal servers provide leading cloud performance and full control of all aspects of compute resource to the developer. Virtual servers in vmware increase efficiency and allow the developer to manage just the operating system, middleware, data, applications, and perform vm operations like stop and start. Containers give maximum portability across environments. Developers create applications or micro services and then package them into a container which can then be deployed to a server either on-premise or hosted in the cloud. Cloud Foundry applications create apps by combining code artifacts with a runtime using explicit binding of managed services to these applications. Running in the cloud foundry environment, there is automatic support for horizontal app scalability. Openwhisk provides a server less platform to support function as a service computing, where code snippets are run as a result of events. This provides a stateless model with no long-lived application instances where you pay for only the compute that is consumed. For this course will focus on Cloud Foundry applications because it's a great place to start with bluemix. And to see why let's take a quick look at a simplified comparison of common IT operational models from a developer or client's point of view. In traditional IT it'd be the developer or the clients job to manage the entire stack. In infrastructures as a service environments, the platform vendor will take care of the hardware infrastructure, network storage, server virtualization, leaving the rest, operating system, middleware and so on to the responsibility of the developer and client. In the platform as a service the platform takes care of almost the entire stack, leaving only the app and the application data. Now I've included in here the software is a service model and that's a case where everything is run for the developer or the client to consume, and we have some services like this in bluemix. For example the weather company data service that you can use to get weather forecasts, current weather, and other kinds of weather alerts for a particular geographic location. All you have to do is bind it to your application through an API. Now getting back to IBM's platform as-a-service, you don't need to focus on the plumbing with your app. Like OS security, or scaling, hardening, patching, deploying middleware, or even scaling your load balance traffic to the runtime. This gives you more time to focus on your application and the application data. Let's look at how you work with bluemix as a developer and how users will access the Cloud Foundry applications you deploy with bluemix. As a developer you will interact with bluemix using a web browser or a command-line interface tool to manage your applications and services that they use. You'll likely want to build your apps in Java, node js, Python, PHP, etc... on your own workstation using the same tools that you use today. Then you can publish changes to the app; we call this a push in the Cloud Foundry lingo, to bluemix, using either the CF CLI or the eclipse plugin. You can also build with the web editor that is bundled with bluemix devops services, but we won't cover that in this course. Pushing your app is a process where your application code is uploaded to Cloud Foundry and is built into a runnable package. These packages are deployed into containers running on VMs in the bluemix infrastructure. Once deployed and started you or any other user can access the app over the internet through a web browser or mobile app client if you've deployed a mobile backend. These requests are handled by the Cloud Foundry router at the bluemix perimeter and forwarded directly to your out running applications. Now let's have an overview of how your account and your projects are organized within bluemix. Now this schematic shows some of the key components of the bluemix operational model. When you first sign up for bluemix you will start with an account that has your user ID associated with itself with it as an owner. Also a default organization of the same name is created with that account. An account may have one or more organizations. Some account types like a trial may be limited to a single organization. For any account type you can invite other users as collaborators in your organization. Now within each organization there is a Cloud Foundry grouping called the space. The space rovides a logical grouping for your apps, containers, and services that are provisioned for the apps. Spaces can be used to separate different kinds of projects or stages of an application like dev, test, and production. At the same level and slightly off the side of Cloud Foundry spaces you'll see here bluemix infrastructure. That provides access to virtual servers and bare-metal servers. They're all associated with the same account and allows you to deploy applications on the SoftLayer infrastructure using the SoftLayer infrastructure services, also now known as bluemix infrastructure. Let's take a look at how bluemix is geographically distributed. To accomplish this, bluemix uses something called regions. Regions in bluemix are self-contained and operate independently. The chart shows three public bluemix regions today. Located in the U.S. South, London, and in Sydney. You can tell which region you're working in from the bluemix console from the region attribute under the active account, and also from the URL shown up in title bar. And we'll see more on this in the upcoming tour bluemix in a little bit. What can you do with regions? Well firstly a developer can deploy the same application in two regions and then use geographic load optimization. But perhaps more importantly, you can be used for redundancy. Since regions are independent and then problem in one region will not affect another. So although using multiple regions has advantages, you do need to be aware of the region you are working in as it can be a little confusing. For example if you're sure you've deployed an app and all of a sudden you don't see the bluemix UI, it's a good idea to check to see what region you're in, to make sure you're working in the same region as the one where you deployed that app from the cloud foundry command line. So now that you've learned about bluemix what what it can do, the next question is what we you do with it? It has been used by customers to do many things already, and here are a few ideas to get you started. You can extend any application that you already have by adding a new aspect of a user experience. Or you might add a new capability by integrating with services or API's in bluemix like Watson. Either way a big benefit of using bluemix is the ability to do rapid experimentation with these capabilities. Or you might use bluemix to build a web API on top of a service you have today. IBM's API Connect tool lets you create and combine services into API's that you can publish for others to use. Or you might use bluemix for new applications. Perhaps a new system of engagement for customers, or an Internet of Things application. It's all up to you. In the next step we'll take a tour of bluemix so you'll understand it better. 