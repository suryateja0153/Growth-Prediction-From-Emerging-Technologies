 [Music] hi I'm Rachel I'm a software engineer on firebase security rules and I'm Sebastian and I work on firestore Rachel do you still remember what happened last May how could I forget that was the month that I was flooded with emails from every website I had ever signed up for I looked at that flood and I wondered why I ever signed up for so many things last May the general data protections regulations took effect this legally this legislation touches on pretty much every aspect of user data collection among other things it regulates how app developers able to use collect and store user data it was one of the biggest changes to user privacy that happened in a while but the basics of user privacy remained the same if you're building an app that handles user data user privacy should be one of your top concerns today Rachel and I will show you some of the tools that we have built at firebase to help you respect you users data since neither of us are lawyers we cannot give you legal advice instead we're going to treat user privacy like software developers and stick to know what stick to what we know best as engineers we will tell you how firebase can help you with your users privacy and share our personal suggestions along the way by not just focusing on gdpr we hope that what you will learn today will be applicable to all of you users after all user privacy is larger than any one piece of legislation even before last may different regulations around user privacy apply to users in most countries Rachel I don't know what the future of data privacy will look like instead we will talk about the firebase tools and principles that you can already use today to build products that put your users in control but first let us explain what firebase is we built firebase so that app developers can focus on the features that make their app unique we don't want you to have to spend your time spinning up a back-end service just so that you can store a bit of data firebase takes mundane tasks out of building an app we want to be with you from your very first line of code until you reach planet scale maybe you've heard of firebase before it's okay if you haven't we shipped our first product in 2012 the firebase real-time database since then we've been growing our offerings and have been watching what customers are doing with our products in 2016 we introduced the firebase SDKs for cloud storage cloud storage for firebase allows you to build apps that let you user securely up and download files from Google's cloud be gracefully handle poor network connectivity and use cloud storages X caching to offer superior performance and in 2017 we introduced cloud functions for firebase cloud functions for firebase allows you to run your own server side code without forcing you to set up your own servers cloud function uses event-driven lightweight JavaScript that runs when data on the backend changes and just last year we launched cloud fire store cloud fire store is a scalable database for mobile web and server development we offer feature-rich SDKs that integrate directly with the firebase platform our SDKs support direct for mobile access and allow you to write customer facing apps without the need for application servers today firebase offers 17 products that help you develop grow and earn from your mobile apps all of our products are built around one core principle we want you to build apps with rich becket integrations without having to set up these backends yourself we're in the business of storing data so naturally we've put a lot of thought into a question that you or your CIO might have asked recently why do we how do we handle those privacy requirements when we're building cyrillus apps user privacy was traditionally not a concern for developers when they were evaluating cyrillus backends the questions that you would use when you're evaluating service products were things like what features to this platform offer how will they how will the parts of this interact together and how well will each component scale up for me by contrast the concerns that you have when you're thinking about user privacy are pretty different those are things like how will I make sure that my data is securely stored how I make sure that my users understand the data that I'm collecting and how will I make sure that I remove the data when I no longer need it so it doesn't seem like there's a lot of overlap between these two types of questions some people have even suggested that serverless architecture and data privacy could even contradict each other seems like rachel is reading my mind or like we were at the talk together but let's be honest even though I deeply care about user privacy I am not willing to give up serverless development just yet I don't want to go back to the days of installing maintaining and upgrading my very own my sequel instances just so that my Android app can receive a single push notification fortunately service design patterns and user privacy can often go hand in hand at firebase we are proud to offer products and tools that help you protect your users data not because not despite but because of our service offerings let's dive in and take a look at a few examples we'll start by showing you how you can reduce the data that you're storing and you can use firebase as cloud functions to make sure that you're managing this data well we'll show you examples of you deletion and user data export clicker Sebastian I will dive into how you can use firebases security rules to limit the access that people have to your data and how you can also describe data ownership and we'll discuss notifying your users about the data that you are collecting that includes covering the storage retention policies for our backends and we'll show you patterns for how you can store those privacy preferences once users have given them to you and we'll end with some advanced use cases like activity logs to track changes to privacy settings right soon I want you to want you to design your apps for privacy from the very first line of code the easiest way to do this is of course to not store any data Sebastian not store any data okay let's stay realistic and only save the data that we need for example let's say we have an app and we want to make sure that our users are European citizens over 18 instead of storing the users full birthday and country of birth we only need to store whether they meet our two criteria as you design your app think about what data you need for it to function and what the amount of time is that you need to store this data for whoa not everyone is starting with a brand new project so if you have an existing project you're not out of luck let's look at some privacy features that we've added to an existing app that we call friendly picks friendly picks is a reference implementation for many different features implemented on firebase and now it includes user privacy features it has a straightforward user facing feature set it lets you it lets users sign-in upload photos and then it has some social features like commenting and favoriting photos the data that's stored by friendly picks all supports one of these three features vApp store's account information this is these are things that are in addition to authentication data that we get next friendly pics stores the pictures that users have uploaded a normal app might keep this forever but for friendly pics because we want to show lots of privacy features delete all of the photos after one month and finally friendly pic saves the social interactions with these pictures these are things like likes and comments and we keep them until those things are deleted by the users or until it's the photo its associated with is deleted so whether you're writing a new app or you're improving the privacy of an existing application the first step to managing your privacy is to understand exactly what data you're storing and the features that that data is supporting that will give you an idea of how long you need to support it it gives you a position to start scripting the data removal once you no longer need it so many organizations want to limit the data they're storing and they only want to keep the data they need and they only want to keep it for as long as they need it those are some principles to live by and I want to stop here and acknowledge that it isn't always as easy as you might think to delete data you might have a great engineering proposal for how you're going to remove the data you no longer need and that could meet with a lot of resistance within the organization maybe you have someone in the org who hates the idea of data going away for example you have an analytics person that likes to run a query for how many users between the ages of 18 and 25 are performing a particular action so you can run that query if you know that they're doing this and save that daily count on the number of users and then you can delete that the the data associated with individual users that way you keep your analytics person happy and you also keep your users happy so when you're auditing the data that you need across your organization be as specific as possible if you only need a count of the number of users make sure that you know that even if we store only the minimum amount of data we should still structure in it and structure it in a way that makes it easy to delete it later to me offering users the ability to delete their own data is an important pillar of user privacy you should delete user data not only when a user requests that their account is being removed but also when you no longer need a specific set of data for your app to function if you design your app with user privacy in mind deleting user data can be pretty simple with firebase the a synchronous nature of most elites makes deleting a great use case for google cloud functions a service that should already be one of the primary tools in your server list tool bells well deletion is often triggered by explicit actions in your app as in this example of user deleting their post remember that you ultimately don't control the requests that come from your client you don't want to rely solely on your customers to clean up their own data to remove data that is no longer needed you can instead create a cloud function that cleans up unneeded items cloud functions for firebase are like programmatic glue it lets you extend and connect all of the firebase products and all of the cloud products as well so you can create a completely service back in for your web and your mobile applications cloud functions are event-driven they're lightweight JavaScript and this means that they are deployed and this means that when something happens it causes this function to run that's the way to think about it so how do functions work all cloud functions are triggered by some action that is taken on your system this could be something like an image is uploaded or a user has clicked this button in this case let's say we want to trigger a function when a user logs in when that event occurs an event is emitted in this case from firebase authentication a new event is a new environment is spun up that only has my code and the dependencies that I've declared for my code then that code was in my function is executed in this example say the user when the user logs in my function will create some default records for the user in fire store as another example we need to leet a document from fire store you can trigger a custom function that can clean up all that related data sometimes it's obvious when data is obsolete in Franti pics for example we delete all comments and likes many user requests that we delete a picture for other use cases it's not as apparent if you app has functionality that only temporarily needs some of its data I'd recommend deleting the unused items when they are no longer needed an example of a case where you only temporarily need data is a high score list in which you only need to keep the highest scores and not the complete history friendly pics really is a good model here it doesn't keep any data longer than 30 days and uses a clock function to periodically delete all their items you can find an article that explains how to set up a cron job to trigger a Tod function at the shortlink or you can use the new cloud scheduler to schedule functions to run periodically you'll also ensure that you know and keep any user data when users delete their accounts if you're seeing firebase authentication you can call the delete API from the firebase user object or to delete to delete all of that information but calling delete will not however remove user data that's stored in other products for example firestore if you're going surrealist that cleanup is a great use case for firebase functions the function could either be triggered by an authentication delete event or if you're not using firebase authentication you can trigger the you can trigger the function via an HTTP request we've done some of the work to get you started here by publishing a general-purpose account deletion function that you can tune to work with exactly your data model so let's walk through that quickly first this is my function it lives in index J yes when a user clicks the delete account button that's going to call the delete API in firebase authentication and that triggers this function to run but my code is generalized here to make it work specifically for this one app I've needed to add a JSON file called user privacy JSON that lives in the functions folder this file allows me to delete the paths that need to be removed when a user deletes their account I can find the paths for all the services I can define the paths for all the services that I use such as fire store real time database and storage and I'm using variable here for the parts of the app that will be replaced by the users ID when the function is triggered I get the UID from the event data object and because I went to remove data from firestore the real-time database and storage I'm going to call three helper functions if you're not using one of these services you can easily exclude that and not include that unused function each of the helper functions share the same basic structure but let's walk through the function from the real-time database as an example first I'm going to fetch the relevant parts of the the relevant paths from the JSON file and then I'm going to iterate through each one of those removing the data at that path when each iteration returns I'm going to return control to the top-level function I throw it to you you may also want to offer you users data portability providing users a copy of their data in a well-known and machine readable format allows them to transfer their data between different service providers we've released another cloud function called export data that can help you with this the export data function is triggered by an HTTP request that you can make when you use a request a copy of their data it calls three helper functions that perform the export for each product the upper function in this case the one for the real-time database use the same user privacy to JSON file that Rachel just showed you you can use the exact same configuration or you can provide separate paths the helper functions it's right through the schema and export a JSON file that is then uploaded to cloud storage it is incredibly important that this exported data in cloud storage is only accessible to the user whose data you export it you can accomplish this by using firebase security rules the security model for all of firebase is products since the export data function uploads the exported data to a location that includes the user's user ID you can create a security rule like this which makes the data only accessible to that user remember that it is essential that you audit your security rules if you're storing any user data with firebase with firebase security rules if you deny access in one world's expression but grant access in another we combine them and access is granted make sure that you understand that our rules are all together if you have a more complicated data model that can't be expressed as a list of wildcard paths like the one we have in our JSON file that's okay in that case I would suggest that you maintain a list of locations through the users data and you can use that list as the input for a similar cloud function that just like this one iterates through those paths and either deletes or copies that data over depending on if you're doing an export or a delete if you use data port if you keep dated portability in mind as you are building your app then deleting an exporting data it can be as simple as configuring one of these general-purpose functions service development can respect user privacy and make it easy and we're making it easier than ever with cloud functions for firebase you can manage your users data without building out expensive infrastructure and we've published a guide for clearing and removing users data you can find more about it at this link let's recall how security is handled in the traditional back-end application in a let's call it server full application there's a client of storage layer and an application layer the application layer is often used to enforce security and access controls if a client sends a malicious request the application layer can drop the request in server list systems the application layer has been removed the client connects directly to the storage layer so we also the server list system and force access controls in firebase access controls are enforced right at the storage layer we validate everything coming requests against the security rules that you configured security rules are your first line of defense in creating secure firebase apps and secure apps really are an essential part of treating your users data well and correctly configuring security rules is an important step in preventing unauthorized data access we've heard from a lot of firebase users that security rules can be intimidating or even confusing so we've invested a lot of time and energy and thought into creating new products that make it easier than ever so because security rules are so important we want to spend a little bit time in this talk walking through some of the new features that we've built around security rules first before you deploy your rules you can try them out and play around with whether you might want that to look like in the web console there are simulators and they let you test different types of requests so you can say for this type of request shouldn't succeed and then you can test to make sure it succeeds for a different type of request you can test that it does fail just like you want it to you can block access the simulators though have a limitation they only help you as you're writing the tests as you're writing your security rules what happens if last week sebastian wrote great security rules and this week i came around and tried to improve them and I accidentally granted access to a lot of people that I shouldn't have to make sure that you can have confidence in your rules going forward we now offer a security rules emulator simulator an emulator small difference in words big difference in product and then and the emulators run locally so it lets you run that you can run this locally you can write tests around what your rules do and then you can include that as part of your continuous integration workflow there NPM tests you can include them really easily in what you're already running so check out the link for more information the security rules we've shown you today describe a schema for your data and spell out invariants for your back-end they allow you to limit not only who can access your data but also limit how the data itself relates to one another please remember to never trust the data from your client apps since you no longer have an application layer security rules are the best way to enforce access controls use the security old simulator we offer in our firebase web console to help you write and verify your security rules and use the new security security rules emulator to create automatic tests around your rules now we're ready to start informing our users about the data that will be collected at firebase we've published a guide to our data retention on our website and you can include this information as you inform your users about what you're doing with data collection the firebase data privacy terms also explain what kind of data each firebase product collects how long that data is retained and how you can delete that data and we've also released a white paper that explains what happens inside of google cloud when you invoke an API to delete data this is more for your information if you're curious then for your data collection policies but if you'd like to see that it's available on the website as well thank you when you read our data privacy terms you may see that some firebase products like cloud messaging or a/b testing have the ability to identify individual devices this device level identification is done via firebase instance IDs and it allows us to message or change the experience for only a subset or few users because firebase instance IDs are so important let's quickly go over them if you incorporate a product that uses firebase instance IDs firebase automatically assigns a unique ID to each app installation if you install two different firebase apps on the same device they each have a different instance ID if you install the same app on two different devices say an iPhone and an iPad they will also have two different instance IDs on the other hand when you restart the same app on the same device firebase keeps the same intensity that's how we can send notifications to apps even when they are not open while instance ID data is generally not meant to be personally identifying it can potentially be linked to any personal profile data that you store in other products if you want to allow your users to opt out of this type of data collection you can disable instance ID generation we have also add a dedicated API star admin SDKs that let you delete the instance IDs themselves it is your responsibility as a developer to invoke this API so any user requests account deletion for firebase products that key data by instance ID the time it takes to remove this data varies per product and you can find more information on this in our privacy terms keep in mind that deleting data from our back-end system does not immediately delete all copies of that data some of it lives in backup systems and caches temporarily so you can think you can look at the terms to understand more about when it will be completely delete so now that we understand the data that Google is saving entertaining and you have in mind the data that you need to support the features that you've written let's talk about how to inform users and give them all the information they need to make a meaningful decision in friendly pics we've added a notice to let users know what kind of data is being saved and what features that data supports this notice gives them a choice if they'd like us to save that data or if they'd like to disable that feature and features are only enabled for the users that want that data saved they've have to actively check to make sure that that data will be saved for example if a user doesn't want us to share their social data we remove the ability to add comments altogether if user doesn't want us to store any data at all firestore a friendly pic still has a really good read-only mode depending on how much of your app's functionality is handled by our backends you may also need to persist the users privacy settings in firestore or in the real-time database when you consider structuring this data you should look at how it will be how it will be read and what privacy controls your back-end actually needs you'll likely want to make sure that these settings are stored in a place where you can prevent unauthorized access by other users for example if you use us profile information this public you probably want different access restrictions to these privacy related settings you can use layer you can use a layout such as the one here which contains a private profile section in addition to a public one alternatively you could store the privacy preferences in a separate section of your database altogether you also want to build a way for users to update their privacy settings this allows you to build new features over time or to modify existing features it's one thing however to let people update their settings and it's another thing to think through the process of what you'll do with your data when those settings change for example say a user grants consent for us to save their photos and then they change their mind what should we do with the existing photos that we've already saved this balance between user expectations and user privacy is different in every application in fredley pics we decided to keep the existing pictures that in case the user wants to see those stilt they can still delete them on their own or will delete all of them when they delete their account as users change their consent settings you may also want to keep a record of these changes in an activity log an activity log allows you to share security or privacy related changes with your users and gives them the ability to monitor changes to their accounts if you're storing privacy settings in firestore or in the real-time database this is another good case for Google Cloud functions with cloud functions firebase can automatically maintain an activity log for you it's straightforward to create a small function that is triggered every time a user's privacy settings change and which then copies the new settings to an append-only storage location here's an example of an activity logger that listens to changes in the privacy collection of fire stores and adds entries to a dedicated activity log collection if you want to make sure that this activity lock is append-only and cannot be modified you can use security words to prevent any changes for example if your activity log uses the firestore collection for each user and a document for each time a user changes their settings you can use a rule like this which allows document creation but doesn't allow updates of existing data we've created a guide to storing and using privacy settings in firebase that explains how to automatically maintain activity logs you can find a link to it on this slide or by or on the firebase website so building privacy features like secure access controls data Portability and data cleanup can be with an easy reach of every developer service architectures many of the privacy features that we've pointed out today can be easily deployed to cloud functions and we've shown how you can lock down your data using firebase security roles we hope that the tools and technology we've highlighted can help you turn user privacy into some of the easiest features that you put on your app gdpr is not the first and it will certainly not be the last piece of legislation that changes how we handle user data the ever-growing list of user privacy regulations can seem really daunting and it makes touching any data any kind of data really difficult but let's all take a step back and let's instead focus on doing the right thing for our users if we treat our users data with respect if you make sure our data retention policies are easy to understand if we limit the amount of data that we handle and if we offer our users the ability to make meaningful decisions about the data that they lend to us then we'll likely be in a good place no matter what privacy regulations the future may bring come find us later at the firebase booth in the expo we'd love to talk to you about how you can be responsible with your users data remember that we can't help you as lawyers but we can help you as friends [Music] 