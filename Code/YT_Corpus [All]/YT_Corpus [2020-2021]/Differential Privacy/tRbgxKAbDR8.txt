 Coverage-guided fuzzing is perhaps the most successful approach to finding software bugs and vulnerabilities. At a high level, test cases are executed on the target application and their code coverage traced. Test cases which increase coverage are preserved, and those which don't are discarded. And the process continues with the goal of finding bug-triggering test cases. To date, much of research has focused on generating better test cases, however given the fact that identifying coverage-increasing test cases requires the tracing of every test case; and as our results show that over 90% of fuzzer time is spent executing test cases and tracing their code coverage; and that, on average, less than 1% of all test cases increase code coverage; and the remaining 99%, along with their coverage, are completely discarded; we conclude that tracing the coverage of all of these discarded test cases amounts to a significant waste of resources. And it is leveraging this observation which enables coverage-guided tracing to outperform all other fuzzing tracers with near-0% overhead. If you'd like to hear more, come join us in Session 9, Grand Ballrom A on Tuesday. 