  KURTIS HEIMERL: I suppose I should get started. All right. Yeah, let's get started. All right. So first off, bear with me. I'm a little bit sick. I have a toddler so this is going to be me the whole quarter. Hi, welcome to network systems, which is the-- this should be 561. God damn it. I've requested it since the last quarter. So CSE 561 network systems, which is the graduate version of computer networks. Hopefully, you are all in the right place. Everybody knows-- I mean, I think for PMP classes, you're much less likely to be in the wrong place than most others. So-- AUDIENCE: There's a weird echo. KURTIS HEIMERL: What? AUDIENCE: There's a weird echo on your voice. It's not very clear. AUDIENCE: I mean, it's a little muffled, but. KURTIS HEIMERL: Is it echoy or is it muffly? AUDIENCE: Muffly. [LAUGHTER] KURTIS HEIMERL: Do I have the microphone on? AUDIENCE: Yeah, that actually might help. KURTIS HEIMERL: What might help? What did I do? AUDIENCE: Moving the mic around a little bit. KURTIS HEIMERL: All right. Bueno? AUDIENCE: No. KURTIS HEIMERL: No? AUDIENCE: It's fine. We'll survive. KURTIS HEIMERL: No, I mean, I think the people paid a lot of money to very large companies to make sure the audio works. Is that any better? Or do I just hold it out and get a headset at some point in the future. So this is OK? AUDIENCE: Yeah. KURTIS HEIMERL: OK. AUDIENCE: I don't think that's going to pan out. KURTIS HEIMERL: It probably won't sustain, but I'm trying to figure out if my shirt is somehow conductive or if it's a microphone issue. It sounds like it's not a microphone issue. It's probably not a network issue. Well, let's try-- Is that better? AUDIENCE: Yeah. KURTIS HEIMERL: Yes? I think you guys are just going to eventually nod and smile and we'll move on. But-- AUDIENCE: No, that's actually pretty good. KURTIS HEIMERL: OK, it's actually pretty good. OK, thank you. OK. So computers-- or network systems. So first, I'm going to lead off talking about us, the team on our side, a little bit about what we do and our history. And then the expectations for the class and the plan for the class, which may or may not jibe with your previous experiences here in the PMP program. That's actually going to be a little more information for me. And then we'll try to compress a couple of the intro bits to the class, which is the history of networking, which is a personal pet love of mine. I feel like that a lot of context for what we're going to be learning through the rest of the quarter. And then a little bit of terminology kind of stuff. So we can get started and jump right into the content. So who are we? I'm Kurtis. This is me in my home state of Alaska with-- this guy co-founded a company with me and that's a good friend of mine who's now a Googler. She's down at X. Key point here being that I'm from up there. I actually went to the University of Washington. So I did my undergraduate work here. I graduated in 2007 having worked primarily in distributed systems with Steve Gribble, who's also now a Googler. And Ed [INAUDIBLE] and a couple other folks. Here you can see Dan Grossman, who's now a full professor, was the assistant professor at the time we did a little research with him. In the middle is Ben Hindman. He's one of the founders of Mesosphere, went down to Berkeley with me. And as you can see, I was younger and lighter and prettier and all those wonderful things. From there, I went down to Berkeley to go to graduate school, where I worked in sort of a strange area. This is a photo of me in Pakistan, ostensibly separating the Chinese and Pakistani flags, because the Pakistani colleagues thought this was hilarious at the time as this American in Pakistan. So what I work on is this space of ICTD. This is referred to as information and communication technology for development. And this is development, not in the computer development sense, but rather the international development sense, like alleviating poverty. So this is a broad, broad field. And actually UW is one of the leaders in this space of trying to use technology for these kind of goals. This is usually health, justice-- and what I work on is internet access. And so largely what I've done is gone around the world trying to install new networks and build new kind of network technologies that are more appropriate for rural and developing countries going forward. And I do this probably, to be all honest, because I'm from Alaska and I have a pretty good intuition for these problems. I haven't grown up in places without a lot of connectivity and seen the value of it in a very personal sense. The thing that I work on, and my group works on in particular, are known as community cellular networks. So this is an example, community in Indonesia that we work to provide coverage for. The big idea here is to provide cell phone networks that individuals can own and operate, say-- instead of saying, hey, how long does it take to convince AT&T to come out to your community, can you build your own cell phone network? What does that look like and what kind engineering needs to happen for that to work? And so this here is the radio tower in Bokondini, Papua. It's one of the remote provinces in Indonesia. There's a lot of political strife for a large variety of reasons. But what I love about it is the radio tower, like it they literally had other gear on this thing before we got there and put up our cell phone tower. So this is the kind of work that I do. Similarly, we've done deployments at Burning Man. This is another co-founder of one of my companies, and a friend of mine at Burning Man where we set up networks twice. So in grad school I got Katie to go to Burning Man for some fun. This is me graduating with one of my advisors. I was trying to do a selfie. The other one's way over there somewhere. I'm really bad at that. As mentioned a couple of times, I started a company. This was in Dhaka. They joined Facebook and I came here, as in my heart of hearts I'm a researcher and an academic, and I sort of bristled a little bit at some of the company requirements. But it was a neat company. The premise was just to kind of commercialize that idea of community cellular, build an appliance for an NMO to take up and do fun things with. So as mentioned that Facebook-- and now I'm here and now I do research. And this is the fourth year I'm an assistant professor continuing to do this stuff with a medium-sized research group of which-- well, one person in the back is a master's student. He works in the group. So TAs now. We'll start with Kyle. KYLE YAN: OK. So my name is Kyle. I'm a master's students. This is my first quarter as their masters student and so I'm very new here. I'm interested in security and NLP. I'm doing some research in NLP. And my favorite video game, Legend of Zelda, Twilight Princess. KURTIS HEIMERL: I just [INAUDIBLE],, that's Nick. I should have just mentioned your name. That's Nick. He's working on some cool sim stuff, so cool sim stuff, in our lab. Yibo, unfortunately, is the other TA. He's stuck in a snowstorm somewhere. I actually don't know where. He said he'll get back on Thursday. And so we will all meet Yibo together and, hopefully, be able to make some progress. AUDIENCE: Does Yibo know where Yibo was in a snowstorm? KURTIS HEIMERL: I haven't asked. It was-- can we meet? He's like, no, I'm in a snowstorm. OK, fair enough. [LAUGHS] Never ask too many questions. OK. So then, again, just a brief introduction to us. Now we're going to talk about the class. And I'm going to go a little bit slower through this. What I want to make sure is that you all have a time and a place to voice your perspectives and opinions on the plan. Because we're figuring it out a little bit as we go. So the first thing are the projects. And the projects are the heart of this class. There's going to be three of them. It's three, each one is taking up a quarter of the grade. These go in Canvas. You guys have used Canvas, yes? Like I don't know exactly the tool kits out for everyone. So Canvas is normal. Turn things in on Canvas. The projects are up. Aside from project 3, which we're still building, that's going to be a modification of Arvin's prior project from the last time he ran this class. And the idea of that is I know that you all have lives. And other things outside of coursework, unlike the undergrads. And so we want to give you a little time to be able to organize and plan stuff. So take a look at those. Do them at your leisure. And we'll try to get project 3 up in a relatively short amount of time so that you can take a look at that one, as well. But again, they're up on the website right now. I think you can even turn them in if you've managed to get them done very, very soon. AUDIENCE: So I'm reading between the lines what you said. Are these not really gated on going to the lectures? We can start them right now? KURTIS HEIMERL: You could. So they are-- gated is not the right word. They are aligned with the lectures. So the first one is largely just an introduction to the platform that we're using, which is mini net, which is a software-defined platform for simulating a network. And so this is really going to teach you about SDN. It's a strange way, because we don't go into that until the end of the Linklater discussion. And then the middle project is on routing and switching, which is going to be one of the middle layer talks in about three weeks. And then bufferbloat is a transport layer problem that we're going to be going on. So if you do pace them with the class, it'll make a little bit more sense. But at the same time, as people working at tech companies and such, you also know how to Google things and learn them on your own. And feel free to do so if you want. None of them, I think, are hard limited in the sense that we have magic knowledge to give you via lecture that you cannot receive in any other way. Make sense? OK. Now, we're going to get a little bit weirder. So the weekly reading responses. This class is largely organized as basically a mix of the undergraduate course and the graduate course. The undergraduate course is a lot of fundamental networking. So things like do you understand how and why TCP works how it does? And so what that means is if you have a strong background in the networking, that material will likely be boring, and likely very, very boring. But the other side of it is the graduate material. And a graduate class in most computer science is a reading class, especially in systems classes. And this is because the field is so diverse that what you need to do is just read up on the particular material that's currently comprising the cutting edge of that field. And so it's not the case that there is this like-- we don't want to just learn about a particular networking stack. What we want to learn about is what's going on and what's interesting at networking venues at the moment. And so what we're going to try to do is provide a set of two papers. One is a classic text in networking that is formative to the field, stuff like what you'll see for next week is the design of the DARPA internet protocols. It was this wonderful paper written about why they built the internet the way that they did. That I think anyone who knows networking should have read. And then something more modern, which is about SDN. And this is a Nick Feamster paper about a little bit of the micro history of SDN. It's a relatively new concept. So we're going to pair these two and everyone needs to read these two papers and provide a response. And so in Canvas, there's a text field, provide your response. These are due Monday, the day before class, and comprises of these three things-- the summary of the paper, a question you'd like to resolve in group discussion, which we'll get to shortly, and then a critique of the work, be it methodological or whatever. That's just-- as a graduate student what you really want to do is tear apart other people's work to make yourself feel better. And so we're training you on that. So one for each paper. So two responses a week, one for each paper. Yeah? AUDIENCE: What's the approximate scope of the response you're looking for? KURTIS HEIMERL: A paragraph or two, depending on the interest. I think if you did a paragraph every time I would be disappointed. Hopefully, people get a little bit more excited about some of the work and a cache of some of the work. AUDIENCE: A paragraph or two for each of the three parts? Or a paragraph or two total? KURTIS HEIMERL: In total, I would say. AUDIENCE: OK. KURTIS HEIMERL: The key thing is really to demonstrate that you read it, for one, for that gatekeeping element. And then to generate questions for group discussion. Because the last piece of the class is being a paper lead. So the class is going to be organized such that we have an hour and a half of lecture content, which is again these fundamentals. I'm going to be pulling a bunch of the undergrad material out as being boring or not terribly relevant. We're keeping in what I think are the most important bits to understand in networking. But that's still going to comprise about an hour, an hour and a half of lecture every day-- or every week. The other half will be meeting and talking about the paper as a group. And we're going to have a group on the Microsoft side and we're going to have groups here. And what you do is you just come together, chat about the paper. Again, tear it apart and figure out what's interesting, what's not interesting. What they did that was cool. What kind of problems that they had. And go from there. And that's just a traditional graduate seminar reading class, which again, 561 would normally be primarily the paper reading and very little lecture content. But everyone here has to sign up to lead one of the papers. And what that means is that you read everyone else's responses-- I will send them to you-- and pull out what you think are the best questions, and then lead the discussion. Be, hey, what do we think about this? What do we think about this? How is it going? Like those sort of elements. Next week, we are going to leave those papers in order to give you a demonstration of what that looks like. So Kyle and Yibo will be going to the Microsoft campus to lead over there. And I will be doing it here for us to know what that is. The sign up sheet is online already. I think there's actually more students than we have paper slots. So some people will have to double up. For graduate students, often they will actually like make slides for this to talk about these particular issues. You want it to be a little bit more in-depth. It's not just what-- here's four questions and then don't talk. Like you're leading a discussion. You're driving things through. You are understanding the paper for those people in the room who did not read the paper, but are pretending to have read the paper. So again, the sign-ups are online. I think I've made it so that anyone can get onto that sign in sheet. But Google Drive is persnickety on this. So if not, please tell me as soon as you can. AUDIENCE: I think it's not. KURTIS HEIMERL: Is it not? AUDIENCE: I was able to do it. KURTIS HEIMERL: But did you need to sign in as-- AUDIENCE: As cs.washington-- [INTERPOSING VOICES] AUDIENCE: Oh. KURTIS HEIMERL: Can you do that? Does everyone have a cs.washington? AUDIENCE: Oh, I signed up with the @uw.edu, but that didn't work. KURTIS HEIMERL: So that wouldn't work, yeah, because we're actually in a separate Google domain. AUDIENCE: [INAUDIBLE] KURTIS HEIMERL: Does everyone have a cs.washington? If no, I think I should just make it like public and we'll worry about when the internet finds it. AUDIENCE: Oh, yeah, I can see it. Now I can see it, but I can't edit. [INTERPOSING VOICES] KURTIS HEIMERL: It's on the bottom of the assignment set is-- the link is there. So-- OK. You'll see some Canvas announcements as I try things and hope that they work. I thought I had gone full anonymous and gotten into it. But I guess not. So questions or thoughts? First off for me is a question, really, have you done this kind of thing before? AUDIENCE: No. KURTIS HEIMERL: No? OK. AUDIENCE: Somewhat. KURTIS HEIMERL: What does somewhat mean? AUDIENCE: We've done readings in my team as well. Read papers. KURTIS HEIMERL: But none of the other [INAUDIBLE] classes have had this kind of structure to them. No? AUDIENCE: No. Well so your ICGE class a couple terms back was somewhat like this. KURTIS HEIMERL: I thought I remembered you. Yeah, it was. [LAUGHTER] It's like a classic way to be a lazy professor, so we use it all over the place. I'm glad. You can help me. That will be fantastic. OK. So this isn't like-- I was talking to Kyle about it. Fifth-year masters don't have a lot of background in this thing. But it really is like when you're not taking an intro grad class, like you'll take intro theory, it's going to have lectures and it's going to have homework so it's going to have exams. The moment you're in like randomized algorithms, like it's reading groups and talking about papers. Because that's the idea is to teach you what networking research is. And what that is is knowing where the field is at that time. It's not-- the things that you're learning in those moments are no longer so codified that they can be lectures. Like I do not know enough about remote memory access to put together a lecture on the topic. What we're going to do is go read the most recent paper at NSDI and figure it all out together. OK. Questions, thoughts, or concerns? AUDIENCE: Are you going to add more entries to this spreadsheet because it only goes up to [INAUDIBLE].. KURTIS HEIMERL: Yeah. So there's a little bit there and that's-- I think what I decided to do was fill in all the weeks and you guys can maybe get lucky or not lucky with the paper selections. For me, I need to still kind of calibrate how fast this class goes. Three hour blocks are kind of long. And I have a lot of lecture slides to shrink into there. And so I'm slightly worried that-- specifically for congestion, which is where I stopped, that that's going to be two lectures and not one, in which case I have to come up with more papers and someone signs up for some paper they really love and do I move them later and all that kind of stuff. So what I'm going to do is just put all the weeks and as the papers get filled in, people can jump on them. Or they can just jump on the weekend and hope for the best, OK? Other questions, thoughts, or concerns? Looking at the Microsoft slide, seeing nothing. OK. There is a little bit of a late policy. I actually don't think it's going to be super relevant here. But just try not to be late. If you're late on three things, it's like three days, we might start docking points, if it becomes a big problem. This is the official rules so I'm allowed to do it if I want. But again, I just don't think that the pressures are exactly the same as where this policy comes from. OK. There are office hours. Office hours are going to be both in place and online. My office hours are immediately before this, 5:30 to 630. So if you come early, you can come and chat with us. We're also just going to be doing-- I mean, the two TAs are going to have sets of office hours similarly off of work hours. So in the evening, other days of the week, I think with all the projects being due similarly Monday night, that's going to be the sort of busy office hour, if anything. But they're there if you want to use them. We use Canvas for almost everything-- announcements, assignments, discussions, and grade book. It's all there. You should be able to see all of it. If you haven't used Canvas before, please log in to Canvas, take a look at it, make sure you understand what's going on. Lastly, the slides are adapted from David Wetherall who's been gone a little while. We, as a networking group, its [INAUDIBLE] and Arvin and myself. JZ sometimes teaches this class. Just sort of churn through and iterate the slides and update them as we learn new things ourselves. But I always like to give props back to where they are. The slides will, hopefully, go up during my office hours before class. So you'll see the lecture one slides are online right now. If you wanted to follow along, you could do so. OK. I really should have updated the numbers. OK. Anything else? I gotta remember to look at the Microsoft side. How does the Microsoft side feel about the paper readings? I feel like I'm kind of worried that it's not as crowded of a room. Though, I understand that basically you will be more crowded throughout the quarter. Can you do it? Is it going to work? AUDIENCE: Yeah. KURTIS HEIMERL: OK. All right. Cool. AUDIENCE: Oh-- quick question. KURTIS HEIMERL: Yes? AUDIENCE: What's going to be the structure for the lectures? Is it going to be like three hours whole thing or do we take any breaks? KURTIS HEIMERL: We'll see. I think it-- my hope is that they do block of lecture, 10 minute break, paper discussion, over. And whenever the paper discussion is over is when the class is out. For something like today where I think I'm going to go a little bit longer and extra content probably, we'll do it on the hour, I would guess. Yeah. AUDIENCE: Sorry, I missed the first 10 minutes so I don't what you went over, but we know the exact dates and times of the midterm and final? KURTIS HEIMERL: There's no midterm or final. I was unaware I was allowed to have a midterm or final, so you just taught me something. But it's too late. [LAUGHTER] Like no-- no final hour is scheduled, and so I was like, all right, I'm not allowed to have a final. Do other ones have finals? AUDIENCE: Yes. Yes. KURTIS HEIMERL: Do they do it like in the last day? AUDIENCE: No they don't. [LAUGHTER] KURTIS HEIMERL: I'm getting mixed information. AUDIENCE: [INAUDIBLE] finals aren't allowed. [LAUGHTER] KURTIS HEIMERL: All right. I'll jump in to a little bit of kind of why we did this fast, what's interesting in this class, and what the goals of the class are. Again, I forgot to update the number. OK. So this class as a thing is about this sort of amorphous blob inside of this world. We all have our client devices. They talk to some server somewhere and some magic happens in between. And this is a very old slide. This is straight from David Wetherall, circa 1998. Now, this is the real world now. It's a cell phone. It talks to an amorphous blob to a data center in Utah where they record our calls, right? And so the same time that-- the core technology actually haven't changed very much in this structure, right? This is BGP. This is level three and this is CenturyLink routing our traffic, again, to a data center in Utah. So networking as an area is actually quite broad. So there's distributed systems which is CSC 52. Sometimes our vendor, Tom, will teach PMP version of that system. And then there's actual Communications which is EE 506 as the graduate version. And this is bits twiddling on wires and stuff going like that. So what we're going to do in networking is be in between these things. We touch a little bit of communications. The lecture next week will be a very thin discussion on the fine layer because I don't understand it because it's not relevant to much of my work. But however, it's still within the domain. And occasionally, we'll talk to distributed systems and we do like Tor, we do Bitcoin, we do that kind of stuff. That's pushing that upper boundary of what constitutes networking. The agenda in this class is to do two big things, as mentioned before. First off, learn the fundamentals of computer networks and specifically the internet. Computer networks are a broad thing, especially the companies you all are coming from. Things like data center networks are very, very different from the internet. Or I guess, we're not in the path of becoming more and more different from the internet. But what we're really interested in is the internet, this idea of data flows across the planet and finding services at that kind of scale, rather than the sort of homogeneous networks that you can build inside of buildings, right? Although we will have a data center lecture. It's just going to somewhat separate from the structure. And so we're going to learn probably the most important pieces of that. Like, again, PSP as an element. You're going to need to know how DNS works. This is why I was saying, if you have taken an undergrad Networking class, you probably know this stuff and this might be a really boring class for you. And then we want to understand the why of it being built this way. And the why is, I think, fairly interesting to me. And we'll get to that, I think, in the history bit today. So why do we care about this? It applies to all the networks, it's super interesting, and everything is changing all the time. So there's a bunch of fundamental problems that networks have to deal with, reliability being one, right? Like when you're sending packets across the planet, some of them are going to drop. And we have to resolve that. That's just fundamental to the world. Some idiot with a shovel, it's like they can just disconnect you, and that's life. It's outside your domain. There's nothing you can do about it. And we have to deal with that. And all of this network is built with this reality in mind-- in so much in the sense that they built the network and it failed and they had to fix it. And so things like corruption are a big element here. There's space lasers. I forgot what the actual term for the space lasers are. Does anyone know? AUDIENCE: Gamma rays? KURTIS HEIMERL: Gamma rays? Is not gamma. AUDIENCE: Cosmic rays. KURTIS HEIMERL: Cosmic rays, all right. But they might be gamma rays, actually, I think. Satellite networks, for instance, have this huge problem of just like given a certain cosmic ray it can flip a bit. And it can flip a bit of memory. And that's just life. And you are going to transmit that bit and everything like your packet structure is going to fall apart. The most recent example of this was a failure in, I think it was Level 3 out of Denver. It was within the last year. Basically, what happened is they had one of these happen. And what it does is it killed a Time-to-live field. So the time-to-live is how many hops a packet is allowed to take before it dies, right? Like, once you hit a certain TTL, it's going to say we're going to drop the packet. And the bit got flipped such that it was do not ever drop this packet. And so what started happening was that unfortunately this was a routing packet and routing packets get broadcast throughout the network. And so it became an infinite loop of these packets going throughout the entire network so that the entire network was just sending these packets. And so unfortunately, even fixing the issue on the router-- like you kill the router so it stops sending it-- those packets are all in the network. And so they to turn them all off and kind of reset the thing together. So these kind of reliability concerns happen, and they happen at scale. So there's some solutions. And that's the kind of stuff we get to talk about, is how to resolve these issues in a systematic way so that we can build planet-scale networks. So a bunch of examples of these. These are all in the Associate textbook, which you are not actually required to read. It's an open source textbook, so feel free to do so if you want to go into that in more depth in these individual topics. That's full textbook versions of what's going on. It's the new [INAUDIBLE] 6th edition Creative Commons 4.0 book thing. But we're going to work on things like reliability and network growth, how to allocate resources effectively, and then security across that. Concurrent to all of this, everything is constantly changing on the network. And things have actually started changing more rapidly now than they have been in the last 20 years. And this is primarily due to the fact that the internet has become largely mobile in nature. And the way that it was built, again, was this idea of we're going to connect these servers in universities to each other to send academic papers. And instead, it's become this thing where we just send cat videos to other phones across mobile networks. And so everything is being redefined, and it's going to be redefined again. And so the more we know these fundamentals, the better we can do. This is an old graph. I really need to find new one. It ends at 2012. But we're now up to, I think, around 3 billion people on the internet. And some amount more of that of devices. And this, to me is, I think, fascinating. And I think Facebook gets the most credit for this. It's just the end of scale. It used to be when I was a graduate student and an undergrad, that we would talk about how to scale a service 10x or 100x. Facebook cannot scale 10x anymore. It's done. Like the scale Facebook can do now is 3 and they've got everyone. And so it's just phenomenal how many people and things are on this network that was, again, built for servers mostly at universities to share academic papers with each other. So all this is continuing to on go. And all the technology that drove these scaling property-- so the web come out. That is largely driven by content delivery networks, which is a company called Akamai who led that out of Boston and MIT. Big deal. And now, of course, you all work at companies that have your own CDN networks to push stuff. Obviously peer-to-peer was a bigger deal in the past, but it did change a whole bunch of stuff. Quality of service is this idea of how do you get good quality of the internet? The answer is actually just have an enormous extra capacity. But millions and billions of dollars of research was spent on this thing called QoS, which turned out to be mostly irrelevant. We have the Internet of Things popping up. This is because of IPv6 and the fact that it can handle more IP addressing than I think there are atoms in the universe because we got really tired of running out of addresses. And then all the wireless networking leading to this world of mobile devices were suddenly, I want cat pictures wherever I am and so on. And those are the things that happened in the past. We have things going on right now. Social media is an element in this space. Backscatter is a really cool technology happening here. UW, [INAUDIBLE],, one of the networking group people who have been working on this for a while. The idea is basically no-power devices. All they do is reflect wireless signals back. And being able to put devices where there's no power is a pretty big idea. So he's got a company that's working on that space. Things like software-defined networking is largely mature at this moment but has been an innovation in the last 10 years towards trying to build networks that are not decentralized, but rather the way that everyone wants to build things, which is a big central agent making decisions. We have things like the satellite networks coming online. This is Elon Musk in SpaceX ostensibly promising mega bit links anywhere on earth. And that's going to change a lot of stuff. Right now, we have satellite networks, but they're extremely expensive, prohibitively so. And worse than that, what they are is expensive in the ground stations. So to put a good bandwidth link in on the ground, you have to have a big satellite dish pointing up at space because they're in geosynchronous orbit. But with the low Earth orbit satellites, we can have smaller ground stations. And that's going to make it very, very different to have access, even outside of cost. It's just easier to lug those kind of units around. So that's an ongoing change. And then all this movement to mobile has created things like BBR and QUIC, which are a set of protocols that Google's been pushing at the IETF now to improve web performance for users on low-end phones, on mobile networks, and in highly mobile environments. So what we're going to do is we're going to learn how that internet works. Why do we care about the internet? It's a big deal. It's a huge impact. And of course, it's actually relevant to most people's jobs. This is the internet circa 1970. As you can see this is Santa Barbara, Stanford Research Institute, Utah, and UCLA. And just the four of them talking to each other. We'll go into this a little bit more into the history section. And it grows and adds some more units, MIT got involved, the Rand Corporation which is one the beltway bandits, and so on and so forth. It takes a while for UW to get on there, which we're still a little salty about. Like Illinois got in before us. Stanford finally got in there. Harvard finally got in there. So again, this kind of scaling. I went the wrong direction. Then we get to this. I'm not supposed to leave the camera area but let me see if I can mouse over a little bit. There's a couple interesting ones. So you can see MIT here. Where's the other MIT? Aw, it's hard to look at sideways. There's a wiggly link somewhere, too. Here is the link to Hawaii, a Wi-Fi link. It's not really Wi-Fi, just a wireless link. Moffett field, and that's what Google bought. And so the point here is that the network is growing. These are actually the machines on it, as well. So you can see PDP-10 PDP-11. Those are the common devices that everyone is buying sort of building up their network. Texas finally in here. I think UW is actually on here somewhere by this point. We should be up here. Maybe I'm wrong. Utah, Illinois, LBL, two SRIs. Are we not on here? I thought we were on here, dang. USC got on. Anyway-- 1977 network grows. But again, the point here that this is an academic network. It really, really was. The point of this was sharing papers with each other and eventually writing emails. Emails were a little bit-- happened prior to this. It was like the late '60s that we wrote the first email system. But that kind of purpose. FTP was the protocol that came up there. If anyone's used that FTP, it's stupid. You're just like-- it's like a web server where the user has to navigate a file directory. But that's what it was. It is pulling content from other people's academic spots to this world-spanning network. This is the 2011 version. These are all the fiber links. This has exploded since then. I'd love to get a new version of the fiber link graph. There are cool fiber links going in right now. I work in Alaska. The native corporation up there, ASRC is building a link between Tokyo and London, but going by Barrow, or Utqiagvik now. They've renamed the city. And so it's going to provide a high bandwidth activity to London and Tokyo from the most northern city in the United States. That's going to be their link. So people are building these fiber links like crazy. And usually there are submarine cables going to the coast. By then, people are trying to build them inland as the value proposition makes sense for the companies. This is a 2015 map of the network based on domains. So reds are .coms, yellows are .orgs. I forget what blues are. It's supposed to be in my slides but it's not. And so this is the 3-billion people version of the network. And so again, 2015, five years ago now. And it's scaled up even more so since then. It's just that these graphs take people a long time to build and you all don't share your data, so we don't get to make graphs. For me, what I think particularly interesting about the internet is the ongoing social impact of what's going on. Things like Wikipedia have changed how I work in a very dramatic fashion in the sense that I'm just like, Google it, figure it out. And that being a core skill we teach the undergrads now. It is just like, figure it out. It's out there. Figure it out. We don't have each and all the stuff. We teach you how to figure it out. Obviously things like Amazon-- and people in the room are probably Amazon-- but stuff like Tinder and Grindr and things like this, I think, are fascinating. Like we're in this world where the whole country and the world-- this is just starting to reach outside of ostensibly the West-- people lived in these core-social bubbles. And things like Tinder are just blowing those bubbles up. And we may or may not be experiencing that particular piece of the world changing at the moment, but it's entirely enabled by the internet. And the fact that you can just meet people that you would never, ever, ever have met before. And in fact, that's the point of the app on occasion, and create relationships and create the future in that way. And so we have this whole generation growing up with this being the norm. This is not as exciting to the undergrads when I pitch this. But hopefully you all feel the whoa, this is weird. The whole world is going to be very different in a way that is hard to really grok. And of course, the associated economic growth and the negative implications of said economic growth. I don't know if the US produces any more, but these things are a big element of it. And that makes cities like Seattle and San Francisco and New York into these massive capitals of innovation. It makes the rural areas of the country just sort of dry up and rot due to both their lack of access, as well as just the brain stock of people like me leaving Alaska to go get a job somewhere else, because this is where both the excitement and the money are at. And then there's, you know, the Ubers of the world and the Gig's Economy and all of these things that are happening because of this academic network built in 1968 to just share of papers with each other. So a key point of this is that we're going to understand why this was all built. And this is going to be the architecture of the network and BGP and all these things. And it gets uglier as you take the abstractions up. The key point of the architecture's element is that there were a lot of different ways to build networks. And in fact, if you think about it, the cell phone network is this exact analogy of what would have happened if a commercial entity had built the internet. What it is is this planet-spanning network. It actually has more subscribers than the internet and provides connectivity. But it gave certain kinds of connectivity. We didn't need the idea of packet communications, people didn't want that. They didn't know what that was. What they wanted was to call a relative. They wanted their landline service, but they could walk around with it. So Bell built these mobile networks to provide this connectivity to people. And the network is like literally exactly the opposite of the internet. So let me ask all of you. What is your identity on the cell phone network? AUDIENCE: Phone number. KURTIS HEIMERL: Phone number is a good answer but it's actually not the answer. AUDIENCE: IMEI. KURTIS HEIMERL: IMEIs are phone's identity. AUDIENCE: There are two things, two numbers. KURTIS HEIMERL: So the IMEI is one. It's the serial number of your phone. But the Sim card is the real answer. That is your identity. That is what you're built on. If you don't have that, you cannot make a call. There is no such system like that on the internet. There is no identity module. And this has caused huge problems. This is security as a thing. We don't know who is on the internet, you could be a dog, right? That's the old joke. But the cellphone network built that in the exact opposite way it was done because they want to charge you money. You cannot make a free call on the cell phone network because your identity is in hardware. They figured out that whole, like, Uber key thing a long time ago in 1988 to solve this particular problem. But those were trade-offs that were made because of those goals, right? So without the anonymity on the internet, it's a different kind of network. So you have an open access network, which means anyone can join. You lose that safety, you lose that security, but you gain flexibility and you gain privacy. There's no privacy on a cell phone network. They know exactly who you are. If you do the identity first module, you get that safety, you get that security with those costs. Similarly, there's decentralized and centralized elements of this. A cell phone network is built in such a way that there is a thing called a core network. It's a data center. It's in [INAUDIBLE]. And what it does is, all of the base stations here talk back to that data center. And that connects to the other data centers, that like AT&T or T-Mobil or whomever run throughout the country. It's very centralized. But the internet was built not to do that. And that gives you a lot less complexity. But it makes it much more difficult to operate. But it gives you this sort of freedom, such that anyone could set an element of the internet, where we're actually starting an ISP here in my research group to provide our own sort of community cooperative cell phone network. And we can just do that. We have no idea how to start an official cell phone network. We have to talk to the ITU, I think, that's the UN. Who knows if they're going to get kicked out of New York, now? Like it's this whole ordeal going on, right? So all of this is, I think, extremely crucial and actually what's going to be the readings for next week. OK, so that's the first piece, learning the fundamentals. And then we want to know about where things are going. And this is the modern advances in technology, Tor, BBR, QUIC, and then where things are going from now. And I put my little teaser, "The end of the internet?" You know, the internet used to be this big distributed system, and now it's largely five telecoms in the US and maybe 20 telecoms worldwide. It's no longer this dream of a big distributed system, but rather sort of centralizing in its own way to be more like what the cell phone network is and what industry would create if they were to build a network. A key thing here is our Not a Course Goal. This is not an IT class, we're not going to learn IT skills. We're going to learn some tools, probably. Things like [INAUDIBLE] route are relevant here to understand what's going on inside of the network. But those are sort of ancillary to our bigger pieces. The point of this isn't to learn any particular tool-kits. OK, so again, this is just a repeat of our agenda for the class. We're going to learn those fundamentals, and that's going to be through an hour to an hour and a half of this kind of lecture. And then an hour to an hour and a half of paper discussion about hot topics and networking afterwards, again, hopefully led by you all as we go forward. Any questions about all this? Otherwise, we're going to jump into the history of networking. Yes? OK. Let's show this, and this. OK, History of Internet. And this, as you can see probably from the prior slides, I get really excited about the history internet. Because people sometimes think that technologies fall from the sky and is some sort of like a religious thing that got built by someone. But rather, they're systems built within frameworks and ideologies and world views at the time that are solving particular problems. And what's really fun is when a technology is built to solve a problem and it turns out to solve an entirely different problem. And that's how weird things happen. So question to all of you. What are some pre-internet technologies? You are all old enough to probably have actually used them. This question is a lot harder for the younger guys. AUDIENCE: Letters. KURTIS HEIMERL: Letters, letters are a great answer. The postal service is like a great analogy for the internet, in general. AUDIENCE: Pigeon. KURTIS HEIMERL: What was that, pager? AUDIENCE: Carrier pigeon. KURTIS HEIMERL: Say it in the back, what? Not Microsoft. AUDIENCE: Carrier pigeons. KURTIS HEIMERL: Carrier pigeons, yes. We're getting pretty old here. I actually have no idea how pagers work, for the record. I like-- I think it's very interesting, all the technology. Because I think those networks still exist. And what did you say? AUDIENCE: Landline. KURTIS HEIMERL: Landline phones? Yeah. Anything else? AUDIENCE: Telegraph. AUDIENCE: Radio. KURTIS HEIMERL: Radio is a good one. Yeah? AUDIENCE: Physical contact. KURTIS HEIMERL: Physical? [LAUGHTER] Talking to people? AUDIENCE: Not in Seattle. [LAUGHTER] KURTIS HEIMERL: I guess. So part of this question is to just reinforce a point that somehow I get with my work, which is that there's this vision of you bringing connectivity to places, or the internet bringing connectivity. And the reality is that connectivity has existed in different forms for a long time. It's just largely gotten more efficient. We had the days of British imperialism with them taking their boats all over the world. And what they would do is they would ship back letters on those boats. And that was critical. Talking to your family is a fundamental human need in the same way that water and food and all these things are. And people similarly build systems for that to happen and have been doing so forever. For you to get fully cut off is a huge deal. And the whole burning your ships thing is sort of the version of that. So just remember that this is a long arc that we're starting at somewhat of an arbitrary point. And the arbitrary point I decided to start at is optical semaphores. So optical semaphores, has anyone-- you seem excited about optical semaphores. AUDIENCE: I know someone that worked with [INAUDIBLE].. KURTIS HEIMERL: Do you? AUDIENCE: Yeah. KURTIS HEIMERL: So optical semaphores are a relatively clever idea. This was Napoleon era in France. And so the idea was the literally just have a tower and a little signal. It's sort of like you like lighting the light of Gondor? It's not the light of Gondor. AUDIENCE: What are they? KURTIS HEIMERL: Rohan? It's Rohan, anyway. AUDIENCE: It was Gondor calls for aid. KURTIS HEIMERL: Gondor calls for aid and they light the beacon of Rohan? AUDIENCE: Beacons, yes. Beacons go to Rohan. KURTIS HEIMERL: The beacons go to Rohan. Anyway, Lord of the Rings aside, it's just this thing. And so there's a tower with some flags on it. And the flags indicate what letter is being sent. And they had a protocol on this. And what it was there was a little flag set that said start of message. And then they send the messages. And what you do is you put your message up and you look at the next tower and see when they change their message. And when they change your message the guy behind you has been waiting with the next one and then you do it again. And then you watch the next one. And this was a huge deal. Napoleon used this for military purposes primarily throughout France for the Napoleonic Wars. And it was to be able to communicate all the way across France. As you can see with this somewhat militaristic message-- I liked to record the first message sent on these mediums. If you succeed you will soon bask in glory. And sort of they basked in glory. Chappe's, I'm not good at French. It's probably not shop. But at least it has a Wikipedia page, so that's basking in glory. But effectively, this is sort of a mechanical internet. This is what the actual semaphore network looked like in France. And so you can see there's kind of routes. I should have done a little more research. I want to know if there was a flooding algorithm or not like. Do you just like send the one letter to every single place? Or are they sending messages across? I actually don't know. AUDIENCE: How did they see so far? KURTIS HEIMERL: What's that? AUDIENCE: How did they see so far? KURTIS HEIMERL: There were 556 relays. So they just like built them next to each other. And actually, Napoleon built one on the French side of the British Channel with the expectation that when they invaded Britain, they would want to be able to communicate across that. So there's some maximum distance. But obviously things like fog really affect this. There's a lot of negativity there. But it was a huge deal. They built a whole bunch. They started in 1793 and went all the way to 1830 building up more and more links of this. Eventually, Napoleon stopped funding it and they tried to turn it into a commercial network. The first use of the commercial thing was to transmit lottery information. It turned out there was a scam in France at the time, which is that you would get the lottery results in Paris and get on your horse and ride real fast and then sell the bad lottery tickets before the lottery results got to the town. And so this was their way to resolve that particular security concern. So anyway, the point was it's a network. It's a real network. And they were building these things. And it was this pre-mechanical, pre-electrical era trying to solve exactly the same problems that people have been trying to solve with communication for a really, really long time, but using this like human, in-the-loop system. So the big innovation was the telegraph. And the telegraph was largely just the invention of electricity. So a bunch of people when they discovered electricity were trying to use it to send information because they knew that you could put like a voltage on a wire and it would travel. And so there was some way to make that convey information. The big problem was that they did not have a consistent way to generate voltages. What they did prior to-- I wonder what this thing is called? It's like the first battery. What they did before was they just generated static shocks and those are highly variable. And so you would just like generate a shock and hope for the best. And the voltage on it was super variant. And so that message would go somewhere. But then they figured out how to generate a battery which gave you a consistent voltage. And then they figured out how to use that consistent voltage to do positive and negative and with a magnet move things. And so then you were able to communicate stuff. So Cooke and Wheatstone, this is the first sort of commercial telegraph was this thing. It works like this. So there were five wires, each one with a voltage on it. And you can do positive or negative. And what you can see is these two voltages point at the letter G saying that that's what the letter is. And so you would switch the voltages to the point at different things. You know, the two outside ones pointing down would be Y. It's a very simple coding. And it's actually not a very efficient coding. But it was their answer to the problem. Prior to this, what they actually did was run an individual wire for each letter. But that was prohibitively expensive. AUDIENCE: Where's the C? KURTIS HEIMERL: Where's Z? AUDIENCE: C? KURTIS HEIMERL: [INAUDIBLE],, we don't need Z, I guess. Is it in there? AUDIENCE: They omitted the least common letters with this theme. KURTIS HEIMERL: Engineering at work, right? AUDIENCE: But you have S and K. You really don't see need C because they cover all the sounds together. KURTIS HEIMERL: Yeah, there you go. I mean, it was in English so they shouldn't be anyway. So this was this particular solution. From here, people got a little bit smarter. The big one being Samuel Morse and Morse Code, which was now we're going to change the length of the voltage on the wire so that when the voltage is hot it will push down a pen. And we're dragging a piece of paper across it. And so you have short voltages and low voltages to create a coding. That's Morse Code. It was actually one of the earlier standardization efforts. Like the US and Britain came together and most of Europe because the US was the backwaters at the time. [INAUDIBLE] standardized what Morse code was going to be so that they could communicate across country boundaries with each other. So the first Morse message was this three mile one. Again, just weird messages, "What hath God wrought?" was one of the most famous messages. It was 44 miles between DC and Baltimore as this first communication that happened. The core innovation of this was, less so the Morse coding-- people had thought of that before-- but the idea of relays. And so what relays were were intermediate stations that would up the voltage again. So we you have attenuation on a wire, you lose power. And so that limited the length of these communications. And so what they did was they built these repeater stations. And you would get the message on the one and then send it again. At a higher voltage it would go again. And so that's what got us to that 44 mile length for the first telegraphs. And from here, things went crazy. People started building country-wide telegraph links. We started building them across the Atlantic. I think the first one went up. And it was up for three days and then got cut and they just put another one down. Because they were just running raw cable across the ocean. They didn't know any better. But as this was such an important thing, being able to communicate from the East Coast to London, it was economically viable to lay a new wire across the Atlantic repeatedly. So this was the sort of fun thing that happened. And this was a huge deal. It really scaled up all over the place. The statistics I was seeing was like 25,000 miles of telegraph wire in the US. And it is just that one single wire. So we're no longer needing to run five wires to communicate anything, again, saving costs and making stuff easier. You ran these along the railroad tracks to reduce cost. Following from here was the telephone. And the telephone was, again, once you can send signals across a wire, now what we want to do is modulate those signals. And so the idea of the telephone was just simply the question of how do you modulate audio onto a wire? We knew how to create an arbitrary coding, but not like sort of this mapping. The first one to do this was a guy, Reis, in Germany in 1861. This was, "the horse does not eat cucumber salad" was his famous message. That message was made because it's really hard to say in German. And they wanted something that was hard to say so you could show that the audio was actually being decoded correctly. The system was well-known as being primarily for music. And so they were trying to do an audio communication. And that was their way to prove that it worked. It didn't work. Elisha Gray patented something in the US. And then Alexander Graham Bell makes that first call, "Mr. Watson, come here I want to see you," which was a call inside of his house of the, sort of, first successful telephone call at the time. But again, earlier versions had been built. There's movies about the skulduggery of the patent system in the 1870s, where all sorts of people were finding out this. Edison was in on this. Who was the other famous one? AUDIENCE: Tesla and Edison? KURTIS HEIMERL: Yeah, Tesla is the other one. So Tesla is the other one. It was just this big kerfuffle about who gets to get the patent. And actually Bell won at the end, which is why Bell Telecom was a thing. They gave the telegraph licenses to Western Union and took the telephone licenses. And that turned out to, sort of obviously in retrospect, be the larger business. Such that they became a giant monopoly. A key thing-- so we're just the rolling up on the past a little bit-- a key thing to understand about these networks is that there is a literal wire. Like there is like a literal wire running from New York to Seattle on one of these calls. And so the way that you do routing, for instance, is what you do is you call into intermediate phone banks. So this is a phone lady, the switchboard lady. And the first switch was 1878. And what it is is a person who sits in a room and answers calls. And so you're like, you pick up the phone and you're like, I want to call-- where are they? In New Haven? I don't know my geography-- Connecticut? I want to call New York, I guess. And so then the phone lady is like, OK, I will connect you to New York. And like your wire gets connected to the New York wire. And it goes to the next phone lady in New York. And they're, who do you want to call in New York? Well, I want to call Bob in the Bob office. And then literally the wire gets moved. And there's a literal wire running from you in New Haven to Bob in New York. And that's how that works. And then the repeater signals go along and the encoding goes along. And that's how you have a call work. And these people were all over the place and eventually, got replaced by machines, like in 1950s that we started to build automated phone switching. And what this was was an in-band signal. Like the phone would make a noise that said what its route was going to be, and then mechanically the connection would be made. Does anyone know about blue boxes? Blue boxes are, this was actually what Steve Jobs' one of his first famous things was breaking the phone network. Because what you could do is, when you put a coin in a payphone machine, it would make that noise to say you are authorized for a call. So if you recorded that noise and just played that noise, it would authorize you for the call. Because in-band signaling, there wasn't like a separate channel for the communication. It was a single wire running between these places and an intermediate machine somewhere that just listened. Is this user authorized by this non-human listenable noise? And then when you dialed, it would make noises that would tell it where the dialing was. And then it would have some sort of routing tree. So that's that machine. This is very analogous, actually, of what happens in cell phone networks to this day because they were built off of these networks. And it's just this commercial iteration of the same idea, taking the new technology and going places. What's wrong with this? Yeah? AUDIENCE: There's only so many lines to New York? KURTIS HEIMERL: Yeah. So fundamentally, there's one element, right? Which is like, well, how many individual lines are you going to be able to run in New York. And actually we run a lot of lines to New York. But this gets more problematic in your areas where it's maybe very rural and so there is only a single line. And so you had these weird shared line systems which was like a big ring that would run through everyone's houses, and you would just all be on the phone together. This was one of the sort of classic answers to this thing. But even then, it just doesn't scale, right? You've got millions of people in New York who may want to make calls and if each one gets their own wire, you're going to be in trouble. What else? AUDIENCE: You have to place a lot of trust in the operator. KURTIS HEIMERL: You have to place a lot of trust in the operator. That actually just remains a problem. They're routing your calls. We still have to trust AT&T. Best of luck on that. Anything else? Remember the era this is in. This is the 1950s. We built these switching systems. We've got problems. AUDIENCE: [INAUDIBLE] of information. That information density flow. KURTIS HEIMERL: Information [INAUDIBLE] quite low, right? And so what is the efficiency of a call? AUDIENCE: As fast as you can talk? KURTIS HEIMERL: As fast as you can talk, sort of. But actually, it's slightly worse than that. Like, how many people can talk at a time on a call? AUDIENCE: One. KURTIS HEIMERL: One, right? So you have this bi-directional link, but only one person can be using it at the time. Otherwise, you're just talking over each other. And so the peak efficiency if you're just like catching it exactly when the other person stops talking is like 50%. And it's actually much lower than that. Because people are going to wait. And it's like 300 milliseconds to make sure the other person has stopped talking. Then they're going to start talking. All that kind of stuff. So your efficiency of some of these is actually quite low. Yeah. This is outside of the amount of resources and the efficient use of the resources that are both problematic. What else? There's like a really big one. Yeah? AUDIENCE: It requires a lot of human labor? KURTIS HEIMERL: Well, we got away from that. I mean, there's the cable laying and all that. But we have ostensible 1950s robot, vacuum tubes, making some choices, doing some stuff. But not that much. AUDIENCE: Security? KURTIS HEIMERL: Security, how so? AUDIENCE: You can [INAUDIBLE] man in the middle, everything. KURTIS HEIMERL: Yeah, again, it remains an issue with the cell phone network. But you're not wrong. And more like, I mean, certain people would consider that a feature. [LAUGHTER] Largely built in by design-- there's a thing called lawful intercept in the law. Like, if you run a cell phone network, you have to let them listen. It's the law. And so things like WhatsApp have actually been very confusing to a lot of government agencies, because they expected this world of circuits which networks where there is a centralized place to listen to things that no longer exists in the packing networks we're going to talk about in the future. There's one big, glaring one that I'm hoping will come up. But I'll give up here in a second. Anyone from the Microsoft side? AUDIENCE: Is it rue centeralized, like does it have [INAUDIBLE]? AUDIENCE: Forming users? KURTIS HEIMERL: Say it again. AUDIENCE: Forming of the user. And how do you locate-- KURTIS HEIMERL: I couldn't understand that. AUDIENCE: [INAUDIBLE] you would have to design phone numbers. Basically, that's how the landlines work, when you allocate a code, a regular area. KURTIS HEIMERL: For sure. It certainly doesn't scale up to things like IoT, where we have to give every single thing an identity in this kind of network. It's going to be very problematic very fast. And so there are countries where they like allocated 1,000 phone numbers. And they are like, oh, this is totally different. But those are kind of policy things to get solved. And I think originally, it used to be like dial 4 for Bob because he's the fourth phone available in New York City. The Achilles's heel is it's sort of the best answer that I have of what's going on. So first off, there's that large set of costs. We have to bill all the switching. There's all that contention for the links. They're super inefficient. But that fragility is really important. Intermediate links cause the network to go down, right? So if you have a call between these two spots and let's say someone drops a thermonuclear bomb on Denver, the East and the West Coast are literally disconnected. All their calls, everything going on is gone. That's a huge problem. And so in the 1950s where this was particularly topical due to the ongoing Cold War, they decided to fund this new idea called packetization. And packetization was a solution to solve this primary problem of what happens when Denver gets hit by a nuclear bomb? And what you are going to use is a decentralized network with multiple paths. You're going to deliver messages in blocks, rather than in circuits. And you can deliver these messages in a dynamically routed way. So if Denver gets blown up, route that shit through Austin. That communication still manages to happen. And the East and the West Coast still get to coordinate their defense against the ongoing Russian aggression. So let's take a small break. We're at an hour. We'll come back at 7:40 and then finish up this in the last bit. [SIDE CONVERSATIONS] KURTIS HEIMERL: OK, we're going to get started again. [INAUDIBLE], is this better? AUDIENCE: Maybe your mic is turned off? Did I get it turned off? Can I be heard? Can I now be heard? [SIDE CONVERSATIONS] KURTIS HEIMERL: Can they hear me yet? Now they can, I guess. [INTERPOSING VOICES] KURTIS HEIMERL: -- thumbs up but I don't believe you. Is it better or worse? It's worse? AUDIENCE: It's worse. KURTIS HEIMERL: I think it sounded so cool, though. AUDIENCE: I think there's more of a lag. Like-- KURTIS HEIMERL: There's a lag, now? AUDIENCE: Well, maybe [INAUDIBLE].. KURTIS HEIMERL: OK, do we go back to the other one? Or do we stick with this one? AUDIENCE: We could do both. [LAUGHTER] KURTIS HEIMERL: I like the way you think. That's data center [INAUDIBLE]. So yeah, well, which one? What we do? All y'all over there get the vote real fast. AUDIENCE: This is fine. KURTIS HEIMERL: This is fine? OK. AUDIENCE: Yeah. KURTIS HEIMERL: OK, we'll go on this. OK, cool. Welcome back. Hope you had some water. OK so a brief interlude for myself, because I meant to ask this and I forgot. I want to get a little sort of lay of the people in the room and elsewhere. I assume everyone is at Microsoft or can people sneak in? AUDIENCE: I can sneak in. KURTIS HEIMERL: You can? [LAUGHTER] Is that the case or no, Microsoft? [INTERPOSING VOICES] KURTIS HEIMERL: But is everyone there at Microsoft then, or not? AUDIENCE: Yes. Yes. KURTIS HEIMERL: So people can sneak in, they just don't. AUDIENCE: I'm going to do it. KURTIS HEIMERL: You into it? OK. You've got some people coming to sneak in next week. Head's up. So for everyone here, where are people from? You have a Google shirt. That's a good assumption. Who else is at Google? Just three, four. What about-- what else? So who is at Microsoft? Some of you are in none of these places, so you have to have a different answer. Well, where are other people from? AUDIENCE: Fluke. KURTIS HEIMERL: Fluke? All right. Anything else? AUDIENCE: Hulu. KURTIS HEIMERL: Hulu. AUDIENCE: Lyft. KURTIS HEIMERL: We have a Hulu out there? AUDIENCE: Amazon, here. KURTIS HEIMERL: Amazon. AUDIENCE: [INAUDIBLE]. KURTIS HEIMERL: [INAUDIBLE]. [INAUDIBLE]? This is much more diverse than what my ICTD class all ready. Any other ones? I didn't know we had a Hulu, obviously. AUDIENCE: Lyft. KURTIS HEIMERL: I knew we had a Lyft office. Any others? AUDIENCE: Starbucks. KURTIS HEIMERL: Starbucks. AUDIENCE: At least for a few more months. KURTIS HEIMERL: You got get that-- AUDIENCE: Contrast. KURTIS HEIMERL: Yeah, well, anything else? I feel like not everyone has said their piece, so maybe you are all hiding from something? Or you know, gainfully unemployed is a good answer. That's a good living. There's a couple PMP, or not PMPs, 5th year masters. A goodly number of you all. OK. Anyone else? So the 5th year masters, sorry I keep ragging on ungrads. You're not undergrads anymore, so it's not you. OK. Cool, thank you. OK, so where were we? Packetization-- again, the whole goal, get around that nuking Denver problem. So this is Leonard Kleinrock. You actually might see him on occasion. He's still alive and ran the lab at UCLA doing the packtization effort. There's a whole bunch of reasons to do this packtization. And it largely solves many of the problems we've talked about with circuit switch links. Efficiency-- the lines are only going to be used when they're sending a packet. So this gives you an immediate way to share the link. So if one side is sending and that packet goes that way and the packets goes the other way. So the link is always going to be utilized more efficiently. It handles contention when we have too much going into a single wire. What we can do is queue those packets, just store them in memory, hold onto them until the link is less constrained and then start sending packets then. The routes can change. So now we have that ability to route around the nuclear holocaust that has overtaken Denver. And again, Kleinrock really led this stuff. The first sort of message sent on the packet internet was low. It was supposed to be a login. It was from UCLA to SRI, a machine [INAUDIBLE] I think from there crashed in the midst of message sending, but [INAUDIBLE] made it. And so great, mission accomplished. A key thing to understand about why we thought packtization was so neat is this idea of statistical multiplexing. What this is saying is that the sharing of network bandwidth between users is going to be more efficient in dedicating individual lines to all the users. So if you all have heard of multiplexing, it's the sharing of resources among multiple users. And demultiplexing is the opposite of this, where you take a resource and sort of get all of the shared users off of it. This is particularly useful for certain classes of traffic, where the users are idle and/or traffic is really bursty. The users are idle is classically voice communication, for this reason, the only ones that can talk all at time. And traffic is bursty. It's classic internet things, because I just want to get that cat video. Once I have the cat video, I'm going to watch the cat video. And so I don't necessarily need to be downloading anything outside of that. So it's very, very well-suited to the network that eventually it became. So this question is, how it helps? And we'll do a little bit of an example to understand this. So we have, imagine, these users in an ISP network, right? And so I think I have 20 users here on 100 megabits length out of the connection. And so let's say each user subscribes-- actually, no. That's what we are talking about, because we want to figure it out. Each user subscribes to a 5 megabit per second link, right? So this is a little bit old. We should maybe update this for our links we're getting from CenturyLink. But if we have a circuit switch link, how many users can this ISP support? Like, you get the 5 megabits per second dedicated? This is not a trick question. AUDIENCE: 20. KURTIS HEIMERL: 20, right? Each one gets five megabits. We have 100 megabits. That's all of it, right? The probability that all bandwidth is used with these 20 users is actually quite low. Each one is at 50% utilization. So basically, you're going to be using on average about 50 megahertz per second in that. And so what this is is actually, assuming this 50% active thing, it's a straight binomial distribution. And so you could model that. And what this is going to say is that with 30 users, if you were to use this just as a multiplexing property, you're still unlikely to ever need more than 100 megabits per second. There's about a 2% chance. There's n equals 30 equals 45, probability it maxes at most 20 at a time. You get that 97% chance of that not happening. So it's just a way to better utilize your resources. And now were getting 30 users out of this link. Where if we gave them all of this circuit strength, direct, literal cable between these two places, we'd only be able to do 20. If I remember right, this tips over at about 35 where we start getting actual congestion, expected congestion. And this is sort of a foreshadowing of an event that happened in 1988 known as the congestion collapse of the internet. And finally, there were just too many users on the internet and so the whole thing fell down. Because if anything was built on this assumption that statistical multiplexing would allow us to have infinite bandwidth. But again, the cat videos just take everything over. There is this chance to get unlucky. It's a 2% chance. You have a 2%, given enough time it will happen. What do we do in that 2% chance? And not a trick question. I'll wait. Wait, right? Like, you queue the messages. Problem solved. I mean, we have all this stuff built in to handle even these extremely unlikely-- or not extremely unlikey, but occasionally unlikely events. You have congestion, use some packets. There'll be a similar time in the future where we are under-utilizing the link and all those packets can go flying. And so what we need to do is build a little bit of buffer room on each of the clients, and suddenly this is a really robust way to build out and utilize these copper links running the length of the country. AUDIENCE: If the user is not independent. KURTIS HEIMERL: Yeah. AUDIENCE: Like, we all go home, we all work, we all wake up. KURTIS HEIMERL: Yep. So you got to do the math. There's a thing, what is it called, what's that annoying language that WhatsApp built their company with? AUDIENCE: Go? KURTIS HEIMERL: Not go. Go is-- AUDIENCE: Go is great. KURTIS HEIMERL: Go is great, yeah. [LAUGHTER] It's a telecom language. AUDIENCE: Erlang. KURTIS HEIMERL: Erlang. Erlang. So in Erlang, there's a thing in telecom known as the-- it's a formula for Erlangs, which is basically the number of users a telecom can support with exactly this statistical multiplexing property. And so what you do as you model it over time and all these kind of things. And you want to make sure that a user can never take up more of the network than they need. And this generally gives you that property that I talked of earlier over QoS, where the network is always over provisioned for how many users are actually going to be there. Because you're right. Everyone is home at 5:00. I can show you graphs from myself cellphone networks in [INAUDIBLE] where 7:00 PM is prime time. But you just have to provision for that and you're generally pretty good. AUDIENCE: Do you still-- like the peak usage, it will take place-- the benefits? KURTIS HEIMERL: Yeah, this plus the peak benefit, right? Because what you had to do is give everyone a circuit at prime time. That's like the worst of all possible worlds. And that's the world we were living in prior to packtization. So that's why we just started running with this. Yeah? AUDIENCE: How come if you do get speed test on your computer you very rarely get the speed that the [INAUDIBLE] advertise? KURTIS HEIMERL: That's a very broad question. There's a whole bunch of answers to that. Sometimes, they do throttling. So cellphone number servers are well-known for this. They'll give you the first 10 seconds of a flow at really fast, because they want-- like you're getting a website, which is like a relatively thin amount of data, you'll get it really quickly. But if you're some asshole trying to torrent on a cell phone network, they're going to cut you off real fast. So these are traffic shaping techniques that people use. So there's stuff like that where a speed test will give you a weird variance on this. But there's also just the distance from the station, especially a copper, like a coax cable network. They all run all the cables to a central station that then goes off to the Comcast data center, right? And so your distance and the number of users on average in your thing is going to depend-- is going to give you the capacity that you can handle at that particular moment. So it's a little tricky on their side. And of course they don't ever have to tell the truth. So they don't. But it's the physical elements of this start to dominate. So statistical multiplexing-- a really big idea and kind of the driver behind this packtization effort, as well as, again, nuking Denver. So people started building these networks. And there's a bunch of really, really important ones. And we're going to talk about ALOHAnet when we get to medium access control because it was the first wireless network. And I think it's beautiful in its simplicity. There's actually an ALOHAnet meeting happening right now. One of my postdocs was advised by one of the people at ALOHAnet. It's a very, very famous network. Before that was Octopus, which was a 4-machine network up at lot Lawrence Livermore. CYCLADES is really interesting. This was a French network. The French were really early in hacking networks. But the government pulled the funding from it. And so largely, the French could have built the internet, but didn't. And instead, the US funded ARPANET, which is the Advanced Research Project Agency, eventually becoming DARPA, The Defense Advanced Research Agency, to fund this first packet network, putting a few universities online and talking to each other. Incidentally, this CYCLADES French thing, GSMA and mobile networks do come from France. And so that's kind of where that went. So it's one of the fun tensions. ARPANET, the thing that we talk about is this precursor to the internet funded by the Defense Department during this resource sharing all under the auspices of statistical multiplexing and dealing with nuclear strikes and also sharing resources. So DARPA wanted to buy a mainframe for the West Coast. But the University of Utah wanted to get access to it. And they weren't going to send one to Utah. So what they were trying to do is build out this network so that Utah would be able to log into SRI's mainframe and still get all of this computational power and do their experiments back in the day. And so that was the driver. That's why we were trying to log in from UCLA to SRI with that first packet network. Email was a really big deal. ARPANET was a set of these four nodes back in 1969. And it was a connection of the networks to each other. So the individual university might have a small number of PDPs networked together. But we wanted to do was connect this network to another network. And we'll get to that when we get to definitions by the end of the day. These two people you've probably seen before. In the early ARPANET the big idea was a thing called internetworking. This became the Internet. The Internet is the network of networks. We had this idea, we can build any network, but how do we connect networks to each other? This was the Internet. And we had to come up with protocols designed to do that. And this is Vint Cerf and Bob Kahn, both of which are Turing award winners. Vint Cerf-- I think Bob Kahn passed away. I think Vint Cerf is-- I know Vint Cerf is very much alive. I see notes from him occasionally. He's super, super cool and he wears these bow ties and gets to be the internet famous guy floating around. But what they did was they define TCP/IP as being the stack for the Internet, again, being the network of networks. Which is, you install this on your PDP-10 and this allows you to talk to a server that UW, at Berkeley, and Utah, or whatever, even though maybe your individual link layer medium was different. And so these are the fathers of the internet. And you'll see them floating around at real fun events run by ISOC. So ARPANET was the original funding to 1982. Then it became NSFNET, as it was no longer a defense project. It was no longer largely about nuclear strikes in Denver. It became a research network about connecting universities. And then it became the modern internet web, which was when the internet stopped being a public function. So all of this stuff has been government funded by the US government until they sort of handed it off to these smaller ISPs who run the wires and connect the cities and run the network. This is ARPANET circa 1979. You can see we're still not connected. But there is this hook here on the West Coast in the Berkeley area that USC/UCLA group. And it's connected with these IMPs, intermediate routers. You again have that Wi-Fi link-- I guess it's a satellite circuit-- over to the Hawaii and ALOHAnet to pack that out. And so, yeah, that was ARPANET. In '85 it became that NSF thing I mentioned, connecting the supercomputers. But eventually, it became the backbone for everything. It's these big long runs all the way across the country that became the big interesting piece that was run here. These are all 56 kilobit connections. All of these internet protocols started to get built. This was TCP/IP, DNS, Berkeley sockets, BGP, through this era. BGP is particularly late, that's 1993. That seems like, to me at least, these are core internet things that are exactly what's covered in this class that all got developed at the time. We hit that 1 million hosts in 1993. And then things kind of got weird. Here's our backbone link, the 56k sets across the country. And the NSFNET T3 network, which was sort of the next version that. And they just kept scaling it up and selling it as this kind of stuff. AUDIENCE: Fuzzball nodes? KURTIS HEIMERL: Fuzzball nodes? AUDIENCE: That's what it says in the legend. KURTIS HEIMERL: What is a Fuzzball node? I have no idea what a Fuzzball node is. The internet itself is hierarchical, or it was hierarchical in it's nature. Again, it's the backbone that is funded by the Federal government. Then you had regional ISPs. And these are often for-profit companies that would connect to this government network to provide connectivity to individuals or smaller organizations or smaller universities who wanted onto the NSF. And so this is where AOL came up and all these sort of smaller ISPs that you may or may not have used in you life, or may or may not within you life. And then, again over there they're upgrading the capacity of the NSF backbone [INAUDIBLE].. At this point, the internet is still largely this weird, boring, academic network that were sharing academic papers with each other. A couple of interested parties do weird things. But by and large, still again, this big government network. The weird thing that happened was the birth of the web. Which is this Tim Berners-Lee. And his big idea was to create the hyperlink. And so the hyperlink was being able to link to another resource on the internet inside of a document. So before you would pull this PDF file down and it would have-- we didn't have an address then or something. But we didn't have DNS at the time, so it was an IP address or these kind of things. And it's like got to use house server to grab this file and that kind of stuff. And so now you had content that had links to other content inside of it. This is what is known as the web. We're now getting into like a higher application layer domain thing. So obvious this is a little less weird to you. But it turned out to be a really, really big idea. Concurrent to this, the internet and the NSF backbone all became commercial entities. They've now connected these things called IXPs, Internet eXchange Points. These are super, super cool organizations. We have two of them in Washington. and I think there might be more than two. There's at least one in Seattle, Gigapop, downtown. And what it is basically a place for everyone to plug their internets in together. So it's this real work. We're doing it right now. We have a router, we're going to put it on the rack and connect it to the rest of everyone else and you'll appear there. So every single network peers in this spot. We share traffic with each other. And that's what an IXP does. And I've been to some fun IXPs. And there's one in Jakarta. They handle-- it's just like mom and pop shop. It's really like this guy and his wife. And they handle 80% of the traffic going through Indonesia. All of the cell phone networks connects through them in their cool building. They live in the upstairs of it, and the downstairs have these racks that they sell to companies in the room and make a good living off that. This IXP infrastructure is the Wild West of the internet. It's still these individual organizations and people and being able to build through networks. You can set up an IXP. The Internet Society, it's one of their big things. If you want to go and set up an IXP somewhere and talk to them, they will help support you and fund you to do that. Because they just love-- the more IXPs, the more connectivity, the more the graph sort of shrinks in that way so that the individual actors can no longer get in the way. There was a recent talk at the IETF I was at in Singapore where they were going through and seeing how individual countries have started killing their IXPs and are going to centralize the traffic so that you'll have centralized places of failure in the internet. And in the IXP world is that we can connect and appear in ten different places. You can't get shut down in one of them. You need to get shut down in all of them. But China, for instance, I think is down to five IXPs as they're trying to centralized the control of these individual elements. And certainly there is this connectivity graph in Russia that's just like cratered as they're starting to control of these things. So those are IXPs and that's where all the large content providers connect. This is where you're CDN networks will be deployed, sometimes within the inner nodes, but often at those as well. And so at this point, once we have hyperlinks, once we have the network, content is starting to drive it in a way that it wasn't before. And so now video starts to take over. And we're kind of off to the races. And that was ostensibly a little under 30 years ago, probably 25 years ago. And it's just exploded since then. And that's where we're at now. So the modern internet is similar to the NSFNET, except that now we have multiple transit providers. So these are things like CenturyLink, like AT&T, like Verizon who run the fiber across the country and they all interconnect with these IXPs or with companies. And then the regional ISPs will sell from them. And so you'll go to Level 3, which is a Tier 1 backbone provider. If you're an IXP, you'll get some sort of bit rate [INAUDIBLE] bit out of them. And they'll route your traffic for you and then you can resell it to customers and go from there. So this is what the network looks like. There's a bunch of these major transit ISPs. Level 3 is a big one, 200,000 miles. These are a little bit old with this data. CenturyLink, which we actually buy from here, on the [INAUDIBLE] side, I'd bet on my life they've never heard of CenturyLink. And then these local ISPs. And I think we have here Wave. I don't remember any other local ISPs people have. Does anyone have Wave? Are there any other ones you can think of? AUDIENCE: Where's Comcast on here? KURTIS HEIMERL: I don't like them, they don't go on the slide. [LAUGHTER] AUDIENCE: My boyfriend works for Comcast. You two can fight. KURTIS HEIMERL: I know a guy who worked for Comcast. He said it was OK. I don't know of any other regional ones. It's a little bit tight when we have someone like CenturyLink running fiber to people's houses like you do in Seattle. Although, each one of these-- the ISP business is a strange and fun business. OK, so that gets us to where we're at today. My last slide deck for the day is kind of terminology and making sure we're all on the same page as we step into the lecture content. But any questions on the history and the arch that got us to the internet? I think the key thing to take out of this is that it is a weird-ass network that was not built to do this. And it was built for this entirely separate purpose. And that's what makes it unique and interesting. And it's winning. It's beating the telecoms. LCE, for instance, is IP-based entirely. That was the big shift between 3G and 4G. And that's them winning that battle, just saying that this model of connectivity is better than the cellular model of connectivity, which is AT&T and Verizon have roaming agreements. CenturyLink doesn't have a roaming agreement with anyone. That's not how it works. Any questions? AUDIENCE: Is this an appropriate time to ask, why do we say that internet provides a lot of privacy? KURTIS HEIMERL: Yeah, and you know, privacy is maybe the wrong-- well. So why does the internet provide privacy? Let's say, does the internet provide privacy? In a sense it does not, right? Like the Wi-Fi router here knows exactly that I'm here. And that's somewhat fundamental of the physical limitations of communication. But the Wi-Fi router doesn't really know who I am. I think most major operating systems will give you Mac address randomization. And so there's no identifier that sticks with the network. So I have an anonymity. And that's sort of a version of privacy, though again, they're not exactly the same thing. Whereas again, with the Sim card, you explicitly do not have anonymity. They want to charge someone. And the closest you have to a cell phone network to anonymity is if you dial 911 without a Sim card, it will accept your call. Which is a set of attacks, for what it's worth. If you just like got a whole bunch of phones and dialed 911 on all of them, people's calls will start dropping, because they have to respond to your 911 call. And they have to call/answer those in higher priority than non-911 calls. AUDIENCE: So I don't understand. You still get charged for using the internet, right? Like, if you set up your internet business with your ISP, so they do know which packets, they have to know you. They know who is sending those packets because you have to set up with your ISP. That's how you got on the internet. KURTIS HEIMERL: They don't have to, but they can, right? A lot of the internet is reverse engineering those sort of features onto it. So you're Comcast router will have something akin to a hardware address that does identify your house and who's being billed for this. And that's what the Comcast rep comes out and does, puts in that information about the hardware address of your cable modem. And that's, again, for the billing. But it's not in the internet, at that point. That's actually a separate point protocol that they're using to talk to the core network to validate, say this user can have internet traffic over this link. The internet itself doesn't have any of those things. But if we're going to run a business office, you have to charge people. So there's these reverse engineered elements onto it. But it's always awkward. And so it's not wildly difficult to steal internet. I don't know who here is paying for your Wi-Fi in the room, right? Like it may or may not be you, I'm not sure. But you're certainly not being identified in a meaningful way. And that, aside from the application layer version of this, which is intercept their communications and show them a login page, you say, hey, can you validate who you are? But you can run it off of a Wi-Fi hotspot if you want and people can interrupt traffic. So I agree, it's a little bit strange, because when we operate in the system that we operate in, we are identified. And this traffic is monitored. And we know who's talking to who. But it's not in the design explicitly for this, like again, using Denver. Any other questions, thoughts? Yeah? AUDIENCE: So if you flip to the previous slides for the-- like right around here. So at which point does the wireless network got connected? KURTIS HEIMERL: So down here, probably. So you're-- and this will make more sense when we get to-- actually, just next week. But this thing here is talking to Wi-Fi router in room, which is right there. And that thing's got a wired connection to a switch somewhere here. It's going to be-- is that Aruba? Can someone tell me? Yeah. AUDIENCE: It's Aruba. KURTIS HEIMERL: So there's an Aruba controller somewhere. And so they're running it up to an Aruba box on campus. And that's making some decisions about whether they will route my traffic or not and all that kind of stuff. And then it goes to the UW network. And the UW network is connected at Gigapop at one of these IXPs directly from there. And so it's this set of hops. And we go between different network types as we go up. But usually, Wi-Fi has an access technology as the last hop of that. But it doesn't need to be. There's a bunch of people who-- like, if people have used Ubiquity equipment before? Ubiquity is this wonderful long distance Wi-Fi thing to build microwave links using Wi-Fi technology. And you can do kilometers. The research group I was at Berkeley actually, last I knew, holds the world record for the longest Wi-Fi link. It was like 380 kilometers. We had to go to the top of a mountain and the base of the mountain, because it's just radio. You just yell it loud enough and it will go forever. And so you can build other types of links out of that. But the experience is, of course, as an access to-- AUDIENCE: So for my cellphone, if I'm using LT signal, so I guess my phone is talking to a cell tower owned by AT&T. So that cell tower is regional ISP, to transit ISP, or where am I at? KURTIS HEIMERL: Functionally, it's a regional ISP. So AT&T will have separated out their base station stuff, their cell phone network stuff, from their backbone stuff. And so the [INAUDIBLE] network, what it will talk to, is a tower somewhere nearby. Usually it's in a building like this. It's going to be in similar shape to that. They're going to be small micro cells. And it's going to look exactly like Wi-Fi, except with this other layer of tunneling happening for all these authentication reasons. But your phone talks to that device. That device talks to the core network. The core network decides whether you get to have access or not. How to charge you if you have enough money and all that kind of stuff. And if you're good, it sends that packet out to their backbone connection to whatever it has there. And the protocol for figuring out where to route this stuff is BGP, which we'll talk about in the IP lecture in two or three weeks. But that's the sort of hierarchy of how these things are build out. And it looks exactly like this. Thank you. Anything else? AUDIENCE: Where do you foresee the internet to go? KURTIS HEIMERL: It depends. But I think we're all building it as we go, right? The concerning piece is that-- I hear there is a question like if AT&T sold a base station for your house, would you buy it? It's pretty convenient. There's no passwords. If they're already getting their back call, you might be relatively inexpensive. So I think there's a little bit of war going on, actually, between the distributed version of the internet and the centralized version of the internet. As the cellphone networks became the internet, they have re-architected the internet to look like themselves. And so it's a lot more centralized. It's a lot more top down, in a way that it hasn't been in the past. Used to be each one of these was like a mom and pop ISP that stands up or shuts down as they go. And it's no longer. This is AT&T mobility. And that's Verizon mobility. And they all have the backbones and all these sort of things. And so the internet is certainly in a period of centralization. And that's changing a lot of the dynamics of how it all works. But functionally, we have the ability to build it differently ways if we wanted to. But it's a lot of work. AUDIENCE: Right, it doesn't matter. KURTIS HEIMERL: Anything else? Any other questions? I think we'll get out of here a little after 8:30, which is great. OK, Components and Protocol. So the point of this slide deck is it just sets some terminology for us as we go forward so that we're all talking about the same things. It's not super deep. So I apologize in one way. But also, we just want to make sure that the bases are the same. This is a network. There are pieces of said network. Here are some names that we use. We have an application layer, which is kind of things running on its hosts. Hosts are just elements in the network. Routers in between, routers route. And then links connect routers. There are things like switches. Switches switch. There are repeaters. Repeaters repeat. It's a wonderfully pragmatic field, networking. That's one of the other things that I'll be beating you all over the head with over in the corner, is that my favorite, favorite thing about networking is that it's surprisingly intuitive. It's a bunch of people who are largely plumbers by nature, plugging things into each other and naming them as such. So most things sort of follow from there. This is a tablized version of this. These are for slides for you to come back and look for later as you get confused as I say things. But the application layer uses the network, things like Skype and iTunes and all that. The host, end-system, edge device, nodes, source, sink. Source, sink, and node are all from network theory. Those are actually not commonly used by the plumbing side of networking, but rather the theory side of networking, which is getting, I would say, smaller. Then there's the routers, the switches, the nodes again. Node, because we're going from network theory terminology in which case a node is just the circle in the graph. And so it could be on the edge and it could be in the center. If it's in the center, it's a router. If it's on the edge, it's a host. These are the relays between links. So they send the messages between things. So these are examples of access points such as that would be considered a router if it routes, which it does. Yeah. And things like your cable or your DSL. And then all the actual connections with the links, the wires and wireless stuff. So a key weirdness here is things like this. So this is a router, but like, have you ever logged into your router? Probably, hopefully. I don't know if you guys have routers in your life. But you log into you router, so it's also a host, because you logged into it. It has an application on it. Ha ha, I got you. Yeah. But it's about the function it has in the space that we're talking about, right? If it's routing, primarily, it's a router. You can make anything, do anything. Every single machine has an API, so we'll just talk about it like this. In terms of links, there's a couple types of links. Full-duplex is a fully bidirectional link, as in, both sides can talk at the same time. This is actually the case in a lot of things, because if you're modulating signals, they can just pass by each other so long as the receiver isn't transmitting at the same time it's listening. There are things like half-duplex connections. This is maybe more akin to talking to each other. Only one side can talk at a time. So it's a shared medium. And you go from there, and then there's simplex, which is unidrectional. So what's an example of a unidrectional link? AUDIENCE: A radio? KURTIS HEIMERL: Radio, right? Like, it just sends it to you. You don't get to send back. Bidirectional I gave you an example for that. So a weird thing in this world is that, again, going to that network theory idea, we had this idea of links between nodes. But that's not actually a very accurate representation of reality, specifically in regards to wireless. In wireless, everything is a broadcast. Like the machine is literally like wiggling some RF in space and it's doing little waves off my machine. And if you could see it, it would be really irritating. And so what this means is that, when this particular node in the center here is broadcasting, ostensibly anyone nearby can listen to it. And yet, at the same time, what we're going to do is I'm going to model this as a link. And so it's going to be like a line. And it will look like maybe four lines coming off this thing, because it can talk to all of them. But they're using a same shared medium. And things that will get out next week in the link layer are largely about medium controls, a medium access is Mac. How do you coordinate who gets to talk and share the medium at a time? So the best analogy I have for medium access control like wireless is talking. This is-- we're literally sharing a medium right now. You're all being quiet, so this is a fine way for me to communicate. But if we all started talking, it would be horrendous, because we're all sharing this medium, and we're all talking over each other at the same time. So again, just on a modeling thing, the links are going to look in ways. But you just have to remember that as you see these graphs and these estimations, that if they're wireless links, these are very rough approximations that actually will likely break down in the real world. This is the same, they would be the same thing. Oh I guess as another point, there's a level to which recognizing that if you drew this graph as a router connecting each one of these four links, or each one of these four machines, the machines actually can pair each other, too. We're in this wireless roll and we're all broadcasting. And so the actual version of this is like this horrendous incomplete graph that just is completely unreadable. So it'll be more relevant in the Mac layers, but then after that, we're just going to pretend like wireless doesn't exist, because it's hard. OK. So there's small networks that you connect to a small number of computers. There's large networks. This is Internet2. This is king of old Internet2. This is October 2012. Internet2 does exist. If you're not on it, you're behind the times. It's an academic network, again, that was spun out to try to experiment with new protocols. Basically, everything that we had talked about in terms of TCP, IEP, and all that is so calcified, you can't just change it on your own. The whole network uses it, right? So we decided to just build a separate network so we could do research things. It's not highly used, but we're on it this time. There's a couple different scales of networks. Some of these you will have heard of and will be relevant, and some of them will be less so. There's things like the Personal Area Network, this is your Bluetooth device. It's just talking short distances. Your-- what is that thing through your phone? The Near-Field Communication, NFC has one of these. There's building level stuff. This is our Wi-Fi. This is the Ethernet running down the building. There are city-level networks. These are metropolitan area networks. That's a super uncommon term, but it comes with the cell phone networks. Wide area networks is the county. Actually what happens is, most people just talk about wide area networks and it's just local area networks. This is the MAN thing. It doesn't happen often. But the wide area network is trying to connect to a region, which could be a city. And then the Planet network, of which there is just the Internet. And it's big I Internet, which is a key point. An internet is a network of networks. It's an internetwork. The Internet with the big I is the Internet. It is the network of networks. And this is a meaningful distinction. We have the Internet. But we can all build our own internets. And some places build their own internets. North Korea, for instance, has their own internet. And they connect it to the Internet. But those are separate things. And it really just like, hey, we built these protocols to allow for internetworking. And so we just sort of glommed up into one giant network, and that's the Internet. But that's a bit, again, of the terminology. OK, so a quick question. What is the network? What part of this comprises the network? AUDIENCE: All of it. AUDIENCE: All of it. KURTIS HEIMERL: All of it's one answer, right? When we tell you, I have a networking problem and it's like my game, eh, maybe. So most people would say the application is not the network. The application uses the network. And so we have an API between the network and the application. And this is our sockets layer. So that's what would normally comprise the network, although I think it's actually very plausible in saying, all of it, everything is the network. What here would be an ISP? Like what would be the internet? AUDIENCE: Routers and the links? KURTIS HEIMERL: The router and the links, may be one of the hosts. It's on the internet. We're not the internet. They're the internet. That's reasonable. And usually this gets modeled as the cloud. We got this first, for the record. Like, all the systems people who decided that they would draw clouds, those are systems, those aren't clouds. The internet's a cloud. We did it first and they took it from us. But the cloud is the generic network. It's like a packet goes in, packet comes out. What happened? Who knows? So you'll see this out there. The key thing is really the interfaces between the applications and the network, and the network devices with each other. So the two things that we talk about a lot, usually the application layer face, we punt on with the application layer stuff. We'll talk a little more about it. And then we talk a lot about the interfaces between the network devices. So what kind of features and functions should be provided in an interface between an application and a network? What do we want a network to do for us? We need to define it in API. We know it's packtized, for one. That's by default. Yeah? AUDIENCE: Get the packet to the right destination? KURTIS HEIMERL: Get the packet to the right destination. So we give you an address and the packet gets in here. What happens if it doesn't? AUDIENCE: Tell me? KURTIS HEIMERL: Tell you. So that is a great interface. I send a packet. If it doesn't get there, tell me. That's a great set of API. Anything else? AUDIENCE: Get me an address? KURTIS HEIMERL: Get me an address. Hmm. AUDIENCE: By name. KURTIS HEIMERL: Yeah. It's like, where is this thing I want, is, I think, a very reasonable network [INAUDIBLE].. What else? AUDIENCE: Receive? KURTIS HEIMERL: Receive stuff. Like, please give me things that people send to me. Anything else? AUDIENCE: See if someone else is on the network? KURTIS HEIMERL: See you somebody else is on a network. Like, sort of, a probe. Yeah, absolutely. Some of these are implemented, some of these are not, for what it's worth. AUDIENCE: Give me an address. KURTIS HEIMERL: Give me an address. I would like to be on the network. Please give me access, yeah. Presumably you need an address to have access. That's actually not always the case. AUDIENCE: Authentication. KURTIS HEIMERL: Authentication. What do you mean authentication? AUDIENCE: Authenticate my identity. KURTIS HEIMERL: Authenticate your identity? That would be like-- the cellphone network will authenticate your identity, for sure. [INTERPOSING VOICES] AUDIENCE: Connect to the network. KURTIS HEIMERL: Connect to the network, yes. I think the one I was getting at with authentication is, whether you want to authenticate the network. Are you who you say you are? That's actually one thing that the cell phone network completely forgot about. And so that's IMSI-Catchers and Stingrays and that whole genre. I built those things on accident. They're trivial. Any other things? AUDIENCE: Filters KURTIS HEIMERL: What was that? AUDIENCE: Filters. KURTIS HEIMERL: Filters? AUDIENCE: Like firewall. KURTIS HEIMERL: Like firewall. Like please don't send me things. Yeah, that's very reasonable. Also not implied, but very reasonable. These are pretty good. I thinks it's like a good list. It's really like there's a bunch of potential use cases for stuff. Other ones I would say, in order delivery. If I send you 10 things, do they need to arrive in order on the other side, or not? Depends, right? What's a use case where you'd want them to arrive in order? AUDIENCE: The stream. KURTIS HEIMERL: My stream. Yeah. If something later depends on something earlier, there's no reason to have them arrive out of order. And a network could potentially help you with that. Other things are things like Quality of Service. I want to have this much bandwidth. Like we're kind of building a circuit switch network, but you can do that. You want to have, I want 5 megabits per second because I need it. It's for my stock trades and I have money. That kind of stuff. So the point of this is, there's actually like a huge amount of possibilities for stuff that we might want our network to do. People have built a whole bunch of different networks to do this things. And again, the cell phone network and the internet provide different primitives to you. And then we have different protocols which provide different primitives, even inside of the individual networks. So yeah, so what we need to do is actually build modularity so that we can have different implementations and different protocols to allow for different sets of functionality. Let's see if I missed any. Oh, length of packets, here. Reliability, another one I was talking about. Finding a path through the network. You might need to send a path in. Tor does that. You actually have to tell Tor how the packet is going to be routed. And that's by design because they don't want the network to decide that for you because it would mean that they learn things about you. So you get to decide. So there's a whole bunch of things you'll be doing. So the point here-- again, we need to build this modularity. And we do this through hopefully stuff that everyone in here would know. But just remember, we're setting terminology. Protocols and layering-- and so the idea of protocols and layering is that a protocol talks to a matching protocol on the other side. And a layer talks the layer above and below you. So here we have an instance of Protocol X. It talks to a pure instance on a server or router or whatever is the thing we're talking to on the layer we're talking to it at. And then it uses the API of the layer below it to communicate. And that one similarly talks to the pure instance of that protocol. So this is what protocol layering is. And the network, the internet, and all these designs are built on this in a very core, very rigid way. And this is maybe one of the best ideas. But one of the things is that we just keep building layers and tearing layers apart, and building layers and tearing layers apart. So for instance, the most recent HTTP version gets rid of the transport layer. It just gets rid of it. And some people are really upset about that. And some people are less upset about that. So this is what it looks like as a protocol stack. You're going to run TCP and that's going be over IP. And IP is going to be over Wi-Fi. And then your Wi-Fi is going to talk to another Wi-Fi device on the other side and we go up the protocol stack on their side. Protocol is in layering. So we will talk about those as we go through. You probably heard a bunch about [INAUDIBLE] protocols. TCP, IP, 802.11 is the Wi-Fi one, the Ethernet. HTTP, SSL, there's not much of these things. This is an example. It's sort of a classic example. We have the browser running the HTTP layer. The HTTP layer uses a TCP, which uses an IP, which is the 802.11 to talk to a website. So as you're browsing things both here and on the East side, you all are like literally just using this stack, right? And the browser is just written to use the HTTP library that implements that particular standard and that particular protocol. The mechanism at work here is encapsulation. So the lower layer wraps the higher layer content. So I'm the IP layer. I get handed a TCP segment and I put my IP layer stuff around it and hand it to the layer below me. It looks like this. We have our HTTP content. We hand that down to the TCP layer. In fact, the HTTP library does this. It hands it down to TCP. TCP adds its header information. It hands it down to the IP layer. IP adds its header information, hands it down to the 802 layer. The 802 layer adds its header information and this whole thing goes out on the wire. To be clear, this is a little bit of a simplification. You're going to layer things from the left or the right for implementation details and speeding things up and trying to make things go fast. But conceptually, that's what we're doing. And similarly, we do it in exactly the same way on the way out. So we would encapsulate all this stuff. We said this 802.11 message, which is a Wi-Fi message that's going to be sent between these two devices. And if there were an HTTP server on that, like, I'm logging into that router or working on it, it's going to take exactly this and be encapsulated through each layer, hand that HTTP message up to the web server and that's all that it sees. Oh, this is kind of what I was getting at. So more involved in practice, but first bits on the wire on the left. And there's a couple reasons for this. The trailers and headers, you're going to do encryption, decryption, and compression. That's going to make it a little weirder. And segregation is actually a big problem here, which is like, if the message is too big for the layer, you have to break it into smaller layers, smaller messages. So that gets complicated. And let's say the modern internet is actually not that common. We just like to let segments be really big, because we have excess capacity. So we multiplex and demultiplex these things. So we get this message coming in from the wire. How do we know what upper layer to hand it to? Well, it has a bit in it, a demux key that tells you exactly what is supposed to handle that message on the way out. So your message comes in on an Ethernet layer as as E-type value. That's just a flag that says, what kind of message is this? Is it an IP message? Is it an ARP message? If it's an IP message, we hand it to the IP line. And then we look at the IP protocol field. And we say, OK, this is a TCP message. And so you hand it up to the TCP handler. The TCP handler has a TC port which is saying, what service is running this? And then you hand it up to the appropriate service and the host has the HTTP thing run from there. The reason we do this is A, it provides a simplicity of kind of understanding. We're able to look at each individual layer individually, rather than implementing all of this each individual time. You can imagine twiddling bits yourself on the wire for each individual thing. But this allows a bunch of code reuse. It's supposed to be there. But a neat thing that it does is this information hiding and reuse. So we have these two networks talking to each other as we talked about before. We're doing [INAUDIBLE] message center. We do [INAUDIBLE]. What we can do is if we're actually trying to connect across different devices and different device types, then you can encapsulate things and then de-encapsulate just some of them, and then re-encapsulate again. So here's the example. We have this 802.11 message. We send it to the router. It gets it at the IP layer. And it just ignores the IP, TCP, and HTTP elements, and just re-encodes it as an Ethernet message and sends it all [INAUDIBLE]. This is routing. This is routing at it's core. We look at the IP level which has the IP address, which says where to send that message next. And so what we're going to do is we're just going to look at the IP header, read it, say this needs to go out on this wire. Put it on the Ethernet piece, because that one's an Ethernet connection. And it could be a variety of different link layer connections. And send it out there. And so everything above that gets ignored. Here's those things being connected. This is the dream. And largely, when you want to networking people really upset it's when you break this. So there are a bunch of examples of breaking this. So your individual router, for instance, may want to look at the TCP header. And the TCP header decides what services this is going to go to. Can anyone think of an example when you would want to know more about a packet than what's just in the IP layer? Anything above that? You want to look at the TCP or HTTP headers? AUDIENCE: Caching? KURTIS HEIMERL: Caching is a great example. You want to know actually what that content is, because if you already have it then you could store it so that the next time someone wants it you can just send it to them immediately. So now you want to know what the content is. And the content is at the top of the hierarchy. Anything else? AUDIENCE: Firewall? KURTIS HEIMERL: Firewall is a great example. In firewalls you want to look at the content and you'd be like no. No! There's no reason you should be talking to that particular service. That service should not be running in our network, actually. So we're just going to not allow anything to port 80, which is the HTTP port, right? So now you are sitting in a router, looking at the layers you're not supposed to be looking at. And so these are, again, antithetical to the design of the network. We're not supposed to do this. You're supposed to look at the IP layer and route, because it's the internetworking protocol layer, and let the hosts talk to each other. But we don't do that. We look at these upper layers. And there's a whole bunch of other stuff that you do with that. Sometimes you're just doing content filtering, sometimes you want to know if they're using BitTorrent or not. Sometimes you want to know who they're talking to. Any one of these things, it's a deep packet inspection is was one of the phrases for this. Yeah? AUDIENCE: So I'm a bit confused. So you're saying that basically all the medium devices, the hosts between the two end posts, they can actually cross layers? KURTIS HEIMERL: They absolutely can. You hand them the packet. The reason they don't-- like, they had the whole package, right? It's all there. And the reason they don't might be that it's encrypted, in which case it's not useful to them. Or B, when you're a core router in an internet, you want to go fast. So what you're going to do is you have an ASIC that's specifically designed to look at the IP header and make a routing decision extremely fast. If you started doing deep packet inspection, it takes a lot more work on the router side. But you know you got to the right router manufacturer who's maybe focused on government contracts, they're going to build things that are better at that job than the less expensive routers. So what are some of the disadvantages of this? Disadvantages, what are some disadvantages of this? It's even elegant in its way, and it's really like how it's all built. We're going to go through the class layer by layer. But what are some disadvantages of this? AUDIENCE: Overhead. KURTIS HEIMERL: Overhead. And the overhead is huge, right? And we're layering-- like if it's just high, we're sending this high HTTP message, we've put like five headers on it. And this is a huge waste. What else? AUDIENCE: [INAUDIBLE],, you have to decode all the systems. KURTIS HEIMERL: Yeah there's a bunch more computation that has to happen. And people design the protocols to minimize that a little bit. But there's a classic example of a mistake that was made, which is in IPv4. So at the end of IPv4 they have a checksum of the entire packet. And this is for errors as the message gets dropped as it goes in flight, right? But they also have a Time-to-live. So every time there's a hop, the bit goes down by one. It's like 10 to 9 to 8. So what you have to do is recompute the checksum every single hop because that changes. They just kind of fucked it up. Like they just kind of missed that. And they fixed it in IPv6. But it's just something that they had to built an ASIC that can now decrement the Time-to-live and recalculate a checksum extremely fast when they do the IP-- so you're absolutely right. Anything else? There's an element to what I would say is like, it seems like a flexible system, in the sense that we can replace 802.11 with Ethernet and it works. But there are pieces that are harder to replace. IP being the big one. People have tried to do other things in IP. DTN is a well-known example of this, the Delay Tolerant Networking. Because IP has a bunch of assumptions based on addressing. And so if you wanted to do something other than IP, you have to build a brand new network. And so similarly, this is why Internet2 existed, so that we could build out [INAUDIBLE].. Once you solidify this, and once you build every intermediate router to do exactly this, it became very hard to do anything else. So yeah, we talked about those. And hiding information is both an advantage and a disadvantage. So the nature of the class is that we're going to go through these layers. This is the OSI seven layer model. It is the gold standard of network layering. Like literally, the OSI is a standardization organization that met up in 1980 or whatever. There are seven layers. The physical layer, and this is called the phi, is like literally the bit-twiddling layer. It has a piece that modulates and demodulates on a wire or in space. There's the link layer, which does the medium access control. How to control who talks and when. And these are often very highly overlapping. For instance, Ethernet is both. So the actual Ethernet standard is from the '80s. It uses a coax cable. And everyone just plugged into the coax cable. It was one big shared coax cable. And so they had to figure out when they talked together. And that was the Mac layer of that. But things like your cellphone network have a Mac layer and a physical layer separated out in that. There's the network layer, which is that IP layer doing the internetworking piece. Transport gives you that network properties you want over this abstraction of an IP network. Because at the IP layer packets can disappear. We do best effort. It's just the pings are into the ether. This thing will tell us, hey, did that packet make it or not? And so that's what that one does. And then on top of that all application layers. That's session, presentation, and application are all in kind of the same bundle. The session is multiple connections between two hosts. But your browser will handle that. Presentation is like HTML. It sits at that layer. And then application is if you built on the outside of the [INAUDIBLE].. Again, this weirdness is the narrow waist of the Internet. Which is like, we have a whole bunch of link layer protocols. We have a few transport layer protocols. And there are others. Things like QUIC and BBR [INAUDIBLE] because there's a ton of application for them both, but there's just the internet. And that gets [INAUDIBLE] but it's also probably the reason that the network is scaled to 5 billion people or whatever it is right now. In the class, what we're going to do is spend the first-- ooh, those are wonky. We're going to spend the first to roughly half to maybe two-thirds of the class going layer by layer talking about these and getting the individual details of those down. And then once we're done with those, we're going to talk about the cross-network and interesting things. We're going to have a lecture deck on cell phone networks. We'll have a lecture bit on the security across networks and things like that. And that will kind of finish out the class. Oh, this is where followed by the cross-cutting elements, QoS, security, et cetera. All right, so that's it for today. We're at two hours and 35 minutes. Not too bad. Any other questions or thoughts? You all seem ready to go. Go read the papers. I think it's a good intro to that. Again next week what we're going to do is an hour and a half of lecture on link and physical layer, and then we're going to talk about papers. And these papers should be super relevant to exactly what we talked about. One question I have for you before you go. Should we do the lecture and then the papers? Or the papers and then the lecture? It's a little strange, because the papers for next week are on today's lecture content. They're offset a little. And so I feel a little strange giving the next week's lecture content and then doing the papers from the last week. But I also feel strange leading with the papers. AUDIENCE: Based on the content, take the next week we do the paper first. [INAUDIBLE] then do lecture [INAUDIBLE] based on content. KURTIS HEIMERL: OK. AUDIENCE: I agree, paper first. Partially because I don't want the people in front to feel like their keeping the students from leading the discussion field. And like they're keeping the students away from going home. Like there's a weird social dynamic there. KURTIS HEIMERL: There is. There is also a nice social incentive to go gather. Anyone on the East side? You guys have any feelings on this? AUDIENCE: I mean, we be my get snowed out next week, anyways. KURTIS HEIMERL: What's that? So on the East side, again, the TAs will be there next week to lead the discussion. But everyone else, sign up for papers, sign up for weeks and we'll figure it out. All right. See you all in a week. 