 hello and welcome to the Nasdaq event she gets started guide this guide will walk you through the process of creating a model of a site using nas Danica Vinci and then generating and publishing the site we will start with the concepts of model driven development in Nasdaq event she then we will go through the installation process of the Nasdaq a tool suite which includes Nazz Danica Vinci after the installation we will create a modeling project and an initial model we will then generate a starter site from the model and publish it to the Internet via github pages after that we will populate the model and generate site content from the Eclipse development environment user interface and also using the Nasdaq a command-line interface we will complete the guide with a review and outline of the next steps in order to use the Nasdaq a tool suite which includes Vinci you will need Microsoft Windows 10 some earlier versions of Windows should also do you would need permissions to download a zip file extract it and to launch an executable local administrator access is not required if you install nas Danika vinci on your personal system you would typically have these permissions however it might not be the case in a corporate environment welcome to the section on model driven development concepts this section is a bit abstract its purpose is to lay a foundation so that what you see in the following hands on sections makes more sense please feel free to skip it and dive right into action in the subsequent sections if this is your learning style you can get back to this section later or never if you find the modeling approach self-explanatory Nazz Danika vinci is a model driven development tool what it means is that in order to create a website we will create a model and then the actual site content will be generated from the model what is a model generally speaking a model as a description of a specific problem area also known as a problem domain for example a Vinci model describes a website structure and a map describes a territory typically a model is an abstraction of the problem domain which means that it removes or hides non essential details allowing to focus on the details which essential for achieving a particular goal Nazz Danika Vinci models are built with the Eclipse modeling framework or AMF an EMF a model is a tree of model elements of different type which can reference each other a model element can also be called an object and its type is called a class model elements can have structural features and operations a structural feature is either an attribute or a reference for example a class person may have an attribute name and a reference relative's structural features can be have one or more values for example a reference to relatives may point to more than one person references can be unidirectional or bi-directional also references can be containing or non containing a model element except the root model element must be contained in a single containment reference model classes support multiple inheritance where a subclass inherits structural features and operations from its super classes and may define its own structural features and operations a model can have multiple representations in this guide we will take a look at the tree representation the diagram representation and the properties view it is important to understand that all these representations are backed by the same model different representations of the same model allowed to utilize thinking modes most appropriate for a particular modeling task diagrams can be used to define the site structure trees tables and property views engage sequential thinking for elaborating details of individual actions at this point of time Vinci does not provide table representations however they can be introduced in the future releases in a team environment some team members may be creating the site structure using diagrams and then hand over models to other team members who would use trees and property views to elaborate the models to their final state model classes are grouped into packages Nazz Danika vinci uses five model packages with increasing level of abstraction the end core package contains core classes used by the classes from the other packages the HTML package provides classes for generating HTML the bootstrap packages provides classes for generating bootstrap elements which is a higher level of abstraction than HTML the application model raises the abstraction level even higher at this level a site is a tree of actions with content in this guide we will operate at this level of abstraction eventually the components model provides high-level components such as tables of content and text-to-speech components in this guide we will be generating a website from an action model in this model an action as a unit of interaction between the user and the website actions are organized in a hierarchy the root of the hierarchy is called the root action the first navigation child of the root action is called the principal action actions have activator and activator type attributes these attributes define what happens when the user clicks on the action link in this guide we will use reference activator type actions may have content the content is displayed in the content panel when the action is activated actions can be in different roles action role defines placement of the action link or action content on the page the root action is displayed in the page header the principal action is displayed in the navigation bar if the root action has more than one navigation child then navigation siblings of the principal action are displayed in the header on the right context children of the root action are displayed in the footer navigation children of the principal action are displayed in the navigation panel they can be grouped into categories and displayed as a list or as a tree depending on the navigation depth context children of the principal action are displayed in the navigation bar to the right of the principal action context children of the selected action are displayed to the right of the action header action content is displayed in the content panel section children are displayed in the content panel below the action content content left and content right children of the selected action are displayed in left and right sub panels of the content panel let's take a quick look at a few examples of actions in different roles in this example Jodo is the root action and resume is the principal action employment history is a category grouping navigation actions employer one employer to an employer 3 these actions do not have navigation children and therefore are shown as a list skills is another action category skills navigation actions are nested and therefore are displayed as a tree in this example Nazz Danika is the root action the principal action text is blank and therefore it is not documentation and support are second and third navigation children of the route action the footer contains context children of the route action alright we are done with the theory now it is time to install the NASDAQ a tool suite and get down to modeling and code generation 