 this is the key point of our DevOps strategy if you create friction for the developers they're going to check in a password right because they won't want to use your fault if it becomes difficult for them to use the tools that they love then they may not do anything secure at all so our pro posture is have them use the DevOps tools the way that they need to and most of these already exist Asher has key vault kubernetes has kubernetes secrets AWS has the secret management service right like all of these technologies now have a great Boulting technology involved so why should we reproduce that and force them into our tool right what we would rather do is say keep using your DevOps thing but when the devops world needs to touch the safeguard world the panworld we're gonna do that in a very specific way right we don't necessarily want the DevOps world to reach back into Pam and pull a secret out that's scary because now like my my public environments touching my private Pam environment don't do that that's going to be a bad idea so instead we will take the secret from our secure environment and push it to the environment that needs it does that make sense I'm going to show you a demo of that and I think that's it so this is what it looks like consider you have a virtual safeguard running somewhere there is a service called the safeguard DevOps service that's being written as an open source project is currently in a PLC right now and it's sort of an alpha stage but I have a video of it working I'll show you in just a minute it is a service that has a plug-in framework that it knows how to when certain secrets secrets are configured in a certain way it knows how to pull the secret and push it to the secure to the leaf less secure DevOps environment that makes sense so we got a plan get the plugin already for hashey core we're working on it for kubernetes and i'll demo the azure key ball to you right now okay so this is our strategy the Pam world and the DevOps world are not exactly the same world but safeguard is the very best tool for enabling your DevOps world to get you to where you want to be okay there is no we won't say hey no you shouldn't do that if you say well I'm gonna just take a safeguard vault and I'm gonna use the API on I'm going to use as my my DevOps secret store go ahead we can do it it's safe guard it's flexible enough to do the exactly that job but I would also recommend that you keep that instance of safeguard separate from your parents that's to safeguard right and then you push push secrets between the two that makes sense because you want to maintain that degree of separation between what is considered DevOps and what is considered okay okay any questions on anything before I start see if we can get some demos working okay all right so first thing I just want to show you is a video okay I'm going to stop this before we get here back up back up back up okay so what you're looking at here is actually a the azure portal anyone use an editor a bit okay so you're looking at a sure we're just looking inside it so add some secrets in a key ball okay so this is gonna move pretty fast that's why it stopped it but what the I had a developer prep this for me yesterday and what he's gonna show you is that he's looking at these secrets and there's there's just you know there's nothing in there okay no secrets okay so he's gonna go back out he's gonna pull up safe guard he's gonna take this user that he's configured in a special way and easy to say I want to change his password okay so that password change you see that happening and safe guard on the left there on the left there and he goes back over to Azure and he hits refresh secret popped in right now it's been distributed out to the to the Azure environment and here's this value right that secret is now available for any application that needs it through the native tool let me you know make sure we get this across stopped it through the native tool that the developer already wants to use does that make sense it's a key point the developer when he writes the application he wants to use Azure as your key bolt he doesn't want to learn how to pull a secret from safeguard necessarily that makes sense okay so now you go back in and you change the password again see it doing the normal safeguard thing there on the left for use it those of you their own safe crowd that all looks very familiar jump back in he's going to refresh the view in the azure portal when he refreshes it you'll see hey there's a new version of this secret right let's go click on that one and see what its password is go down and look at it and that secret has a different value make it cents so who owns this secret not as your key vault this secret is owned by safeguard managed by safeguard it is inside my Pam environment and it is under my control but where it needs to touch the devops world it's in the tool that's going to make the developer the most comfortable it's a key point to what we're trying to say here okay so safeguard is is the tool that provides this type of flexibility to you know no copying and pasting not moving things manually it's whenever that secret is needs to be changed by compliance requirements on in the Pam environment it changes so like you can think about this that could have been a safeguard instance running in Azure that's managing a VM that's also in Azure but when we want to go pull that secret from an application running in Azure web web apps right it pulls it through the vault because it's easier right the developer knows how to do it he's not gonna sweat it so a key factor in using the built-in technologies with something like as your key Balt is because they have certain knowledge about the environment that allows them to anchor a route of trust for example if I want to be able to you get a pull secret for pulling something from the azure key Balt I can base that on the fact that I know which IP I started the VM to run under Azure knows that this thing can talk to this thing right if you try to do that in another way it's really difficult because you end up like in this scenario where it's like well I need a secret to pull a secret well what's gonna protect that secret well maybe it's a secret right like you know you can change secrets together forever but eventually you run out right like you have to have a firm foundation to stand on right with safeguard that's actually the hardware in some cases that you stand on that says because I know that these disk drives only run on this machine and that they're fully encrypted and they can only boot in a certain way and based the application that's my anchor of trust it's a little bit more difficult to do that in in other virtualized environments right so in the devops world can anchor the route of trust in different ways 