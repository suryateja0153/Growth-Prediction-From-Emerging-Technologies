 Hey, friends. Welcome to Day 2 of Ignite 2020. I've got some wonderful folks joining me as well as some awesome demos. Here's the thing. The way we work has changed in 2020. Put simply, we now live in a world of remote everything, and frankly, it's sucks. Many of my coworkers, my friends, my colleagues have been thrown into remote work. They weren't working remotely before and some of them have had this frantic get your laptop, you're now working from home, a moment, and we've been doing this now for months, and the way we're all working is not representative of remote work. I have worked remotely for Microsoft for 13 years and I can tell you that quarantine work is not remote work. It's different. While things are getting back to normal, Microsoft is pleased to play a small part in making remote work possible. We're helping development teams code, collaborate, and ship. That can be internal, that can be customer facing apps, even when working as a remotely distributed team. No matter where you are, no matter who you are, no matter what your language is, every developer is welcome. Whether you're building apps with Java, Node.js, Python, .NET, Azure supports your tools, your languages, and your apps, and we're always trying to continue to innovate and regularly update the Azure SDK. Now for me, Azure is the Cloud for .NET apps. We've made really significant investments of .NET over the years as well as unifying the ecosystem, and now you can build literally anything. Yesterday we announced the availability of .NET 5 Release Candidate. That means general availability coming on November 10th, and this release continues the journey to unify the .NET platform across mobile, and web, and desktop, artificial intelligence, machine learning, big data, and even IoT. Now .NET has got several Cloud and web investments. You've got smaller single file applications, they're faster, they use less memory. This is really great for microservices, containers, running containerized applications on Kubernetes across operating systems. This release also has some really really significant performance improvements, as well as support for Windows ARM64, and also a new language support for a C-Sharp 9 and F-Sharp 5. It's really fantastic release. You can download .NET 5 RC with a go-live license now. That means you can put this into production. We're actually running it in production right now on the .NET website. Now, I love that I can build anything with .NET. I want to show you a really cool application that I built in the last few months while we've been stuck at home here that manage chores for my family. First, let me show you how this works. This is my kitchen and we're walking in my kitchen, that's my pantry. Yes, I'm the last person on the planet with a landline, sue me. There's the DAK board. You might also hear this referred to as a magic mirror, and you can see I've got the whether, we've got chores, family photographs, it's really a status update, it's a dashboard just like your Azure dashboard, it's a family dashboard. I've got components in those that I can write. We've written them in Blazor and .NET 5. That chores list is actually managed by .NET and hosted in Azure. We're going to see more on that a little bit later, just one example of a really great .NET application. Now, that's a cute little application, but let's talk about how we would take the micro to the macro. There's an immense potential to scale your applications, and Azure is the world's computer, Azure is global. Provides a broad range of services that enables you to build rich applications, solutions that you focus on apps. You don't think about infrastructure. Across all of Azure, we've got thousands of capabilities. Here's just a list of a few of them. These are from Kubernetes to containers and databases, again, IoT and intelligent edge. All of this is trying to ensure that you can stay ahead of the curve. Now, let's talk about developing for the Cloud. We're continuing to innovate in the app space, and one of the things we take pride on is our integrated tooling, that developer experience for Azure. It brings up best in class tools, SDKs for every programming language and a platform that supports continuous collaboration and continuous delivery, as well as things like Power Apps and Power BI. Now, as developers and organizations have been adapting to this post-COVID world, they face challenges in shifting to remote work. Now, the most resilient developers can code and collaborate and ship from anywhere and they expect their tools to help them achieve that. With Visual Studio, GitHub, and Azure, your developer teams can code, collaborate, and ship from anywhere. We call this our developer Cloud, and with it, developers can code from anywhere. That means Cloud-aware development tools, Cloud-powered development environments that make any device a development machine, allows you to work flexibly from anywhere. Then you can collaborate without friction from anywhere. These are tools that you work in a distributed team and collaborate with the open-source community in ways that feel most natural to you. Then of course finally, securely ship from anywhere. Each of those services and tools that allow you to monitor how that code is performing and then maintain confidence in security despite being remote. It all starts with your dev environment. We know from talking to you that one of the most common pain points at devs have, now seen in the most recent months is setting up a new DevBox from wherever you need to work. At Build, we showed GitHub Codespaces, that uses the power of the Cloud to give you a fully configured development environment in seconds. GitHub Codespaces is seamlessly integrated into GitHub, meaning that you can create a Codespace right from GitHub.com. You can work in a full-featured web-based editor. What's cool about this is you can also use Codespaces from the Visual Studio family of tools as well. We've just added support in GitHub Codespaces, Beta, for Windows-based Codespaces with Visual Studio 2019 support. Visual Studio, GitHub, and Azure combined give you that end-to-end developer experience, and that's from your idea to your code to your Cloud. We also announced yesterday the public preview with some new GitHub actions. This will enable developers to create a code-to-Cloud workflows. These are secure and compliant, they integrate governance and quality into the software development lifecycle. The idea is that you have an everything as code, DevOps model. All the policies, all the build and release pipelines, everything's expressed as code. That enables continuous improvement and promotes better reuse and drives greater transparency. Now, here's an app that I built. During the last few months, my family and I have been doing some social distancing vacations. We drove down to Wildlife Safari in Oregon to see the animals, but we stayed inside of our cars. We built a blog with Orchard Core. It's an open source CMS to showcase our photos and what we were going to do, and I was going to call my friend Abel and we would maybe build it out, do it together, and maybe add a map to it or do some new features. Let's go ahead and give Abel a call. Hey, Abel, are you ready to help me out with my blog?  Well, actually I'm not quite ready.  This is because you're on your fancy deck?  Well, I know you want me to come on and show you how to add this new map feature, but that's a basic demo. It would be way cooler if I showed you how I built your blog using the device that I used.  Okay, that's not that interesting. You used a big giant desktop, powerful machine like everybody else.  Nope. What I used is this first-generation Surface Go.  Really?  Yeah.  Okay. I feel like you might be making that up. I mean, Surface Go is a great little machine, my kids use it for school, it's not exactly a development environment. I don't think I would install .NET 5 and other libraries. To be clear, Orchard Core is a wonderful CMS, but it's 100 projects. You did not do this on a Surface Go, you're trolling me live at Ignite 2020.  Come on man. You know I wouldn't make this up. Yes, Visual Studio is super powerful, but with GitHub Codespaces, most of the work is going to be done in the Codespace. My visual install is going to be super fast.  Okay. I don't believe you.  Really? I had a feeling you wouldn't. I recorded a video. Now, check this out. First, since most of the heavy lifting, it's being done inside of Codespace. I don't have to install any of the workloads in Visual Studio, and that's why it might install as fast. Takes about two minutes.  Okay. That is cool. Now, to complete the things that I want to do when I'm building apps, I need to do a ton of workload. Installing Visual Studio, it can take a minute, and even on a fast machine, you're still looking at 10-15 minutes.  Yeah. Without the workloads, man, it goes much much faster.  Interesting. You're just putting the Visual Studio shell there somehow?  Yeah. Now that Visual Studio is installed, all I need to do now is just connect up to my Codespace for this project. Once I log in with my GitHub account, I can see all my Codespaces, or I can create a brand new one. But since I already created one, I'll just go ahead and connect to it. Now, once I connect up to my Codespace, my experience, it is exactly the same as if I open this project up locally. Now I can write code, I can build, I can debug as fast as if I was using a real dev machine.  What do you mean debugging? Like I had to attach to some process and open a port like remote debugging?  It's like remote debugging, but remote debugging requires a whole bunch of configuration. You got to open the right ports, you got to have the same symbols, you have to attach the right process. There's a lot going on there. But with Codespaces, all I have to do is just connect to it, click "Run", and bum, Codespaces does everything for me. Let me show you what I mean. Here is where I go ahead and add a breakpoint, and when I click "Run", see how the app builds, super-fast, way faster than my Surface Go can do. Then it goes ahead and launches my app, does all my proxying and port forwarding for me and, bam, there you go. My breakpoint has been hit. Now, I can go ahead and trace in, I can trace over, I can check my variables, I can check my threads. Basically, I can do whatever debugging I need to do with Visual Studio. There you go, dude, from nothing to debugging in less than seven minutes. All done on a first-gen Surface Go.  That's pretty awesome. Using just a regular Surface Go first-gen you said, you install Visual Studio from nothing. You didn't have the machine setup like a raw machine, and then you started not just installing, bringing the code down because you didn't do it in Codespaces, started debugging with 90 projects, a 100 projects in minutes. Architecturally though, what's really going on? Like I feel like this is one of those demos that we're like, "Magic," and then we go to the next thing. What's really happening? [MUSIC]  Visual Studio is super powerful and can do all kinds of thing. But really it consists of two parts. You've got Visual Studio the UI with all the windows, the menus, and the editors, and you also have the muscle behind Visual Studio, like the language services, the compilers, the runtimes, and the extensions. That's what powers things like syntax highlighting, IntelliSense, and Live Share. But with Codespaces, you can now split these two things apart. Locally, I just have my Visual Studio shell. That's what I installed on my Surface Go, it's small, it's light, it's super fast, and all of the Visual Studio muscle, that's not going to be running locally. That's going to be running in my own personal Dev environment hosted up in GitHub Codespaces. My Codespace, it's a dedicated resource, completely isolated from my other projects and each Codespace, it's fully customizable. Out of the box, Codespaces, it comes with a standard set of software installed, so most projects just work. But if you need to install other things you can. Like your orchard project, that's using Bleeding Edge tech, like the.Net 5 release candidate bits. I've added a file into my repo that literally tells Codespaces to go ahead and install this release candidate along with all the other libraries that we're using. Now, when I type FOO., and IntelliSense pops up with my choices or when I'm typing in my Roslyn Analyzers kick in, or when I'm debugging a whole bunch of threads or even compiling your massive orchard solution with its 90 some projects, all that heavy lifting is done up in the Cloud. Literally this first gen Surface Go, there's nothing devy about it. But by using Visual Studio and GitHub Codespaces, it now performs like I'm using a fully decked out Surface Book 3. So bam, how cool is that, Scott? But seriously, like Codespaces, freaking awesome. You get your own customized Dev environments the way you want it, the way you need it, and you get super fast onboarding for your projects. Instead of spending days setting up your machine, now you can go from nothing to debugging in minutes. Finally, by offloading the heavy lifting to the Cloud, any machine can now be your high powered Dev machine.  That's pretty amazing. I can connect to Codespace, I can edit, I can build, I can debug. But when I want to publish to Azure, can I like still right click, publish, like when I usually do things with Visual Studio locally?  Dude, Scott, no. You can but come on, I'm a DevOps guy, I can't believe you just said right click and publish. Because look, I totally get how convenient it is just to right click and publish. But what if I told you you can now right click and do the right thing. Check this out. With Visual Studio, you now have the power to right click, and it'll create for you a CI/CD pipeline using GitHub Actions. Then using that pipeline, it will build your app from source control, run your unit test, and then it will deploy your app into production. Now for those that don't know, GitHub Actions, that's GitHubs new workflow engine where you can automate all things including CI/CD. CI/CD, that's continuous integration and continuous delivery where every developer check-in is verified by first building it and running all its tests and then deploying it. Now if something is wrong, the Devs get notified immediately after they check their code in. Man, this is so much better than just right click and publish because seriously, right click and publishing, that's just taking bits from your Dev environment and pushing it out into production. What happens if your code isn't committed and you get hit by meteor or something? Guess what, that code is now gone and the other Devs on this project, they don't have the production code or what if you have libraries installed in your Dev environment that isn't checked in to source control? That happens all the time, but that means no one else on your project has working code. How do we make sure you're a good citizen and you run all of your unit tests before you right click and publish? See, you need a CI/CD pipeline. Everyone deserves a real CI/CD pipeline, even your family blog. Go ahead Scott, right click and do the right thing.  Now that's pretty fantastic. Not only am I able to do on my regular developer tasks in Visual Studio, I can do it from anywhere, but I can also configure easily a complete DevOps experience as well, both spaces are slick.  Yeah man, they totally are and I'm super stoked to have any machine be my Dev machine with the awesome tooling of Visual Studio.  That was a much better demo than building the map for my blog, but we'll do that next time.  Absolutely. If we can use Codespaces, I'm totally in.  All right cool, I'll catch you later. Great stuff from Abel. Let me dig a little bit into the Cloud. Yesterday in the Azure keynote, Julia White shared how we continue to innovate particularly in the serverless space. She announced the new Azure communication service and some interesting innovations in the database space like Azure SQL Edge GA, and a public preview of the new deployment option for Azure Database for MySQL and Azure Database for PostgreSQL, a flexible server. I highly recommend that you watch Julia's keynote on-demand to learn more about these exciting announcements. Now I've got some even more great stuff brought to you by our engineering teams working on Azure. I invited some friends from Azure Engineering to talk to you about what they're most excited about. Azure App Service, Azure Logic Apps, Azure Cosmos DB, and Azure AI has some really cool things happening. Natasha, Deborah, and Neta, please take it away.  Hi, Scott. Thank you. Hello everyone. I'm Nitasha, I'm an Engineering Manager on App Service and Logic Apps team, I'm excited to share a few updates. App Service currently hosts over two million web apps, and we can now support more apps than ever. With Premium V3 you can run more apps, for instance, and larger apps with memory options up to 32 gigs for instance. With the GA of Windows Containers Support customers can now run apps with complex or customer wise dependencies on App Service. For the first time we're offering reservations pricing, customers can save up to 55 percent with the three year commitment. Logic Apps which is used by more than 40,000 customers for automating business workflows has a new containerized runtime providing hosting flexibility to run on App Service, Kubernetes, or any Cloud. We're also launching a new VS Code extension for developers to do local Dev and test before deploying to the Cloud. Logic Apps will offer stateless workflows with significant performance improvements. So many features in this release, really look forward to seeing what customers will build.  I'm Deborah Chen and I'm a Senior Program Manager on Azure Cosmos DB. Let's talk about our two Ignite announcements. First, is our new serverless mode. It's completely consumption based, so you'll only get charged for the resources and storage that you actually use. This makes it easy to get started or run small apps on Azure Cosmos DB. Second, we're adding new capabilities in Azure Synapse link. Data analysts will now be able to run analytical T-SQL or Spark queries over the data in Azure Cosmos DB, including the first time on their MongoDB data. We're really excited about these new features which are coming next month.  Thanks Scott. I'm Neta, Azure AI Principal PM. Today, in Azure AI we have some exciting announcements. For Azure Cognitive Services and the decision category we have the new metrics advisor service that proactively monitors metrics and diagnoses issues. In the vision category, the new spatial analysis feature in computer vision helps organization maximize the value of their physical spaces by understanding people's movement in near real time. Now, Azure machine learning with a new general available capabilities. The designer provides drag and drop models for tasks like data preparation and evaluation and no code automated ML UI enables you to build and deploy predictive models. Back to you Scott.  Thanks so much for sharing friends. By leveraging serverless and services in Azure I can build my applications efficiently both in terms of cost and effort and add these services to extend my applications and get even more cool functionality. Actually, let me show you what I did with my family dashboard and how I added some amazing Azure services to make my life a little bit easier here in quarantine land. Start this video. Here's my trash can in my kitchen. I've put some lights on top there, you see the green light, and I've basically taped a Pi top. It's a Raspberry Pi on the back of it. Then I'm going to put some trash in here and I've got a proximity sensor pointing straight down. Then when we see that the trash gets higher up, the proximity sensor goes off and then that light's going to, their it goes, light turn red. I'll run over the deck board. We've extended the deck board now to have a heatmap, watch the trash can. Look. Just got an instant update and it says reminder sent, and we can see a little map there that shows where in the house the trash is, and then we see also that our ASP.net chore list inside of our dashboard is updated to tell the kids to go and take out the trash which is pretty sweet. Now let me show you what this looks like. We've got a Raspberry Pi or IoT device, in this case, running Python. That little Python application is running on the Raspberry PI, I made that with Visual Studio code, it calls an Azure function. An Azure function, there's actually two, one in node and one in .NET because I like to mix it up. The Raspberry Pi then sends the height of the trash with that proximity sensor over into one of the functions that then uses the Azure SDK for .NET to talk to the Azure communication services which sends the text message. It sends up text message to my children to tell them it's time to take out the trash. We get back an event from Azure communication services to let us know that which then uses signalR to dynamically update that application running the DAKboard which is running Blazor. Look at this nice circle as a Raspberry Pi, sends us notifications into functions, goes into some Event Hubs. Through Azure communication services, the text message gets sent and then we update that Heatmap. Really, really clean, nice IoT experience as I'm lighting up everything in my house now. I'm going to do all the trash cans now, the kids hate me, it's going to be amazing. Let me show you what this looks like in Visual Studio. What I did is I use Visual Studio code, in this case, what you can use with your favorite language. Here, I'm in Python. I'm using remote SSH debugging. We're debugging directly to the Pi from my Windows machine. I can run and I can debug my IoT Apps. I can also create WebApps in microservices and deploy those directly to Azure, all from Visual Studio Code. We move to the next slide here. Look at this relationship between communication service, Event Hub and Logic Apps. From the Event Hub, we've got that information that's feeding in. Now I'm looking at the communication server sending that text. Then check this out, this is the new visual designer in Logic Apps V2. It's fantastic. It can kick off any business process. Mine is really simple, but I'm going to expand it to do other things, it's got thousands of connectors. In this case, Event Grid talks Logic Apps, and then we make that call over to ACS, the Azure communication services. I had a ton of fun building this, it was basically a fun weekend. I hope that you can do cool things like this too. Now I just showed you how easy and fun IoT can be even for folks like us at home. But it plays a much bigger and much more critical role in the larger society today, from small to enterprise scale businesses. In order to dive in, let's phone a friend who is an expert on IoT, maybe she'll give me some tips on how to maybe make my trash can IoT project better. We'll call Tara. Hey, did you see my cool home IoT project?  Yeah. Hi Scott, it was cute.  I called you for a compliment, I did some cool stuff in my house.  Wait, I promise, I'm not throwing a shade. But think about this, how would that scale? What if you had millions of trash cans, what were you going to do? Do it one by one? That's not quite a real world solution. You know what? I got one for you. I had a great example. RXR Realty, it's in New York. They did a building management system, that's real. You want to see it?  It's all talk, I want to see a demo.  But we can't really go to New York, but let's go to New York.  I like that idea. Hey, I recognize this. This is 75 Rockefeller Plaza.  Yes, it is.  Is this RXR property?  RXR is actually one of New York's largest property owners. They have 25 million square feet, that's what a big M. That includes some of the most iconic addresses, obviously this one too. You know what? I've just thought about it. When they were doing all of the building and lighting up their properties with tech, guess what hit? You got it, the pandemic. Then that could have been a bad thing, but then it was an opportunity to make their building smarter, safer, and healthier.  But now buildings already have security cameras and sensors and stuff, where does Azure and IoT fit into that existing hardware?  Well, for me, anything that has electricity is IoT device but of course, every device is not connected. In those instances, you got to get a gateway. Buildings have cameras, motion detectors, all that, but once I can get them connected to the Cloud, we can make your building smarter and we can take advantage of these great Azure Cloud services, like of course IoT, but App Service, Stack Edge functions, spatial analysis, Static Web Apps, even.  I dig it. Hey, we're in the lobby.  Do you check out those cool thermal cameras?. They can measure body temperature, Scott. Let's see if you're actually good to go.  Man it's not hot, never hot. I'm cleared.  That's cool. You know what? We should probably keep the proper distance apart too.  The cameras are analyzing for social distancing.  But think about it, then we can detect whatever we want. Azure enables these cameras to detect in real time incoming and outgoing traffic, as well as detecting people who are violating social distance guidelines. Of course, it's all using pre-trained computer vision models. I just thought about something, you know the glue that makes these connected devices able to do that real-time processing of these really complex AI detection models, it's provided by spatial analysis, and that is running on Azure Stack Edge.  I know about Azure Stack Edge. You mean one like this?  That's a Teams background, come on.  No, it's real. I figured if I needed to trash analysis.  Do we really have everything?  No, this is like a legit device here. I tried to get Raspberry Pi and all the other devices and they told me I needed the Stack Edge.  But you know what? That device is super cool. It has a built-in Intel Arria 10 FPGA. With that power, you can build, train, retain ML models super fast and locally. That means you process the data without even the latency of going to the Cloud.  This is the Azure Stack GPU model that was G-A'd here at Ignite. That is like a piece of Azure in my house. I guess, you know it's unique because it's not just a Cloud managed edge compute, but you don't just buy it with a big pile of money, you order it and you pay for it with a monthly Azure service.  You know what else is cool about it? Azure Stack Edge acts as a Cloud storage gateway and enables data transfer to Azure while retaining local access to the files. Scott, you're going to love this part. You use the Cloud to push containerized applications to Azure Stack Edge at all of your locations.  That's cool. RXR is able to push all these complex AI models to their existing equipment using the Azure Stack Edge device, and then that little slice of Azure will light up all their existing devices?  You're spot on. Remember, the spatial analysis services I mentioned, that's powering these AI models. It's a new preview service, it has pre-trained AI models for things like social distancing and occupancy. Of course, you can have custom AI spatial models.  Well, hang on, there's a lot of cameras in here, like what about privacy?  RXR worked with our office who were responsible with AI to make sure all the data is used ethically. Data is only collected about the building characteristics, not the people.  I see. So it's not about counting 72 people and their faces and stuff, it's just logging the fact that the building is 20 percent full?  That's right. All the data is anonymized and the local data is purged after it's analyzed. Wait a minute though. Wait. You got to show off your cool Stack Edge. Let me show you the regatta devices I had that power this solution. Let me show you. This is the Regatta IoT Edge Gateway. See it? Cool, right? This device, well, it's not that big, but it's a lot of power in here. It has an NXP ARM A7, half a gig of RAM, eight gigs of storage, not to mention, it supports all the communication protocols. Bluetooth 5, Zigbee, Wi-Fi, Ethernet, and it's running on Bluetooth Core, very cool. Wait, here's something else that's cool. Look at this.  I see. That looks like E Ink. Scott and Tara have been cleared. That's a display, that's an IoT device as well.  Yes. The E Ink displays that could be being used for RXR. This is a room occupancy sensor and alert button just in case those rest rooms aren't clean. This is an SS tag, can't walk out anything, and then here's a temperature sensor. See all of these like really light up the solution. Cool, right?  Lots and lots of inputs, thousands of inputs with all kind of different protocols, Zigbee and Bluetooth where it will go through the gateway, the gateway then is the jump into that Azure Stack Edge device and then off into Azure IoT Hub.  Peep this, it does a lot for you. It uses IoT plug and play to get the device capabilities to those sensors you saw, and then it has integration with device provisioning service, that don't do any manual config, and then a gateway handles the sensor and devices to and from the connectivity, the telemetry going and making sure it's has secure integration IT hub.  I think my brain is full. I'm a little overwhelmed now because I just took some tape and put a device on a trash can and now this got big, I'm a little overwhelmed.  Well, wait, I got it. Let me show you the architecture, that'll work. How about now?  I'm still a little overwhelmed. Is this the real enterprise architecture?  Now this is the real deal, this is the real architecture. I mean, you know what? Let me make a Scott version. How about now?  Thank you.  You know what? It's really simple. If I break it down, it's just this. You have all these IoT sensors like the one I showed you, like the thermal sensors in the lobby. That's connected to IoT Hub via that gateway so that we use Stack Edge, and like you said, it's a little slice of Azure from the Cloud, we use that to process the prediction data, it runs all the AI detection models and those are provided by spatial analysis. Then Stack Edge sends that aggregated data apps to the Cloud, we analyzed that, data goes, gets all run together, put together with Stream and Analytics Azure Functions, and then finally, we push that to a SQL database. That powers all of RXRs business applications, like they're building command center, center of it all.  Very cool, I get it now. Thank you for making the Scott version of the architecture diagram.  Anytime.  I'll see you later.  Bye.  Thanks, Tara, that was great. Businesses and organizations of all sizes are adopting solutions to enable remote work and back to work, like the RXR solution, while staying secure and also creating new applications. Microsoft works closely with thousands of organizations around the world to help them use the Microsoft Cloud to address today's challenges.. One of the things that makes the Microsoft Cloud unique is how comprehensive it is. With Azure, we provide a Cloud platform that enables you to develop custom applications and leverage Cloud infrastructure. You can take advantage of our SaaS solutions like Microsoft 365, LinkedIn, Dynamics 365, and the Power Platform, connect your employees, your business processes, to your custom applications. Remember, everyone is welcome. You can build any app that you can imagine on the Microsoft Cloud and use your favorite languages, favorite tools, your favorite apps in the Cloud, or on any device. I hope that this solution helped you a little bit to understand the broad set of options that Azure offers. Thanks friends. See you again next year. [MUSIC] 