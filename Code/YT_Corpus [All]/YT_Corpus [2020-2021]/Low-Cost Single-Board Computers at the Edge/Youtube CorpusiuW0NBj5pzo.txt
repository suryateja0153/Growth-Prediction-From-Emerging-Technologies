 [Music] hey i'm soham from the microsoft edge product development team and i'll be providing a brief overview of how the improvements you're making to edge windows and open source tools enables you to build rich app experiences with progressive web apps or pwas this session will briefly cover why you might be interested in pwas our contributions to bring more capabilities to the web platform how progressive web apps are beginning to feel more native on windows and the exciting new ways in which you can make your pwas reach more users to meet different business needs so as app developers you're very familiar with having to pick between either building web experiences for the browser or native app experiences that need to be tailored for every device and platform you wish to target and in many ways this choice between web and native is also a choice between on the one hand the reach and scale of sites on the world wide web that can be linked and indexed built using web standards and on the other hand the unique capabilities offered by native platforms and targeted distribution mechanisms available through their app stores progressive web apps allow you to have both you can build native-like app experiences by progressively enhancing your website with new web capabilities in a sense the promise of pwas is to combine the best of the web and native you can learn a lot more about pwas and the resources that we'll share at the end of this session but to briefly summarize their value progressive web apps typically provide firstly more engagement than websites by running in an immersive app window that is not a browser tab and providing user experiences that are more apt like such as offline usage push notifications file handling unlimited local storage and so on secondly more reach than native apps since pwas can be discovered on a variety of devices and platforms through browsers via deep linking and indexing in search engine results but also they can be distributed through various native app stores and thirdly lower costs of app development since you don't need to write separate apps for mobile and desktop and web you just write one pwa to target the various spectrum of browsers devices and platforms also as an app developer you get to leverage web developments incredibly efficient inner dev loop which also results in apps that are always up to date and with the new microsoft edge what this technically means is that your pwas now run in a chromium-based host and access native capabilities through web standards only they're available across all versions of windows 10 and even down level to windows 7 and 8. they run cross-platform on android mac os chrome os and linux very soon your customers will be able to discover and install your pwas from the browser but you can also distribute your pwas through app stores including the microsoft store on windows oem pre-installation enterprise deployment and site loading and at microsoft we are partnering closely with developers building a wide variety of pwas ranging from social media and media streaming apps primarily targeted at consumers to productivity centric apps like the office 365 suite aimed at enterprises and institutions and by working together we're getting a better understanding of the gaps that need to be bridged to make pwas as capable as their native counterparts one of our primary ways of bringing native capabilities to progressive web apps is via project fugu a collaboration between the open source web dev community google intel and microsoft to make the web more capable across all devices and platforms some of the capabilities that we've been working on include the ability for your pwas to register as a default handler for specific file types and protocols so when a user opens a certain type of file or initiates a certain action that is associated with your product your app is launched to intercept it you may also register your pwa as a uri handler meaning that when a user navigates to a link within your app scope it opens up in your progressive web app instead of a browser tab native file system access which means that your progressive web apps can request read and write access to a file group of files or directory on the user's device overcoming a limitation that has existed on the web for quite a while the ability to auto launch your progressive web app on device startup which has until now only been available to native apps this means that pwas that need to be always available say for example an email or messaging client can now request this permission from users at the time of installation and for a certain subset of pwas on desktop the default title bar takes up too much valuable space in the presence of complex ui such as ribbons tabs search boxes and so on so we're also working on a proposal that would allow web apps to customize their window title bar region this will allow productivity centric information dense desktop pwas to override the default title bar with custom ui allowing you to build richer interfaces and express your app's visual brand pwas can now also participate in the operating system share contract just like a native app which allows users to share information from your pwa to other apps and from other apps to your pwa we've also added support for app shortcuts or jump lists in pwas these allow users a quick and easy way to access frequently visited pages or perform certain key actions within your app and these are just some of the many new capabilities being added via project fugu if you're curious to learn more about any of these features including in product demos i'd encourage you to check out the related resources at aka.ms pwa ignite 2020 in addition to bridging the gap between progressive web apps and their native application counterparts we also want to make sure that the user experience for pwas feels truly at home on windows so we made numerous refinements throughout the windows experience to make progressive web apps feel just like other windows apps for instance pwas will not show up in os app listings with their own app identity which means that they are integrated as you'd expect in places like settings and start menu task manager and so on users can manage individual pwa permissions from the operating systems privacy settings page uh pwas are listed in the start menu with one-click actions for app shortcuts and options to pin uninstall etc pwas are also listed in the open file with prompt if they're registered as file handlers your progressive web apps will also be listed as share targets and be able to invoke the windows share ui pwas can integrate with windows push notifications in the action center and are also able to bash notifications in the apps icon on the taskbar and finally pwas fit in much better with the ambiance of windows by having their app resources such as icons respond to light and dark modes and accessibility settings like high contrast and alongside these improvements to the web platform and windows we're also working on new ways to make it easier for your users to discover pwas and for app developers to distribute their pwas through a variety of mechanisms to suit different business needs firstly all pwas are installable from microsoft edge when a user visits a pwa enabled website in edge the browser's omnibox presents them with an informative trustworthy ui to initiate the app install this installation process only takes a couple of seconds and is a great way to upsell a focused immersive app experience to users who may have navigated to your website from a search engine or via deep linking and secondly as an app developer you can also reach different audiences and demographics by leveraging app distribution mechanisms besides the web browser we've built a great set of open source tools available at pwabuilder.com that help you get started with building and packaging your pwa just for these purposes so if you're trying to distribute your web app through native app stores on mobile and desktop to grow your user base pwa builder allows you to generate app packages for submissions to the microsoft store on windows and the google play store and samsung galaxy store on android oems can also generate app packages for the purposes of pre-installing pwas on a windows image using similar mechanisms if you are building line of business applications for your enterprise that needs to be distributed by it admins pwa builder will allow you to generate an msix package for deployment via microsoft endpoint manager that is microsoft in tune or system center configuration manager you can also site load pwas just as you would any other msix package on windows so let's take a quick look at the simplified workflow that pwa builder enables so pw builder can help you get started from scratch but in the interest of time i've gone ahead and i already have a pwa called web board as you can see this is a pw that enables inking and uh it is a valid pwa which is to say it is served over https has a valid manifest and service worker now instead of installing it from the browser i'm actually going to go over to pwa builder and try to generate app packages for store distribution so all i really need is the url and pwa builder does an analysis and then lets me know that i'm ready to generate my app packages as you can see i can target various platforms but i'm going to focus on the microsoft store on windows for now now what i'm about to show is an early preview of packet generation of chromium based pwas for the microsoft store this is intended to replace the legacy edge html based solution that we have in place today these preview capabilities are expected to be publicly available in the coming weeks so i go ahead and download my app package for distribution on windows i've already gone and done this and you can see that what i have here is a very standard msix package now let me just prove this by sideloading my web board pwa it downloaded here as an msix package and it installs and runs perfectly now if i were submitting this app to the store pwa builder could also help me with uh signing the app appropriately given my partner center credentials now let's switch gears and assume that i developed this app not to distribute to consumers through the microsoft store but as a line of business application for users within my organization as the app publisher i can deploy this app just as i would any other windows app using microsoft endpoint manager here's a quick proof of concept on a demo tenant showing that pwas may also be used for your organization's internal app development needs you can see in this admin center view of microsoft intune that i've flighted my pwa to a test device and it was successfully installed as mentioned earlier this is a preview of new capabilities that we're bringing to pwa builder and microsoft edge and we're looking forward to your feedback on how to evolve these workflows to best meet your app distribution needs so i hope that more than anything i have demonstrated that our goal at microsoft is to evolve the progressive web app platform to meet your app development needs whether it be by making the web more capable or by allowing your apps to reach your customers wherever they be across different devices platforms and endpoints i encourage you to work with us going forward all of our documentation is available at aka.ms.pwa docs you can sign up for microsoft edge origin trials to experiment with new pwa capabilities and features you can also make feature requests through user voice and submit feedback from within the edge browser or any edge-based pwa finally feel free to reach out to us via twitter at mshdev thanks a lot you 