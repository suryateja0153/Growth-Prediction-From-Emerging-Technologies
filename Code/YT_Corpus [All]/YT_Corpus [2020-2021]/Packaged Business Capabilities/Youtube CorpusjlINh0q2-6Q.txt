 welcome to uh the future of linux panel  here at cubecon um my name is vincent batts   i'm cto at ken folk and have been in the container  space for a long time so lots of familiar faces   and i will we'll kick off the introductions with  our panelists today with a brief question to get   the conversation started um so mul on it  if you will does it still make sense to   run a general purpose operating system linux  operating system in this cloud native world   um let's kick off our round of introductions  christian why don't you go first sure   um so i'm in the middle of a transition i  was economical for 15 years and i've about   to to join a new company in brazil that's through  an acquisition of a side business that i have   this company is a big retailer called magazine  luiza or magalu so so so being at canonical for   15 years uh you probably have some opinions on  general purpose linux yes i think so yes i i   had opinions before that already but i think  my time canonical cemented that as well um   is the os relevant i think this  next big technology transition   and those are always interesting and produce  kind of kind of unexpected results the   the big questions i think are going to be what  how will the distro vendors react to the change   that cloud native brings if platforms  and distros basically have built this   value of being a bridge between upstreams that  release at their own cadence that develop on their   own um timelines and priorities to what users  expect in terms of maintainability of long-term   long-term support or predictability of release  like how does that value translate into a world   where developers are picking all the components  that go into the into the container itself what's   what about the interface between kernel and the  user space since um you don't have a kernel inside   the container you have to use the host container  so those are the interesting questions a little   bit that are there i will and i won't spoil  for the rest of the panel i have some of these   experiences i think those are the big existential  questions for people that are building general   purpose linux in general nice nice nice all right  um next up dusty why don't you introduce yourself   and give us a little opinion hey everybody uh  my name is dusty mabe i'm an engineer at red hat   as far as you know a general purpose os in a  cloud native world um obviously we're getting   more to the point where uh you know special  purpose os's or container-focused os's seem to   uh you know solve some needs that platforms  have on top but at the same time i don't think   necessarily general purpose os's are going  anywhere soon i mean uh we really leverage in   this special container os's uh we we leverage the  ecosystem that the general purpose os is provide   in our case we have fedora we have rel but there's  rarely a new container os that you see that starts   completely from scratch so there's  always a role to be played there   yeah that's fair all right thank you and tasha  how do you go next hey i'm tasha drew i'm director   product incubation at vmware in the office of the  cto i was responsible for launching the uh vmware   tons of kubernetes grid service for vsphere and i  was part of the team that launched project pacific   or vsphere with hansu um i'm also co-chair of  the multi-tenancy working group for kubernetes   and co-chair of sig usability um and yeah as  far as the question about operating systems   i think that there's sort of like an interesting  historical separation of um operations teams and   application development teams that resulted  in this drive towards having like this   golden image that may not have anything to  do with the applications being deployed on it   so a lot of things have gotten baked into the  operating system layer that the applications   deployed on it don't actually need and being able  to have more um purpose-built operating systems   that serve the needs of the applications running  on it makes a lot of sense in terms of just   minimizing your footprints having fewer attack  vectors and not shipping a lot of stuff in that   lower level that you don't actually need um and  so i think a lot of it kind of comes down to   the build the build tool systems that we have i  still think there's a ton of value in the people   who are doing all of the back breaking work  of maintaining uh the base operating system   components that everybody leverages and the  community that works on maintaining those as well   and proliferating them so uh yeah i kind of have a  a little bit of a mixed bag opinion yeah that's a   split view on but it is interesting that um that  even you know saying ops versus ops versus apps   teams does kind of give two completely different  like focal points of the same set of software   darin um that probably leads pretty well into  how you have operation teams versus enabling   apps teams why don't you go next yeah um yeah  i'm darren shepherd uh cto and co-founder at   rancher labs um rancher we do multi-cluster  management kubernetes and we've also done some   container-optimized os's um yeah so that's  my background so uh regarding this question   gonna like i could i could probably like  uh you know monologue for the next half   an hour i'm about to answer this question  don't do it yes so i'm gonna keep it short   but does it make sense uh to run a general purpose  os in the cloud native world i would say no   um but it's actually it's significantly more  nuanced than that because you know it's like   what do you call a general purpose os and and you  know it's like well if i if i'm saying the answer   is no does that mean that the death of ubuntu or  red hat or something no that's not true because   it's really all of the definitions of these  things are changing like the assets that come   from a linux the ecosystem or vendor are all  completely still relevant but they're just   packaged and delivered in a completely different  way because like i don't even really like the term   of container optimized linux because the reality  of when you look at these things is they almost   have nothing to do with containers except for  the fact that they have docker or podman or   kubernetes on it it's like a container optimized  linux is still a general purpose os because it can   run basically in any any uh workload it's just how  the workload is packaged and delivered so i think   there's a huge transition that we're going to see  as we go into the cloud native world of like how   users interact with the linux distribution what  they're expecting from it and i also see a lot   of interesting opportunities for kubernetes and  kubernetes distributions to effectively replace   what is linux distributions today um and uh sorry  that's a little off topic i'll just say something   real short and i'll stop it's just that the the  linux distribution today is really a kernel and   a set of user space right and so they're a bunch  of user space packages that run on the kernel   right so when you look at kubernetes our view  of a kubernetes distribution is very naive right   now i think it's very myopic um it's because we  have kubernetes but then we have a whole host of   applications and software that run on top of it  and like you see that from the cncf landscape you   know this gigantic uh slide of all the scrap good  software sorry not crap um and so you know how   you know there's there's still the fundamental  need that linux distribution is always providing   which is like delivering packages that run on the  kernel now we kind of need the same thing in the   cloud native space so it's like but those those  packages that you know run on top of kubernetes   they still have linux bits inside of them they  still have glibc and they still have you know   uh java runtime and all that you know so this is  just all changing that that's basically mm-hmm no   i do think um lots of lessons learned of software  packaging in general that have been invented and   reinvented in so so many ways and we're just going  to reinvent them again in the container space so   um good good good so then with that i would like  you you you're talking about you know everybody's   kind of mentioned like the way that these things  are changing and even to some extent kind of   implying that obviously there's um enough players  in the scene that are interested in seeing it play   you know play out and i think one of these things  that's interesting is that it's like yeah i don't   think that any of the general purposes are going  os's are going away and i don't think they need to   um but in some ways the pi is just getting bigger  so like what what purpose they did is fine but   the cloud native space is expanding out um and  so with that you've seen you know um different   cloud providers come up with either their own you  know optimized os uh linux os and then you know   all of them are trying to compete for different  kinds of managed kubernetes offerings um do you   think that that's going to have an impact on the  the kind of broader market so like if we say okay   there's general purposes and then there's  all these derivatives but now there's like   a competition for optimized derivatives and people  won't have maybe what they were familiar with   but it kind of narrows down you know for whatever  particular use case like cloud vendor optimized   what kind of impact do you think that'll have  on the market who wants to go first on that one   let me let me take a bridge from what darren said  i think darren's points the main points is that   while the the companies themselves and like  the core assets that they have may not change   like what what gets delivered to end customers i  think has to change like there's no question and   the thing is that the the piece of the operating  system that runs underneath the container in   kubernetes that is gonna that is although  the kernel is rarely relevant it's so small   like the number of components there is so  little that there is like actual value in   the cloud provider or whoever's preparing the  whole stack giving optimizing that entire layer   so i think that's something which is absolutely  a a likely trend to come that's they'll optimize   this deliverable which is they're saying like how  much is that actually linux you know okay it's   linux from the kernel perspective what else is  there like there's not a lot there you know that   that just serves um enough scaffolding for you  to boot the the the containers off there's one   um wild card on that though which is that as you  move into enterprise everyone says oh hold on but   i need to run my asset tracking or i need to run  my my ids pieces on this layer as well so i think   that's the only piece where i'm not sure what  the future actually will look for that but that   something specific to be delivered for that that's  small atomically updatable safe to basically   roll back and forward i think that's definitely  coming the question is this thing like what do   you do like when somebody says oh i need to put  put the bmc agent on this and people are like well   you can't install any software on this layer like  yeah yeah put any what do i do or probably even   more scary than that you know like somebody's  looking at a checklist and they say well it says   here i have to deploy to x is this x you say yeah  well no it's it's a better derivative you know   yes i don't even know what like like it's  that that question doesn't compute in the   context of where it's landing yeah like isis isv  certification is a big deal too you know it's like   a lot of people are like i'd have to run this  os because that's what you know this vendor has   certified on um which completely changes when you  know as vendors are starting to package you know   their third-party software on top of kubernetes  what does it now mean to certify you know um   and that's kind of interesting space i mean all  right question a question for you then on that   like can you run a workload which is certified  for souza on a non-souza kernel underneath the   container yeah and even even even dusty could wade  into that one a little bit yeah and well and what   does it mean you know is there even honestly  is there even such thing as can i certify for   kubernetes in general you know or am i actually  certifying for eks or or you know um like vmware   suite or or whatever openshift um you know those  are interesting questions so but going back to   because i already forgot vince like vince  what was this what was the original question   no this is good uh it was it was more like is  it a useful trend that we see these kind of   optimized derivatives because there's  a few you know players in the scene   and you know like you've even had  experience with having kind of an   optimized yeah that's right um focus but is it a  useful useful trend or is it well i mean have a well i mean it's disruptive for sure like  so there's there's like the bottle rocket   and like google's container optimized um you know  microsoft i they haven't announced i don't think   a linux a you know container distro or whatever  but i imagine one would come at some point um   honestly i think it makes total sense for these  uh um cloud providers because it's like what's the   touch point of the customer it's like the customer  or the end user uh they really want kubernetes so   why do they need to care about the nodes and  what's running on the notes the interface is   kubernetes and this is why like it's it's tricky  especially if you're a linux vendor of like well   what does this mean now because effectively that  linux layer is the kernel itself or the container   linux whatever is it's fairly commoditized  from us you know it's like people don't   really want to pay for it that much um and and  they since they don't interact directly with it   it's very hard to differentiate because you know  it's like ubuntu for example like they're you know   rise to fame or whatever it's all about kind of  users interacting with it and enjoying it right   and if i'm not touching the node os anymore like  so it's like the only way to differentiate even if   there's i don't i would say maybe there's not  even a need to differentiate anymore because   if you just say it's commodity but the only way  to uh differentiate is through uh capabilities   and that's where i still see os's uh being  somewhat important right now is uh especially   let's say like in the edge space where i've  been working a lot recently where it's like   gpus and devices and and all these things still  matter because they very much touch the os um   so it's like well your os is not capable you know  because it doesn't have these whatever proprietary   drivers and that kind of leads towards like you  know if you need uh bmc you're you know it's like   it's the capabilities not so much the the the uh  actually interacting and using it i guess yeah   tasha tasha do you or dusty you want to light  into that one yeah i mean i as far as you know   different cloud providers coming up with their  own distros is it a useful trend i i think   you could go both ways right um it's useful  because anytime you bring new ideas to the   market um there's things that can be learned but  at the same time it also increases fragmentation   a little bit like there's now more options and  if you happen to be rolling you know trying to   set up kubernetes yourself um you know here's a  new option to consider which is options are good   but they also might confuse people or lead them  down the wrong path at some point i'm not sure   but i think darren had a good point which is  it depends on who you are right are you just   clicking a button and having the entire cluster  set up for you and it's completely managed   not you know you're not managing the cluster  if that's the case um then uh you know the role   of the distro does have a lot less of a role  at least i that you're concerned with right   the the os is still very important we see that  every time there's a new security issue that comes   out right um but who cares who's responsible for  it right uh is is the big part and we've seen the   um the the lines move more and more towards you  know more is being taken care of by something that   you outsource you pay for it it's a cloud platform  and you care just about your app right and that   service that you're providing to your customers or  to your users that is giving them value and so you   know darren is right if you are a cloud platform  and you're offering that abstraction to your users   and your users don't care then it's probably a  useful trend for them but if you happen to be   somebody a big company or whatnot who where you  are responsible for that platform maybe your   you're outsourcing the infrastructure level stuff  but not the platform as a service the kubernetes   level stuff and you also want to be able to take  that to other cloud platforms and not be locked   into one necessarily um then you do care about the  os still right you're still making that choice and   you want to choose your platform based on that  so it depends yeah wonderful because the you uh   it's like it's kind of like as we move into this  cloud native world it's all kind of reducing the   burden on the um the operator or whatever even  if you're running yourself you know data center   or whatever you know it's you know i think um  you know core os uh in the early days and now   fedora coreos really kind of pioneered this this  kind of uh what is it a self-driving car kind of   uh mentality of of you know it just you  treat it more like a phone or whatever it   just updates and you know reboots or whatever it  so it's all about reducing the the maintenance   which um which a lot of that also is about re  reducing the variability in the os um so like   if if you say like the trend is going towards  re reducing the maintenance and the variability   um that also means that like i  think fragmentation doesn't get   as bad you know it's like you know so much it's  like it's the thing is there's a tiny thing that   runs underneath underneath the container the line  of the container is underneath that what is there   yeah and i think one of the interesting things  that's happened is the the lts kernels you know   from upstream has kind of been i think that's been  a big deal that like there's actually lts kernels   upstream so that's allowing more distributions and  and things like that to just say kind of piggyback   off of that and that kind of keeps the  whole industry in sync which is really quite   nice um because it's you know if you're if  you're driving you know debian is coming up   off of that or whatever they're trying everyone's  trying to kind of align to those lts schedules   then it also reduces kind of the fragmentation  because that's a good point at the end of the   day that the the biggest thing you care about  from the linux you know from the container   side is effectively the you know the linux api  and avi you know as long as that uh yeah the   the i do want tasha you were starting to jump in  you industry had kind of a race condition there um   did you see it as a useful trend or i mean like it  is we've almost touched on another thing of like   dude decatur kubernetes users even care what's  running underneath um i mean yeah in an ideal   world they wouldn't have to but like as we  were saying earlier when you start getting into   what software what your software is certified to  run on from a container and host perspective like   you uh from an isv perspective you really need to  like minimize the possible number of combinatorial   you know combat like the matrix like like let's  make this achievable like to actually say we   support our software um so yeah i would say that  uh it becomes just a supportability problem for   the isvs versus as an application developer  do i wanna care i really don't right like i   kind of just wanna care about the exact changes  i'm making my to my application and have it be   as atomic as possible but then i always end up  relying on something that's at a lower level that   ends up making things complicated from the cloud  vendors perspectives i think releasing their own   linux distributions makes a lot of sense just from  cost reduction and optimizing for their exact use   case they have a more limited number of hardware  that they need to support so they don't need   like something they can really run on the huge  swath of things you find in on-prem data centers   they don't want to necessarily pay a  vendor every time they spin up linux   you know they want to keep all of the money from  the customer instead of just a smaller amount so   yeah i get it i don't know that it really  translates to on-prem use cases where   people are really consolidating their entire  security posture around a limited number of   linux um and windows operating systems  they need to you know whether we agree   with it or not they want to run their virus  scanner against every single node you know so   you you just start running into like the exact uh  use cases and like that security checklist so yeah   yeah gosh that security checklist so that's  that's probably pretty perfect segway um are there   different kinds of security considerations that  you'd have like for linux in general when you're   specifically running kubernetes so like in this  like we you know we said cloud native lion large   that's meaning like schedulable workloads that can  be put on a cluster somewhere like kubernetes um   so what kind of you know what kind of security  or different security considerations are there   for linux when scheduling it on a kubernetes mode  kubernetes node supposed to jump into that one   i wanted to just highlight something that's  is important to note as well like from an   os vendor perspective like there are two like  there's the operating system beneath the line   that runs underneath the containers but then like  the containers are not built out of thin air like   there are pieces in those containers that come  from the like usually that a large part of that   container will come from the operating system  like and and i think that's something which um   from a security perspective is the very  complicated unresolved problem in the transition   to kubernetes because yeah even if you statically  link you still had to have a build route somewhere   well the thing is that statically linking already  like makes everybody else look at you and saying   okay uh statically link like we stopped doing that  in the 90s yeah what happened to the components   that went into that statically linked thing like  like okay like where do they come from and so now   you've got this huge um providence and it's a  station problem that the distribution is very   neatly solved for you because we gpg signed every  single binary that comes out there and so you know   this binary was built by a robot inside a system  that in fact i i was part of building a canonical   you know that robot built that binary um you can  go to canonical and say that binary there has it   was compromised and so you have that perfect chain  inside a single distributor no now throw that away   and just now you're saying guys do whatever you  want you know go to github find this thing like   get globe get clone away or even worse like npm  install your way into this mess and now like   like that is the actual security problem  that distributions ironically are very well   i'm set up to solve because again the dna of this  redistribution is to serve as a bridge between   the madness which is upstream and the  predictability which end users expect right   and i use npm as the example because it's like  the the lxd uh edition of that madness right so   there's there was a great tweet here recently of  like you know this that way air it's okay ignore   it and wait you know introduce this many new  packages this many vulnerabilities please donate   to the you know beers like the first 10 minutes  of anybody's npm is like if you're like for like   an old school person like what the hell did i  just do you know like this thing imported this   dependency which is like 10 lines what the hell is  that so anyway but the point is that that madness   has to be resolved some way right they're  gonna like somebody is going to have to give   these people that are developing on the side  a set of components that they can use safely   you're saying statically linking that's cool but  somebody has to be able to press the button and   see icd and say hey bring in the new versions of  these things oh but they can't be api breaking   otherwise the app breaks you know like this this  sort of things which distributions are very known   for like we don't break the applications  if i break your app i apologize file a bug   i'll revert back that that breaking change in the  api because i keep stability for however long i   promise to maintain distribution like that has to  be yeah there's kind of an academic channel like dystopia right otherwise it's like you can't  use anything i can't use my phone i can't use   the computer because everything is hacked across  the stack so so to continue to deal with because i   want to bring up a couple points you you touch and  we only have like five minutes so get it oh shoot   well no but i think this is really really uh  well whatever it's interesting because i'm   saying it but um yeah you're biased i see yes  see the um but no if you look because you know   before i was saying this like i think the role  of the linux distribution is completely changing   because all of those assets like let's say  like your rpms your debian packages or whatever   like those are all valuable and they're well  curated that's an extremely difficult thing   but what's different what's happening now is like  the kind of traditional the way that things were   before is you would install this generic thing and  then you would kind of mutate it there into what   it was going to be um you know that's the way  puppet chef configuration management salt all   those things work you know ansible is it's kind  of you form it you know it's like this clay that   you form into what it's supposed to be once it  gets there and we're shifting all of that earlier   into the pipeline and so it's now basically i  want to take all of those assets those rpms or   debian packages and i want to do one of two things  i want to build an os image which then turns into   an immutable container optimized linux or i want  to build a docker package a docket docker image   um which then becomes your container runtime so  it's like we're moving this kind of mutability   and assembling of all this stuff earlier in the  stage to produce these like reusable assets that   we can more easily track and you look at the big  advantages of containers in general a lot of it   has to do with distribution management pipeline  that's where you get a lot of the value out of   them and so it's like by shifting everything  kind of earlier and more predictable um you   know it completely changes it changes the game  so it's like those assets are still useful and i   don't think they're going to go anywhere but it's  just presented all differently but people have to that sounds like the benefit of when people would  would uh solve things at compile time versus run   time like yeah yeah exactly waiting for it to  some python or ruby library to explode on the edge   and the lead into security is that like i don't  think necessarily the security requirements of   containers change but security and the models  that we have are changing such that we can make   it more secure because you know we're building  like we're creating immutable assets that we're   deploying so we can cryptographically ensure  that the right thing is is put there so it's   like what i'm seeing with containers and  stuff and all this kind of immutability   is that we can greatly increase the level of  security because we can you know like secure   boot fully verify things dm verity verify the os  if it's mutable the whole stack we can basically   can verify everything that's going on  because you know we're changing the way   that we're packaging and delivering linux as  an os and the software that's running on it   i like that a lot tasha dusty tasha what  do you have anything i'll say on that   um you know it just kind of occurs to me that  like the one thing we're really not talking about   is uh how some of these uh cloud-focused uh forays  into linux really are under investing in the   wide community of people who spend a lot of  time maintaining all of the various packages   and capabilities that they're all leveraging um  and you know i just start thinking about like is   amazon donating to like open ssl right like i mean  it just kind of feels like there is like a certain   um lack of understanding of how many hard-working  people there are like throughout the world who are   constantly updating linux and like keeping really  important packages up to date that we then all   consume and leverage um and actually like kind of  one of my pitches sometimes is like when people   are worried about security and enterprises i'm  like you should understand every package you're   deploying and make sure that you're not relying  on something that has one guy in berkeley like   desperately trying to keep up to date like on his  free time or even unfortunately five years ago   which is what typically happens actually  yeah yeah not only that the recent xkcd about   you know one one person out in nebraska  that broke the internet or whatever but   no and and and it is crazy because often when  people hear that of like oh you should you   should actually be familiar with the lines of code  that you're importing whether it's going or npm   like and it's usually it's like the gut reaction  is that it's that's such an overwhelming reaction   or you know ask that people just laugh it off  as a joke and it's like that is the joke like   you didn't own it therefore good luck have fun  dusty do you have any comments on that one uh   uh not not specifically to what tasha  just mentioned i mean obviously yeah   i mean there are so many we worked in  the fedora community as well so that's   not a small community either no not not at all and  there's so many people that need many more things   uh for every everything they do every day  uh in the fedora community in the debian   community and the ubuntu community and the gen  2 community everybody it really is you know   many different people all over the world many  different companies all over the world coming   together and you know i think i think some of the  cloud providers are getting to a point where they   they realize that if they they can't just  survive forever without um heavily investing   in this part that they they started to build  up so yeah i think it it's starting to get a   little better but i'm just one person in the  in the cloud providers um you know kind of   you know it's like open source kind of started  with this ideal you know it's kind of like   the random person contributing and in their free  time doing things and there's still a lot of that   of course but it's been tricky over the years  has as open sources also become the business   model of so many companies is is people they're  paying people to work on open source so now you   have a lot of people who get paid don't work on  open source versus the people who kind of do it   in their free time and so it's very difficult to  balance that because a lot of people are making a   decent living working on open source and there's  some people who are kind of you know um giving up   their time for free and they really you know  kind of really shouldn't or maybe they don't   want to it's and it's difficult but i i think the  cloud vendors have definitely like recognized this   and if you know you look at all all three like  the big three of amazon microsoft and google   i mean all of them over the last couple of years  have had major pushes in the open source space um in a lot of ways yeah yeah so it's like you know  i i i think things are changing uh changing for   the better but there's always there's always  more i mean i see i'm i always i feel so bad   for uh open source maintainers uh burning  out you know you just see it so often yeah   um it is one of those big things that i have to  remind people often of like even if you work for   somebody you know it's still your name on the  line when you put up a pr or lgtm something   yeah don't forget that it's still you as a human  yeah yeah so it's a tricky one i mean i don't have   any answers or anything but yeah it's something  for good mindfulness well in wrapping up i mean   it's it's pretty interesting i think we've covered  how the the operating system whether it's general   purpose or container optimized is still kind of  the glue between different people's expectations   you know kind of working with the upstream  um having their own cadences working with   the different companies involved and then for by  and large you know we're reusing a lot of these uh   the work done and the kind of like infrastructure  and methodology uh whether it is for kind of an   operations or an application person's uh piece  of it where you whether you own the whole stack   yourself or you're wanting to pay somebody for  it and in either one of those cases most people   are wanting to push for something that's more  supportable something that's more predictable   so i think that's probably why anybody could  argue the case for both general purpose or   something container optimized is because they  want it to be supportable for their use case so   um tasha darren christian dusty i  appreciate you all for your time 