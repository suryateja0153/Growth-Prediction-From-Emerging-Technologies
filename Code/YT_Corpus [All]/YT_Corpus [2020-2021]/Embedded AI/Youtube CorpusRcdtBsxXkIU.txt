 [MUSIC PLAYING] Hey. I would like to welcome you to DAT201. My name is Thomas and I'm part of the SAP HANA product management team. And together with my colleague Mathias I would like to give you some insights in embedded location analytics with SAP HANA and the power of geospatial partners. Mathias, would you like to introduce yourself? Sure. Thanks Thomas and welcome everyone. My name is Mathias Kemeter and I'm the engineering manager for SAP HANA Spatial. It will be a pleasure for me to guide you through today's demo and showcase how to import and process spatial data in SAP HANA Cloud, and how to make it accessible to your applications as a standardized web service. Perfect. Thank you, Mathias. Today during our presentation we would first of all like to give you some insights into SAP's offering dedicated to spatial analytics. After that, we also want to have a look at our spatial ecosystem that we've established over the years that make our product offering more holistic for you as a customer. And in the end, as Mathias already mentioned, he will give a great demonstration on how our tools interact and how they can be used within your company for your scenarios to process spatial data. But before I focus on the very first product and maybe at the heart of spatial analytics within our company, let me just quickly summarize a few scenarios that we nowadays see where spatial analytics can be very helpful. Well, maybe most obvious in these days, in these very difficult circumstances that we're currently acting, we see a lot of geospatial applications popping up dedicated for health care and health monitoring, especially when it comes to like analyzing risk or even how diseases spread like COVID-19 these days. But there is many more applications of geospatial data that can be very beneficial for enterprises. So it's not just about health monitoring. Maybe imagine maintenance scenarios. Especially in remote maintenance, it's important to have a reliable data source to make maintenance more efficient and also way less costly. And with geospatial technologies and also the incorporation of remote sensing technologies, we can even come to the point that we achieve preventative maintenance scenarios that are way cheaper than traditional ones. If you think of traffic and traffic situations, integrating spatial technologies and spatial services that give you a live picture of the situation out there can help to make traffic and city management way more smart. And that's a greater application of geospatial technologies. Especially in that area, you really need to have a real time engine that allows you to make processing really fast and nearly real time. But apart from these maybe very traditional use cases of geospatial appliance, there is also areas like farming or geospatial technologies can really boost enterprises. If you think of digital farming technologies, then geospatial processing offers a great opportunity, let's say, really to feed the world and to make processes a lot more efficient. One of our customers summarized it really nicely with a quote that I would also like to mention today. He says, with geospatial technologies they are able to come up with really entirely new breakthrough innovations helping them to boost their business. And that's the reason why we would like to introduce our product offering today to you. And in the heart of our product offering within SAP is SAP HANA and SAP HANA Cloud. With SAP HANA Cloud, we elevated our well-known database solution into the cloud, offering a very scalable cloud service that fits right into these times and basically really satisfies what enterprises demand. Nowadays, they really want to have a scalable solution that is cost efficient. And basically they only want to be charged for what they utilize. And therefore, we decided to offer the beauty of SAP HANA that we already had before and now in the cloud running on SAP cloud platform. Now if we look at especially spatial technologies being incorporated into SAP HANA, one might ask, what's the benefit of having spatial components in SAP HANA? And a good answer to the question is that we have kind of one instance, being able to answer all of the processing challenges and questions that an enterprise might have. And that is being realized by our multi-model data storage and processing engine. With a multimodel engine you can basically store, process, and analyze graph data, spatial data, and documents right next to your business data. Apart from that, with SAP HANA we also deliver a great integration of machine learning services that really help to fuel your machine learning scenarios. In that case, we definitely benefit from the in-memory platform and architecture that SAP HANA is based on. Apart from that, being a service running on cloud platform, SAP HANA Cloud can also be easily extended with other cloud platform services. One great example is SAP HANA Spatial Services that I just mentioned in a second. As mentioned in the beginning, SAP HANA and SAP HANA Cloud is dedicated to be a really scalable multi-purpose data storage dedicated to fit for a lot of scenarios that require very performant analytics with a very, very future-tailored setup. So it's basically everything pay as you go. So you can use it to either extend scenarios that you're already running or come up with new innovations in a very rapid fashion. SAP HANA is also very nicely integrated into geospatial applications, especially into Geographical Information Systems. And that makes it very interesting for traditional geospatial location analytics. And definitely worth to mention, SAP HANA is not just a solution that can serve for geospatial analytics. It also is the powering heart of the geospatial intelligent enterprise basically. So we're also ingesting all that nice technology into our core applications within SAP. But as I already mentioned, we did something very special for spatial within SAP HANA. So we didn't just, let's say, add data types that we do have. We have a native integration of geospatial data types, for instance for 2D, 3D, and 4D vector data. We added even more so we have roughly 100 storage and processing functions within our database that give you the possibility to analyze the data that is residing within SAP HANA. Moreover, we have application services that really can help you to easily build applications on top of SAP HANA and SAP HANA Cloud that give, let's say, the spatial taste to your scenarios. And that help you to leverage the intelligence of geospatial analytics. The geospatial engine of SAP HANA is moreover also integrated into machine learning. A great example for that is the SAP HANA Python API for Machine Learning. Within that API, you can perform different analytics and machine learning scenarios. And spatial plays a really great role within that service. All in all, SAP HANA with a nice integration of the spatial processing engine is definitely also driven by the in-memory architecture and thereby also the spatial analytics becomes real time. And that makes a huge difference when you're doing spatial analytics. Last but not least, we complement the service offering of SAP HANA spatial with additional content and services. And the way we do that is we inject this data basically by another solution called SAP HANA Spatial Services. SAP HANA Spatial Services is an independent product that also runs on SAP Cloud Platform. And given the fact that SAP HANA Cloud and SAP HANA Spatial Services run on the same platform, they can easily integrate into each other. And SAP HANA Spatial Services is the application fueling scenarios as it delivers data and services. The way we deliver services or geospatial services to customers and maybe also to SAP HANA Cloud is via a unified access layer, a unified interface that we've created that basically encapsulates partner services that we leverage. On the next slide, I will also talk about our ecosystem within SAP that is heavily created around partners. And SAP HANA Spatial Services definitely, tremendously benefits from that partner ecosystem. HANA Spatial Services, similar to SAP HANA Cloud, represents a scalable service in the end. So customers only pay based on their consumption. They can use it on a daily scale basically for all the scenarios or just in one point at a time, and are not, like in the past, required to purchase large subscriptions or pay huge fees for perpetual licenses. So it's really lightweight compared to solutions in the past. And apart from being like a driver for geospatial applications that you build on top of SAP HANA Cloud, SAP HANA Spatial Services also nicely integrates into other very traditional SAP applications. A great example for that is, for instance, S/4 Transportation Management. For instance, within the logistical planning of S/4 Transportation Management, you can incorporate geospatial services for routing and geocoding. And customers can decide whether they want to, let's say, integrate these services by themselves while setting up contracts with vendors of location based services. Or they can, for instance, decide for SAP HANA Spatial Services. And SAP HANA Spatial Services only needs to be like configured to work with S/4 Transportation Management, really decreasing the effort on customer side. So that's a great way of how companies can benefit from geospatial services. Now before we jump into the demonstration I would like to give a short glimpse onto our partner ecosystem, giving you some ideas on how we work with partners, how we work with customers, and how we want to provide a holistic solution for you. Also, like helping you to jumpstart into the area of geospatial analytics. And again, in the heart of that story, definitely is SAP HANA and SAP HANA Cloud. It's the motor of all our processing, of all the power and intelligence that we deliver. And it's, as I said, complemented with additional location based services and content being ingested by SAP HANA Spatial Services coming from partners. And I only have a list of a few partners that I would like to mention on that slide. But for instance, we collaborate with Esri, Google, HERE, and TomTom to offer geospatial services wrapped into one product that is coming from our side being SAP HANA Spatial Services. And the great benefit of that is that SAP becomes like a one-stop shop for all your spatial analytics. On the one hand side, we deliver SAP HANA Cloud with a geospatial engine. But on the other hand side, we also deliver services that complement that offering. Apart from that, I already quickly mentioned that SAP HANA nicely integrates into geographical applications, especially into Geographical Information Systems that are traditionally used for geospatial analytics. And I just mentioned two great examples here for GIS solutions. On the one hand side that's Esri, a very well-known vendor in the market. And also QGIS, basically a product coming out of the open source community. Both are very well known for geospatial analytics. And we have a nice integration of SAP HANA Spatial into these two products. I also mentioned GeoServer here on that slide because Mathias is exactly going to show GeoServer right after I finish talking about that slide. So stay tuned for the demo. Last but not least, I would like to mention also consultancies and GIS system integrators that we work with. Two examples or two great examples are definitely con terra and Critigen. These companies do help us a lot. Or do especially also help our customers to incorporate spatial technologies into their scenarios and help to boost their enterprises and processes with the great technology that we deliver. So that was my insights into the spatial ecosystem and our product offering at SAP. And I would like to hand it over to Mathias for the demo showing how location embedded services can look like in real life. Hi, everyone. My name is Mathias Kemeter. And I'm the engineering manager for HANA's geospatial engine. In today's demo, I will show you how to upload georeferenced data to SAP HANA Cloud and how to do some basic spatial operations in-database. For this, we will use a trial instance of SAP HANA Cloud as well as a software called GeoServer. But more about that later. I will also uncover soon why we are looking at the beautiful city of Buenos Aires, I promise. Let's start with this fresh HANA Cloud trial instance that I just created. It comes with 30 gigabytes of memory, two virtual CPUs, and of course with HANA's geospatial engine. We can start using it via SQL by opening the Database Explorer. However before we come to the fun part, we will first need to import some data to play around with. For this demo, we will use a data set with the public Wi-Fi access points of the city of Buenos Aires. You can download the data set as an shapefile, CSV file, or Excel file. In this case, we'll do the download as CSV. This way, we can use the built-in CSV file import in the Database Explorer. Click on 'Import data', 'From my local machine'. I am choosing the CSV file 'sitios-de-wifi' that I just downloaded. I am choosing the target schema and the new table name, 'BSAS_WIFI'.' In the next step, I have to define the data types as well as their length. You can see that I specified longitude and latitude as being double values. ID is an integer whereas the rest of the fields are strings of sufficient length. Additionally, I'm going to specify that ID should be treated as a key column. Going to the next step, we choose to save all successful rows and list the errors if there are any. On the final page, we can review all the parameters before we trigger the actual import to the database. We can now see that the import of 897 records succeeded and we have zero errors. To review the records in the database, we can go into the catalog, choose the tables, and here we can see the Buenos Aires Wi-Fi table that we just inserted. When we right click on it and choose Open data, we can see the actual content of the table. You'll see that longitude and latitude as of the moment are still double values. The next thing we want to do is open an SQL script console to create a column of type ST_Geometry holding an actual geometry object in the database. To enable performant spatial in-database operations, it is recommended to use a planar spatial reference system. In our case, we can use the spatial reference system 22195 defined by the EPSG. This is a planar spatial reference system suitable for Argentina and Buenos Aires in particular. Since this spatial reference system is part of the EPSG standard systems, it is already known to SAP HANA. If we have not used it before, we need to issue one SQL statement to make the spatial reference system usable. We write: 'create predefined spatial reference system identified by 22195'. We execute that statement. We make it usable in HANA. We can check the creation of the spatial reference system by issuing 'select * from ST_Spatial_Reference_Systems'. And we can see here that there is a spatial reference system 22195 created by my current user. As a next step, we will enhance the existing table by a column of type ST_Geometry. So we do 'alter table BSAS_WIFI add ( )'. Let's call the column 'shape' of type ST_Geometry. When we actually define that column, we have to also define the spatial reference system that the column is going to use, which is 22195. We can use it as we just installed it. Execute that statement. And now we can generate the geometries of type 22195 from the existing latitude and longitude information. We update our table and set the field shape to value ST_GeomFromText() And now we need to pass the well-known text representation of the geometry to function ST_GeomFromText, which is a point in this case. First we need the longitude, and space character, the latitude, and the closing bracket. This point is in spatial reference system for 4326, which is WGS84. And we need to transform it using function ST_Transform to spatial reference system 22195, which we use for our column. Let's execute that. Successfully executed. Now just do a 'select top 10 *' from our table. We can see that we still have the longitude and latitude. Additionally, we have the new column called shape where there appears to be a binary value in here. Now let's see how we can make this spatial data accessible to other applications and eventually even visualize it. For this we are going to use an open source middleware called GeoServer. GeoServer connects with its HANA-Plugin to the HANA database and provides the geospatial data as OGC compliant web service. You can download the latest version on the GeoServer homepage. To set up the SAP HANA module with GeoServer, you will need to copy two files-- the HANA Geotools library as well as the HANA JDBC driver to a specified directory. The process is well documented as part of the GeoServer user manual. As you can see, I have done that with my installation already and can now simply start my GeoServer by executing the respective JAVA package. My GeoServer has started and is now available on the local host on port 8080. To log into this fresh instance, I use the standard username and password as per documentation. To establish the connection to SAP HANA, I need to first create a workspace before I can add my HANA instance as a so-called store. The workspace has been created, going back to the main page. And now I am adding my store. As you can see here the list, SAP HANA is already a predefined source for vector data. I'm going to give that data source a name. For me, it's that HANA Cloud trial instance. To obtain the host, I'm going back to my SAP Cloud Platform account, copying the host address here, going back to GeoServer, and paste it here. I just have to take care to remove the port 443 and insert that into the port field. As a user, I'm going to use my DBADMIN user, which you shouldn't do at home because it's not recommended for security reasons. Insert my password. To connect to SAP HANA Cloud, I have to make sure that I'm using SSL. We can see that we immediately received the suggestion to publish our table with the public Wi-Fi access points of Buenos Aires as a layer in GeoServer. Let's do this by confirming the publish button. The name of the layer's already prepopulated. If we scroll through the list, we still need to compute the bounding box of the data that we have. So we can simply compute that from the data as well as the bounding box for latitude and longitude. Click Save to create the layer. The layer has now been populated and can be consumed by applications as a web service in multiple formats. GeoServer also offers a built-in preview of the data, which is what we're going to use for today's demo. So we open the OpenLayers Preview here. And this is the first time we can actually see our data. So we have the different public Wi-Fi access points of the city of Buenos Aires. We can move them around. You can zoom in. And we can even select individual points. And below here, you see a preview of the actual record in the database. If we select records in more crowded areas, we will see that we even can retrieve multiple records from the database, which were close to the position where I clicked the map. This preview already helps a lot for understanding the data. However, it would be nice to also have a base map in the background to be able to visually interpret the result. And this is what we will add next. As a base map, we can use an existing web map tile service like, for example, Esri ArcGIS Online provides. Esri's list of services can be found at services.arcgisonline.com. For today's demo, will use the World Street Map. If we click on that at the top of the page, we have a link to the web map tile service. We can copy that link and paste it in GeoServer. In GeoServer, we have to set up the remote source as another store. So we add a new store. We choose the web map tile service. We give it the name, like for example 'basemap'. And just paste the URL with the WMTS capabilities xml here. And click on Save. We get the recommendation to publish World Street Map as layer, which we will do as before. We can simply keep the predefined values and click on Save. And again, like before, we can go to layer preview, choose the World Street Map and have the OpenLayers preview. In that case, we simply see the base map without our points on it. Next thing that we need to do to actually get the base map and the points together is that we create a layer group on GeoServer. For that, we open Layer Groups, click on Add a New Layer Group, and give it a reasonable name, like for example Wi-Fi with Base Map. We need to choose our workspace and add the layers that we want to add to the layer group. So this is the World Street Map as a base map. And also we want to add our Wi-Fi access points. We have to take care that in the drawing order we first draw the base map and then we draw the points on top of it. Also, we need to generate the bounds for the longitudes and latitudes. Click on Save. Now the layer group is completed. We have it here. We can again go to the layer preview. This time we have the layer group in that preview. If we open that in OpenLayers, we will see that we have the base map. And here you see that at the location of Buenos Aires, we have all points in the map. So we can zoom in here and see the points on an actual street map. Now let's do something slightly more sophisticated and add a layer which shows the Wi-Fi coverage of the city. We're going back to GeoServer, we're opening the layers, click on Add a New Layer. The layer will be based on our HANA Cloud trial instance. However, this time we're not choosing a table. But we're configuring a new SQL view. The view name will be Wi-Fi underscore coverage. And here we can actually set up an SQL statement right in GeoServer which will be pushed down to the database. So we're selecting our shapes from Buenos Aires underscore Wi-Fi. And we want to actually cover the area within a certain range around each access point. We're using function ST_Buffer which takes, in this case, a meter number as argument. Let's just assume we have a range of 100 meter, which I know is very optimistic for Wi-Fi. But still. Instead of getting back the 800 circles in this case, we will use as ST_UnionAggr to aggregate all circles and just get back one geometry showing all the coverage of the city. We refresh the attributes. And we tell GeoServer that this geometry has the spatial reference system 22195. Click on Save. Good. So this is already predefined. Again, we need to compute the bounding boxes. And the rest should be fine. So let's try to save. We're good. Now we have the Wi-Fi coverage. In order to visualize that we will, again, add it to our layer group which is already existing. So I go to layer groups. We go to Wi-Fi with base map, down to the different layers and add our new layer, the Wi-Fi coverage polygon. We draw it right after the base map and draw the points on top of it. And again, we confirm with Save. Good. Let's go back to the preview and see how that changed. We can now maybe move the map a bit, just that it updates. And now we see that we've got the circles for the coverage. You can also see if we zoom to the very city center that there's several areas, actually, in the city where we got a pretty gapless coverage of Wi-Fi. The last question we would like to answer today is how to find the closest Wi-Fi access point for any location in the city. We can use the HANA built-in function for generating Voronoi cells. A Voronoi cell determines the area around a point of interest, which is closer to this point than to any other point in the data set. Like before, we go back to GeoServer and add a new layer which is based on an SQL view. We call the layer closest_WIFI. This time we use the window function for generating Voronoi cells, which is called st_voronoicell. It will be based on column shape and table Buenos Aires Wi-Fi. Again, we need to determine the SRID, which is 22195. Click Save. Now we have created the layer called closest Wi-Fi. And we are again adding it to our already existing layer group for visualization. Good. We adjusted the layer group. Now let's go back to the preview and see how these polygons look like. In addition to the Wi-Fi access points and their range, we now see a layer depicting the area that is closer to this access point than to any other. Remember that GeoServer is a middleware which is not designed to do beautiful visualizations but to provide geospatial data as a standardized web service for consumption by your application. The beauty is that this way you can access geospatial vector data and SAP HANA Cloud as a GeoJSON service or even as web map tile service for map visualizations in your application. This way SAP HANA Cloud acts as your multi-model data management platform that transparently combines your business and GIS data, while at the same time fulfilling the requirements of IT, GIS, and business departments. Thanks Mathias for this great demonstration on how location-based services and SAP applications can basically boost geospatial analytics in companies. And I hope that gives you an idea on how you could integrate these scenarios into, also, your company and into your processes. Finally I would like to, let's say, hint you to another session that we're running via TechEd this year. It's DAT260. It's a hands on workshop that will basically give you the opportunity to work with geospatial technology and also our graph processing engine being part of SAP HANA Cloud. So if you're excited to see more, just join Mathias and his colleague and see more about how geospatial services come to life with our technology. Last but not least, I would to give you some more information about sources where you can gather details. We have some links on the slide that provide more content about the technologies and about the products. And definitely, also, very interesting presentation in the track could be DAT202 about data science within SAP HANA Cloud. Because as I mentioned, we have a rather good integration of our spatial engine into the machine learning technologies of SAP HANA. Finally, don't forget about your opportunity to activate your learning plan. You have free access to the SAP learning hub and you should definitely check out the sources over there because they are a great channel for learning. Finally, I would like to thank you for participating in this session today. Thanks for Mathias for giving that great demonstration. And that's it from my side. [MUSIC PLAYING] 