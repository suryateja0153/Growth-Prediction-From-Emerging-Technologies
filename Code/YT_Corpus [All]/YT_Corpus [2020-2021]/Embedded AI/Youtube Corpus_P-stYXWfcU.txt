 [Music] this lecture we'll talk about the structure of an embedded system the hardware structure specifically look at the different components and a very generic view different types of components and we'll talk about some of them the main component will the microcontroller we'll talk more about in the next lecture so here's my high level generic view of what an embedded system looks like so if you look at an embedded system uh it's got to take data from the outside world and then it's got to output data to the outside world so it has first for the receiving data from the outside world it has a set of sensors so these sensors they receive information from the outside in many different ways because there are lots of different types of sensors uh the most basic type of sensor would be a button push button something like that and that's receiving data that somebody types in you know zero one is binary uh then there's also uh let's see for instance you can receive sound information like the microphone in front of me or actually connected to here and that receives audio information there's also video like the camera in front of me or just a regular light sensor that receives video information there's all kinds of sensors touch screens right you can receive touch information through a touch screen so there's a lot of different sensors that a an embedded system can receive infra input from so that input is going to comes into the set of sensors and it's going to go into the core of the system and in the end once the system has decided you know process that information decided what to do with that information it needs to cause some result some effect to happen in the outside world so that's done through the actuators at the other side the actuators they uh they cause events to happen in the real world so those might be something like like an led a light like there's a light flashing in front of me that led is an as an output actuator and it goes off and on to indicate probably that it's recording okay uh but there are other actuators too like for instance the camera in front of me it's got uh it's got motors inside that control the lenses to control the focus so those motors those are actuators those are outputs of the system so the system will drive those motors and those will be considered actuators and make them pull the lens in and out and things like this so lots of different types of actuators speakers are actuators right they output sound uh lights are actuators they output lights screen is an actuator it also helps with outputs light but in a more uh in a more more interesting i don't know if you call it interesting but a more detailed format a more complex format of light so a screen is an output so there are lots of different actuators so the if you look at the embedded system it's in between there right it receives data from the sensors it does something with the data and then it outputs to the actuators to make something happen in the real world as a result of the data that it received so the interface components of the sensors and the actuators now in the middle of the system the center of the whole thing is that microcontroller in the center now the microcontroller we will talk about the next lecture in more detail and actually a lot of this class the specialization will focus on microcontrollers and how to program them but there are other components that are commonly inside the core of an embedded system as well and you see two of them right there ip and fpga we'll talk about those in a little bit right now so ip since they're intellectual property or ipcor people call them uh an intellectual property corps is basically a a pre-designed component typically a pre-manufactured component so an integrated circuit a chip that performs one function uh when i say one function maybe a set of functions but all related to one particular task okay so it's a chip that is not general purpose programmable it's a core that just performs some small set of functions that are all related so uh these things can be very useful they're cheap and high volume so what that means is high volume means manufacturing volume so if you have some very common task that's performed by a lot of systems like say say you got a cell phone right and then that cell phone let's say it's very common to perform some type of audio filtering task okay so all of our cell phones have to do this audio filtering right let's say so you might make an uh one of these ip cores which performs filtering and then and it would be high volume because there are many millions of of cell phones that are for sale and so you manufacture many of them so there's a lot of work to designing one of them and it costs a lot if you want to just fabricate one but when you're fabricating high volume it's very cheap so these ip cores can be very valuable when you have high volume production so they're useful for common tasks that's the best thing in order to make sure you get high volume you basically want to have um you want to use them for very common tasks tests that happen over and over so you so there's a lot of need so if it's just a one-off is this a design some kind of function that's only done in this one system then you would almost certainly not make an ip core and make a special purpose chip just for that you wouldn't do that but if it's some common task it's done a lot so for instance network controllers right that's in a lot of systems basically every internet of things device has some sort of network controller in it so that type of thing you might implement as an ip core dedicated piece of hardware which just does ip control operations uh audio video codecs right so encoding audio and video and compressing it and decompressing it right these are operations that are performed by lots and lots of iot devices so this type of device this type of a function you might put into an ip core now these ip cores we're not designing them in this class that's outside of the scope of the class but when you're making an iot system you might you definitely might want to buy one of these so you'll look at a library an online library of ipcourse find some vendor texas instruments say they sell a lot of chips to do different things and you find the one that does exactly what you want you say oh i'm doing mpeg encoding let me find the ti m pick and coding chip and you find you'll probably find 50 of them and you pick the one that you want and that's the chord that you use so um so that's how we use these things we're buying them off the shelf we're not actually going to be designing ip cores because that's too complex and they have to interact with the microcontroller so remember that the microcontroller is the center of all the action right so it's connected to the ip cores and it tells them when to do what they need to do right so if i ipcor is for encoding video the i the microcontroller will say encode now right encode this data now and when i say it will say that it means i mean through the signals to the wires it will send the appropriate sequence of input signals to trigger it to record right and then the the results maybe uh maybe the the core sets the signal high when it's completed and that goes back to the microcontroller microcontroller knows okay encoding is done let me move on right so there's this conversation between the microcontroller and the ip cores that goes on and so you have to wire it appropriately and we'll we'll only touch on that now another component that you find often find in iot devices embedded devices in general are field programmable gate arrays now we will not be using field programmable gateways in this class because they're uh the complexity is basically outside of the scope of the class but what they are they're an interesting thing you should know what they are they're they're hardware they're integrated circuits they're chips uh not programmable chips uh they're regular chips they're programmable in the conventional sense okay these things can be reconfigured essentially rewired to perform different tasks so let's say you need something to do audio filtering so you might configure the fpga to perform filtering so it's a hardware device that will perform filtering because it's been wired to do that but then you can rewire it reconfigure the device to rewire it so that it performs uh you know mpeg encoding instead or something like that so you can rewire this thing reconfigure it so that it can perform different tasks now it's not programmable in the sense of a general purpose processor you don't write code for it and as a result it's actually a lot faster than a general purpose processor right you can get that same flexibility with a general purpose processor you could run one program or one run another program you could do that with a processor but you would do it with an fpga if possible because it's a lot faster it'll execute a lot faster because the software there's a software conversion step that we won't talk about here that is skipped if you do it directly in hardware using fpga so fpgas have that advantage and no fabrication is needed see when you make an ip core and you fabricate it as a chip you have to fabricate it you have to manufacture chips and that's expensive so it only makes sense in high volume with fpgas you don't have to fabricate you just reconfigure it through programming just connected by usb up to a computer and you can rewire the thing so that's much more convenient and cheaper so if you have a one-off design you would implement it in fpga over over an over some sort of an ip core thank you 