 In this sequence we look at NaaS, Network as a Service. NaaS allows you to create an overlay, full-mesh and layer 2 virtual network. 'Layer 2', as opposed to Cloud networks, which only implements layer 3. This restriction (layer 3 only) forces you to re-design your applications before migrating them. In contrast, NaaS gives you back control of the layer 2. 'Overlay', because NaaS will be instantiated over the real networks you are using. As you can see, our demo is spread across Alibaba, AWS, and On Prem. NaaS will permit to create a single virtual network on top of these three infrastructures. The machines will be able to communicate transparently within a unified network. They will have a virtual network adapter in 172.32.x.x. This adapter will allow them to communicate within the 'My Virtual Cloud' network. Lastly, 'full-mesh' because there is no point of contention for traffic. There is no point of failure either. NaaS uses meeting points (or PoP, for Point of Presence) located On Prem in our case. These PoPs only need to be running when a machine connects to the network. Then they can disappear. The machines will be able to communicate point to point. They will even be able to converge if a direct link disappears. Let's take a quick look at the status of the demonstration. At this stage, the On Prem infrastructures are deployed. The Alibaba and AWS lower layers are deployed. All VMs are deployed on AWS (but not configured). And all these infrastructures are interconnected through IPsec. Let's start by going through the single NaaS configuration file. We start by defining a network name, and ports for underlay communication. Then we have IP address ranges (linked to DHCP). Note: the network statement, the DHCP configuration, etc. are optional. It is possible to use NaaS as a pure layer 2 network and to manage layer 3 yourself. (static or dynamic IP address, routing, firewalling, etc.) NaaS layer 3 capabilities are only there if the user needs them. We then configure two PoPs: master and slave (take note of their IP addresses). Then a DHCP range, followed by the list of clients. This clients list will be used by the PoPs to generate invitations. This replaces the certificate / key exchanges of traditional VPN solutions. NaaS will generate one-time, random URL invitations. Clients will only have to connect. This is the only client-side configuration action of NaaS. We will fast forward, since the generation of invitations can be a bit long. I'll see you in a moment. The generation of the configuration is complete. Now let's connect a machine to the virtual network. To do this, we launch 'naas-enrollment' by providing the invitation URL previously generated. Joining the virtual network will create an additional network interface (naas0). We will complete this check with a ping test. For the rest of the demonstration we will have to enroll all the machines one by one. (this operation is automatable) We will therefore fast forward again. I'll see you in a minute! All machines are now enrolled. Let's proceed to the final tests. Let's start by checking that we still have our (native) underlay network card. Now let's check the overlay naas0 card, addressed in 172.32.x.x. The next test will be to display a graph of the network through an integrated NaaS tool. This graph will show us that the overlay network is indeed full-mesh. Then, we will make the two PoPs unreachable to demonstrate the robustness of NaaS. We ensure beforehand that the network is up and working with a ping. As we can see, there is currently no PNG file in our explorer. Let's run the 'naas-drawing' command to generate a graph of the network. As the graph shows, we are on the desktop and we can communicate with all the hosts. The network is indeed in a full-mesh mode. The two PoPs (master / slave) are shown as dashed lines, given their particular role. Now let's do a full test, making master and slave unreachable. This will demonstrate that, 1: PoPs are not essential to run the system. 2: Even when a host is no longer directly reachable, NaaS knows how to redirect packets. This routing is indirect and is done through other network hosts. Let's start by blocking communications with master and slave at the client station level. Let's restart the firewall. Next, let's clean up the firewall connection states to stop the already established TCP sessions. These states are now cleaned up, now let's ping. You can see a big increase in ping latency: the system is working well! Indeed, desktop &lt; master / slave communications are now rerouted by other machines. Since these machines are on AWS, the latency has increased significantly. While in direct communication, the latency between master and desktop (On Prem) was very low. Let's redisplay the network graph. We can see a change in color of master and slave. We also note the absence of a direct link between desktop and master / slave. There is no longer any direct communication between these hosts. Network as a Service is finished. See you in the next sequence! 