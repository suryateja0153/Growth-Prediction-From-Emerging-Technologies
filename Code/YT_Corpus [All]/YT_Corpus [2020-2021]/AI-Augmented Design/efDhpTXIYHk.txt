   [MUSIC]   [BEN] Welcome to Industrial Design and Prototyping with Bolt. I'm Ben Radcliffe, I'm a Senior Technical Specialist with Unity Technologies. I'm based out of London in the UK. And here's my email address, benra@unity3d.com, and please follow me on Twitter and Instagram, @lightandalchemy. Today we're going to look at Bolt. What is Bolt and how does it work? Bolt is a visual  scripting technology, and instead of writing  traditional C# code, we're going to learn how to create these Nodes, which we call Units, and we'll make connections between these Nodes to create interactive  things to happen. So we can create  interactive experiences and apps. Bolt is a visual  scripting technology. It's great for programmers  and non-programmers alike, whether you're an artist, a designer, or whatnot. You can use Bolt alone or you can also use it with traditional C# scripts. Bolt supports  all the traditional things in C# scriptings, it supports its Struts, it supports all class types, and we also have APIs for advanced tasks, and if you want, you can write your own Nodes. What are some good example use cases for Bolt? Obviously, today  we're going to take a look at some rapid prototyping of interactive systems and some asset implementation. But it's also really great, if you're a non-coder, it's great for learning C#. If you have some C# experience, it's going to make it all the more easier, but Bolt is great for learning things about variables and flow, and just general logic, which you can then apply to C# in your own projects. And it's making scripting and interactivity accessible to, again, artists and designers. Now you're not going to be reliant  upon the coder on your team, you won't have to wait for him to implement your ideas. You're going to be able to prototype them yourself. And again, this will work with C# code as well, so you can work in conjunction and collaboration with your coders. And you can also package these things up. You can be able to save these assets on disk, and you can save them, you can create a library, and you can share them with other users. And there's tons of people sharing things all over the web. Bolt is primarily for a project shipping with Unity 2018 and higher. So you're required to use 2018 and higher. How do you get Bolt? We're going to run through this in a live demo, but you basically download Bolt from the Asset Store. If you want to follow along,  grab that from the Asset Store now, and I'll walk you through it. And then you can import Bolt into a new project.  And then you run through the Bolt Setup Wizard. And then you're ready for visual scripting. We're just going to dive right into a live demo. I'm going to take you through the whole kit and caboodle, show you how to import Bolt, set Bolt up, set up your interface, how to navigate Bolt's UIs. We're going to take a look at flow graphs, we're going to look at state graphs and state machines. We'll also create some variables and we're going to create a project with some basic interactions, and then at the end, I'll follow up with some resources  for you, guys, to dive into. Great, let's just dive right into Unity right now. The first thing is we want  to go to the Asset Store. If you're in 2019, you can access the Asset Store directly in Unity. If you're in 2020 and above, you'll have to go and you'll have to go to the internet and access it from the web page, but the process is the same. So I just already searched for Bolt. And then right below this electric lightning bolt, we're going to have Bolt  right here, the Visual Scripting. I click on this and then it'll bring you to this page. We'll scroll down and hit Import. If you don't see this window, you can always go Window and then you can go Asset Store or hit Control 9. I'll go here and just hit Import, and this will take a few moments. The thing is, we hit Import, and then it goes here. It creates this little tool menu. That's one little extra step. You have to go to Tools Install Bolt, and then I'll decompress that package and we can go here. And we can hit Import, and this will take a few seconds. And we'll import some assets and then it will set up the Bolt. We'll go through the Bolt Window and we'll go through that step by step. Just so you guys know, we'll be  doing a live Q&A at the end. So I'm going to run through  all the stuff right now live. And then I'll be hanging out  in the chat for a while, and I can answer all your questions. So feel free to put questions in now but save them to the end. Here's our Bolt Setup Wizard. You see, "Welcome to Bolt Setup Wizard. We'll help you get started." We'll just go to Next. Here should be the option, the naming scheme. What do you want to be displayed? We have two options here. We have Human Naming and Programmer Naming. We can see Transform: Get Position, while over here is a little bit more like C#, where it's Transform.position (Get). If you're new to coding, I recommend you go to Human Naming, if you're an experienced C# developer, go to Programmer Naming. They both are going to have the same functionality, it's really just  about the interface. And I think over here it's a little bit more explanatory to new people. So instead of things like int or bools you'll see Integer and Boolean. Today I'm going to go on here. Here's all our assembly options. We can go ahead with the defaults. This is for adding additional assemblies. So to give an example, that would be TextMeshPro. But we're going to go with the defaults, and don't worry, if you need to get something later, you can always add something, it's not permanent. I go Next, and here's all our type options. And these are all the types we have available and some examples of that is Object, Boolean, Integer Float, String, Vector 2, Vector 3, all the usual stuff. I'm going to go ahead and say Generate, and this will install Bolt for us. Magic, and then we're good. So we can just go ahead and hit Close, and now we have Bolt. I've gone ahead and I made a little Scene here. I just go run you through what I set up ahead of time, is I've set up this, my colleague Jerome was nice enough to export this brake  CAD assembly out of PiXYZ, so this is some CAD data that he exported for me into Unity. I've put this in here. I have a little animation on here. As you can see, I've made some animation clips. So I put isClosed, isClosing, isOpening. You can see it here,  we'll put some interactivity to create the exploded view of this later. I just want to let you see that I have that. I put this little Chrome_Sphere in here. I'm going to use that as a UI element, and I put this collection of HDRI in here. We're using HDRP in 2019.4. And I might want to put some volumes, and then I assign a visual environment in HDRI Sky and  an Exposure and each one, I have a different HDRI and these are HDRIs from the Unity HDRI Pack, these are also available in the Asset Store. You can go to the Unity Asset Store and just search HDRI and Unity. I have them turned off, and you can see here, we'll go through and this is  what I've set up today, we're going to be able to go through and create an interactive visualization. We're going to be able to spin this around, create some interactivity, so  it'll be an interactive turntable, we'll spin that around and be able  to change the lighting environment and to activate the animation. So we can go from our traditional view to an exploded view, and we'll do that interactively. Cool. I might go ahead and turn that off for now. When you start with Bolt, so we've got our project here, everything's looking good. Let's go here. I'm just going to frame that  so we can rotate around this piece. And one more little thing is, I did put a collider on it, put a box collider on here so we have something to click on. First thing we do with Bolt is Bolt has three windows. You want to go here to Window, you want to grab the Graph, the Graph Inspector, and the Variable Windows, I'm going to create that here, and I'm just going to drag this down here. I'm with a default view, I like this view. I'll grab the Graph Window here. I'll drag it here, and this is where we'll work with all our Units and Nodes. I'll grab the Graph Inspector and drag that guy over here. I want this over by the actual Inspector. Let me drag it at the bottom of the Inspector here. This is where we, it's just like the traditional Inspector, but it's more based  on information on the Nodes. Then I grab the third Window,  the Variables, so it's Graph,  Graph Inspector, Variables. I'll drag that  little guy right here. This is our little working setup, so I'll just go my layout and save and I saved a little layout here. I already have one saved and I'll save now. UniteNow_Bolt, and in all capital letters LIVE, so you know that I'm live and this isn't pre-recorded. Great, so this is what we need to get working, and again, this is where we'll do all our work. This is where we'll create our  variables and what'll give our information on our Nodes. So let's go, the first thing we want to do, let's create a graph. I'm going to click on the object I want to create a graph on, and it's going to be  this brake assembly here. Just like a traditional Unity component, I'm going to click Add Component. And you can see right here we have this little Bolt menu. So we'll click on Bolt and we have a couple of options here. We have Flow Machine, State Machine, and Variables. And we also have Listeners. We'll not go into that today. We'll focus on these. I'm going to start and create  a Flow Machine. Boom. Flow Machine is a component, and you can see, it adds it right here and it also adds this Variables component. Flow Machine is  like the component that reads the graphs that we create, and we have two options. We can create an embedded macro,  where the graph itself lives right on the asset,  and it lives in this component, or we can create a Macro, and we'll switch that. And Macro will actually create an asset on disk that we can save and share. If we want a graph as reusable on multiple objects, we would want to create a Macro. Embed has a few advantages. It allows you to access objects in the Hierarchy directly without creating variables. But we'll show that in the State Machine. From our Flow Machine, we'll create a Flow Machine and a Macro, so I'll create a new graph. I'm going to say New. It's going to open up my Asset Explorer here and I'll create a new folder and I'm just going to call it "BoltMacros." Oh, I got to spell it right, I got chubby fingers. So BoltMacros, I'll click in here and I'll say, "rotateY," and I'll save that Macro here. Just like a normal Unity asset, it'll save here and I just want to say another way you can third mouse button and go create Bolt and create Macros here as well. I tend to create them on the object. Let's go back to our Flow Graph. This is our main working area, and you can see it creates two graphs right off the get-go, a Start Event and an Update Event. Just like in Unity, if you're familiar with scripting, C# scripting and MonoBehaviors, it'll create a Start and an Update. So this is our Flow Graph, and you see, middle mouse button, we can drag it around like most things, middle mouse wheel, we can scroll in and out. We have a little zoom here, which is great. You just select that, if you just click on them and move them around. To deselect, you just click away. I'm going to click on this, and now let's look at our Inspector. You can see the Graph Inspector use information on our Units. You can see this is a Start Unit, and it's called the first time a machine is enabled  before any update method. And the Inspector  will give you information on both the inputs and the outputs. You can see, the output here is just a Flow Trigger. So again, Start. This will be an action that'll happen just once the application starts, in Update you can see,  "Called every frame." Let's do an example of this real quick. Before we get into variables, I'll just create a basic Rotate. We want to use what we call the Fuzzy Finder in Bolt. With third mouse button click I can see, here's how we access all our Units, and they're Nodes, but we call them Units. And so we can go through. We can access through the Hierarchy or we can just search for things. I'm just going to say, "I want to make this thing rotate." I'm going to search for rotate. And then we go rotate on Y. And most of the time, to be honest, what's great about Bolt we're using the Human Naming, so I can just think  about things I want to do, and I usually just search for that and find an equivalent. So we have a Rotate Node. First we want to connect Nodes. This is what's called our little flow output, and we're going to put this  into the flow input. Actually let me third mouse button, and we'll look at this in the Graph Inspector. You see we have our Rotate and we have the Inputs. You can see these little Inputs right here. You can see input for flow, input for target, X angle, Y angle, and Exit flow. I'd like to think about  these little Event Units as green Event Units, like Start, I'd like to think of these like power sources, and this is like the wire  connecting the power. Let's go as an example here and I'll type 45 degrees. When I go into here and hit Play, it'll rotate it 45 degrees. Boom, and you can see it just once, just when it starts. Oh, is that working? Oh, it opened. We need to... we want to basically put some controls behind us. So you can see that on start,  it rotates 45 degrees. The cool thing about Bolt is, you can edit these at runtime. I don't need to stock, redo the graph, and then do it again. I can do all this stuff at runtime, and then it'll save those changes. So instead of start, I can do every frame and actually one thing, to connect these, I didn't disconnect the first one, use third mouse button and it'll delete that connection. And this is another great point, notice how this grays out. We have this gray little Dim thing in our menu, and that'll tell me  like I have a Node but it doesn't really have a purpose. It's not doing anything, so it'll  dim if it's not doing anything. Now let's create a connection here, and we say Updates. Now it's rotating  45 degrees every frame. We don't want to do that. Here's the other thing, we can typewrite in here, while it's live and it's spinning. But this is where variables come in. Every time we want to change  the speed of the spinning, we don't want have to go  into graph and type a variable. So we want to create a variable for this. Here's what we'll do now. We'll go over to our variable. We have Update here, Let's create a variable so we can control the speed of our object. Here's our Variables menu, and we have different tabs here. We have Graph, Object, Scene, App, and Saved. These are basically the scope of the variables. Is this variable accessible just within this graph? Or is this variable attached to this object? Is it accessible through the entire Scene? And is it accessible  through the entire app across multiple Scenes? Then we have this last one, Saved, and that's for persistent data, say, for example, we wanted  to save some data out to disk, and an example in a game would be a high score. Like a traditional thing, I want to access this on the Object. And this is one thing here,  as well when we created this, it created these Variables right here. So we can create a variable  here, on object, or we can create it here. I'm going to create it down here, and I'm just going to type "speed," and this is one thing you want to go hit the plus, and then it'll  give you a little error. So you really want to type,  this is one thing that always gets me and gives you a little red error, you type the name of the variable first. I'm going to call it "speed." And then I'll hit plus. And then you can pick the type. So we have Float, which is a decimal, Integer, which is a whole number, String, which is words, Boolean, which is True and False. And you can create  things like Vector 3, which is three numbers or GameObjects. I'm going to keep it simple, I'm just going to make an Integer. And then I can say, "45 is my initial value." And then to get this in here, you just drag and drop it. So I can just drag it from here, and now here's my variable. And you can see here, it gives me the same thing, it updates together. So now I want to pump the speed into here. Let's click on this and let's click on our Graph Inspector here. You can see Get Variable gets the value of a variable. And it has a couple of inputs, String, the Name, and the GameObject. And since we're working on this here, this is where we're  applying at the self. This is for these objects, so we don't need to apply another Game Object. If I want to apply it, I could create a variable and point it to that. And then the output, so it's the value. This is our flow. This is, again,  like our power source. And this is I'm taking that value and I'm pumping it right in here. Again, we can hit the Play. Anything that happens at runtime in the Graph Inspector is persistent but, for example,  if I slow this down, I'll have to go readjust that just like a regular Unity variable. Now we have this going on variable, and it's going on update. We've seen start, we've seen update and variable. Let's add some consistency to this thing. For those Unity programmers, frankly, it's going up and down. It's 120 frames a second. It's 60 frames a second. We can add some consistency and some smoothness to this. In the traditional Unity, we would add  like a time like deltaTime. Here we have a lot of cool stuff in Bolt, and it's like per second. So I'm going to add a Per Second Node. I could just put this here, and again, while this is live, I'm just going to grab this here. And I'm going to grab that there. You can see now, it's per second, and because it's going per second, it's a little bit more consistent. Let's speed this back up to 45. Great, that's a nice rotation. So I don't want it to update all the time. I want to look at a different event. So let's try a different event. So this is updating every frame, I want it to only rotate when my mouse is over this. So I'll go here to our Fuzzy Finder, I'll go Add Unit and I'll go into Events. I think of it as the power source. We go to Events,  and we'll go on Input, and just like messages in Unity, we have OnMouseDown, OnClick, all that stuff. I'm going to go with OnMouseOver. Then I'll just grab this here and connect it here, and this is one interesting thing. We'll look at this in a bit. You can have multiple events, so I can have it OnSpaceBar, OnMouseOver. So I can have multiple events, but I'm going to delete those here. Now, when I'm in this window, when my mouse hovers over that, it'll rotate, and this is what's great about Bolt. Notice you can see the flow. Again, I think of this as the power source and you can see the flow of everything. Once I put my mouse over, I have to click in the Window, you can see that the power goes on, mouse off, the power stops. Great, so that's a simple flow graph, and let's do one more thing. I'll just go for organization. You can control and drag, and you can create backdrops here. I'll say "Rotate Y." Then you can see here on the Inspector, I can give it a color,  so I'll just give it a green. It's like a green for go. Great, so that's an example, and let's now save it to disk. We have this in our project and in our Bolt Macros, and we could reuse that on multiple objects, and we would have to give each object its own variable. Therefore, we can control the speed for variables differently. We'll come back  to flow graphs in a bit. I want to do another type of graph, and I'll demo that on this. I'll use this Chrome Sphere and  place this on the Chrome Sphere, and I'm basically using the Chrome Sphere as just a UI element. Again, I'll go here and say  Add Component, say Bolt, and I'll add a State Machine. This time I'm going to actually use an Embed State Machine. I'm not going to reuse this, and it's going to live only on this object, and I don't want to create some extra variables, I want to be able to grab some things from here. And you see, right off the bat it creates this here, so we have different things, we have a Flow State, a Super State, Any State, and a Collection. And I'll create these real quick. And what you can see here is Any State. We're going to work today with just a Flow State, and it's basically a flow graph  within a State Machine, so we can create multiple states. A Super State is, it says, "It's a State Machine within a State Machine." It's nested, that's what I was thinking. I was thinking inception,  its like State Machine inception. This State Machine is  from Any States, you can activate things,  so basically you want to create multiple things and put transitions between them. Someone really explained it to me in a really great way. A State Machine is, if you think of like a ceiling fan with like a chain pull and it has three different modes, it has a slow speed,  a medium speed, and a fast speed. And every time you pull that chain, you make a transition. So that's what we'll really do,  we'll create a flow machine inside here, and then we're going to have a little trigger to go to the next flow machine. I'll delete these here, and we'll not  go over these today, we'll stay here. I want to create,  I want to basically activate and deactivate these lighting environments. First I want to give this a better name than Start. I'll call this over here, in the Graph Inspector, I can give it a name  and a description. Let's say "HDRI" here and say, "HDRI Garreoult" is the name of it. "Garreoult," I'm spelling  this wrong, but that's okay. And you can see, it gives a little description here. And one thing about this, you can probably use this as the start state on and off. So let's turn this toggle as off for now, because I'm going to make some duplicates of this, and I don't want them all to be Start States, and I'll show you  what that means in a moment. To go inside, we navigate, we double-click on it. Now we're inside our HDRI, we're inside our start state. And you can see, it creates three Nodes for us right here. It creates the On Enter State, the Update, just like last time, and the On Exit State. I think this is a really  clear example of how to do this. I want only to turn this on and to turn this off. All I want to do  is activate that checkbox, and for those who use Unity, that's just set active and deactive. I'll go to my Fuzzy Finder here, and I'll just search and say, "set active." GameObjects and Active, boom. That's all I want to do. And it gives me everything. I can turn it on, I can turn it off. So I'm going to say, when we enter this state, this is the first pull of that chain or the initial state, we want to turn this on. I'm going to delete this Update, we're not going to use this. And so one thing now is this embedded graph, State Machine, is living on the Sphere. So we want to activate this Garreoult HDRI. And this is where the embedded graph comes in because I can just drag and drop this in here now. So that's super easy, where before, if I was to create, and this is a graph, I would have to go and create a graph macro and I could go here and I could say HDRI_A, and I'd have to create a variable and I would have to say GameObject, and I would have  to drag and drop it here. You can do the same thing, but you just have to go through this extra step. I don't want to do that. I don't want to do the extra step. I'm lazy, so I'll delete that. I can just duplicate this here and copy and paste, and I'll say, when we go in, we turn it on and we exit, we turn it off. I'll duplicate this three more times. I'll do one more thing as well,  just because we're going to get lazy. I'll create a Unit and say, create a GameObject Unit. And you'll see why this will be clever in a moment. When instead of dragging and dropping that here, I'm going to feed this into here. I'm going to feed this into here. And I'll just drag and drop it here. So this is all we're doing, it's super simple, we go in, we check this checkbox, we go out, we uncheck that checkbox. Now we want to navigate back and create another state. We just click on this Chrome Sphere and we just navigate here. So what I'm going to do is, I'm just going to copy and paste this guy twice. So I'll paste it here and call this "HDRI_B," and call this "HDRI_C," and I won't go update the Nodes. Well, maybe I should update the Nodes. I'll do best practices, let's go HDRI, "I kirby Cove," And let's go here and say, "HDRI MuirWood." Let's go here, and we'll go "MuirWood." Great, and now I just need to create some transitions between these. What is that string pull like on the fan? So I third mouse button, let's say, Make Transition. I'll do this clockwise, you can do in any organization but just for simplicity today,  I'll just make another transition here, and then I'll make a third transition, Make Transition. But I did a transition to a transition. We got transition inception. So Make Transition, boom. Now we'll start off, we can start off, we need to pick one as a start. I'll pick B just so it's a little as a start, and you can pick any one, I can say, let's start with A. Well, and I save my graph, so let's go back to our graph live, boom. And let's click on our Chrome Sphere. There we go, happy accidents. And then we'll toggle  this as a start. So now I need a condition inside this transition for this transition to happen. I'm going to double click here. You can see, all we just needed is an event to trigger the transition. Again, we'll go back to our Fuzzy Finder and I'll go to Events. And I'll go Input and I'm just going to say On Mouse Down. Right now I have mouse hover over, will spin and On Mouse Down. We'll activate the transition. And I'm going to copy and paste this, and again, I'll navigate back and just  quickly paste this in here. And I'll connect it, you can see the dimming is on. And now that it has a purpose, it's now on dim, and we'll look in this one, and you can see here. And out here you can see here that  it's got a little different icon. This is a little mouse click-on, so we know it as a function and this is an arrow. It needs something, so we click in here. And I'll just paste that again. Let's go or I'll just create it for the Fuzzy Finder. And again, we'll go Events, and you can just search, sometimes there's a search mouse. Then you can see all the different options here. We say On Mouse Down. And connect that here. Now we have a full State Machine, so let's go ahead and hit Play and see if it works. Cross your fingers, we're live. Alright, so you'll see right off the bat, it enters that first state. So here we go, we're live and we can hover over this, and we rotate. That's the working. Now let's click on this. And you can see, it did that little electric pulse. And we're still on the same thing, oh, happy accident. We didn't change it. I forgot to change it here. So we copied and pasted, but we didn't actually update the internals. You guys get to learn from my mistakes. So we didn't update this GameObject. It was switching but we're still staying on A. So I'm going to drag that here. And then I'll double click on this and drag C here. You can see I have a bunch  of them, so you can make this as complex as you want. I'll hit Save. And let's close this out for a little clarity and open this window, and I'm going to hit Play again. Alright, so we have here, we hover over, Mouse Over, Mouse Connect and I'll click on this, and you can see what we've changed to states. Now we're in HDR_B, we click again, we're in HDR_C. We click again and we go around and around the circle. And we can add as many of these as we like. So I've just added the three for now. Cool, let's do one more thing. So now we've made a State Machine, we've looked at the difference between a Flow Machine, a Flow Graph, a State Machine,  a State Graph, we've looked at embedded macros. Now let's get crazy, let's look at some complex logic. I want to show you, to do one more thing. We want to activate and deactivate this animation. Let's take a look at what I've got set up here, I showed you in the Animator, we've set up four animation cycles and we have a basic animator graph. You can see here, I put this little check box, check is open, so I'm going to uncheck that now. When we load, this will actually just start and it'll start in a closed state. I have four animations. isClosed, and all this is, I keyframed it in its default state. And then I have isOpen, and I put a little Bool here, if you're familiar with animators. You create four different animation cycles, one isOpening, which I showed earlier, one isOpen, one isClosing, and one isClosed. And all I really did is  I just grabbed some of the parts and I keyframed them on Y and I set some of the parts and I keyframed them on Z. But instead of transitions here, if you go, and this is the type of State Machine as well, so if this is True, it allows you to do a transition just like in our State Machine here. As I click Open, it'll go into Open, and when I make that True, it'll be open, and when I unclick it,  it'll be False. We can go around the whole thing and basically we want  to create a graph that basically activates  and deactivates this State Machine here. Let's take a look at what we got. I'll go back to my brake. I could add another, I could keep adding logic in here, but one other thing, you can have as many Flow Machines and Graphs on this as you like, so I'm going to go ahead and add another component. And I'm going to add another Flow Machine, and I'll keep in a macro as well, because maybe I want to reuse it. I'll say New and go into BoltMacros and I'll save, I'll call it "activateAnimation." Boom. And again, we have our event and we have our stuff, and I'm going to create some logic here. What do I want to do? In the end, I want to activate and deactivate that Bool. So, just for the sake of the graph, I'm going to create a variable. Oh, I did that again. I'm just going to call it something simple, I'll call it "myBool." And this is going to be more, we're going to do this like a really verbose way. I'll touch on some points and then we'll simplify it. So I create a "myBool" and a variable of type Boolean and then we can drag that  in here for access later. We'll delete that and drag that in later. Ultimately, I want to set a variable, I want to set this value here true and untrue and ultimately, I want to make that true and untrue. So basically, I want a basic logic of on and off. Essentially, I want to say Add Unit and I could say "set variable," and this is how we access variables and how we set values. So I want to set, I've it set as a graph variable, so I'll say set graph variable. And you see I have this Set Graph Variable, and I can pick between Flow and I can change this at any time. I'm just going to pick myBool. And I want to do something too, I need to give it a value. So let's look at this in the Graph Inspector, and this tells us everything we need to know. There's inputs per flow, so we need to, in advance, give it some juice, and we have the name, and this is the name of the variable, and then we need to give it a value. We need to give it a checkbox value, a True. So we can add another Unit here and I can say "boolean". And this is where the naming conventions come in, the human names, so we'll say Boolean Literal. And I want to make this checkbox checked. So this is the ultimate value I want to give it. Just like before, we gave it a speed, we want to give it a True value. So we can just stay at Start. I can just hit Play and it'll give it a True value. And watch, we can look at this little checkbox here. We're not actually communicating with this yet. We're going to do a demonstration of logic. But you can see here, now I've given that True. So what if I wanted to give it False? I mean, realistically, I could just grab this whole thing. I mean I could just check this here. Well, actually now this is only going at start time. I would have to give it another and I can copy and paste this, so let's go here and let's create another set of this. And I'm going to say, if I want to make it False, I have to give that some juice. Now I want to make it True, I need to give that some power, so we'll explore some logic. Basically, how do you toggle  things on and off? I'll to delete that real quick and add  a couple more conditions on this, because I want to show you a few more things. Let's add a Unit and put a key input to this. So let's go "get key." We can Get Key commands in here. Oh, yup, and so we have input Get Key, Any, Get Key Up, Get Key Down. So I'm going to say, Input: Get Key,  I want to go down or up. Let's go, we must hit Get Key Up, I don't see that here. There we go. I like to do it,  so when you release the key. This is another thing, and  I can connect this to my Update. Let's take a look at this here, I'm going to deactivate that real quick as another demo. So we need to give this in advance, so update to every frame and see, it's flowing now. So now I go here, I need to give it space. If I want to carry that flow, I need to put it here. But we also want to do one more thing. So this is a Boolean right here, you can see it's the same color. We can click on our Inspector, and it says Exit : Flow, Result : Boolean. So when I hit Space, it's going to output that, is it True or False out of here, and this is what Input Get Key does. So we need a branch as well, this is how we do branch logic, like if- and then-statements in C#. I can just connect this on two levels. I'm going to pass this the flow and I'll pass the value. I'm going to stay here. If this is True, if I hit the Space key, make that, make that checkbox, so I can click here and see, it put that little flow, and I can uncheck it again and go here and I hit space bar and I'm at the window here, you can see it flow and it does that checkbox. Okay, so ultimately, how do I affect this animation that's playing right now? There's other things I can do, I can say, "set bool." I can set the animator Bool, all this stuff is built in. So I can say Animator: Set Name and Set Value. I can push this to the flow. I can type the name in here, so I can say "isOpen," and then I can just take that value and pass it right from here. Now we've made some complex logic. We've done a few things, so we'll go over here, and again, I hover over, it rotates, I click, it changes the lighting.  Let's make sure this works. Hit space bar, and boom. Alright, we've open up our animation. Now it rotates. That's feeling good, let's manually uncheck that, let's try that one more time, let's manually uncheck that and let's go, we're rotating, we're rotating, I'm hitting the space bar, you can't see my hand. I assure you, it happened, you see the flow, and boom. Now, how do we switch back and forth between these two? So I'm going to create another copy of this real quick. I'm going to create the Set Bool here and I'm going to adjust this to here, but yes, I'm doing this, the long hard way, it's more to show you that you can create complex logic. Because I need to create another branch Node to say: Am I going one way? Am I taking the high road? Am I taking the low road? So I'll go here and I'll add another branch. We want to connect  the flow of the branch here, one for True, one for False here, and then we'll connect this guy right here. We're connecting this, but we need to compare this to something, and this is  where logic comes in. I wanted to make it the opposite of what I have. So I'm going to go here and grab this myBool, and I'm going to drag that in here. This will check this logic and say, if I'm holding down, it's giving it power. If I'm holding down the space bar, once I key it up, it's going to shoot a little True through to here, it's going to give it some juice. And if it matches, so with basic logic, two Trues equal a True and a True and a False equal a False. So if this is False, I want to make it True, so let's go in and check, and  I think I've done this opposite, but it'll be okay as it'll work the first time. So here we go, I don't think it's going to work. I'm going to uncheck that real quick and see here, again, it's all still working and we're  still at runtime, which is great. But I'm going to go ahead after this, I'll lose that variable, I think, and then I'll do a simpler version. So you can see here again, I can click here and then I hit space, and it opens. You can see the paths, it's flowing down here. This is what's really  powerful about Bolt is I can see that logic in action, so I hit space again, and it closes. You can see it flows  to here and opens. And it flows again, and this is what's really powerful about Bolt is you can really see the flow without logic and if it's working or not, like when I do C#,  I'm always writing it like, debug that log to see if something's working, while here you're going to see do the dots flow. So that's pretty powerful. In 40 minutes, we've made a complete interactive turntable. But let's clean this up and do one more thing. I don't want to do it on branch, I don't want to do it on key, I want to do it on click. So I can get rid of all this and create another Event and say Events, I'll go to my Input, then I'll say On Mouse Down. Just like I did On Mouse Down, in there, I can do that. Now we have this logic here and we get a click in the window to activate it, and it's closed, and I click. Now it's switching between True and False, Open and Close. And it's that simple. It's pretty powerful. So alright, that's crazy. Let's stop, and we've got all our changes because we worked here. But I'm going to delete everything. You don't need any of this. I think this is what's  really cool about Bolt is we don't need any of this stuff. Because you can create your own macros, and Bolt has a lot of smart stuff already, and we'll delete this guy here. And Bolt actually, what are we doing? We're toggling True and False? Bolt actually has a toggle. It has a toggle of flow which does everything I just did for you. We could have done this whole demo in 15 minutes. We'll need this whole thing, but we need to connect this. You can see toggle flow, and it's complex. There's a lot of ins, a lot of outs. That's why the Graph Inspector is really important. You can start it on or start if off. I'll say, "We want to start it off because  we're starting it off there." You can see, we want to enter a flow and basically, we want to enter a value. So I just have to enter this flow right in here into this toggle. Then I just basically have to say, "I can put multiple flows into it". So when it's on and off, it'll both flow into this graph and it'll still do something, like again, this is the power source. But it'll also pass a value for me, which is really great. So cross your fingers. Here's the final moment. We're done in three. We've basically made an entire interactive experience, if you think about it, about five different Nodes. So we go here. We click, and it opens. You click again, you can see it's activating and deactivating based upon this name. Then we can switch everything, and you can control here. These are just controls I did. I thought that, "Oh, On Mouse Over," and the mouse click was easy  for you guys to view and follow along. But I've done more advanced things: Instead of doing logic through here I've actually gone and done like interactive turntables with characters and I've activated motion cycles. You can change, you can put another interface over here, you can work with UIs and buttons, and you can change the materials. This is pretty much all the logic you need. All you need is Flow Machines and Flow Graphs, State Machines and State Graphs,  and some variables, and you can create  pretty much anything. Then again, you can see, you can pretty much, if you use Human Naming, you can just on the Fuzzy Finder, search for what you guys want to do and then you can build this and you can deploy it to the web. I built a version of it. I put it in the Cloud. And I've been streaming, it's really fun. But that's everything. Cool, so I think that's about time. Let's hang out and do some questions. Let's use some helpful resources. If you guys want a follow-up on this, you guys can go check out the Bolt documentation. It's a series of templates that people made that you can package all the stuff up, so I can package this template up and say, "Product Rotater, Product Configurator." And I can stick it on the Asset Store or I could share it with my team. There's tons of resources, Bolt samples, Units, and nice stuff. This video will be available later. But again, we've put little bit.ly things, Unity Bolt docs, Unity Bolt kits, and Bolt samples. Great, I guess it's time for questions. How many of you guys are still with me and have some questions? I'm going to be looking in the chat. Let's just do the questions in the chat. Cool, I'm yours, guys, for the next 15 minutes, so you can ask me anything. Hmm, it's two State Machines activated at the same time. What I've been doing, is doing in it. The question is, in the chat, if you guys can't read it, with the State Machine, would it be possible to have two states activated at the same time? I've actually not tried, I assumed it's the condition. Yes, it would be actually. No, I've definitely done, it is a mistake because I've done it and they have too many Start things and I have activated multiple at the same time. So yeah, and you can also have State Machines within State Machines or super graphs, which is a little bit more advanced. But what I was doing with that, a State Machine within a State Machine was activating the HDRI and then doing rotations, on the HDRIs. So it was a subset of per HDRI. I was doing a State Machine for each HDRI. What projects in Unity are currently integrating Bolt? All my projects, I think everything we're doing. I think we're all very excited about Bolt. I'm working on a whole content campaign for next year, and I'm integrating Bolt in everything I do. I think the accessibility is amazing. My whole team is excited about it. We've all wanted it for a long time, so you're going to see 2021 full of everyone using Bolt for everything. If that answers your questions. But what products? I think Bolt is, I don't know as far as a product, it's from integration in Unity and Unity Pro, it's in all the Unity. All the Unity Packages, free and paid. It's available  for the Asset Store for free. As far as integration, other projects built upon it, I'm not sure. Is it possible for Bolt to extract metadata from objects? I assume so. We do have the APIs, so you can write custom Nodes and create custom data. I have not tried to do it from Reflect. But please, you've got my email address, benra@unity3d.com I'll type it again in the chat for you guys. And if you need help, you need me to direct you, I can direct you to one of my colleagues who uses Reflect more than me, and they can give you a specific answer, but I'm assuming so, but never make assumptions. Is Bolt compatible with MARS? Yes. It's definitely compatible with MARS. I'm doing it a lot. I'm using it. That's what I'm using it for actually is, I'm doing a lot of XR stuff. And it's usable in anywhere you would traditionally use C# code, in any way you want to make an interaction. How Bolt connects with some of the MARS functions? I'm not sure. But if you wanted to create basic interactions like I did an AR thing in AR Foundation last week, where I set up all the... I did a character in the environment and I put all the animation cycles all in together, basically like I showed you with the graph opening and closing. I did that with more complex animation cycles, and I used the State Graph to do that. And it took me four minutes as opposed to taking me 20 minutes writing it and typing it. That's a good question. You guys are asking me tough questions. Are there Nodes for reading live data from web sources? Again, I don't have, I've never specifically done that. But if you follow up with me, I believe I can find you some information, but I can't see why not. It can basically access anything. And if you can't,  you can access that live data whether traditional C# script and that Bolt can talk to that C#. But I think there is a Node-API, you'll be able to do that. What are you looking to do? Tom Connelly, that's a great question. Here, if you pin me a use case, I'd be happy to turn it over to the Unity hive mind and see if I can get one of my smarter colleagues to give you an answer. You're a data viz guy? Okay. Yes, that's some interesting stuff. You can access the data through Bolt and then pump it over to. I've been working with a lot of data viz guys doing really crazy things with Visual Effect Graph. But yeah, I believe you should. I don't see why you wouldn't be able to, if there wasn't a Node available, that you should be able to write your own Node with our API. And again, if not, just how a C# grab that data a traditional manner and just have the Bolt talk to the C#. Can you export Bolt into C#? No, you cannot do that. I knew that question was going to come. No, the Bolt's, the graphs are, they live as graphs. They live as assets, so there's no real clean way to convert them to code these days. I think we're looking at it, but no. Ah, Houdini. Yes, that's a great combo, especially when you start to combine. Tom Connelly put in the chat that he's looking, he saw Simon Russell's work with data viz in Houdini, and now I'm inspired. We're talking to a lot of Houdini people now. I think that's a really powerful combination. I think the traditional mode we need to go from a CAD per package or a DCC, like a Maya  or a Blender, into Unity, and I think we start to see that collaboration between Houdini, which is a very powerful software. My background is actually visual effects, and we use Houdini to do very complex simulations. I think that the combination of grabbing that data from Houdini, passing it into Unity. We do have a tight integration, and there's some stuff on our Asset Store and there is a Houdini package there, integrating Unity and Houdini closely together. But we're always looking at closer and tighter integration with those guys.  I didn't check the... Who is here? I recognize a lot of names here. Thank you guys for joining again, thank you for always joining and supporting my presentations, and always feel free to ping me if there's anything you'd like to see that I'm not covering. I'm doing a lot of webinars and community activities this year and next year, so I'd love some feedback of what you guys would like to see. And I love feedback. I'm going to be doing in Bolt as much as possible. Today was a beginner,  so actually I really wanted to just demonstrate the core fundamentals for you guys. But I'd love to do more advanced stuff, whether it'd be this year  or next year. So I'd love to know. I think you guys had some great questions there, which had some great feedback. And also, check our Unity user channel. My colleague Ashley has done some amazing presentations on Bolt. On my deck, I'm stealing a lot from her because her stuff is so amazing. But we're doing more and more Bolts this year and next year. Yes, there's a full API, so you can write and extend and write custom nodes. Basically, you can extend it as much as you like, with our API. I have not done anything yet. I'm still pretty new to Bolt  as well in the past few months, but there's a lot of people writing a lot of custom nodes, and they're doing amazing things with it. Oh, the question was, can you  extend Bolt with C# Core to extend assets? Yes. What projects? Oh, James McKay. James, you come to all my stuff. James, come to my Digital Developer Day on the 3rd. What am I working on personally? I'm working on a short-time project called... I'm really focusing  on storytelling. You've been coming to some of my stuff. I built four characters. I don't know if you've seen a peek, I've been peeking at them. If you've seen my Twitter, I've got a Motion Capture Suit and virtual camera production rig. I built four characters and four environments. I'm going to do some interactive  real-time storytelling for 2021. I'll do as much as possible. I'll be announcing it pretty soon. But I've got a monthly cadence of topics. We'll go through the whole deep dive in everything in 2021. Virtual production, face cap, animation, layout, rigging, texturing, real-time lighting. I've got a whole plan, and we're going to spend nine months from January to September, diving into each one deeply. And I'll be doing webinars, I'll be doing Learn, live Learn sessions on our EDU platform. I think for 2021 I want to help everyone create their interactive experience, tell their story. And Bolt is a huge thing with us. I've been doing this with XR interaction toolkit, I've been creating interactions, so you can walk and set triggers and do all kinds of interesting stuff in VR environments. All kinds of crazy stuff, premiering  a little bit on December 4. I'm going to be doing the Bolt thing there. I'll be using my characters from my project in 2021. So keep tuning, James, I know you come to everything. I'm always happy to have you. Moral support. Is it possible to use  version control with Bolt? Yes. Bolt is an asset that lives in the project directory. So you'd be able to check it in and out with the version control system just like any other asset. You're not going to be able to diff them, right? Like you're not going to be able to go like git and diff like you would  with traditional text and code. But as far as version control is checking in and checking out grabbing the latest. It's the physical aspect on this. You would do that just like any other asset. Alright, with that, guys, I think  that's the result of our time but thank you  very much for joining. I had a blast, I hope you guys had a blast. Thank you very much and check back, this video will be live soon, it'll be live on YouTube and it'll be live on Unite Now. In the meantime, thank you for joining and feel free to reach out to me, Twitter, Instagram, @lightandalchemy.   [MUSIC]   