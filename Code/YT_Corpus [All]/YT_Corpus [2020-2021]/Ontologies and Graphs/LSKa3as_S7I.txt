 hi okay I think we're lives max we're live yay hey everyone there's something that people here who I have I don't think I've really connected with I don't know who they are so everybody hey we have hey everybody welcome ninjas I'm Kareem this is max if you don't know me I'm Kareem you can chat with us here there's a little chat window on the right-hand side of the screen I think it's on the right hand side of the screen hi Paul hey everyone yes thanks smart max so what is there being helpful thank you it's good it is helpful okay so what I was thinking we could kind of do that so we have a small group here so like if you have questions or whatever you could totally have it be like a more of an intimate session you can even ask questions with your microphone on your laptop if you want to what I was thinking to do is that Max is gonna present it max you can tell me if this is okay with you or not max will present if you have any questions during his presentation you can just push them right in the chat in the public chat if it's something that you want to save for like a Q&A at the end there's actually at the top of a window of the chat window there's like a chat there's a Q&A polls handouts whatever you can actually click the Q&A button and there you know you can just put your questions there and then we can people can actually vote on them but it doesn't matter we could just could go through the questions you know but if anybody else votes on them or whatever we can prioritize based on that too so where does everybody from I feel like I know some of these people so there's some people I don't know Estonia Minneapolis Calgary oh so do you know the me Nome guys the guys mic morally yes Michael black Ellen uh okay well I'll have to connect you with them because they're in Calgary two really cool guys and their super graph nerds I'm in Philadelphia max I'm in Round Rock which is middle of nowhere not really it's next to Austin but uh like what is that it's a nice place where you can buy a big mech Meg mansion for like nothing so tired of living in a tiny condo moved to Texas everything's bigger in Texas data big data I'm just kidding Jennifer is here - Jennifer ryf is here do you guys know her she's one of the my our colleagues on the developer relations team she's amazing hi Jennifer so if anybody if you are interested in asking a question live and you want to be added to the like a microphone or a video you can do definitely do that you could do it now or at the end you could just message me privately just be like I have a question or you can use a little hand thing there's a little hand icon on the chat window on the bottom next to the emoticons stuff so okay I think we can get start anything yeah so I always like to start every single presentation with the same stuff so you've seen as a thousand times and you're bored of it that's fine we can skip it otherwise I just want to make sure everyone's on the same page so let me just hit play and we'll go through this all right there's my giant head my name is max de marzi you know could you fill me in here I've been at neo for eight years almost or something like that I obviously keep a blog at maximize that calm and that's something you haven't done yet which is start blogging about technical topics that I highly recommend it to everyone that's one of the reasons I got hired in me over gay and just being able to find your voice as a developer as an engineer and just talk to people and say hey I'm learning this I'm learning that and see how we need it isn't remember even though you may not be an expert at something there's always going to be someone who is one day behind you in their learning process so if you can kind of speed them up by teaching them something you just learned it helps everybody it helps the community anyway follow me on Twitter was it something to do you love blogging no it's also people always think that you have to be good at no just do it I didn't 160 block was my first few sucked it doesn't really matter you just you get started and you'll find your voice sooner or later yeah and if any of you guys are blogging anything you could send it to us we can either publish it on the neo4j medium we might be able to publish it on the neo4j dot-com blog and or we can also post it on the community site so we have a content section in the community site yeah don't feel like no one's gonna read your blog because nobody knows who you are or because you're just getting started so there's always ways to get your good content out there through us or through other folks yeah we also feature it in twin for j2 is fun if you're blogging about anything oh no sorry twin for Jay this week in neo4j I'm like let me not use that smartest thing but yeah all right and then all of the stuff I write is open source on github you can find all kinds of things on there alright let's keep going skip the agenda for your graph model you guys already I mean just so you know this this is how we model the world these notes and relationships nothing that really has changed in for oh wait this stuff you still can't do nested properties you still can't do anything too fancy like relationships relationships or weird stuff like that or or single sided relationships none of that stuff has evolved into the product just yet on my dream list but hasn't hasn't happened all right and most of you already know sequel some kind of message that looks like this and the problems there are obviously the joint queries that always kill everybody because you have to do these every single time you query a relationship and the big thing when you're 4j is that we can skip all that by connecting the data by pointers right we always say that relational databases suck at relationships because this is a 40 year old model I mean Siegel started in the 70s and it's 20/20 for god sakes it's been a long time there's better ways to do things but we're stuck with the old guard still and we're still stuck with this sequel language that was built around set theory in handling sets of data which is great your academic or if you're into numbers if you're an accountant if you're number crunching your attacks person fantastic but in our world it's more about social it's about how things are connected deeper things go the happier neo4j tends to be the more highly connected things are the happier weak we tend to be so we have this no sequel stuff it's been around for about 10 years now most of them kind of stayed away from relationships the only ones that really jumped onto that side are the folks that knew for you and the other graph databases and there's a good hand number of vendors in this space and how there's you know 10 or 12 I would say viable vendors that you can use for your graph database projects if you wanted to and and the big difference from relational and graph is just we store data from there's no magic a lot of people say oh graphs are really just a different way to the query you have a different language on top of traditional relational layout and that's incorrect you put a graph language on top of sequel server it's not a graph database you just let it speak graph it's like learning Italian when you're not Italian it doesn't make you Italian all this line we just speak the language right it's not a graph database so what does that really mean though it means how we store the data is different right and the real way we store data is in this horrific double linked list relationship layout setup where the properties are in a single linked list so they're easy to understand but the relationships are mixed together every relationship knows the previous first know its relationship and the next relationship as well as the second know its first and next relationship which is horrific way to understand it so I don't recommend people think of this model in their head because it's not very useful and also the storage layout count gives you a hint of that how that data is laid out but the the better way to to abstract neo4j and how it works is in this next slide which I always say is the the most important slide you ever need to see it's in order to understand what a graph database is all about which is this slide and you might have seen it a thousand times but really this is all you need to understand to see how a graph database is work right we have two giant arrays of notes and one of relationships every array has a different types of relationships I'm sorry every node has different types of relationships that are connected to it separating it out and each type is two lists of incoming and outgoing relationships this is also a third list for self referential relationships so you can say I like myself but we don't really talk about that because it's kind of weird to even see that in your data models we definitely allow it but it's weird to see that so there's a third list but you ignore it for now so we just have to list incoming and outgoing really and these lists contain relationship pointers they're just ID numbers that pointing to the relationship array and they say all right from this node I'm going to jump out to a relationship of some ID and then from the relationship I'm going to get the start or end node whichever one I'm looking for whether I'm going in the incoming relationship or an ongoing relationship side and then I'm going to jump to that other node and then get some key value pair or continuing my traversal from there and the magic here is everything is done by pointers so there is no finding a b-tree and walking down the B three seven eight layers down finding the record and matching it to the physical location on disk or where that record is and kind of going from there all that it gets skipped because we can use use the actual relationship ladies are our physical pointers to where the data lives this is one of the reasons why we're kind of limited to storing data in a single graph in a single system now at 4'o what you're getting is the ability to shard data but the way we're charting data is you have multiple graphs none of which are directly connected to each other so you don't have relationships between graphs what you have instead is data that is copy so we can say okay I'm gonna take this node that represents a username and I'm going to save them in two graphs and kind of find users friends and then use that in use those IDs to look up something about those friends in a second it's not a second graph and a second shard that were calling you but it's still all connected physically in one graph at a time that's really how how we get our speed okay so why is this important what is a secret to a 10 yupik J right and it's partitions right we have kind of pre joined everything you have in the database into these lists by node by relationship type and bi-directional so that if you want just something really specific these persons friends you can go finally the user node go to the friend relationship type and gave me the outgoing or incoming all this one particular node you don't have to look at this giant tables of billions of records long that you would in a relational database and especially be doing something like recursive queries those can get pretty hairy you know in a really fun day to visit your mind till you you blow your heap and you're out of RAM and then you're you're dead in the water well neo4j doesn't care I just keeps traversing the other thing to understand that when you forget is that it doesn't look like it when you show you cipher queries it looks like okay this is doing a pattern matching right so you has to find the entire pattern before it continues the hint there is that it finds the entire pattern so all of our queries are depth-first right think about that so we're finding my know the starting point and we're traversing we're traversing reversing out until we finish the entire pattern and then we go find the next pattern for the next node that we may match on so it's not like we're doing final the users first then find all the transactions then find all their friends and know it's one note at a time depth-first that's what we're able to do some of these queries if we try to do everything breadth-first we'd run out of memory trying to keep track of everything that's going on so that's another thing to have to think about in your head when you're doing this everything is depth-first in a graph theories versus in a relational database they tend to do everything but breadth-first because the joints let you filter sets of data at a time but they have to keep these sets of data in memory at a time while they were they doing it but we don't play like and we do one at a time with a call to pool at a time processing and they look down upon this they say oh tuple at a time that's that's 1960s that's 1959 technology that's that's the old way of doing things nobody wants that anymore but when you have massive ponies of data or these crazy long paths to what time is the only way you actually gonna get a result the other ones are going to be blown out of the water because there's no more memory to to a handle the deep breath first because you have these barriers so they have to go through I'm just not gonna happen anyway that's a long rant about relational databases they are not the same thing putting a graph language on top of a different database does not make it a graph database hopefully that is clear you have any questions ping me about that now this is not magic you know there are some queries that we're not optimized for and we absolutely suck at and that's queries that look at a single model single property but they don't do any joins at all they're not gonna be doing great in you afford it we're not optimized for that we're optimized for hopping around in fact our property stories one of our weakness is where it's fairly slow to read a property from a node or from our relationship something we're actively working on to to try to improve in the next couple years but what am I talking about so what is the average height of all the Hollywood actors for example so this is a query we're looking at a single model an actor at a single property now the way new for gauge stores data we don't know we don't have a little space for the actor so they can all live instead we he realized no one could be an actor no two to be a movie no three could be a play note 4 could be a commercial if I could be you know a director you got to jump around until you find these actor nodes and now you can use labels to make that easier but you're still jumping around in space and memory looking for these these actor nodes and then once you get to the ekta node you have to find the high property and if you remember if it is a dynamic relational database which means you can add any number of properties to any node and they can be of any type so a high property for one user might be sin centimetres it might be in inches for another user might be a float for one it might be a string for another the graphic itself doesn't care which makes life kind of painful and also we don't tell you where we store that high property you could be the first property and list it could be in the middle it could be at the end so we're gonna have to traverse this single linked list of properties for each individual node until we find a high property and then kind of grab the value and go from there so for those queries not so good a better system would be a relational database that keeps all the actors together in a single table or even better a column store that keeps all the heights of the actress in a single column together better better performance for those kind of things but you know if you want to know how these actors are connected to each other based on the movies that they acted together in like a six degrees of Kevin Bacon type of query then we're awesome at those categories and it all works as long as you drink the kool-aid right you have to stop thinking of your data as tables and you have to really think about them as grouse that's the biggest thing we try to get from people is you got to stop thinking in the traditional sense and you gotta start thinking in the graph sense where everything is a graph everything is connected everything is about relationships on how you choose from from here to there as long as your your data model and the data you're working with queries you're asking are graphic nature you cannot find a good time when you have today but if they're not then you should use a different solution or a different technology you know we're not the best at everything we're never I'm gonna say we're never gonna get there but it's gonna take a while before we you can say oh yeah I know 4j is a it's the perfect getaway excuse for everything that's that's kind of a stretch I mean we never ate me may never get there but we are great for highly connected data which we keep saying all right so modeling we talked about modeling there is no third normal form and graph databases which means there's no right way to model data there's plenty of wrong ways but no right way so you kind of have to get creative in and what to do what I like to use is arrows so hopefully all of you who are ninjas have seen this tool it's written by one of our developers a long time ago it's pretty bare-bones it looks kind of barren but it's simple it's fast and it doesn't run out of ink right the marker sometimes you hard to read I have terrible handwriting I should have been a doctor so it looks like a mess when I do models on the whiteboard so that's why you just push out arrows and use a projector and or a TV or something that we have better better-looking models so we have this cusp of nodes and they can have any number of relationships obviously the limit is 32 billion technically 34 billion something actually with our standard edition and then it goes up to like half a trillion with the Enterprise Edition if you set the high limit on but it's not on by it by default so that's that's fine you can have many relationships between the same nodes that's not a problem friends and works with that's easy to understand and what's happening there now we could I just earned a single relationship and put the properties of how they're related into the relationship but that probably would have slowed you down quite a bit we can also have multiple relationships of the same type between two nodes this case a person listens to us on multiple times you know usually you watch a movie maybe once or twice but a song you listen to again and again and again sometime you Lenny went to yonder here in your car and the radio comes on it's a same song again what's been on the radio so much this oh I think right that's her name that with the lady that does the about doing your nails then feeling good anyway the song that's try and check what's it there's a similar a lien chick that's like all over the radio she's got this like weird voice she's great I don't remember her name but a shame on me I used to work in music so I feel like I should know this stuff doesn't walk wants you to sing a few lines you want everyone to leave or do you want people to stay that's not last continue on all right now let's use kind of properties obviously that does what separates us from the animals I mean already have people they they don't have properties and relationships now there's they're trying to the computer capitulating and saying yes you're right properties in relationships makes a hell of a lot of sense we're idiots and we're adding this new sparkle star thing that lets you put properties in relationships and now we can do what you guys can do welcome to the party about 20 years late Semantic Web is dead because of you and your anyway that's a whole different topic but anyway we have these properties and relationships now why or when do you use these things sometimes use them to qualify thing so quantify what's going on in this case you have these likes and loves and you have a - like relationships with different strengths which one should you use yeah it was something small like five value is ten values twenty values that you can just break up by using relationship types is it gonna be a lot faster to use the top model where you have difference between likes and loves especially if the relationship property is static if it's not gonna change very much now if it's gonna change a lot then you're probably better off using a property and letting it change so if someone likes someone now and then two months later they hate that person for whatever reason and that strength becomes negative 5 or negative 3 then you're probably better off having them a property there keep that in mind now what about this model we have a person who lives at an address in a works in an address or we have half address a house address on the other side and one is type home one is type work which one should you use if you listen to me two seconds ago I just told you to use the one on top because we can split the relationship types and not have to look at the property underneath but the reality is how many addresses that a person have right you have a house and you have a place where you work and that's pretty much it you don't have a ton of addresses I mean maybe you're rich and have like ten houses but even if you're like some kind of real estate mogul you'll probably only have like a couple hundred apartments you don't own millions of addresses so it doesn't make a ton of sense for you to use the the top one you can use the bottom model and it'd be just fine so when you're thinking about modeling things don't always say oh the right way to do it is the way on top no think about the density how dense is it's gonna be if I have to look at two different relationships in check or one property in each to get my answer I can just go with the bottom one that's fine it's not a big deal top one might be a little bit faster but you might complicate my my life then we have the parent and child though thing I don't know why people think sometimes that the relationships are not bi-directional they are you can't reverse a relationship from any side it doesn't really matter when we store it we store in for both nodes so you don't need to have this parent open child off just gotta pick one it's either gonna be a child off or a parent of one or the other question can we do indexes on relationship attributes in foreplay oh yes but doing it the old the weird way using the the full-text indexes so we haven't migrated relationship indexes to regular schema and it says that we have with notes you still have to use the stored procedures to make that happen why I don't know I kind of do no we basically don't want you to do it well typically when you have indexes on relationships it's a code smell for a bad model not always but most of the time I think in the eight years that I've been here there's only been a few times where I made sense to have indexes on relationships most of times it was really just telling you that that relationship should probably be a node and have other things connect to it so that's that's kind of the reason I have my dog whining of things he wants to go pee so give me a second while I open the door Elena oh I know the cool people here and he loves going to play with the pool people so let me know all right Ellie Oh crazy perfect business so this obviously is fine though and that is if you have a bottle like Twitter what you need to have two different relationships to signify different semantics right if you follow someone on Twitter they don't have to follow you back even though you can't reverse it from both sides if they really do mean different things so in that sense it does make okay they go from both sides alright let's go to something obviously we've seen that a thousand times the first lie we tell you about graphs is that they're whiteboard friendly you get on a whiteboard you draw your model and voila that's how it's supposed to work and everything is fine all right and some models are really that easy where you can just draw it out on the whiteboard and make it work so here's an actor or a bunch of actors who acted in movies they play different roles in those movies and other people directed those movies and if we care about what actress wearing what movies this model is perfectly fine the problem comes won't care about what characters they played because we made the decision to make the characters a property of their relationship so our two options here are one as our previous question asked use the sort procedures to create an index on their relationships and start off by asking for the role equal to double seven and then go from there or another way it would be to break up this model and say okay you know what I'm gonna have a node for the individual characters so we can say I know I want to know who played James Bond in every movie who played Peter Pan in every movie who played the Joker in every movie and see the difference is there right what's another one spider-man and we felt like 10 spider-man's the last few years some weird reason so it's it's not about getting the model perfect it's really about understanding what questions are gonna be asking and saying I need to match the model to the questions not the data forget the data the data can be modeled a hundred different ways it's the questions that are that are an important partner we're going to hit this a couple of times one of the examples like to give also his flights and a lot flight because of a lot of a lot of our competitors copy this modeling flights idea for some of their documentation and they totally missed the point which we'll get to in a second how do you model flight theater right we get more late this way with the two airports on they're flying to relationship and stick everything in the property but this is very expensive because we have to look at a lot of flying to relationships to find what we want we could have an flight know to mean to which makes things worse because now you have to traverse twice as many relationships that doesn't really help me another way to do it would be to realize airports have many flights per day and people don't just fly a random leaf on a some random day from here there they they pick what day they want to fly up they have a conference to go to they have a vacation they're taking so they have a date in mind where they want to go so we can split out two days from the airport and say okay the airport has a date and on those days they have flights the reason we do this if you look at something like Chicago O'Hare they have a thousand flight today so before we had 365,000 flight know its flight relationships coming out of that Airport note now by splitting up by day we can have at most about a thousand when each Airport day that makes the query a lot faster because you didn't just filter out the airport day we care about and skip all the other ones so we don't care about and when we talked earlier but the secret to be on you if idea being partitioning this is what we're talking about we want to look at the least amount of data to get the the answer yes umm times we can do that you know we'll get a queries fast another crazy thing you can do in graphs that you can't really do in other places is use the actual dates as relationship types so in this case we we start at the airport date to be 2015 or 1901 which is kind of nuts right you see the house day becomes that so we can skip looking at the property of the upper day when you just use the relationship type to go directly to the one we want and kind of go from there crazy idea but it works and we see it often in a lot of our customers are models nothing you do is just get rid of it and say forget forget the airport's we're you're gonna have the code of the day that's a combined key and stick that in there with neo4j 3.4 3.3 and later we added composite indexes so you don't have to do that we are combined thing that you can just say I want to create index on two properties and use my composite index to find that I protect quickly and kind of continue but there's better ways right you can get more creative this is the the fun part but being in a data engineer which is you can look at your your problem space and say how can I do this a slightly different way so one other way is to say okay this Airport day has a thousand flights but we don't go to a thousand different places we may go to a hundred different places so we can do is break out the destinations and group them together into the destination node and say alright how many are going from O'Hare to JFK we have thirty flights quick now I'm gonna put a JFK destination node for each Airport day and then that destination will have those thirty flights attached to it so that's a better model but we can go further right you can say okay Whitman what if we used the relationship type and instead of just putting a random flight or house flight or whatever what do we took the airport code of where the flight is going to and stick it there so we can go to any Airport day and say I want or the airport day flights that are going to or Rd and that way we can skip having a destination or you can just go to the relationship type already and we know that that flight is gonna go to ORD this helps us trim down a model quite a bit because you can just jump to the airport day that we care about say I want to find all the flights from O'Hare to JFK there's 30 of them quick I Traverse 30 relationships on to get to the flight node 30 more to go from the flight to the airport day and I have my I have my answer I don't have to look at 365,000 flights or a thousand flights or I can just look at 30 and I'm done and that's the fun part of any is finding ways to look at the least amount of the graph in order to get the answer if you can do that I mean you change the game because your queries you gonna be blazing fast compared to other folks right the thing you have to get wrap around your head is that you can bend the data to your will you have that power you know it's not a physical thing or you have to say I have to respect the laws of physics the laws of third normal form and do what I'm do the right thing there is no right thing it's what you want to do in order to get the answer fast and quickly if that is what your application you know requires so let's took a model and quitter really quick you know how to order works you have a bunch of feeds and they're separated by dates in descending order one of things you can do is look at how other databases do Twitter and what they do is they push that twit ID to people's feeds so you have a thousand followers you're gonna be replicating that data to all 1,000 followers and saying hey add this post ID to that list this is how it's done in Twitter and the one on the bottom is firebase which is a knob dick database a document database really same same idea right you're finding all your followers and you're pushing a little ID there now a better way to do it is using a graph why because well can you say I follow a thousand people on Twitter typically you don't follow hundreds of thousands of people maybe a couple of thousand at most otherwise your Twitter feed it becomes a readable and then every time they post something you just look at okay find the thousand people that I follow and check to see if they posted something and check the date property and order it by that and this would work fine on day one but it would get slower and slower over time as you have to check that posted time relationship for each one of your followers every single day see if there's any new posts so the better way to model that is use actual dates on their relationship type and say okay find the users that I follow and tell me if they post anything today or yesterday and then from whatever is there go ahead and order it by date so at most you're looking at two days worth of posts from the thousand people that you follow that makes the query a lot faster and makes it more predictable as far as how much time is gonna take and it doesn't matter if it's Twitter on day one or Twitter on year eleven it's going to be exact by the same amount of time which is kind of nice and once again the reason for it is because of this picture right because we're using the types to help us filter and partition what data were looking for to make it fast now one of the things that I don't like is that the way the types are set up they're set up in a in a list and every time you add a type it adds it to the bottom of the list instead of the top of the list so as you add these dates it's actually going to look further and further down but you know even if you have to link through a hundred or three hundred or a thousand of these different dates it's not that big of a deal to jump a thousand pointers in memory until you get to the list that you want and then go through the the ones you care about first just happened to use an index or something else to define them and this is a real change that was made by a real customer this is from Adobe they have a feed for a product they call behance they used to run this thing on 125 servers and the data got begging at 20 terabytes because they're duplicating a lot of data as they're pushing at this tweets to to all the followers of a person they decided to move to Cassandra in 2015 at 48 servers obviously they had more data cuz add more users so I got a little bit big and then in 2018 I decided to ditch all that and move to New York J on three little boxes and since they didn't have to multiply all this data over and over again the data size actually shrunk massively to 33 gigabytes right because they realize there we were a better solution for that kind of problem and the thing about this though is you know they don't have to scale the database you can use the database that skills for their queries and this is one of the big reasons why new four-year doesn't make any money because most of our customers run three boxes and that's all they ever need because we can handle the work when when the solution fits the need it's it's magic all right oh you when you're modeling you query match you don't have to scale out you don't have to think big massive amount of data and I know I'm being a little hypocritical because hey wait a minute didn't we just released 4.0 where we can scale out to you know indefinitely to hundreds of servers and hundreds of different shards and and all that sure but there's maybe a handful of customers who actually need this functionality right some government and thieves and and some some big-ass corporations but most of our customers don't need this massive scale they're pretty happy on a single box with you know some some sizeable amount of RAM I'm not gonna lie but still one one small set of boxes in one little graphic overall now another thing we don't talk much about is the flexibility of this dynamic nature of neo4j and if you remember the oh the Terminator two movies before they all started sucking you had this guy who was able to kind of shape in himself in different ways using kind of this fluid metal setup and in this screenshot you can see he's got three hands he's got he's flying the the helicopter that's been shot at and then he's reloading a weapon over here so he's got three arms because he is not balanced by you know our laws of how we built he can do whatever the hell he wants he's fluid he's liquid the good metal so we can do the same thing in the everyday instead of having this crazy hard scheme of how things are supposed to be set up that no one can understand and people used you know eyes glaze over as they look at it they can say all right I'm gonna model any form that I will ever have in any application and these four nodes okay so I have my my project or my application or whatever it is that I have this project will have many forms I don't care how many I have it doesn't really matter these forms are going to have fields they can one feel they can have a thousand fields it doesn't really matter now these forms and fields are going to be filled out by people these people are going to be included in these projects or applications and they're going to have a value attached to some field that is in some form and that value could be of any type it could be a boolean it could be a long description text it could be a number it could be a float it can be whatever you want but with these four nodes and relationships we can model any form in the entire world it's not very hard and you don't have to have this crazy-looking model to make that happen and this is a model that's actually being used at at the start of they do clinical research forms and they want it to be able to do something quickly so they can put it together without having to use what is that like guerilla forms Monkey forms whatever that thing is called that startup that does this kind of stuff for Google Forms they use use new forgave for this stuff and then after a while of working with this they realize hold on a second here we have to kind of keep track of these people who are responding to these forms and we want to see the response the same from twice at different times because maybe they're the values changed if you want to track it about this changing over time sometimes they have to fill out two or three forms at the same time and they kind of link together they they're correlated they truly all be one big form but we decided to split it so what's happening here well we realize then we're missing a concept and the concept we're missing is a response I already said it three times but the idea here is now in this project that includes these people they're going to have some kind of response and that response can be linked to other responses is that we weigh a way to know if the forms are tied together and the response is how the values have the fields and we can still connect everything in that way so it's a little more complicated than we had in the in the previous one we just had four nodes but this is a way to to add that moment in time of response kind of as a as a hyper node that connects everything together in space and they switch to it's this model in order to be able to do some of the fancier query so we're trying to do and some more correlations that we're trying to do but it's still a very simple model versus having a wall of tables and and joined here was that our big mess all right and then I came to change I love change that's been my thing lately and we see it a lot in fraud detection in transactional stuff here we have a bunch of people who are using a credit card to make some transactions at some merchants and we have an evil fraudster with sunglasses on for some odd reason who will use this credit card and you find this critical number through a terminal skimming an ATM or just good old-fashioned data breach somewhere they'll test it out to make sure it works that sometimes they'll test it out by figuring out what zip code you know it's attached to a credit card and then once they have a valid response they make a big transaction this happened to me last month where I went to a gas station I hadn't gone to before and I use my credit car there I guess had some kind of skimming device on the on the gas station had a keypad and then I started seeing all these new transactions come out of nowhere what they had failed a couple whether it testing out the zip code because I was in a different area where I normally live and then once I got the right zip code they started making connections and they the bank called and stopped wouldn't say looks like you guys came buddy so happens all the time how do we keep track wait how do we find this stuff and how do we find where is originating okay well we can store data in a traditional sense where you say okay we have this user just making these transactions and they just have you know some time attached to them and it kind of works this is one way to look at the data a better way to look at the data is in a chain where you say okay what was the last thing they did and what was the thing they did before that I'm always the thing I did before that I kind of continued it down the line and the reason we want to see these kind of chains of data of relationships is because we're looking for paths where multiple things happen where it's kind of user split apart where thing is kind of combined together where a lot of folks are are doing exactly the same thing like clusters of transactions happening in same spot and we've seen this in in the genomic space when people take a genome which is just a linked list of pairs not very interesting at all but if you stack them on top of each other oh that you know you stack different people's genomes on top of each other then you start seeing interesting things where everyone has the same set of no genes here and then they diverge and then they converge again somewhere else like what's really happening there and people who are sick why are they sick and you know they prone to some diseases because they have the same clusters of genes here they're what's happening those kind of interesting queries we can do the same thing for financial transactions we can kind of put them on top of each other and then say okay the people who have been notified about the fraud or called us and said we are you had a problem where do they have the same type of transaction where do they go to the same merchant now what happened what is similar in their connection history and I don't care whether they have tendon sections or 100 as icons or a thousand rows actions just show me everything and how they could be connected and the examples I've given in some of the blog post we find that these folks all went to the same gas station and that's probably where their card got skinned Robert here hasn't called in to say he's got further introduction but he probably will so you might as well go ahead and freeze his car before that happens and send him a new one in the mail so he you know so the bank doesn't lose any money or their the merchant doesn't lose at that item or what-have-you now I wanted to kind of end the the can part of this with another blog post did on getting the latest transactions and they trick that I did here the user was trying to find transaction that happened the last one is our transaction that happened to a user but didn't want to use the the link list model that I was showing you they wanted to use keep it separate fine one idea for them was to take the note ID of the user add it to the transaction date and the date as a number divided by ten million I think it was so we ended up with a float and then we can use the neo4j indexes sorted feature to find the top 25 transaction that occurred based on this index and I thought that trick was going to be short-lived because in here for a 4.0 we have these new composite indexes and one of the things we've upgraded is now the ability to do rain searches so you can have one equality check and/or one range search for each predicate in the query but I was just testing this out and unfortunately even though we have here's the quality and range query that we're hoping for it doesn't really work as far as making our query faster so I don't know why or what's going on with it but it looks like it's only in the ascending position not in the descending so it's only ordered a certain way and can be flipped so query is not as fast as our a crate was using the index trick that I came up with over here which I think was or is it like 26 millisecond or 1 millisecond to get our answer this is doing it in in 550 but keep an eye out for things that have changed in 4.0 maybe some of the ways of modeling you were doing may not be optimal anymore maybe do some tricks with indexes that will help you that discus didn't help me but they might help you somewhere so make sure that you haven't started playing with what we know that you do and you find anything interesting take a look you know the big change there is the ability to do sub queries using the call so that makes some of your queries a lot simpler or before you you have to do weird things and collect and then do one whines now you can just call it separately and then get back to it so take a look at that stuff and if you want to see when your video is going I wrote a blog post not too long ago called going faster in 2020 that talks about some of our limitations some of our our problems with the way we traverse in our speed and how our physical layout really authors the relationships per second you can traverse even with this idea in your head it's not quite exactly because we do have linked lists everywhere and then I wrote a little sample you know for C to kind of show you what hopefully the next maybe not 4.1 maybe maybe 4.0 at some where in the line of the four point acts will be able to to change the way we store these relationships to make them even faster and now I'm expecting I'm not expecting to go 40 times faster than we are now but we should be able to get at least 10 X that's what I'm hoping for from our developers you know within the next couple of versions of neo4j we shall see if not we're switching the entire company to new for j4c and will we do things in a slightly different way anyway that is a mic and stuff let's talk about questions you may guys you may have um so do have the ability so Lavanya had I hope I'm pronouncing it properly we do with the ability to put their microphones on like the attendees if they want to have live so if you do I guess you could just put the little hand icon and then I'll turn your microphone on and we can just go through it I'm Lavanya do you want to ask the questions live like if you could go back and forth or you could write it in the regular chat if you have a preference and then say it also I hope I'm pronouncing that right and I'm sorry okay so Levani is gonna ask questions live so I'm gonna put her on I'm gonna put her microphone on that way she could you know elaborate on the questions yes so all right I think that okay so oh no I think LaVon you actually have the ability to turn your microphone oysters on yourself I think so you go to the top bar there should be like a little microphone and then if anybody else has any other questions to you can you know just put your hand and then you can ask you can turn your microphone on or you can just ask in the Q&A section okay well she feels that oh I can look at some of these questions go yeah say it is one of the one other one too that just asked a question too it would say it's one is easy it's not about India to have oral conditions it's it's not really do you want to repeat the question just so it sure is it a bad idea to have or conditions on relationship types in your second query so something like a follows : I'm sorry pipe likes so you're looking at both the follows and the likes relationship types and why is it's gonna be duplicated it's not gonna be deprecated what happened was we are forcing you to put colon in front of the follows on likes so the ability to just do the pipe is not gonna work so in other words dis it's gonna have to be written as let me paste it into the chat here so you'll have color photos and colon likes so it's not really deprecated is just we changing the way we're forcing you to do it what happens is the node now has to look at two relationship types but they've to were the actual right thing to do that's fine it's gotta do that then there's nothing else okay the values here couldn't you hear us am i pronouncing your name right yeah yeah do you hear me now yes is Lavanya okay pronouncing it right now I'm actually called by Lavanya in India but I'm used to Lavanya anyway laughing yeah I like better yeah so um I'm not new to graphs I have a graph theory degree back back from Texas and I'm new to neo4j though so my questions might be very simplistic if you well but I typed all of them in the Q&A the first thing you ask is about writing our own rocker graph of atoms in the neo4j platform okay so there's there's two two things here I guess really one is we let you do your own graph algorithms if you want using the neo4j java api and you can do whatever you want there but it's going to be using the neo4j data structures and then you offered a layout in memory which is this multi relationship type kind of layout so it's not the fastest thing in the world for some of the algorithms that exist out there now you have probably seen the the graph algorithms library and and a new one just called the the graph data science library i forget the name changing the name that's should be out in beta now and I think the final release will be in April if I'm guessing correctly those both run on in-memory graphs that are not the new for the data structures but their own custom data structures and I think the first one that was built used two or three different layouts I'm not sure of the one we have now is just just uses a single layer - to run the algorithms are going to be open source so you can see how they did the work and you'll be able to obviously modify it into to whatever you want right now we only have a couple dozen algorithms that we're in that you can use but if you want to try your hand at you know this thing is missing or we're missing the weighted version of this algorithm if you want to add those I'm sure you'll be able to do it it's gonna be more hardcore obviously then then you might be used to because it's not something we we talked about much is barely new right it's only a few months old if idiots been around for twenty years so a lot of stuff we you've seen them done a hundred times over this is this stuff is all fairly new yeah the second question you asked about hyper graphs yeah there is no trick you have really have to create a second node there is a blog post sorry a video from Marvel Comics have you seen that one already yeah I do okay oh yeah the way they do it is is hyper node where it becomes an instance in time on this case they call it a moment in in their video where you have a ton component attached to it and it basically attached everything that I know it and then you kind of go from there there is no other real way of doing it this is just kind of what makes the most sense and using it that blog post was interesting and it actually connected I mean made me look into some of my own graph theory test texts and there is actually a theory that links hypergraphs to what is bipartite graphs where the notes are on the hyper nodes the nodes of the hyper graph are in one side and hyper HS or on the other side and then the the links are placed accordingly so I feel that the blog was kind of inspired by that that relation from the that text that's why I feel that placing an auxilary note in connecting it to the notes that belong to the hyper edge is one interesting way but I it took me a while to understand how one can model it themselves so I was wondering if there is so there is a way we can therefore they can let the users know how hyper edges can be modeled if if I the the bipartite graph maybe that is a way that we can such a Sturm modeling graph models that can be used but anyway that's a long shot I mean we've stayed away from telling people how to model data it's more like you have and then what best works for you because even when we have customers who look like they're the same the two credit card companies with the two banks and they they're looking at the same data you'll still find that they use different models because they have different ideas of how to tackle the problem or different constraints in their environment about what they're doing so it's hard to say this is the right way to model network infrastructure it is very late model financial transactions I never works out the way it really becomes a what are you trying to do and go from there yeah and then you ask another question regarding huge graphs and cipher projections yes I'm I'm asking this in particular because I saw some of the algorithms that are implemented some of them are implemented for huge graphs but if we want for example the direction version of that algorithm we are asked to switch to the cipher version and I didn't know if which one to use when which one is ideal to use okay so utility the graph algorithms library deciphered projections are just a way to get visually to convert to data from you know multiple relationship type multiple node type multiple whatever type into a simpler graph that the graph of items library can understand because the graph algorithms library doesn't have multiple types it didn't in that makes sense but inaudible yeah so it's like I know way to say okay I have this relationship that goes through our hyper node hyper edge in the middle was this ever a node and I want to kind of compress it into a simple relationship between two nodes and then use that as part of my my in-memory graph to do my my queries and we've seen a lot in in financial transactions were you have a user that's tied to the transaction that's tied to a credit card and sometimes you don't really care about the transaction or sometimes you don't care about the credit card you really want to go from music to one of the user to the other so you skip the thing in the middle and you just connect the outer edges so the decipher projection lets you do that you have whatever model you want for neo4j and then convert that into a simpler model for the graph algorithms library now the huge graphs are just it's just a setting on a different way to I think map your data in memory but they're totally unrelated to those a separate projection it's just a big that the thing is okay let me see you other questions we use might be we have two questions in there a regular chat I don't know if you see it so one was Mike Blum was asking about a blog post yeah we call and collect with yeah yeah collect with is a it was the old-school way of doing call basically like an old-school way of doing sub queries right do this thing collect it all keep it around and then do something with it later when you need it do we have any book was on this not yet they should be different well what's gonna happen is with the you're going to be doing almost like a separate traversal really on the side so it might take a little more memory but not much more than kind of keeping the results of the collecting with anyway so I'm guessing they're gonna be comparable as far as performance but that's an interesting thing to look at Paul's question disappeared all he brought it back again how can identify which parts of money if a data structure would be most benefit from some data model analysis I know I could do and explain I was a little worried but it may difficult to know which query should be investigating okay well a couple of things is if you're already running real queries with real data you know what you pass the building stage and you actually have something in running or you can turn on query logging and set a threshold say 3 seconds or 5 seconds and anything slower than that those queries are gonna be picked up you know ok any slow queries I'm gonna go ahead and analyze if you have tons of query especially let's focus on the ones that are that are slow another way to do it is just use the explain and the profile so don't use explain because explain can can get it wrong I would always go with profile profile tells you the real deal like what actually happened how many know it simulations did it actually look at to get the answer and worry more about the time then you're worried about the DB hits DB hits or I'm not exactly all measured equally it's the time that your focus on but while you're there you say ok what is this thing doing how many rows is it bring it back are we doing something twice we can eliminate it you know there are other ways to kind of analyze a traversal and see what's happening I have my dogs we're coming to say hello um and if you get stuck just ping us give us a call I mean I love going through models and tearing them apart and I'm rebuilding them or maybe just tweaking a little thing here and there and to see what we can do to make it better we have tons of experience with models we've seen thousands of them so don't be afraid to pick up the phone and call us you guys know my numbers public and so is my skype in yeah the communities flag too it's like yeah if something that's private you know use messaging if it's something that you don't mind sharing with our community so we can all learn from what you're trying to do then yeah use the mic asks what images still be used within a call yes it's still gonna be just like a normal separate isolated transaction so it's nothing too crazy Sayid also had another question and your night um is there any plan to add profiling capability to a pop calls sometimes they pop calls lets you have much simpler queries but you want to make sure it still performs fine okay it's nothing planned I guess I would say I mean this is obviously Michael Holmes baby so some queries probably easy to profile and and some of them have some statistics you can pull back and see how how much it didn't how much work I did how many retries he had to do so there's some that have already kind of some tracking attached to them Muslim don't easy enough to add if that's really something that's bothering you or slowing you down also remember it's just code so you can just grab that a plug function bring it into IntelliJ or your favorite Java development tool and just literally run it and see exactly what it's doing and maybe figure out what it's doing wrong or what don't you like about it and then changing it or building your own or maybe finding a way to make it better for everyone and saying a pull request in you know Michael loves getting pull requests on a puck so if you have a better idea of how to do something my all means well he loves suggestions - he definitely welcomes it so if you want to you know you can always post him like the ninjas check group because he does he does also look at that but you can also send him a message it was a nice but pull requests are better you know you do the work you just give us a code Paul wants to know if you're gonna be at Graff connect 2020 yeah I think we all have to be there not everyone but a lot but a big chunk of the company max will definitely be there he's a seasoned neo4j err he could do whatever he wants yeah I mean I'll be doing some of the training you get up some connectors you get half the company to talk to so you want to if you want a corner michael hunger and and basically no let him go until he builds a feature for you you can do that right if you want to grab hold of mark Needham or William Lyon and say I want this thing in graph QL goddammit and I want it now but you can kidnap them and make them coded while you're there if you so choose to do something as evil as that but you have access to us right then and there or ABS something where you can't really share in the public forum that's fine but also don't forget you guys are free to email us you guys are ninjas so MaxEnt near forget that comm Michael any other did I come mark can you forget that comm those are going to go right to people in Deborah or myself I'm always open to email some people not so much yeah once it gets lost in his he's got so like sometimes it's better to just message him on slack I think right or you could always ping me and then I'll make sure that he sees ya cuz you don't get a lot of emails that's fine oh I mean I I do but I have my own way anybody else any other questions before we say goodbye you can put the little hand up if you have a question that way you give you time to write it out yeah another thing I told you is don't be afraid to ask for help I mean this is fairly new stuff I know I say nobody is 20 years old but really it has the only gonna mainstream attention in the last few years and some of the stuff we're finding out with you how what the best way to do something is so you come up with something crazy that we haven't seen before I will really appreciate the way I get to learn something new and hopefully help you you know make a better product make a better you know whatever thing you're playing with and then hopefully blog about and get the rest of the community to learn from it so don't be afraid to ask for help the worst thing you can do is run into brick walls and continue to run into brick walls without asking for help just don't be stubborn just hey is there a better way have you seen this before how can we do X Y or Z let us know book we'll figure it out together worst case Lavanya has another question and then Michael black says thank you he says he loves seeing various models and repetition of seeing problems you solved as a field engineer helps them learn and david said they've said ditto he reads that blog post really david dave' said he was only gonna make it for the first half of the talk he's still here Lavanya do you want to ask your question do you you can turn your mic on if you want or you could just type it out that's you and if anyone else has any other questions you can raise your hand and thanks thank you guys so much by the way for being so active in the community because that's it means a lot to us to have you guys helping us so Lavanya said she posted a bunch of questions the online community and how can she expedite answers yeah good question you can always send flowers or chocolate to michael hunger and ask him to to go through them I don't know I think make sure your your posting in the right topic make sure your maybe you ping the people who are most involved in that topic or who may know the most I also remember a lot of our folks are European they have lots of vacation time so they might be out skiing for a couple weeks or who knows what but hopefully somebody will be able to answer your person if you get stuck yep ping people I mean I also post your questions in the Ninja slack group too part of the idea of the program is that we all kind of help each other because there's a lot of people who are doing this as seasoned people and you know we could definitely utilize that so if you feel like you're not getting a question or you want something you know post it on the community site and then you could always ask the ninjas and in the ninjas group actually one of the things we told to some of our internal engineers is that if our ninjas do help answering questions that they will be there to help them Mike if you send me a message on the new foreign on the neo4j slack just send me like a little note I'll add you into the group so most of time we've been asking people for their slack username and if I label I've gotten added but if anybody if any of you guys need to get added just send me a note message on neo4j slack and I'll add you in there so that's it I think good if anybody else this is the last time you could do the hand race Oh [Music] jumping on people so much really I really really really appreciate like being involved and you know being hungry for more knowledge and if you guys have ideas on like how we can make this program better like what you'd like to see like run anything by me like we can always talk about ideas and the best way for us to build like community programs that are going to be valuable to you it wouldn't tell us what you would like to see or what you want more of you know so yeah thanks max thanks for you figure all right bye everyone and we'll send a recording out to to you guys all the people participated bye 