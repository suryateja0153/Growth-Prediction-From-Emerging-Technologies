 welcome I guess we're just right in its bit after four so yeah hopefully you're here to hear about how we use grass and graph QL for Identity and Access Management yeah okay good so I'm Alex Bobby knew I'm an identity surgeons architect and specialist at nolle we're a consulting firm based in Canada but we have lots of clients here in in the US actually have we have a client a couple of blocks away we do mainly and only identity and access management solutions so you may wonder what I'm doing here as it turns out graphs have been quite helpful you know in solving some of our problems and that's what we're gonna explore today now as identity and access management professionals one of the first things we need to really define and make sure we all agree upon is what an identity actually is right what is an identity well at first it seems like an easy question because we all have an identity we all are aware of it some of you might have several I don't know but it's something we are born with and from an early age we we have a notion of it for example when I was a kid of eight or nine years old maybe I was already a huge fan of science fiction right all my toys looked like this and so I would stage like huge battles between all those toys but eventually I would run out of toys so what I would do is I would start integrating more mundane objects into my games things like this for example recognize that evil alien species right yeah I was already quite a nerd back then I had a lot of these things as well yeah smart missiles yeah or the most deadly of all the most fearsome these things they spun really fast you know acted like saws and could go through anything so anyway the point of this is that even at an early age I could easily interchange the identities of my objects and still be able to play at an an understanding of it but here's a trick a tricky question for you can anybody actually give me a formal definition of what an identity is this is not a rhetorical question any volunteers now all right that's right what so this is what I'm gonna talk to you about today first of all is what is an identity we're going to explore that and then I'm gonna give you a quick very quick high-level overview of identity and access management couple slides then we'll look at the problem that we're facing nowadays in that field and see how graphs can provide a solution for those problems and last but not least we'll look at graph QL and how it fits into a solution and we'll have a quick look at the grand stack so okay so jumping in this is basically how we define identity we add nolle and we think that it applies to a lot of cases it helps us figure things out really so first of all an identity is something that has a set of properties I mean this is true for a lot of things but especially true as well for identities cool the second thing is that an identity it's is an entity that needs to be authenticated and authorized so what that means is that it's an actor it performs an action and that action needs to be authenticated and authorized that's probably the most important one actually the third one is that identities are always related to other entities an isolated identity is not really interesting the mere fact of an identity trying to access the resource creates a relationship between them so an identity that would be isolated would be we could just discard that right so what fits into that those definitions what are what examples do we have users of course people are have identities but also smart devices you know your mobile phone but cloud services fit that description as well because they often communicate with each other last but not least IOT devices like for example here we have a smart sensor or example from the smart city with smart parking meters and smart lights all of these are very dense ADIZ so far so good okay so what is identity and access management what are we trying to do so what what is it it's basically identity and access management is basically those three pillars you have identity management per se which deals with identity lifecycle meaning creating updating deactivating identities user account provisioning like creating a mailbox or creating accounts on your apps or in-house resources as well as role management like identities have different types of accesses maybe they need different roles so all that is part of identity management it's basically it has to do with how you structure your data the second pillar is password management so anything that pertains to changing your password updating your password or in case of devices or smart objects it's things like storing secrets or storing certificates and how you manage or handle those certificates the last piece is access management and that is that is what happens at runtime when an identity tries to access a resource that's where we have the authentication and authorization yeah things like single sign-on identity Federation across different domains you have a n factor authentication and all of that so we'll see that we found that graphs really helped us with that with access management so we'll focus on access management at least on this session so access management is made of two main pillars authentication and authorization authentication is like the front gate to your castle is where you ask the credentials of your identities and if you're happy with the credentials then you let them in and once they're in they're in now typically we would store identities the identities in not in a graph but in an LDAP directory this is going to stay but so typically we we see that authentication is performed by elderman not by graph which is fine authorization on the other hand is what happens while when the identity is in your domain is inside so it drives what room they have access to and what to feature they can access and me maybe even what data point this can be as granular as you need it to be so you can specify which specific nodes they can access and so forth and we'll see that this is where the graph play a big role for us authorization so now that you're all Identity Management experts shall we play a little game you'll see it's quite easy we're gonna test your new knowledge so what we're going to do is I'm going to show you some pictures and ask you to raise your hand if you think the thing I'm showing you has an identity okay so firstly now I grew up in the 70s and 80s so the first things I'll show you well populated my universe back then I mean you'll see first one easy everybody recognizes how nine thousand from 2001 Space Odyssey so identity or not ok yeah you guys are right has an identity right how about our two identity yeah okay now a little trickier how about this what is this this is all I can tell where if there's some French people in the audience usually yes this is a minute tell everybody knows what the military is it's basically a keyboard and a screen package in the same box it was created in 1982 and through that you could access some remote services remote servers and the types of services you can access with this thing where things like consulting a bank account buying tickets to plane tickets or train tickets there were online forums there were even dating sites so it was super popular in France because it was really easy to use practically free and really promoted by the French government I think we can safely say that the French invented the internet before everybody else anyway I'm just throwing it out there so what do you think the minitel identity or not actually not it's a dumb terminal the only identity in that scenario is the users let's fast forward a little bit nowadays smart fridge doesn't have an identity yeah how about how about this what is this anybody that's the condenser that lives in the fridge it's the thing that cools your food right does this have an identity anybody well the right answer is it depends well here's the thing remember the definitions does it have a set of properties yeah yeah it has definitely some properties that I don't know anything about is it related to add something well yeah it's obviously related to the fridge because it lives inside the fridge does it need to be authenticated and authorized well that's why it depends if you need this thing to do something then maybe yes so you see it's not quite easy all the time how about that connected vehicle yeah yeah for sure there's actually quite a lot of interesting use keys around the connected vehicle know it nowadays lots of work being done very interesting use cases like if I lend you my car but I don't want you to go over say 70 miles an hour or I lend you my car but I don't want you to be able to open my glovebox things like that so quite interesting last one I have is this about this this is a smart sensor right it's there to measure something that happens in a pipe so like a temperature of flow or pressure and it uploads telemetry data to a cloud service identity yes all right so what was the point of this little game well back in the 70s and 80s the only things that had an identity were basically fictional characters right now we're not even sure if our condenser is in the fridges of an identity so we're seeing a dramatic increase in the number of identities we have to deal with nowadays and therein lies our problem what is the problem well these are a couple of diagrams that I mean these are there's a bunch of diagrams that you can find like that on web and what they show is that an almost exponential rise in the number of IOT devices that we will see by 2020 actually by 2020 they they predict 50 billion IOT devices out there that's a lot of devices that's a lot of new identities just add on the number of humans the number of telephones the number of services and you really realize that you have as an explosion in the number of identities we have to deal with and who says that so besides that we have an explosion in the number of relationships because remember identities are never alone for example our smart sensor here lives in a refinery and the refinery has workers that need to access it and everybody lives in a region the the device itself can upload its data to a cloud service and of course the service is managed by these very smart IT folks right now you can tell why graph sign important to us as well we can represent this as a graph and this is only even a portion of the graph because of course you realize that the admins probably have access to some HR internal systems or they buy some stuff online and the cloud service itself probably manages thousands of devices not just one so as you can see we have an explosion in the number of identities which leads to an explosion in the number of relationships we have to deal with so that's quite new in our field at least the last problem is what I call the API explosion and I'm sure you're all familiar with that every organization nowadays as a bunch of AP is every one of the entities in dive in one of the nodes in that graph or entity types in the graph or node types or labels requires a bunch of API is in order to maintain them so you need to be able to get a user the user needs to be able to change their password etc etc and that's true for all the entities in our graph but again nowadays we've seen that organizations have maybe thousands hundreds even thousands of api's so this is quite a big problem to be to manage all of all the accesses to all of these things right so the problem then identity explosion relationship explosion and API explosion what can we do well the solution of course oh look at that that's ugly so the we propose that graphs provide a solution an elegant solution to our identity and relationship explosion of course I don't have to convince you of that I usually need to convince my identity counterpart but as for the API explosion we propose that graph QL will help that's the logo for graph QL right together these tools form I mean are our tools that we can use in our Dom in our field of identity and access management solution to implement true identity relationship management and I'll reuse that term later but it's kind of a buzzword in our circles there's been quite a bit of failure before with IRM but we we think that using graphs will really provide a solution and provide true IRM identity relationship management and you can see I mean you are graph people we can see all right all that fits in right so graphs for identity so let's say let's have a look at how we use graphs for identity then so well now we don't find it all together so how do we do how do we use it we use it to model complex data we use it to derive real-time access polish access control decisions and some future applications involve analytics I mean we already use some some of that especially for the authentication part where we we found some cases where we can analyze behavior of authentication behavior and and flag anomalies for example a I of course we hear a lot of talk about AI but I'm sure this use cases we can apply to in our field as well so for authorization we need to define access policies access policies are rules that that derive the control that the access to a resource so this is a simple way to model an access policy an ID an identity is related to a resource and you have some verb that usually means you know owns the resource or has the access to the resource or is paired to the resource or something like that so you can easily define an access policy like this if there is a relationship between those two then the identity can access the resource simple let's have a look at another example let's imagine this is our the knowledge behalf of our world we have Bob and Mike our friends right and then Jenny loves Bob now interestingly there's no other video anyway I'll let you ponder that Jenny owns a car it's it's a renault mike owns the car it's a Porsche they are both red cool okay so pretty simple everybody understands this now here's our policy people only lend their car to their friends fair enough here's a question can Bob borrow Jenny's car that's a real axis question right so how do we solve this well I mean we're a graph people we're gonna run some ciphers so we have we need to match a person that owns a car who also has a friend and this is Bob and Mike cause the question is can bob borrow my car and in this particular case we have relationships with the car and we find we actually find the relationships so yes in that particular case if we ask the same question with Jenny and Mike and jenni borrow Mike's car well in that case we don't find the relationship so in that case there's no access right easy enough hopefully that makes sense so moving on let's see a real example this was from a customer we had a couple of years ago I guess now nyow tea manufacturer this work took all those pictures earlier the context is that of refineries they had a bunch of refineries worldwide with hundreds and lots of lots of devices and of course the refinery is a complex environment with people and a bunch of things going on everywhere and so these are the types of devices that we were dealing with there are all smart devices in that they can be accessed remotely or on their own they can upload their data to a cloud service so interesting stuff so what was their problem well first of all a problem of volume as I mentioned identity explosion 500 plus million identity spread out worldwide and as many resources to protect because of course identities especially when when we're talking about IOT devices they also act as resources to be protected at times so they can at times be an identity at times be a resource and it's the same device and they had very complex relationships between identities and the resources and they had all kinds of many crazy rules that they wanted that they need to model and all those all those things were really hard or impossible to model traditionally you know like the directional relationships or you know friends of friends relationships which would lead to a table join explosion you know in sequel I mean and they needed to resolve some path queries like is there a path between a and B type of thing and they also wanted it was one of their bill is to implement a true identity relationship management system through IR M so that's what that's why that was the problem they're trying to solve and of course graphs were a perfect fit for that and here are some of the use cases we implemented using graph for example here as a service or app I need to be able to read data from a device pretty simple that one's pretty simple so I have an identity I can read the device and the device or actually read device it could be is paired with or is registered with so anyway so you get the idea if I have you have this relationship then the service can read the device to revoke that access I can just remove that relationship and it all happens in real time and easy here's another one as a factory worker I need to register a device with the I am platform using a given app so I have a user that has registered with an app and then there's this device out there and I need to be able to pair it with the app and to declare that the user owns it so this is basically what happens and if I have these relationships then I can easily deduce some access policies from that if I need to revoke those policies I can just revoke or delete those relationships right here's another one as a building owner I need to be able to grant access to all or part of my building to certain users for example technicians so let's have a look at that one so I have a building that is made of several areas and in particular floors and each floor has a set of devices and then I have an owner of the building and then this guy here tries to access that floor in order to service those devices so all I need to do here is just add that relationship and from here I can find a path from that guy to the devices so doing something like that with something else than the graph is really complicated right but this is just simple I mean they had much more intricate stuff so putting it all together we came up with a graph model that looked a bit like this now imagine of course 500 million plus nodes like that yeah so moving on so that was how we tackled usually the identity and relationship explosion problems now for the API explosion problem let's have a look at that one we proposed a graph QL but then that's where what talk about that so remember the API explosion problem we had all these entities and all these api's we had to manage and control the access to and all that well would it be nice instead to have just one single endpoint rest endpoint there that would cater to all these entities not only the entities that have now but also all the entities I will have wouldn't that be nice well that's exactly what graph QL proposes actually so what is graph QL I mean before going further if you guys are already familiar with graph QL any show of hands everybody's ok well ok so I'll just go for first on that one so you all know this generic weird language Facebook created it it's a specification meaning you can build your own basically one rest endpoint and works with any back-end store but works greatly with neo4j right so okay cool so this is how it works we have a client I just like this laser pointer it's pretty cool so we have a client with a graph QL client library embedded in it it packages a query that looks like this which goes to a server the server understands the query transforms it into using some custom code here which could be JavaScript or your favorite language into a query that looks like this for example cipher query here to the database the database returns data and the graphical server packages a response that looks like this so here the query was for a user and we requested the UID the email in the username and we got that back in this format which is also standardized who graph QL which is a specification and the client understands that and displays it so to really make sense of the power of graph QL we have to zoom in on the server and if we zoom in on the server graphical works by defining a schema and the schema is made of three things the first being a set of types so these are the types of the object types or the entity types that you have in your database that you are willing to expose to your client so you don't have to define to define in your schema all the times you have in a database only those types that you are willing to expose to the client then you have your queries which are your reads and your mutaters which are your rights so a query can use work to the query you can get your data through the mutator you can update it the mutaters and queries are implemented through resolvers and the resolvers use a your favorite programming language for example nodejs yeah so I'm going to the next slides I'm gonna show you some code hopefully nobody is allergic to code I don't have an EpiPen anyway if and the code I'm going to show you is basically we we had Nala built our own identity and access management platform using graph QL from the ground up running on micro services and all that it's all doc your eyes Dan and everything and so that's what I'm going to show you oh yeah the database I forgot that so again the schema is made of types and so here as I mentioned we wanted to implement true IRM and because of that relationships are first-class citizens so we of course have a type relationship but we also have user types and you know location types device type domains and what-have-you so we have a bunch of type that we define which map two types of data that we have in our database so our relationships have a start label and a start UID and then an end label and end UID and a relationship type the label of the relationship pretty straightforward and we have a bunch of times like this and you see it's just these are just definitions there's the simple code and that's all that the type is the second the second thing in our graph QL schemas are whoops going too fast here Oh queries so these are just a sample just a subset of the queries that we've defined in our graph QL schema as you can see the the queries that they are just definitions if you are familiar with object-oriented languages they're a bit like interfaces it's the contract between the server and the client and it's basically just whoops it's basically just a name and a set of input parameters and an output type so if we look at this one for example can a access be this is a query that you would basically run in order to want to Rick to ask to evaluate the access that a as on B so if you have a being an identity and be a resource you want to check if a can access B basically what we're doing in the back end there is finding the path between a and B and if that past exists then we grant access so for that of course we need the you IDs of the of a and B and it returns an array of relationships that's because more often than not a and B are basically separated by several relationships so we really need a path mutations same thing we just have a set of definitions for the type of things that we can change in our data so you'll see things like a reset password update your user profile create a user activate the profile register your social email and things like that so all of these things as well as the queries need to be implemented through code with your resolvers so here's an example implementation for our can I access bigquery now this is just JavaScript code the only important piece here is this one this row in the middle there what that does is it reads a cipher query from file execute its execute it against the neo4j and returns the returns the the result I mean the rest is just plumbing at this point and the query that we are reading and running is basically that and as I mention we're just finding the path between a and B and if we find that path then we can grant access pretty easy and so this is what the query at runtime could look like we just packaged it like that and run it through our one single rest endpoint for example so this is this is what that request would look like and this is what the result would would look like in this case we just have one single row in our response because it was a simple relationship but we could again it's an array of relationship so we can have several and that find the path okay so now the grand stag now all all this is fine but as I mentioned and as you know graph QL is a specification so you're saying well okay that sounds like lots of work I have to implement all of this stuff myself well no there's the Grandstaff all of the greg stack all of these things have been already done for you all you have to do is use it so what the grand stack is is the integration of neo4j the Apollo graph to our server and client as well as react.js for the client UI framework now these things have been people have new 4j and react I mean a bit they've been working together and packaged everything together neatly so that you can just download this stuff and just get ready and just work on it right away it's pretty good so this is how it all integrates together we have react react JSON the client with the Apollo client library running RAF QL and the Apollo server here running the graph QL server we still need to implement our own resolvers of course and we have neo4j here and that's basically all that integrates together and you can all you can have a look at grant stack not IO and download this stuff and you can just get going yeah I guess I'm reaching my last slide now already so what's the typical road map I mean how do you go about building something using graph QL well of course you start with your business requirements then you define your graph data model so I mean you're all familiar with that you just draw it and whatever whatever you usually do for the graph QL part you need to define the schema and we found the important piece here is to describe the schema in the way your clients will use it again you don't have to define everything you don't have to expose everything you just need to expose exactly what your clients are you know need to expose need to use no more but no less then you implement the back end your resolvers and mutators and you integrate Apollo into the client using react Jas and you're done essentially so that's a bit ahead of schedule I guess that's all I had for you so I guess I have time for some questions if you had any questions so how do I deny access basically so as I mentioned we have relationships so that encapsulates your access if you remove the relationship then you don't have access right all right so okay let's well if you remember the graph we had the building had a bunch of areas well you can for that particular user you would probably create you could infer some relationships between the user and the specific devices I guess or the specific floors you could I guess you could also define deny relationships presumably you could do that if that helps yeah I mean you can store dated data in graphs I mean it's been done you would have date nodes and you would attach the dates to certain other nodes so you can do stuff like that there's articles and blogs about how to do dated data I don't think with you I mean I haven't used that they're like no I don't think we've used that much but why not it is possible though right so in that case so the question was can we grant can use that model to grant access to specific properties so in that case you might you might have to actually export that property and make it a node maybe so you would create a relationship to that node that might be a case where you could do that or else you could three or if you didn't want to do that you could do you could use your resolvers to implement that through code somehow based on the relationships that you already have something like that sure yep is is that they're mainly just like no no you can you can use the same you use the same for both basically so the question was can you use do schema to also protect access to graph QL itself to your breast endpoint and yes you can the the graph graph specification actually advises you to do all these types of authorization in your resolvers so basically your resolvers you could run extra queries to figure this out yeah yeah you're building yeah so so your question is using the graph as your main data source really not just for authorization right right so yeah I mean right now as I mentioned so this as I mentioned dimension at one point the main store right now for identities for for our our world is LDAP and that's not going away so because there's so many things relying on it nowadays but we've been using drafts in conjunction with held up but we started to see some clients that are willing to move more to graph so it's it's in progress I guess I know if that answers maybe I have just one more question over there you were first right so I guess you if you have both if you have two so the question is do you have to maintain the data in several places basically right if you're doing that I guess you do yes you have your LDAP entries with the user account and the password specifically is more for the password that's where you bind but all the access or access management stuff would be in graph so your code or your platform we need to differentiate what type of data you're updating is it access control data and then you update the graph or is it more in authentication stuff or you know and then it's sometimes it's both but yeah you're right it does add some complexity there for sure I think that's all the time I had thanks everybody and your more questions feel free to reach out [Applause] 