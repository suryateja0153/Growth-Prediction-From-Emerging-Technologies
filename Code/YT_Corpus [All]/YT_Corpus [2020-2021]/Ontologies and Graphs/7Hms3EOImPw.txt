 okay we're gonna go ahead and get started here we have a lot to get through today so first up I'm gonna talk to you a little bit about spring Dayton neo4j and we're gonna build an application using this and we're going to use Marvel Comics data so my name is Jennifer rife I'm a developer relations engineer with neo4j I enjoy learning about technology especially neo4j and then I enjoy coming out and sharing that in various ways so whether that's speaking at conferences or blogging about it or any other any other type of format I enjoy getting out and and sharing what I've learned with everyone so this is what we're gonna build today just see kind of know where we're we're hopefully going to get by the end of this session I do have a very limited time today and I do want a live code so we're gonna get get started and kind of kind of dive in but this is kind of the goal of what we're gonna end up with so we need a spring boot application we want to access this via a web page so we're gonna make it accessible from localhost and then we want to be able to search comics so you want a list of those comics to return based on what you search for and so that'll all show up there on the left hand side you can see a little bit more information about the results that come back from that search and then we're gonna look at some details so if a user goes through and selects one of the comics from the list they want to know a little bit more information about that particular comic so you're gonna see some stuff come up an image of the comic maybe the characters that were involved maybe who created or wrote the comic series stories events and other other relevant data with that and then finally we have a visualization of of the data actually in the graph so you can actually see how each one of the nodes each each of the comics or characters ties with other entities in the database itself so this is kind of just the high-level requirements so we need to access access it from a web browser we want to pull the real-time results so that way users can search and if data gets added or removed from the database we pull whatever's current so it's not going to be static data we want to retrieve the details and the connections of a particular entity to display all that information so they're on the upper right hand side where you have the details of a particular comic that's selected you want to retrieve all that relevant information that may not necessarily live in in the exact same entity as the comic issue itself and then finally we want to display that connective network so we can see that information visually and how it's tied together so just a little bit of background on this project why in the world we would choose graph well first off it shows that connected data structure very well so looking at this type of data set or a lot of other types of data sets you want to understand how and why your entities or your data is connected and this is something that neo4j handles really well graph data structures handle very well as they show how and kind of gives some more context to those connected entities it's also very easy for humans to read and visualize so as you can see there on the right hand side this is just a very small graph of people who work for particular companies who like particular technologies and we can kind of see you can see kind of my node there in the center and I have a lot of connections going in and out but maybe you could recommend someone to meet someone else based on they share a similar interest or maybe you can say hey this person can introduce Dan to Jennifer and can introduce Dan to Jennifer because and as is their middle connection we want to pull that relevant varied data so even though you have different entities you don't necessarily want to go out to all kinds of these different tables or documents or whatever data structure you happen to be dealing with we actually want to see only the relevant data that's connected with the entity we care about and then finally neo4j looks very well with the d3 library to visualize that graph data in neo4j which is that visualization that we get on the web page and will all show more of that as we go along so why would you choose something for spring first off it's it's very simple and familiar so you out in the audience here as well as anyone who may come across this it's pretty easy for you to replicate all of this code and be able to do get up and running with the same project also spring boot has is very good at reducing boilerplate so I don't have to write a lot of that boilerplate code which is extremely valuable in a 30-minute session like this next spring data has a ton of integration projects to work with a variety of databases including neo4j and you can connect to neo4j through spring data with our bold HTTP or and better protocol so anything you're used to connecting to neo4j with spring data has that connection available finally we want to create a nice pretty simple UI I'm not it necessarily an expert front-end developer and so I want something that's pretty easy to get up and running with and spring it gives you an integration to timely which allows you to basically run templates and build nice simple pretty web pages without too terribly much involved there which we'll get a look a better look at as we go so the data sets that we're covering today is the Marvel Comics now unfortunately it's not movies however the Marvel it's developer marvel.com they provide an API and they basically just took all of the data from Marvel Comics that they had over the years and the history and just dumped it onto servers and then made it a Matt escape to the door so it's not overly well supported it's not very easy to pull into pretty much anything because the servers are somewhat unreliable but we got it in there and then we were able to use that data in our own database in order to pull that and look at some of those information so just a brief look if you're not familiar with graph are relatively new to graph we had to figure out some way that we were pulling all of this from her breast endpoints so they published it on the API and we had to figure out how do we want it to look in in a graph and so we came up with was a comic issue kind of being that central connecting node to everything else we definitely could have gone with something like character or creator and focused all of the nodes based around that and and absolutely if our data model had cared about creators and how they were connected we we could have definitely done that however we chose that comic issue is really what we care about for for our use and so we're gonna choose comic issues being the central and then relate all the other nodes to that single entity so let's actually look at some code here we're going to build pretty quickly a an application so I'm gonna switch my screen here just so you guys can see bring up this and I want to show okay so you guys hopefully should now be able to see my code window so looking here we're just gonna I've got a basic project again I can totally start from scratch on this I can go out to the spring initializer put in just basically three dependent three or four dependencies and pull in a spring data neo4j project download that open it up modify just a couple of very simple things which I'll show here in just a second and get up and running but unfortunately I wouldn't be able to get through the entire application until I had more time so unfortunately with the time we're in I'm starting from just kind of a pre-built kind of starter project that kind of has some code already in there and I'll walk through and explain as much as I can of it and then we'll go from there and use that of our jump off point so first off just the pom pretty basic we just have the spring boot starter so spring booting you for our spring data neo4j project in there I've included time leaf as a dependency we're going to use that for our web pages we have the web project to allow us to access this over the web and I've included Laubach in here this allows me to kind of reduce my boilerplate even further a shortcut some a little bit of code let Lombok handle some things for me just so I can better demonstrate what what the real value of these applications are and then of course our typical dependencies in there so we've got most of our kind of entities in here already we've got a character entity we've got a few annotations in here which which I'll cover here in just a second when we look at the final entity we're gonna code and then just a few values in here our basic domain class variables and then so we've created our domain class our entity and then we have a repository that's going to extend the neo4j repository and in order to let us access this information from the database and then finally we have our controller which is going to expose a particular endpoint which i've specified here and let us query different types of character objects back so I can I can do a get all characters and basically access all of the character characters in the database so now to kind of wrap this up we're gonna put in we have our character creator event series and story entities all in here so they're all there and again all of this code is out on github you're more than welcome to check it out there in various stages so our final entity is is our central entity the one that ties all of this together so we're gonna actually create our comic issue here create a new package for that and then we're gonna start creating classes in here so we first want to start with comic issue that's gonna be just a regular class I'm not gonna add it to get just yet and then we're gonna start with some of those annotations that I mentioned so first off we want Laubach to go ahead and create our getters and setters equals hash codes and two string methods so that takes care of all of that for us and I don't have to write that kind of boring repetitive code to you guys today then we're gonna go ahead and let Lombok create a no Argos constructor for us as well as a required arts constructor so both of these are going to Lombok will create two constructors one with no arguments at all an empty constructor and one with only the required arguments included the required artists constructor so that pretty much takes care of that that reduces our boilerplate down quite a bit the last thing that we need to include is an annotation to let spring data know that this is a neo4j entity so this is a domain class neo4j works in nodes and relationships and so we're saying this is going to be a node type entity in in neo4j so the first thing we want to do is we're gonna go ahead and specify an ID field as well as say this is gonna be a generated value so we're gonna let in this case you J take care of this particular value so neo4j has an internal ID that it creates for all those and relationships very very similarly to you're familiar with MongoDB they create a unique document ID that's that's generated as well and similar similar databases do do the same so neo4j again just creates that internal ID for each entity next we want to include a another long we've got an ID that's coming from the Marvel API so the reason I wanted to include this separately as an AZ ID is perhaps we want to pull more information from the API directly or maybe we want to do a lookup and pull more details in or maybe want to go out to the API and just display and host you know the API itself and pull the content straight from there and our web application this gives us the ability to do that because we don't have to have to do that extra lookup but by no means is this required if you don't necessarily want there the rest of their information so next we're going to create just a couple of strings here so we have our comic issue name we have the resource URI so this is the basically the path to get to this particular entity on the the Marvel API itself so if you wanted to go out and retrieve more information this will give you the full full path on that and then finally we want a nice thumbnail for all of our comic issues so we want to show that pretty picture of what the comic the front page of the comic looks like next we're going to add in an integer value that is for page count which makes pretty much sense because our comics will have pages and then this one doesn't make any sense at all we're gonna have a double for the issue number not sure why that happened that way that was just what marble gave us it didn't like integer when I tried to pull it in I looked and sure enough it needed a double not quite sure how you would have a a one point two issue but again that's the data we were given so all right so now we've created our comic entities but we need to start tying all of these entities together so in order to do that we need not that annotation we need our at relationship annotation which is going to say this is over we have it we have to go over a relationship to to get to it this other entity so we have tight relationship types in neo4j which basically says what kind of context do these two nodes connect so how are these two notes related in this case we have a comic issue includes particular comic characters particular characters so we could have a particular list come back from this because we could have multiple characters and I'm going to choose our domain entity character just to be where if you do look at naming strategies try to avoid the language types as we did and though character conflicted with the java.lang character which can get really confusing you'll probably see a kind of bunny import I do later that I'll have to go back and fix in order to do that so just kind of keep naming in mind so we'll go ahead and do characters we have to tell it what kind of list we want it to expect and then we need to go ahead and do this connection with all of our other entities in our data model so next we're kind of heading down on the list here so next is creators so our comic issues are created by particular creators so again we have a private list we have our creator there we go and then we're going to just miss a list there are a list and then we need to go on down this next is our events so type our comic issue is part of different events potentially multiple so we're gonna have another list here the event and events I can quantify this ray list and only a couple more type a part of belongs to a series so our comic issue belongs to a particular series or a multiple series potentially so again we have our list value we're going to give it there and again what type of list and then finally last but not least we have our stories so our comic issues are made of various stories could be one could be multiple and so again possible list here with story and stories and new ArrayList ok so that pretty much sets that up we've got our kind of central entity now we've tied it together with all the the nearby entities so next we need to go back to our project over here and create our repository class so we have our comic issue repo and we're gonna create an interface I'm not gonna add it to get and all we really need to do here is extend neo4j repository we want our comic issue here and long there and then we can go ahead and start creating our methods here so in order to do that all we're looking for we're gonna start with just a basic one and we want to find by name so we want to find a particular comic or pass in a string name okay and then we'll want to have potentially finding a fuzzy search so if we don't completely match the search we might want to allow it to kind of return what it thinks might be close so fine by name like and again we'll pass it a name some sort of name value that can search and then finally we want to do something a little bit custom so just like with other query languages with other spring data projects you can use the query language you can use the act query annotation and use the query language that fits the database and so in this case we're going to use cipher so we're basically saying we want to match or find or select comic issue a note of type comic issue with a relationship I here the medal to any other type of node and then we're going to return each of those pieces so the comic issue really is your should any other node and then we want to set a limit here and this is to avoid the potential for someone to come in and return a bunch of stuff to their web browser if you have you know billions of nodes or millions of nodes and relationships you don't want to completely crash your browser with all that information trying to render all of that and so we're gonna kind of set a limit in there so that the user can't accidentally hurt hurt their there their computer and their their performance so we're gonna go ahead and do collection of comic issues and we're gonna say this is called graph and we're gonna give it a per am limit and we're gonna say this is going to be in and let it okay so that sets that up really nicely now we need to go over here create our comic issue service now what this does is this kind of creates an internal API so there would be we have some methods that are going that can go straight to the repository and access the database we have some that might need some business logic ahead of that so you would need to kind of create an extra layer to handle a lot of that business objects so it doesn't clutter your repository class and so in order to kind of keep things straight forward and consistent we're kind of creating this internal API where all of the requests are going to come through the service class and then determine do I need to do business logic or can I go straight to the database so we're gonna go ahead and do that so start there and then what we need to do is go ahead and inject our comic issue repo so comic issue repo and we're gonna call this issue repo and then we need to open the other thing I forgot to do why it's complaining at me is we're gonna let Lombok create a constructor with all arguments in it so that allows us we injected the issue repo it's gonna create a constructor for us so then we I don't have create that that additional code so now we're going to kind of create some definitions of methods here so this is just basically saying I don't want to allow users to write on this method it we're not even gonna look at read or write traffic it's only gonna be reads so it allows it to kind of funnel that information through a little better because it's not having to worry about a potential item so first off what we want here is we're gonna define our get all characters so our get all comic issues so I'm gonna say comic guess you get all comic issues and then they'll just return yes Yuri Poe now notice I can access find all and we didn't even define that in our repository and this was one of those methods that spring provides out-of-the-box for us so that we don't have to mess with it it knows hey if you're wanting to do a get all or find all we'll just go ahead and give that to you can get everything that that it can find in the database so that makes it a little bit nicer I don't have to add that extra method on my repository spring will just kind of handle that for me so now we'll go ahead and look at our find by name and we'll pass in our string yep extreme name here and then return my shoe repo dot whoops there we go find by name passing the name and then here another read-only we've got our this time our potential fuzzy search so find by name like and pass in the name of course and then return should repo dot fine by name like and again pass in my name value we're gonna feed it and then finally before we do the last one I've got one other thing that I need to go ahead and just kind of set up so I did live template this a little bit and that's because it's it's a lot of code and it's not overly relevant to really building the application out so what this basically does is that it's our d3 visualization that we're going to deal with is expecting a certain data in a certain format so I don't know why it's doing that character we want it to look at oh and then we can go down here to I'll come back to that a second so it's expecting data in a particular type of format and so what we want to do is we want to go ahead and format that and allow it to get that all ready to go and so that we don't really have to this is kind of that business logic the extra formatting and things that aren't really vital to our our application code necessarily I mean they are you know what I must have it wrong in there and comic issue over here no I pulled it in there realist did I pull it in wrong here no okay there we go okay much better and so this is gonna format that data into this map that d3 expects and we should be good to go there at least so now we can finally do that graph method finally and so go ahead and clean that up just a bit okay and so finally we're gonna have our map removal we need this for d3 object and then this is our graph and we're gonna have our we need a I don't and this is just gonna be our int limit here confusing too much and then return issue repo dot there's our graph right there and we're gonna pass in what Oh actually take that back so what I need to do is to d3 format pass in the graph and I'm limit it there okay so I don't need any of this kind it's still not happy string object format ah Oh graph I forgot a let's try this again so nope I don't need that to d3 format Oh is she repo dot graph there we go that's what I was missing huh okay I had to access it from the the issue repo first I didn't have a graph method here okay so that is much better there now the last thing we need to kind of put into place is our controller so we have our comic issue controller like that like that and we're going to define this as a controller and again we want our all arcs constructor and I'm going to kind of jump in here and do our comic issue to kind of shortcut a couple of things much better okay so now we need to import a couple of things here so this basically sets up okay so sets up some of our methods for us we've got our fine by name we're passing in a name it's gonna call our issue service again that's our internal API so the last thing we need to do here is set up our request mapping and this is our endpoint that then users are going to hit in order to access this information so then they access the slash comic issues and then they can hit all of these methods pass in a string name in this case and pull back go to the service and and retrieve that information there same thing for a find binding like and we have this bill graph in here now this is basically going to handle kind of that limit value that we want to set so you can see it's going to retrieve that map string object that d3 is going to expect and it's going to call the issue service and call the graph method and it's gonna say if limit is equal to no then use 100 as the default limit so remember I said I didn't want to overload the browser with a ton of data coming back so if I don't pass in a limit on the front end side the user says I want to return this many or that many then we're just gonna set a default to only 100 otherwise we're gonna go ahead and let whatever the user passed in is the limit value to be then the limit of data that's returned so the last one we need to define here is our slash graph slash graph and then we don't need a response body here because we're not expecting JSON so that at response body says I'm expecting a JSON object back just plain data and no big deal but we're not well we're actually going to do is we're going to use one of those time leaf templates in order to get our nice pretty web page and so what we're telling spring is that we want to return a string that is going to be the name of the h2 if I would want to survive so in this case we need our request / am just like we have here require this all scuzz again users can pass in a limit or they don't have to and then passing them there and then we also need the model so this is what's used for the templating and then we need to add an attribute to our model like that and we're going to call little graph I'm going to pass a limit that should be ready to go and then we need to return the string of the HTML file that string that spring is going to serve up for us when it does this so last but not least we need to go over to our resources here and we need to add that template in so we're gonna add a directory called templates like so and then within that we're gonna create a new HTML file we're gonna call this issue's graph dot HTML okay now I know you guys all came to see me write a ton of JavaScript and HTML all that wonderful stuff not really so what I'm gonna do here is just copy in basically live template in a lot of that all of that code so we've got a little bit of CSS up here but if you kind of look down through all of this you can actually see we do actually when when someone clicks on something on the web page you can actually see we are hitting these end points it's passing in whatever they're searching for name and then it's going to render and loop through all of those entities that are going to come back on the front so if I've done this correctly then we should be able to run this and hopefully everything will be served up perfectly I won't have any build errors okay so far so good so let's go over to here and I'm gonna switch screen and he create a new tab so what I want is to show you guys you have him sure okay so hopefully you all shouldn't see this now so if I go to local host port 8080 you can see this flash comic issues it looks like I might have gotten a an error at some point here so I've got a bug no it's not what I want that's Seifer exception syntax variable limit not defined well that's no good okay so here at per am here I think I need I think I need it something here let me look here request for and not behind I don't see any errors so that's confusing okay well just one second [Applause] good thing I have a code pulled up so all of this is published and so you guys are more than welcome to go out there again I have these various starter projects read guys can access this information you can pull down the project if you like copy it that's perfectly perfectly acceptable so see that oh this should be an integer maybe that's my problem that might be my problem okay let's try to rerun hopefully this solves every problem okay go back here and no okay all the code works it's out there on github let me swap and and show you guys where to find that now so let's go back here and back to the presentation okay so with that here's where the source code is this feel free to go out and check the documentation we have tons of stuff on neo4j as well as all the spring documentation on spring site the Twitter DMS down there you notice there's two so we are both the founders of this project so feel free to contact either one of us if you have questions or just want to follow up or see how awesome it is even though I couldn't couldn't get it operating for you today and again of course please feel do feel free to reach out to me via email I'm happy to answer questions or or further the discussion there as well so with that I'm going to take a quick look I think I have Hunger Games slides that I will go ahead and leave up there for everyone and then I will take a look and see if there are any questions here oh do I have an extra comma oh hey someone may have solved it for me Oh correct okay that may help that let's see if I can run this now and if that's the case I actually will be able to show this to you guys which would be absolutely awesome oh it loads okay hang on one second let me share this okay so which screen go to the chrome tab okay so welcome everyone to the completed application thank you guys so much for for looking over my shoulder on that code so this is what the application looks like it is running and you can see I've kind of put in a default value here this is my my favorite Marvel character so I I get to be the one to write the application code so I get to put in my favorite so you can see the list of comics that's coming back here the information the extra details that are being populated for that and of course I can click on the different comics and get the various covers and you'll see that anytime I change I click our graph data is rendering and you can actually hover over here about a little bit of a tooltip so you can see there's a character that note is a character with a name of Beast you can look at these are creators the purple ones are stories etc you can even search for something slightly different so if I wanted to look at just Ironman comics I could do that as well so my search my fuzzy search is working really well and you can see again some of the information being populated some of the data again coming from Marvel wasn't perfectly clean but that's what we were given so great thank you so much guys for catching that so with that then I will put back up the Hunger Games session and then check on the the questions here okay 