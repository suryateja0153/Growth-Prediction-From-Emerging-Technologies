 welcome everyone and thank you for joining our webinar with caliber systems discussing neo4j for total cost visibility for the US Army my name is Marilee and I am part of the webinar team here at neo4j and I'll be your host for today's event we're so excited to have you here with us so a couple of housekeeping items before we get started we invite you to submit questions throughout the presentation using the Q&A tab located at the top of your screen we'll hold off on QA until the end of the presentation but please go ahead and submit your questions throughout and we'll answer as many as we can during our time frame the webinar is being recorded and the on-demand version will be made available within 48 hours with that I'll go ahead and hand it over to Jason's of Gauss key federal account manager at neo4j Jason hi my name is Jason Zukowski and I manage the federal government and system integrator business for neo4j this is our first graphs in government webinar and there is a white paper with the same name graphs in government you can find it at neo4j comm and I invite you to download it to learn more about graph databases with several government use cases including the u.s. army use case that you will hear about shortly for those of you that are not familiar with neo4j and graph databases I will kick this webinar off with a brief overview of neo4j the company and the product before passing control to Preston Hendrickson to tell you how caliber systems is using the o4j to help the US Army achieve total cost visibility neo4j is the market leader in a fairly new database category which we created graph database nearly twenty years ago the founders of neo4j invented the graph database with the labeled property graph model when they had a problem that was difficult to solve with relational database technology about 12 years ago neo4j was founded to create the world's first open-source graph database with the free open-source neo4j community edition we created a massive community around neo4j you can see the evidence of that under the ecosystem on this slot we then created and released the commercial neo4j Enterprise Edition product which has become extremely popular and led to a large graph database market into which several competitors small and large have emerged however none of which have been able to put even a small dent in our market leadership position I will explain what the secret sauce is in neo4j and why others can't compete before we move off this slide however let me run through some of it when I join neo4j about three years ago we were about a hundred and twenty five employees and today we are about three hundred and thirty strong and kicking the growth into even higher gear as we move into to 2020 we have seen more than 30 million downloads of neo4j and we have over 400 customers of neo4j Enterprise Edition we are well funded with venture capital with 160 million in funding today with the last round of 80 million coming in November of 2018 in the second column you can see our strong adoption in major commercial verticals and then some sample commercial customers in the next column and in the federal market Lockheed Martin is one of our large customers DHS is a customer and we have customers throughout the department of defense including Army Air Force and Navy and some small DoD agencies as well we are in most of the big six intelligence agencies and in the federal civilian sector NASA is a big user of neo4j among other early adopters in that site and the partners column just a few of our partners are highlighted of course we have our partner caliber along with Graf aware who our services delivery partners linked curious a graph data visualization partner and the three major cloud providers should we also partner closely with as I already mentioned neo4j invented the label property graph model it consists of nodes relationships and properties the circles on this diagram represent nodes which can have labels such as person and car the arrows represent relationships which have a type such as lives with or drives note their relationships also have a direction both nodes and relationships can have properties which are stored as name value pairs so if we look at the small graph here you can easily and quickly see but there's a person named Dan who is married to and lives with a person named Dan they each have a born property that is their birth date dan has a Twitter handle property and does not and that's okay and owns a car that is a Volvo v70 but dan has been driving it since 2011 so with just a quick look you can see that Dan is a bit of a freeloader living with an and driving her car but I guess that's okay since as we can see they are married you okay so now that you understand the labeled property graph model what is neo4j well put simply it is an enterprise-grade native graph database I will get to what we mean by enterprise-grade and native shortly neo4j allows you to store and query data relationships it is a database that is all about the relationships you can query any levels of depth in the graph in real-time I will get to why and how and you can add and connect new data on the fly it is schema-less you can create new nodes relationships and property types at any time and then just add the data without having to reload your entire database neo4j is a native graph database designed and built for graphs from the ground up providing all of the benefits you see at the bottom of this slide near 4j is not just the graph database but near for J is a complete graph platform Neil for G provides all of the pieces around the graph database to make it easy to build a solution around me o4j starting on the left and going clockwise we have tools for development and administration drivers and api is discovering visualization tools analytics tolling for graph analytics and data orchestration tools at the bottom we provide everything you need around the database the complete graph platform to make it easy for our customers to build a connected data solution on top of the neo4j graph database now why might you want to use a graph database well graphs are everywhere anytime you have connected data and want to get insight into those connections in your data you probably have a good graph use case in this slide we show three different categories of graph use cases we have AI and graph analytics use cases for data scientists breath visualization use cases for business users and analysts and then on top we have transactional graphs that process large volumes of data and feed applications but don't get hung up on only looking at these sample use cases that are well-known for graphs because graphs really are everywhere and more than half of our customers have used cases that don't fall into any of these well-known use cases you finally I want to share with you what is the secret sauce in neo4j first most vendors out there trying to get into the graph database market are simply providing a graph layer on top of a relational or no SQL database neo4j is a native graph database the nodes and relationships are stored natively as nodes and relationships in memory and on disk there is no underlying data store neo4j is the database now along with the native graph architecture we have a concept we call index free adjacency neo4j connects the data at write time as it is stored so every node knows every other node it is directly connected to and how this allows for lightning-fast traversal of the graph providing a real-time response with even the most complex and deep graph queries contrast that with relational databases where every hop of the graph during the traversal requires a join table and an index lookup this chart shows response time on the y-axis and connectedness and size of data set on the x-axis as you can see the response time for neo4j the blue line is nearly flat even for the most complex queries going out tens or even hundreds of hops and the largest data sets now look at the grey curve for relational and other no SQL databases once you get beyond two hops and as the data set grows the response time goes up exponentially neo4j x' native graph architecture and index free adjacency thus often provide a 1,000 times advantage or more bringing your response time from minutes to milliseconds even with your most complex queries on very large data sets why does that matter well in cases where you really need a real-time response for your end-users you can have it real time response that you could not achieve with any other solution and in cases where you're doing batch analytics you might be able to update your analytics several times a day or daily instead of every few days or weekly and now I will pass it over to Preston to talk to you about achieving total cost visibility for the US Army using neo4j Preston hello everybody thanks Jason for introduction hi my name is Preston Hendrickson I work about caliber as a systems analyst for about 24 years now so I want to introduce to you a use case that our particular customer for the army so let's get right into it so this is our requirement from the customer so we have built the system to answer these types of questions everything from paying the programming down to support cost primarily concern the support cost important maintenance but we do get randomly periodically questions about for example cost-benefit analysis that will prove on historical data information we also do at the wider scope businesses like this it makes sense to do something we also help those kind of analysis in the form of we provide either cost factors or historical data cost maintenance costs and we're gonna go through most likely six other type areas that we like to call our vehicle of life so let's do that let me explain the great circle of life so this is what I personally have Nam this nomenclature critical life so we go from weapons definitions to force structure to inventory requisitions maintenance and ammunition so total cost visibility to us is each one of these areas have cost and cost drivers that help I guess build how we spend or how many track cost and from operations I mean this perspective some things you are not going to see in here for example in for structure you're not going to see personnel cost that is tracked separately military pay is a little different as well as in maintenance we do show contractor and civilian costs in terms of government civilians and military costs for maintenance specifically so we'll tackle the first one so what this definition one of our primary products is a weapons definition any price explosion so here we have a tank and each part of that tank is labeled well if we strip that tank out and pick up two individual parts on the right we can put cost not only for not the acquisition cost I mean you can't take the cost of all the personnel together so you have the cost of a tank is more so the cost to maintain the thing this is the portion that happens after acquisitions does their part so each particular part in each thing that goes down from the panel down to the ball bearings temperature nuts and bolts can represent it in the graph what that looks like so here we have an example with the looks light in the graph this is a real snapshot from real data so on the right hand side I will describe this little engine part to show you what the part on the Left represents so the very far right you see there's like a 19 a small casing year so you have nut 20 that hits on wing washer 12 but on the far left you also see the same you watch the 12 also it's not 11 on the left-hand side what we have is that light blue is our lens light the medium blue which is a slightly same size circle or nose in this particular case are our components and then the dark blues a slightly bigger nodes or bunch of weapon systems but we have as a bottom-up approach this is a picture of what system that components this that lens like fit on and immediately you can see some patterns and therefore J is basically as Jason recommended or stated that relationships are key so if I see on the very top far right where we have a cluster and weapon systems that share commonality between four components on the far left is the same pattern I see four components shared by another small cluster working systems then I can immediately say I'm gonna shop manager floor with this perspective I want to minister I had those parts in stock because they are going to be critical to readiness for those weapon systems not to mention they can be interchangeable parts and I want to make sure not only do they just fit but they do that over time so we do track a project ocean for each weapon system from bottom up and we do a top down representation that also includes the cost for that particular part how it fits our relationships and how many they fit on for example a particular lens line they fit four times on a Humvee or may fit in 8 or 10 times on a Stryker so we do track those in terms of quantity relationships interchangeable parts as an explosion is it's one of our deliverables so this is a purse explosion look of how do we do a bottom up look on how do we track each part that builds a system it can be a tank it could be something as small as a desk so we also track the material catalog for the army which is 1.8 million parts we track that per month moving to the next portion of our circles for structure this is a typical example of how the Army is structured but build army down to a squad and as you go up or down this sliding scale we have an example here of a Stryker team and if you look on the left so we gauge half three to five battalions the times have food about companies and you can go downwards this is one example how I preferred a can be set up so we have a couple of companies intelligence company we have support companies engineering companies and infantry towns on the bottom so this is nothing new you can pull this or you can grab particularly this is free informational for government information off of Google you can comes to a search and get this not you're gonna see the days come proprietary this is they think I represent the information so that's easier to digest okay so inventory has a picture like this so in the real world the army owns things so on the bottom right they Ostreicher this is what people normally see in the real world they see on the only thing strikers guns and a Mo's but what they typically don't see is that the army also owns and maintain that operates warehouses stock levels they operate and maintain not just a gun but the practice they fit on so they complete inventory is a lot more going on behind the scenes so we do track so this is what this looks like in terms of inventory so on the right hand side we have our small units and they own thing so on the far right of grey nodes is how a unit owns non-working system things that could be the desks that could be warehouse the lanes the racks chairs literally anything that they aren't if the unit needs to operate on the left hand side as a unit that owns weapon systems this is a depiction of particular brigade that owns different types of weapon systems and they're not just tanks it could be something as small as a gun and pistol it could be something as a rocket launcher so there are different types of equipment that are deemed as booking system but there are some that are not some could be rolling stock some cannot be rolling stock so just the matter of a client business tool to determine which is which and says the Army has a cantilever 1.8 million parts we try to identify those rules submitted to us this is the the highest level look up inventory and it's you can go to requisitions this is nothing fancy but there are some pertinent things in here so as a graph database we can just take one line of information they say this is a requisition line and we can parse that out and break it up into different colors and then we can relate those to each other so this is an example of how the army orders parts so it's the requisition line at Ineson the third is the fourth portion but light blue that is actually a part number so we can actually take that and we put representations so we go to the next line we can see how the army does this ordering on the left hand side we have that little smart unit than one isn't getting yellow the orange on the weapon system and that system has different parts to fit honest a little light blue parts well every time in requisition is place those light blue parts have ordered so for example in the far left you have two orders for the st. part well over time you can track that by quarter we can check that by here everything to roll-ups so that one line of a County that says how or apart we can track it this way using one line so each part of that line is broken out of informations the part on the right is the same depiction except it tells me who paid for it that's the activity the account itself so any an activity can support multiple orders for the same part for a different unit or it can support multiple orders for multiple parts for many different units just matter how we do the depiction in this case we chose the simpler of the examples so we have a unit on the far middle of something a little smaller now but you see two lines coming out of it that's because then you need only weapon system in two different time periods and we contracted order to separate the system across time for both time periods using relationships that are built in the requisition itself so look at the great circle of life if I know the weapon system which is the dark blue I know the part that fits on it which will be the light blue and I know the unit that owns it is for structure I know the inventory that they have which the recent shifts to the dark blue and I can tell you what that ordered for versus requisitions and it who paid for it so that great stuff Laflamme I started to build on ponies basically trying to build upon itself so I'm gonna move over to maintenance you mean it's a little complex I'm gonna come us a little slower because it's not intuitive so on top left you see a difficult depo warehouse where different things can be maintained at the same time so for example in one Bay you may see a tank another baby may see a striker so there are different types of parts that are needed in any given time on the right hand side it's not just about a warehouse we building something it could be something as simple as a wash brass which is what you see in the table right so in terms of maintenance there are three things going on it's not just the equipment it's the maintenance that's be performed on it and that personnel is doing it so as I said before in the beginning that we do check personnel immediate only in terms of we check the contractor civilians and military and the cost of dust and maintain it and how long it takes so let's break that down imma try things a little slower on the left-hand side of the simple example so we have our same unit orange and almost a weapons system the purple nose are the maintenance requests so now I have a Magnus request to use a part to fix a system that is the simplest version of a maintenance because on the right it gets a little complicated so we have different kinds of units here in the middle we have a unit that has revelation ships this means this is you need to actually perform the maintenance there are the rich Turner's they take up the casings and do the cleanings on the outside but the percolation ships this unit made the request see how every unit it makes a request or part before maintenance on a weapons system and I was performed by a different unit which is a little hard to say or the bottom right you see some units can be both this particular unit make the request and they actually get the service important and this follows us fine all right so in terms of patterns the unit that makes the request and the unit performs the question you check the cost of both and we also use the same patterns to depict issues with the data um so we purposely move some information to to prove this point in the situation where you had a weapons system that before me his own weapon system no you don't see that you wouldn't want to say I'm gonna pick a tank and put on my mother tank what normally happens is a part of a tank is put on to use maintenance of the tank so for example I may be when I take the the tank tread or take the turn off one tank and perform name is to replace another turn or a different tank we would normally want to see is not the what this is misto we want to see the actual part we want to see that's what I think they got used the tenth part I want to see the a light-blue note it actually has the information for the thing that actually got replaced not the whole weapon system not to mention know what miss system and maintenance should be not owned by Union a particular example these two other systems you do not see wish it shipped directly to a unit so this would be an example of a unit that is non owned or non accounted for so this will be what we consider to be a bat pattern we would defy this and send this back to the big new shop and try to get more clarity to figure out what happened so we can actually relationships what's with isn't the data you actually look at it and just by eyeballing it tell us something is wrong looking data so we can be both at the same time and the mission is the most complex some type of ammunition is two parts how do we read it and how is actually implemented throws it away again in which I don't click again ok so we have here an ammunition example using a tank so on the top left you see bullets and that that looks pretty ok but with people look at this they think ok the tank shoots bullets that is not true but take uses bullets it does not fire the bullets each mechanism on the tank actually fires the bullet this is how you read this this Abrams tank uses a Mo's type 1 2 3 & 4 but it's the gun that fires ember 1 the grenade launcher fires ml 2 and the turret parts and will 3 & 4 it looks like on the right is I have a unit there on this weapon system that has this fine mechanism so the relationships the equipment system uses a Mo's 1 & 2 the fire mechanism actually fired for animals wanted to use an example on the top right the top 2 with bullets but on the right you also see that the same part can fire 3 different types of ammunition but my necessarily mounted to this weapon system for example this particular ammo can be used on weapon system but it may not be able to be stored on their tank may not be in their storage space so if you take this particular app arrest a fireman isn't like a gun per se if it's not under a different weapon system then yes there will be their fires do you want to see as a triangle so the top middle a witness system at our demo used by the tank fired by this part so this triad which we want to focus on the next slide and there's three use case that's what I try add make sure the there we go delays working you know we're gonna take the far left and explain that three different ways to be the Trier so you have a unit in the middle obviously a little orange so this doing that expends money on this mo and of course all those things just when you see on the left side safe fighters so this is an example where a unit expends money on our position that fires mo going to the top portion of this you said we human extends ammunition for this system that fires and uses the mo so an example of something that does both fires and uses this is an example of a rocket launcher but actually our Z uses animal at the same time directly to the right of that is example we saw in the first slide as a tank so this is a unit X bins ammo or rep assistant uses the ammo and if it certainly fires it it just uses it so on the Left through have a fire that's gonna be a gun in the middle top that's gonna be a rocket launcher that fires and uses on the far right you have their tank to actually just uses but you want to see is the triangle you see on the right hand side at the bottom you have a unit and weapons system that fires or uses ammunition that they have ended money for and in the middle of that you see a whole bunch of lines there if you read one of them it says ohms 2014 for so if they say this means that this unit on this ammo I'm sorry on this weapon system in 2014 quarter for that they expended my face expended money for the ammo a users in fires on the weapon system so that Triads what you looking for anything other than that that means an ammunition can either a be used and not fired or it can be fired and not use on music or weapon system and we do track that we do have several reports that we give back an army that says well this unit expended ammo for what my system that they did not get used on and then we could track that back and figure out what happened with their cane exercise was was a wrong and we'll order we can do all kinds of things like that that's very rare it's extremely rare that that happened but we do see that and we do track that and effect or corrections when we can make corrections and send it back out so I think we can this is the complete circle of life we miss for structure which how to dive back into I would go through some questions and answers but for now I'm gonna turn back over to Jason's having go back to that slide I can think of our left office so that there's no dead space is if you can take over and I will go back to that laughs and I can find it Thank You Preston it's actually Marilee who's gonna come back on and I just wanted to say that was a great visualization of the cracking technology and we are gonna be taking questions now so please go ahead and submit them in your Q&A tab we've gotten some throughout the presentation so I'm going to just start with one we received and it says can you describe how you got started transitioning from your old database to neo4j absolutely um it's interesting uh I walked into a meeting one morning and the boss was like hey guys you gotta get off this thing we gotta move something else so we must my main thing systems of graph database system and the first thing we did so even they did a very good job they hand held us for a while they are very adamant that making the success of their customers so as a new customer we were already shaken off boosted we are a sequel server or alkylation database kind of shock so they handheld us well we got trained on how to rethink it how do we change our minds and then we went straight to it we started doing in white boarding so we do circles and lines and we actually went through several sessions and they walk their through how to not only how do we see the data differently but how do we make that small data set into a reality we ran queries against it and then we started getting bigger and bigger and bigger and we got self-sufficient they were able to become more of a support role than necessary drive and roll so it was a very good experience for us excellent okay we have another one that came in um let's see can you just fry programming and neo4j absolutely new pj has a vas developer's kit so we started off I'm actually on two different parts so there is fiber which is actually the I guess equipment to your sequel in super server or access at Oracle Pfeiffer is the language for a graph databases in year four J so we was able to be trained on how to write site for how to get data out and in and then on top of that of course grows your application so to mirror the - there's our developers kids and they're our driver it allows us to interact with Seifer so we have fibers for c-sharp there's Java Ruby so I mean there's pretty much almost anything you think of Python so for us we were able to take different person applications so in our case we have C sharp Python a lot of relational databases so we sitting on top of that and we do our direct processing so we utilize their driver kids and we utilize Seifer to do all of our programming so that no matter who's in the seat they feel more comfortable in their environment excellent let's see here what is the user interface for the system is it something users interact with or is this a report generation tool of great questions we have three different types of users for a customer we literally took this and embed it into a website for our Incheon analyst we custom-built we have websites we have form applications whatever that particular analyst works best at we have created custom front-ends for that role so it is very very flexible you are not locked in to any particular interface you are definitely free to use a single application if you want to one case if you're free to use a Python script running and Jupiter notebook that works it's just as fine as well it is very adaptable to use either great thank you and there are so many questions to scroll through people doing my best here let's see um for the case study did neo4j enable new forms of analysis not previously possible case study um great question Sonia J always you is always evolving when we first started we were neo4j version 1.9 something like that I mean we barely had an interface who were doing a lot of coding but now it is amazing so there are interfaces popping up the technology is vastly growing as a newer version coming out later this year I believe I'll let Jason talk to that so once you bought in I want you to tune into the back database world you're not stagnant it definitely evolves and it evolves rapidly if you a great job on their websites tracking the change set so you can see what's the plan was coming up next what made the cut I didn't make the cut so the communication is amazing I hope I answered your question correctly I think the I think the intent is you are not left holding a bag if you're jumping into this realm right no one wants to be left holding a bag for sure okay here's another question we have time for about one or two more and let's see here can you make different zones to compare the objects uses or need it from the budget can you graph to see how much money it costs each unit in years I think I'm interpreting that question for excellent yes I think so the question is it sounds like this basis is a run analysis so yes my requirement just like any other database you can do roll-ups and drill downs so cost driven cost drive so my bottom up take individual cost and you can do some than averages and aggregates going upward and same going down in our world our requirements we do have different time periods per data source for example we can report daily monthly quarterly and yearly or maybe do ad hoc and any given time because our processes are ran in a way that we're not locked because our database that you can dynamically be factored live in the graph so if a you have a data file that comes in monthly you can refactor your graphing in terms of time and get daily which not a bit long as the data is inside of your data feed you can refactor very easily quickly and get new answers out of the same data in terms of time both answers your question and that's great okay so we're gonna take one last one and then just so you know if you've answered if you've asked a question and we haven't answered it we will follow up with you directly we get and we get a file with all the questions that were asked by persons and we can follow up with you and answer your question directly so I just wanna let you know that so you know I always like to leave with lessons learned so let's let's do that I have a question here and what were some lessons that you learned from your transition learnings are always good Oh outstanding question so number one list is learned so we walked into those your your first day and looking at beautiful day and you have Oracle sequel server access the ladies mind the first lessons learned is do not underestimate the amount of time you may take trying to retrain your brain some people got it immediately some people kept trying to put the relational mind around a graph structure and it just doesn't work you have to really walk in check good day too many thoughts at the door what if there's a new kid in the block you need to relearn and rethink how you work with data the second thing is estimating time is different processing times are something different so we used to take time and go into a relative example we used to take we had a weapon definition that got down to like eight or nine degrees basically eight hocks away well in the sequel total world you have to create join and join tables and at design time you have to know that for every joint hop you gotta do is minus one joins in relationship world you can create that eight level detail drill down of a process Explorer and run that with one query and then your minds like well how you starting asking yourself how and why and it's just the nature of how it's designed so do not underestimate that you can't transform one for one for a graph to a relational and back or vice-versa it is just different you have to just retrain your brain that's it the most amount of lessons learned topics least amount of pandu Oh interesting thanks for thanks for sharing that experience I mean there are some some things that people don't even put into the transition phase and just retraining your brain I would think would not be one that think people would think of a top of mind I lost that last second say last part again oh you're good I guess that kind of about my head for seconds well that was a that was about it for time for a QA we want to thank both Jason and Preston for being with us here today we will be sending the recording out so check your inboxes in the next 48 hours hopefully before that for a link to the the recording and thanks again for joining us and have a great day thanks so much thank you 