 Let me show you how to use the Scatter Plot task that's included with SAS Studio. In the Tasks and Utilities section in the Navigation pane, I'll expand Tasks, expand Graph, and double-click Scatter Plot to open the task. On the DATA tab, I select the data source and assign roles. I'll click the Select a Table button. In the SASHELP library, I'll select the CARS table, and click OK. Notice that SASHELP.CARS is displayed in the Data field. Next, I need to associate columns with roles. Notice that I'm required to assign columns to the X and Y axis roles. For the X axis, I'll click the plus sign and select Horsepower. For the Y axis, I'll select MPG_City. As I'm making task selections, SAS Studio is generating a program for me. I'll click the Maximize View button to focus on the task and code. This code includes an ODS GRAPHICS statement and an SGPLOT procedure step. I'll click Run, and I see that the scatter plot is displayed on the RESULTS tab. To further enhance the scatter plot, I'll use some of the options on the APPEARANCE tab. I expand Title and Footnote and enter the title Vehicle Statistics. Next, I expand Markers and change the symbol to a Filled circle, set the size to 12, and set the transparency to 75%. I'll scroll down and expand Graph Size. Then, I'll change the graph width to 5 and the height to 3. In the generated code, you can see that the program has been updated with additional options and statements. I'll run this version of the program. The resulting graph is smaller and more compact. Notice that it includes a title and uses filled circles as markers. The transparency enables us to easily see the density of the markers. At the top left, there are only a few markers, and in the lower part of the plot, the markers are more densely packed. The density indicates where the action is in your data. I want to add another column, so I'll return to the DATA tab and assign Origin to the Group role. On the right, I'll click the CODE tab. In the updated program, notice that the GROUP= option now appears in the SCATTER statement. Now I'll run the program to see the updated results. The new scatter plot contains transparent circle markers, which are colored by origin. The legend below the graph defines the colors. We can easily move the legend to the unused space in the upper right corner. On the DATA tab, I'll select Inside as the legend location. When I run the modified program, the legend no longer uses space below the graph. Instead, it's displayed in the empty space inside the graph, which gives you more room for the graph information. Now you've seen how to use a Graph task to create a scatter plot and how to use options to customize the task. I'll show you how to use the Series Plot task that's included with SAS Studio. In this table, SASHELP.STOCKS, we have a historical record of prices for three stocks: IBM, Microsoft, and Intel, for a period of 20 years. I'd like to see a series plot that shows the trend of the prices over time. In the Tasks and Utilities section, I'll expand Graph and double-click Series Plot to open the task. I click the Maximize View button to hide the Navigation pane. That gives me more room for the settings, code, and results. Notice that the SASHELP.STOCKS table is selected. If I wanted to use a different table, I could click the Select a Table button to navigate to a library and select the table. I'm required to provide columns for the X and Y axis roles. I'll click the plus sign next to the X axis and select Date, and I'll assign Close as the Y axis. That's all I need to do. As I make selections, SAS Studio is writing a SAS program that includes an ODS GRAPHICS statement, a SORT procedure step, and an SGPLOT procedure step. I click Run to submit the code and look at the chart. The series plot is displayed on the RESULTS tab. It's an interesting plot. I know that there are three different series, but I didn't select a group variable, so they're being treated as one series with no way to distinguish the various stocks. I need to define a group variable. For the Group role, I'll select Stock. Notice that the program has been updated to include this grouping variable. Watch what happens to the plot when I resubmit the program. The plot now includes three separate series. We see the monthly closing price for each stock over a period of 20 years. As indicated in the legend, the blue line represents IBM, the red line represents Intel, and the green line represents Microsoft. Let's look at some of the options you can set for a series plot. I'll click the APPEARANCE tab and start by adding a title. I expand Title and Footnote and then enter the title Stock Close by Month. I'll also change the graph size. I'm going to make it smaller: 6 inches wide by 4 inches high. It's clear that the X axis contains dates, so I don't really need the Date label. To remove the label, I expand X AXIS and select No label in the Display label field. The program is updated based on my selections. I'll go ahead and rerun it. In the results, we see the title, Stock Close by Month, and we see that the X-axis label no longer appears. The chart is looking good. With the title Stock Close by Month, we really don't need the Y-axis label either. I'll expand Y AXIS and select No label in the Display label field. I'll run the program again. I can see that removing the Y-axis label was just what I needed to do. I hope these tips help you create and customize a series plot in SAS Studio. Let me show you how to use the Histogram task that's included with SAS Studio. I'll start by selecting Tasks and Utilities in the Navigation pane. Then I'll expand Tasks, expand Graph, and double-click Histogram. The task opens in a new tab. I'll click Maximize View to give more room for the settings, code, and results. I'll start by using the DATA tab to define the data source and assign roles. First, I need to identify the table I want to analyze. I can use the Data drop-down list to select a table that I previously accessed. I'll select SASHELP.CARS. If the table did not appear in this list, I could click the Select a Table button to navigate to the library and select the table. A histogram is a univariate distribution and has only one required role, as indicated by the red asterisk. I'll assign MPG_City to the analysis variable role. On the right, SAS Studio generates a SAS program based on my selections. I'll click Run to submit the program. The histogram is displayed on the RESULTS tab. You can see that it's straightforward to create this graph to visualize the distribution of a variable. The histogram shows the distribution of mileage for all the cars in the table. The default number of bins is determined by the system, and the procedure determines the tick values -- in this case, 20, 40, and 60. I'd like to see how this data is distributed compared to a normal distribution. On the APPEARANCE tab, in the Density Curves section, I'll select both Normal density curve and Kernel density estimate. Reviewing the code, I see that those options now appear in the SAS program. Let's run this and see the changes. Notice that both curves and a legend are added to the graph. Now let's set a few more options for the histogram. On the APPEARANCE tab, I'll expand Title and Footnote, and enter the title Distribution of Mileage. I'll also expand X AXIS and select Show tick marks at bin midpoints. Again, I can see that the code is updated. After I run the program, notice how the X axis displays labels at the center of each bin instead of having a linear axis as it did before. I'll make one more change on the APPEARANCE tab. I expand Bins and select Specify number of bins. Then, I set the number of bins to 20. I'll run the program again. Now we see more bins and more detail. This data happens to include hybrid cars with high MPG_City values. Suppose we want to focus this histogram specifically on non-hybrid cars. Back on the DATA tab, we can apply a filter. I'll click the Filter button, enter type ne "Hybrid", and click Apply. When I view the code, I see that the appropriate WHERE condition is added to my program. Let's run the code one more time. Now, when the hybrid cars are excluded, we see a more normal distribution instead of a right-skewed distribution. As you can see, the Histogram task makes it simple to see the distribution of your data. Let me show you how to use the Bar Chart task that is included with SAS Studio. I'll start by selecting the Tasks and Utilities section in the navigation pane. Then, I'll expand Tasks, expand Graph, and double-click Bar Chart to open the task. I'll maximize the task window for a little extra space. I use the DATA tab to define the data source and assign roles. First, I need to identify the table that I want to analyze. From the Data drop-down list, I can select a table that I previously accessed. I'll select SASHELP.CARS. If the table did not appear in this list, I could click the Select a Table button to navigate to the library and select the table. A bar chart has only one required role, the category column. To define that role, I click the plus sign and select Type. That's all I need to do. On the right, the SAS program that is generated contains the PROC SGPLOT step. I'll click Run to submit the program. A vertical bar chart appears and shows the frequency count for each value of the category variable. In this case, there is a bar for each type of car. That was a good start, but you can do much more with the Bar Chart task. On the DATA tab, I'll assign Origin to the Subcategory role. In the program, the group=Origin option is added to the VBAR statement. Back on the DATA tab, notice that the default measure is a frequency count. I'll select Variable for the measure and then MPG_City for the variable. The measure determines the height of each bar. The default statistic is Sum. I'll change that to Mean, which is more appropriate for MPG_City. It's time to run the task again. Now the group values are next to each other. The legend defines the bar colors, and the bars show the average MPG_City by Type and Origin. Now let's make changes to the overall look of the graph. On the APPEARANCE tab, in the BARS section, I'll select Show labels. I'll expand Details and select Sheen in the Effect list. Next, I need a title. I'll expand TITLE AND FOOTNOTE and enter the title Mean Mileage by Type and Origin. I really don't need the label Type on the category axis because each group has a label. I'll expand CATEGORY AXIS and select No label in the Display label field. Notice that the code was updated based on my selections. Now I'll run this program. As you can see, I've enhanced the report by using a descriptive title, displaying the average values at the top of each bar, and removing the label on the category axis. Now you can use the Bar Chart task in SAS Studio to effectively display your own data in a graph. Let's see how to use the Bar-Line Chart task that is included with SAS Studio. I'll start by selecting Tasks and Utilities in the Navigation pane. Then I'll expand Tasks, expand Graph, and double-click Bar-Line Chart to open the task I'll click the Maximize View button to focus on the task and code. On the DATA tab, I'll define the data source and assign roles. In this case, I'll use the drop-down list to select a table that I previously accessed, SASHELP.CARS. If the table did not appear on this list, I could use the Select a Table button to navigate to the library and select the table. Required roles are indicated by a red asterisk. To define the category column, I'll click the plus sign and select Type, and click OK. For Bar variable, I'll select MPG_City, and for Line variable, I'll select MPG_Highway. Notice that the statistic for both variables is Mean. I'll go with that choice. SAS Studio creates a SAS program that is based on the selections. I'll click Run to submit the code. Let's look at the resulting bar-line chart. The graph includes two response axes. The statistic is the mean. The legend shows that the bars represent MPG_City, and the line represents MPG_Highway, both by Type. Now let's set some options on the APPEARANCE tab. I expand TITLE AND FOOTNOTE and enter the title Mean Mileage by Type. I'd also like to clean up the graph a little. The category axis indicates the type of car, so I don't need the axis label. To remove it, I'll expand X AXIS and select No label in the Display label field. I'll also expand Details in the BARS section and select Gloss as the effect (or skin). Notice that the code has been updated with my new selections. I'll click Run to look at the graph. The bars now appear with the gloss skin, the Type label is gone, and the descriptive graph title is included. This looks good, but within each category, I'd like to see the origin. So, I'm going to add a group variable. I'll return to the Code tab so that you can see the changes to the program as I make them. To add the group variable, I click the DATA tab and select Origin for the Subcategory role. Origin is added to the program. I'll click Run to submit the code. A legend is always displayed when a group variable is used, and the legend is outside the graph by default. I'd like to make a few more changes. On the APPEARANCE tab, I'll expand BARS to find the option for specifying a custom bar color. This option is unavailable when you specify a group variable because it would not be helpful for all bars in a cluster (that is, all groups) to have the same color. So, let's remove the group variable. On the DATA tab, I'll click the trash can button that is associated with the Subcategory role to remove Origin as the group variable. Now when I go back to the APPEARANCE tab, the Set color option is available in the BARS section. I'll select the check box and then choose a bar color. I can also change the line color, thickness, and transparency in the Lines section. I'll set the thickness to 10 and the transparency to 50%. I'll run the program again. In the results, we see the new bar color. The bars display MPG_City, and a thicker, transparent line shows MPG_Highway. Now you've seen how to use a Graph task to create a bar-line chart and how to use options to customize the task. 