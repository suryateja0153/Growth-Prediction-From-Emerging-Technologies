 Hello everybody! My name is Ataka. I'm a PhD student of robotics at King's College London. So, in this tutorial on Robot Control using ROS we are gonna start with an introduction to the tutorial in this first video. So, before we delve into the detail on the tutorial itself, we are gonna try to explain or describe regarding the key terms that we use in the title of this tutorial which is "Robot Control using ROS". So, the first key question that we're gonna try to answer is "What is robot and robotics?", and then "What does it mean by robot control?", and then the third one is "What is ROS and why do we use it?", and then lastly "Can we control a robot using ROS?" SO, in regard with robot and robotics, I took this definition of robotics from Springer Handbook of robotics, edited by Professor Bruno Siciliano and Professor Oussama Khatib. So robotics is the name of a science which studies the intelligent connection between perception and action. So the science of robotics has been developed in the last 30 years or so and it basically learns how to actually connect between perceptions that we got from sensor into an action that we translate into an actuator. So in that sense what doest it mean by robot or robotic system is a system that is able to extract perception either regarding the robot itself or its surrounding environment using sensor. So that is the first point of robotics. And the second one is it needs to be able to execute action which can be a locomotion or manipulation using actuator. And the third one it needs to be able to intelligently connects between these two things, between the perception and action using programming, planning, or control architectures. So I don't want to spend too much into explaining these terms to you, but this is just to give you an idea of what is a robot and what does it mean by robotics. OK, so the next question we're gonna try to answer is: "What is Robot Control?" So, we already explain about the term "robot", so now we are gonna ask the question "what is control?". So control, in short, is a way to make a system behaves as expected. So in term of robotics, this can be a lot of things because we can... we can... we want a robot to do a lot of things, right? So the example of the behaviour that we want from a robot can be moving to a specific location, for example. Or we want the robot to follow a specific path. Or to avoid obstacles, or to do grasping and manipulating objects, or to interact with environment in a certain way. So for example if we want the robot to open a door, so it needs to interact with the handle of the door for example, in a certain way, to apply a force, to grasp the handle of the door, to rotate it, and to actually push the door. So there is a complex interaction with the environment that we want to achieve in this example. So another application is to perform collaboration with others, can be another robots or perhaps a human. So, this list can be expanded, so this is not an exhaustive list, but this is just to give you an example or an idea on what sorts of behaviour that we want the robot to control. So, the next slide is... the next question is "what is ROS and why do we use it?" So I don't want to spend too much time explaining about ROS because that is not the aim of the tutorial but in short, ROS stands for a Robot Operating System. So it's a framework for us to write our robot software. And there are a lot of tutorials out there regarding ROS. You can see the tutorial in the ROS website. But why do we use ROS? because it has a lot of advantages. So one of the major advantage of ROS is it has a lot of libraries which means that it has many functions or algorthms that we can use and implement in our robots. So it has a lot of resources online including the wiki pages and the tutorials that you can use. So it's not difficult to actually learn ROS. And another reason why do we use ROS is because it's open source. So it's free to use the codes and also it's free to contribute. So if you want to upload your own code, it's possible. If you want to download other people's code, it's also possible. So that's a good thing about an open source system is we don't have to pay... It's free and it's for all of us to use basically. And then another reason why we use ROS is because it has an active community. So it has been used world-wide by so many robotics researchers and also it has an active forum where we can actually ask questions and also help others by answering their questions. Another reason why we use ROS is because it supports a lot of drivers. So it has a driver for so many sensors, actuators, and different types of robots. And then, another reason is because it gives us a convention for writing our software. So we don't need to worry about the system architecture, we don't need to worry about how do we transfer data, how do we communicate with other nodes. So everything is there provided by ROS, we just need to learn how to use it in order to write our code for the robots. And then, lastly, it has various useful tools for debugging, visualizing, you know, like plotting, simulating, and also recording data. Right. So the next question is "can we actually control a robot using ROS?" So for example, in the screen, we have a mobile robot called turtlebot. So it has wheels used for locomotion, it has several sensors including the inertial measurement unit to detect the robot's position and orientation, it also has a 3D sensor on top of it, the RGBD camera. And the question is really can we control this type of robot using ROS? And of course the answer is YES. So one of the video here showing how we actually implement a robot navigation into the turtlebot using ROS and particularly using a simulator called Gazebo but the whole codes that we write in this case is written in ROS architecture. So, it's possible to control this robot using ROS. So the next questions is can we control other types of robot using ROS? For example, we already show you that we can control a mobile robot, but what about a manipulator like this one? So in the screen you can see a manipulator called Baxter produced by the Rethink Robotics Company. and it's mainly designed for industrial applications and for human-robot interaction. So, can we control this type of manipulator using ROS? the answer is, of course, YES. So ROS also provides a library and robot's model for different types of robot manipulator including Baxter. So, in this video here, we show you how to control actually the position of the tip of the Baxter, to a certain location. So basically to achieve some desired goal position and also to avoid obstacle in the environment. And what about multiple robots? is it possible to control multiple robots using ROS? and the answer is YES. So in this example here, we show you how to actually do a formation control using three models of quadcopter robots or flying robots. So, in the video, we can see that there are three quadcopter robots and each robot needs to move to a certain location and to avoid other robots... so avoid collision with other robtos. We can see here. Once again we use Gazebo in this case and all the coding that we need for this application are written using ROS architecture. So Yes. So, after giving a description on the key terms and key concepts that we use in the title of this tutorial, I would like to describe what this tutorial actually is and what this tutorial is not. So, this tutorial is actually Not a formal theoretical robotics course. So, if you look for a formal robotics course like you've got in the university, unfortunately you come to the wrong place, although we are actually gonna use some aspect of the theoretical robotics to control our robots. This tutorial is not a formal control theory course. So, in that sense, we're not gonna explain to you in detail regarding the control theory aspect. But, we're gonna apply some aspect of control theory to control our robots. And then, this tutorial is not a ROS tutorial. So, unfortunately, we're not gonna explain ROS itself in details, but there are other tutorials out there regarding ROS. You can find them in Youtube and in the ROS website itself. So, this tutorial is not a coding tutorial. So, we're not gonna spend minutes of video explaining about the concept of coding. But, we're gonna use coding in order to code, actually, our control policy to control the robot's movement. Lastly, this tutorial is not a robot assembly tutorial. So, we're not gonna build our own robot in this tutorial. But, we're gonna use the robot that is already available out there. And then, this tutorial is an implementation of basic algorithm to a real problem in robot control. And secondly, this tutorial is like a bridge between the theoretical and the practical sides of robotics. OK, so in order to benefit from this tutorial, what do you need is, first of all, a computer with Ubuntu version 14.04 or version 16.04. And then, of course, you're gonna need ROS installed on your computer. I would prefer for you to have ROS Indigo or Kinetic. And then, you're gonna need a Gazebo simulator. It's usually installed with ROS so you don't have to worry about it. And then, you're gonna need some, well, coding experience or coding knowledge, especially Python or C++. So, both languages are supported by ROS. So, we can actually program our robot using either of them. We'll try to cover both Python and C++. And lastly, of course, you're gonna need some basic knowledges about maths and physics because we're gonna learn about the robot model, and we're gonna learn about control theory, and we're gonna apply boths into robotics. And for that, you're gonna need some basic knowledges about maths and physics. So, what are we gonna learn in this tutorial? So, this tutorial will consist of several videos. The first target is to learn the kinematic modelling of mobile robot. So, we're gonna start with mobile robot because it's kind of simpler compared to manipulator although it still have several difficult constraints to solve. Secondly, we're gonna learn about basic position and orientation control. Basically, this is used to control the robot position and also orientation or heading angle. And thirdly, we're gonna learn basic navigation towards the goal. And fourth, we're gonna learn how to actually avoid obstacles in the environment. And finally, at the end of this tutorial, we're gonna learn how to do basic navigation of multiple robots at the same time. So, that's the end of this video. Don't forget to subscribe to our channel, Jago Robotika, and see you in the next video. 