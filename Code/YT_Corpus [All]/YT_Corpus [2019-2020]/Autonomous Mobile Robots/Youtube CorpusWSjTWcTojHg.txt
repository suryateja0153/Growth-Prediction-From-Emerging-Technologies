 hey everyone my name is kajal and welcome back to another Webots tutorial video in today's vbot tutorial we will talk about how to compute robot position for a differential drive robot using encoder in Webots we will use position sensor as an encoder this is also called audiometry which is using sensor data to estimate robot position before we dive into this tutorial this is your reminder to press the bell when you hit subscribe so you're notified every time i come up with a new video in our Webots tutorial series so without further ado let's get into it in Webots we are going to use position sensor for our encoders and we are going to add it at the same place as our rotation motors on the left hand side you have all the nodes so i'm going under the robot node under children and you can see two hinge joints where both my rotational motors and wheels exist let's start with the first one under device you can see that rotation motor already exists and that is where i'm gonna add my encoder which is a position sensor click on plus and select position sensor under base nodes and click add now we want to make sure to give it a name so we can easily call it from our code let's go with ps underscore one similarly for our second hinge joint under device we have rotational motor and we're going to add an encoder which is a position sensor and v-bots again click the plus sign select position sensor under base node and select add make sure to give it a name so that it's easy to call from your code i'm gonna go with ps underscore too make sure to save your work now let's start with our code i'm gonna go ahead and write a new controller code under wizard select new robot controller continue i'm going to write my controller in python so make sure to select the appropriate language and click continue i'm calling my controller odometer underscore calculation you can call it anything you want and then click continue and done this should open an editor for you with all the basic code and an important thing to remember is to make sure to change your controller so under controller hit select and then because we just called our file odometer calculation i'm going to select that and click ok and make sure to save your work let's start writing our code in python you can simply start writing your code however i prefer to have a main function and a function where most of my code goes in and i'm going to put the rest of the code in a function called run robot so in our main function we have created an instance of robot called my robot and we are passing it to our main function run robot we'll use the timestamp of 64. next we enable both of our motors i have covered this in the previous video so i'm going to speed it up for now ** Webots tutorial in Python ** next let's create instances for our encoders which in Webots is position sensors unlike motors where we set position and velocity for position sensors we enable them with the time stamp all of this information is available on the Webots website i will include links to the specific pages with this information in the description below now let's read values from our position sensor and print them out to see what they look like i'm creating a list called ps values to store the readings from a position sensor ** Webots tutorial in Python ** and let's turn on our motor and drive the robot straight so we can actually see the change in encoder values ** Webots tutorial in Python ** hit save and let's run the code as you can see in the console the encoder values are incrementing now as the position sensor is connected to the rotational motor the readings we are getting are in radians usually with an encoder you get encoder ticks and then you add these encoder ticks to find out how much your wheel has rotated and then based on that you compute how much your robot has moved in Webots with position sensor the encoder computation has already been done for us the value we are getting is in radians it signifies the amount our wheel has rotated so our next step is to compute how much rotation in radians is equivalent to distance traveled on the plane we're going to do this with simple math we know one rotation of the wheel is equal to 6.28 radians we also know that one rotation of the wheel means the entire circumference of the wheel has covered the plane in other words 6.28 radians is equivalent to the circumference of the wheel in terms of distance traveled so with that we can compute what one radian of rotation is equivalent to and we'll call this the encoder unit we know the wheel radius because we designed a robot model now with this we can compute the distance traveled so let's give that a try ** Webots tutorial in Python ** as you can see in the output we are now seeing distance values in meters based on how we've designed a rectangular arena we know that each square is about 0.25 meters which is what we can see here now in this case we know the robot was driving straight and so the change in our encoder was directly equivalent to linear movement but what happens when it starts turning or rotating on the spot we're going to use a combination of geometry and differential drive kinematics to compute angular velocity and linear velocity and then based on that we'll compute the change in x and y direction for every time stamp and add it to our last known position a good amount of documentation already exist explaining all of this in detail i will add all of them in the description below with that let's start coding let's create a variable to save our robot pose it's going to be x y and theta as mentioned before we are interested in the small distance being traveled at each time stamp for this we need to compute the difference in the encoder value to know the distance traveled so let's create another variable to store the last encoder value and then we'll compute the difference between last and current encoder value and then we'll multiply it with our encoder unit to get the small distance traveled during each time step now i've noticed the first encoder value is not necessarily zero but the difference is very small so i'm going to add a small code to tackle this make sure you update the last ps values with the current ps values at the end of the while loop with this we can now compute linear velocity and angular velocity we will need one other variable which is the distance between both of our wheels ** Webots tutorial in Python ** let's start with the change in our robots angle this is nothing but angular velocity times dt we're going to use dt of 1. next we break our linear velocity in the x and y components and with that we just computed our robot pose so let's print and check it out i forgot to import the math module (for using sin and cos) ** Webots tutorial in Python ** as you can see we have our x y and angle x is close to 0.25 which we know from our modeling is the length of each square make sure to note the e minus 10 and e minus 0.9 for your y and angle this means the value is very small now the reason for this is even though our left and right motors are moving at the same speed they don't have the same encoder values the difference is very small but it still exists next let's rotate our robot and see what the values look like ** Webots tutorial in Python ** as you can see the x and y are very close to 0 and our angle has changed as the robot has rotated as you can tell this is not very accurate the x and y still has a little movement even though we've been rotating on the same spot and the angle is also not as close to one complete rotation as it should have been this could be due to the mismatch in timing or simple noise even in the real world your encoder will face noise one of the things people do in real world is use markers or b-cons to match their current robot position with ground truth and use this value to adjust for the error that has been accumulated over time i hope with this webot tutorial video you were able to learn how to compute robot position using position sensor in Webots if you have any questions or doubts feel free to ask them in the comments below and i know i mentioned a lot of information in this video so i'm also adding some useful resources in the description below if you enjoyed this video make sure to give it a like and if you haven't already don't forget to subscribe thank you for watching and i'll see you in the next video 