 [Music] my name is Zoltan urato I'm a product manager of Google Cloud IOT core let me also introduce Preston Holmes head of IOT solutions for Google also he's gonna be on stage with us shortly so today we are going to talk about a specific type of IOT applications applications those involve of course IOT devices mobile mobile or web applications and very importantly also users and you are going to see that users will be an important component in this presentation and as part of this presentation we will review sort of the theoretical background the business context and then we will show you a tool box using cloud IT core and some of the firebase product how you could implement these use cases and we will finish with the demo so both Preston and I have been working in around IOT projects or on IOT projects for almost five years now and we have seen two main patterns emerging when it comes to IOT use cases the first one is I like to call them data ingestion intensive or data ingestion heavy use cases in these use cases there are many devices sending a lot of data upstream so typically the bandwidth requirement upstream is much higher than downstream and usually these are applications for monitoring or analytics and I mentioned that users will be an important part of our talk and and in these use cases usually there are less personas involved on the other hand the other type of application we we usually see when working with steamers we like to call it complex application logic use cases so in these use cases or applications the data model is usually more complex there is a similar need in terms of bandwidth requirement upstream and downstream and that's because it these applications are not only about receiving data from devices but also controlling them so most of the time this complex business logic is used to determine some sort of change that is required to be performed on the devices and then send back these commands or configurations to the devices and what makes implementation of these use cases challenging is a is the the multiple personas sort of in the mix or having to interact with these deployments so when it comes to these complex application logic use cases typically these are the building blocks that we see as required for implementation so mobile and web applications to control the devices and see their actual state the devices of course device management capabilities meaning like credential management grouping updating or updating the firmware of the devices cloud services data management tools in the cloud or storage solutions or computing solutions user management so most commonly an identity provider to store your users and then handle your users we already touched upon command and control so the capability to to to interact with the devices to be able to control them and last but not least sensor data aggregation and visualization so you want to see your or in these use cases users one see sensor data or aggregated data of of device of one device or multiple devices and there is a horizontal layer here so all these building blocks are used by various users and personas and and these users have may have very different access control needs or limitations and this is going to be a focus in our talk how to implement authorization for these users because we have seen that many times this is very challenging so depending on how the business is run the same building blocks are used and there are free main categories here we are going to see examples for each so b2b business to business b2b to be there is another be added here and B - B - C and the first B is is always the IOT or or cloud service provider so in our case its Google cloud and then the second B is our customer and in many times our customers operate a service some sort of SAS service and IOT solution using our infrastructure and sell these services either to businesses or our consumers so to give you an example of all of these probably the b2b scenario is the is the simplest in terms of implementation and probably the best example would be a connected factory or connected manufacturing line so so a factory with connected PLC's when it comes to implementing these use cases based on these business models usually it's enough to use the resources provided by by the de cloud is provider so inkay in this case Google cloud so these are existing resources or building blocks and and implementing these use cases can rely only on these component and very importantly there are no end users in b2b use cases this is a little bit more complicated to be to be to be scenario may be the best way to describe the this category of use cases is through an example so imagine a connected truck fleet management system a company that provides this truck fleet management services as a SAS service and they also let's say they also sell hardware that their customers can install in their trucks or it can be other vehicle as well and there are end-users in this in this scenario so if you think about the customers of the SAS provider so the connected truck fleet management system provider those users are end-users so for instance a driver or operator of of of a given fleet and we have to realize that in these use cases there is a really wide spectrum of roles and permissions so just to reflect on my my previous example a driver has really different access rights compared to the manager of a whole fleet to B to B to C scenario is a little bit simpler but similar to the previous one probably this is the most familiar to all of you a good example would be a smart lighting solution really the only difference here is that the the end users are consumers and and in these use cases there are multiple personas and and rules and permission requirements but typically less than in case of b2b to be I wanted to show you a real world example and it's very relevant here in San Francisco so you might have seen these scooters out on the street these are connected scooters so they are connected to the Internet and there is a corresponding app or there is an app you need to use if you wanna if you want to ride the scooters and there is a very complex business logic behind the disservice so if you think about it the user of the application and the scooter needs to gain access rights to the to the scooter just for the period of that person is riding the scooter so there this is a pretty complex business logic here and and then they are actually using Google cloud services just to give you a summary of these various business models or or sort of overview them so in all cases the manufacturer is is some kind of device maker or or an OEM that's that's common in in all three scenarios when it comes to the owner of of the devices so who owns the device in case of b2b this is trivial it's it's the it's the customer of the cloud service provider so it's a corporate owner or an operator and there is no end user in case of b2b in the other two categories there are end users in case of b2b to be the the interesting thing is that the owner is also a corporate owner and/or operator but the end user is different so they not necessarily own the hardware so just to reflect back on the truck fleet management system these dis hardware or these tracking devices might be installed on trucks but but let's say the driver of the truck doesn't necessarily own the device in case of B to B to C this is a little bit simpler because in these use cases usually the owner and the end-user are the same person so think about the connected light example alright so when it comes to the implementation and we will go into the actual details very soon but just to review that there are two main layers of the sort of back-end implementation of these use cases application and infrastructure just like in other other systems this is true in IOT as well so what's typical for infrastructure is that usually there are cloud services and these are pre-existing building blocks so for instance like compute engine instances or devices but there are many of them in Google cloud what's common is that there is a service called cloud iam and cloud iam controls that what sort of permissions a given user has on what resources and in this layer the resources are obviously defined by the cloud service provider so in our case it's defined by Google and typically for in case of b2b use cases the implementation is heavier on this layer in this layer so there is less need for for an application layer because you can usually use these pre-existing building blocks the application layer this is where the business logic most of the business logic is implemented this is where the command and control decisions are made and and this is the layer responsible for for transmitting these decisions to the infrastructure layer we can look at this layer as the digital version of of the business model of a given use case and this layer is usually figure in case of the B to B to B and B to B to C use cases now an interesting question is that of course these two layers live together so they are implemented together and and and both exist and there is always some sort of overlap between the two and the question is how do we crossover between the two layers how do we bridge between a device that only exists as an infrastructure piece and it's authorization is controlled by I am so how do we provide access to this device for a user that for instance only exists in a third party identity provider which is which can be even external to Google and the good news is that Google has solutions to solve these problems and we have tools to implement these authorization control mechanisms and so I would like to invite Preston on stage to tell more how to do that thank you so 10 so we talked about the general cases of the infrastructure layer and the application layer so if we look first at some of the infrastructure ways that we can apply I am in IOT cloud IOT core which is our primary service for authorizing and identifying and securely connecting devices that exist out in the in sort of the field to cloud this service has a set of i.m permissions and roles that let you define who can do what with the logical device resources that are stored in IOT core and like many cloud I am permissions these can be applied at different scopes of influence so this is an example of where these permissions can be applied to the entire project but inside cloud IOT core we also provide the ability to apply these permissions or roles to specific device registries or collections within a project so this is something where you're applying glad I am to control who can access or who can perform certain actions on cloud resources defined by Google in a managed service like cloud IOT core the other thing you can use I am for is is controlling access to who can publish to certain cloud pub/sub topic so cloud IOT core and cloud pub/sub are very tightly integrated and by limiting who can publish to certain topics you can constrain pub/sub that there only only messages being published by devices through IOT core arrive on a pub subtopic and this is important because that way you can use certain attributes published by IOT core on messages such as a device ID and know that those attributes were only coming through devices and not through some other cloud publisher online that has access to that pub subtopic so it's one of the constraints you can put on other systems that IOT core interacts with now the the title of this talk was IOT and firebase and firebase is actually a very large suite of products and services and we're certainly not going to cover them all today there is also the fact that a number of these services now sort of have dual representations in both sort of the firebase experience and the cloud GCP experience so the ones were going to be touching on our authentication hosting firestore and cloud functions so authentication is the kind of customer identity management I'll get into that in sec hosting a static hosting fire store is a document database and then cloud functions again this is the same back-end infrastructure shared between Google cloud platform and firebase as far as executing lightweight functions so the first is around identity management so when Zoltan was talking about the main components this is how you manage your own users so when you do have end-users involved you need a way of managing who they are this handles user authentication recognizing that these users exist in your system so when a developer logs into Google cloud platform our Google identity system is what we expect infrastructure users to be able to log into now you can you can integrate that with ad etc but that's identity management for infrastructure this is identity management that we offer as a service for you to incorporate into your own applications and once you have authentication then to address authorization this is where firebase rules that apply to firestore come in and this is a service that allows applications to communicate directly to the database without needing to go through any sort of API middle-tier and if you're going to have applications talking directly to a database you need to apply authorization logic and the way we do that is we allow we have a service that basically lets you describe that authorization syntax in your application and have the database actually apply that for you so we'll get a little bit more into some of the syntax for these rules a little later but let's talk about the kind of architecture we're going to show and demonstrate here and that is we've got some devices on the Left these are kind of hypothetical sort of gas sensors in this case we're going to use and then users end users interacting with an application on the right so the first thing we do is we're going to use cloud IOT core to securely connect the devices to the cloud and then on the application side we're going to host the static content related to the application and and deliver that to users in in in web browsers or mobile applications from firebase hosting and then the live data that the application is going to be interacting with is going to come from fire store but because fire store is directly connected to the application we're going to make sure that fire store rules are applied to the way the application is getting data in and out of fire store now to connect these two for device sensor data we're going to use the cloud ID course integration with pub/sub and then cloud functions that take readings from sensors and write them into fire store we also could have chosen other cloud platform data based products to do this for example we could write this Center series data and cloud BigTable very scalable way of doing series data to be honest and in this case it would have also meant we would have had to replace the fire store rules with our own authorization implementations so we're going to go with the simple path here and just use fire store because it gives us that rules sort of value we're also going to send information from the device in the fire store about the current settings and state of the device so this isn't necessarily the sensor data but this might be other current settings and values that are on the device changing less often and then finally when a user changes a setting in a device we need to get that back out to the device so again we use a cloud fire store trigger to run a cloud function when data changes in fire store and that cloud function then can send the updated configuration through IOT core to the device so when you put it all together it looks a little something like this so what we're really trying to leverage here is using as many server lists and managed services we've got Direction data flowing in both directions and then we've got static content and data being served to an end-user application so the the scenario for this demo is going to be sort of a hypothetical technician who needs to check out a piece of equipment and here is my gas sensor that we're going to use and what they're going to end up doing is connect to it through a mobile app so this is I'm going to test the demo gods because I've got in IOT device a tablet and a demo laptop all concurrently interacting with the our Wi-Fi saturated world so I'm gonna plug into this so if we can have the demo system up got it all right so let's start with the we can go ahead and I'm going to restart the the casting here so if we can have the look that has the and reconnect the a/v guys loved our requirements list for this one all right so here's the tablet I'm gonna launch this app so the first thing is let me go ahead and back out I'm going to log out so this app really doesn't do anything until you log in so when I log in with Google that's actually maybe I'll just keep it that way honestly when I log in with Google I've already authorized this app so directly is going to go to a list of devices that are associated with me this is a new device I've just kind of checked this out of a rack say a shared rack at the technician and what's displayed on here is a code that says let me as an employee claim this device so that I have sort of exclusive control over it so if I add this claim ID and it's my favorite one so I'm just going to name it fav most of you won't be able to see this change but I'll hit claim and as long as the network is still good and connected here this now says claimed so the device is now recognized that it's claimed so I'm going to go into the detail view here so what you see on that real-time live graph is is light data light sensor data coming from this device and that's coming to that telemetry path that I showed in the architecture you're also can see that there are set of configuration settings and that is a tilt threshold and so what that means is I have angle set that if I tilt this device past a certain range I get a beep now as a user if I want to change the tolerance of those tilt settings I can go ahead and in this app I'm going to narrow those down let me just actually narrow one side here and when I hit update you see the little spinner up in the dialog that's actually letting me know that it's taken a moment for the settings to get to the device and then the device it's doing that again huh well what you can see here is I've narrowed the tilt setting and now it's a lot more sensitive right let me we'll go one more time we have enough time that I can you bear with me will this is a relatively older tablet that I pulled out for this particular thing so I think between us and the stage so before it glitches again I'll do this one more time I'll change the setting and I'll update it and in fact I'll do it again one more time I'll narrow this other direction of tilt hopefully I didn't put it into a state of here we'll see here that now if I tilt this essentially what I'm tilting but what I want to do is show you back on the laptop a little bit about what's going on here so that that progress spinner is actually giving the user of the tablet an indication that the settings have not yet actually been verified as received by the device so I change a setting in the UI I update the setting that changes data in cloud firestore that change of data in cloud firestore triggers a cloud function to run and send the new settings down to the device through IOT core when the device receives the settings that applies them to the tilt sensor it that sends another state update message back through that other top pathway which confirms the state as updated in firestore and only when do those two data values reconcile does the spinner go away so when you saw me update a setting in the tablet and the you saw a spinner for a moment that's actually a sort of a full round-trip to the device and back confirming those settings I'm gonna show you a little bit more about how these firebase rules apply because these rules are what are preventing one user from seeing data from a device or changing setting of settings of a device while another user has that device claimed and the syntax of these rules is based around matching patterns of a document in firestore so first of all the the outcome of a rule is to allow or not allow a given device so essentially it's denied by default and unless a matching rule is found don't allow the user to actually read or write data from the database so you can see the the operations can be read or write there's actually also update and delete and the the main one I want to point out is the kind of middle section here so well go from the top which is that the first rule is around letting a user basically update their own users profile right and that makes sense unless the user the requests coming from the user matches the profile users ID you can't update somebody else's profile the second one is related to the device record itself so in this case we want to allow a person to create a new record if they're going to be the first to claim a device that can have that entered they also can read and write the settings for a given device because that's where the updating of settings is being written to and then the telemetry path this is where we're storing incoming sensors so that real time line graph was going to a telemetry collection just to back up and give a little bit more context for those who don't know as much on on the firestore front and the document database documents are organized into collections so here we're talking about three different collections users devices and telemetry and the way fire straw rules are applied is you can apply them only to documents and collections that match certain patterns in the case of the middle one here what we're doing is we're taking the device ID which is also in this case the document ID and using that as a variable in the rule and just to show you the way this works from the at the actual database layer I have another user logged in to the same system and since the URL path was used for getting the data from that device if I try to put in that device URL you'll see that not only is it being blocked at the web frontend logic but if you look at the developer console the the permission error is actually coming from the database right so if I didn't show you this developer console it'd be very easy to sort of say oh well this is authorization logic happening in the application in the front-end that is subject to bugs and errors in the way authorization is applied so here by seeing the developer console I can show you that this is actually being enforced at the firebase client library and back-end in a raishin point if i go ahead and we don't need to put the tablet up but i will go ahead and and release this device from this user and if i go back i can now claim this and now I can see it and now I can actually get to that URL for the detail view so that's how we're able to use sort of the real-time nature of firebase firestore to basically apply these rules based on the data that's in the database I think that's the other key takeaway for firestore rules is that they are applied per request per document in a way that lets your own rules and your own data models in the database be that custom application layer of authorization so while I am has a focus on the resources or the models that are defined by Google if you're defining the the sort of application objects in firestore you can apply firestore rules in a custom way to those to those objects in that data [Music] 