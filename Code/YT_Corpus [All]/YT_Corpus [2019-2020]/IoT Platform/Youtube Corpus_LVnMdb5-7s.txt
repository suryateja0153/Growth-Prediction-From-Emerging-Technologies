 Tell us.  We have been asking folks to send us the cool stuff that they've been building with our apps. I'm I on mute? Oh, man.  Oh, man.  Oh, man, set those on mute.  Rookie mistake. Oh, go live right now. If we had a camera on her, she's going like this.  She's just like, these people I swear.  Like right now.  Now, let's head over to Sam and see what IoT magic he's got in store for us. Hey, Sam.  Hello. Thank you Donna and [inaudible] . Thank you for an awesome event. So far, it's been an exciting time. Hopefully, I'm going to make it exciting more. I'm a bit under the weather, but then the show must go on. It's not going to stop me. Most of the speakers that have come up have talked about awesome, awesome use cases, being a pro Developer, and a citizen Developer. Well, today what I'm going to do, is that I'm going to give you something a bit more interesting to nibble on. Well, before we get into it, my name is Samuel Adranyi. I am a Senior Software Engineer at Andela a recent MVP. I am very passionate about IoT and the power platform. So today, what are we going to do? Let me quickly take you to my screen, and share a few awesome, awesome things with you. Hopefully, you're going to enjoy this. Let's do this really, really quick. By the way, I'll be around to answer questions on Dev that you'll use. If you have any questions after this, put it there and I'll be awesomely glad to help you out. All right. Before we get into it, I'm going to show you something real quick. What we have here is a Raspberry Pi. Obviously, I'm going to talk about IoT. If you follow my shows, you know that I'm a big fan on IoT. We have here a Raspberry Pi connected to a relay, and there's a DHT11 temperature humidity sensor. What's happening is that this IoT rig actually has data coming from this DHT sensor, being sent to Azure IoT Hubs. Now, if you're familiar with Azure and IoT stuff, you know that IoT Hub is like the entry level for everything to bidirectional communications with your IoT device and the Cloud. We have this temperature data being sent through the Pi over IoT Hubs, into the IoT Hubs. Now, what we want to do is, we've added this high-voltage fan here. Caution, risk of electric shock. This actually is 240 volts, so be careful when you're dealing with that. What's happening is that, we're going to see how we can use IoT Hub and some Power Apps to actually triggered this fan on and off. Now, I'm going to share with you a couple of code on how to do this. I have a couple of series on my blog posts and my YouTube channel on how to do it. But let's get right into the code. I'm going to share bits of code for you here to understand what's happening. Right here, we have the code that actually is written out. This is where being a pro dev comes in. Now, if you're familiar with most of the Azure APIs and services, there are SDKs for different languages whether you're writing Node, you're writing Java, you're writing Python. There are always different services for you to make use of. Here, I'm using the Node version of the SDK for IoT Hubs. This is simply the code that is running currently on the Raspberry Pi. What we have here is, we've set up a couple of commands which we call direct invocation commands on our system here, and then two of them actually. The first one here, as you can see, is toggle Fun on, and then this one is toggle LED. These two commands allow our Raspberry Pi to actually respond to commands that are sent by external services, or even through IoT Hub itself. I'm going to go ahead and then I'm going to run this command. This actually is running locally on a Raspberry Pi. Thanks to the awesomeness of Visual Studio Code, I'm able to remote into the Raspberry Pi as you can see from the bottom left. I'm remoted into this Raspberry Pi and then running the code in there. Let's go ahead and run this. I'll walk you through what this code basically does so you get a good understanding of that. I'm running the code now, which is running on the Raspberry Pi. If you look closely, you'll realize that it sends temperature and humidity data to the Azure IoT Hub. It does that in intervals about five seconds. Now, I've implemented a technique that doesn't actually overwhelm the IoT Hub in terms of messages. It only checks to see if there is a change in the previous temperature before sending the data into IoT Hub for processing. Now, what we want to lay on top of this is that, now, this could be an industrial system which you want to monitor data telemetric coming from it, and then act upon that data. Here, we are going to mimic this fan. Now, this fan could be an air conditioner, this fan could be any IoT device that you want to control. At the moment, our Pi is talking to Azure IoT Hub, and it knows how to talk to this device. Now, let's go ahead into the second piece of code, which we're going to use to trigger and help managing. Before that, if you're not familiar, you don't necessarily need to go directly into let say, Azure portal to do that. There is a new tool which allows you to do that. It's the IoT explorer. Now, what this does is that it allows you to actually access all your IoT devices in your IoT Hub. Here, I think, I already have a connection string, so I'm going to go ahead and connect. Now, all along what we're doing here is pro-dev stuff. You've built your IoT solution, you've deployed it, you want to test it out. This is all just pro stuff. Now, the big question becomes now, how can I rapidly or quickly interact with this service without having to go through a lot of hoops? Now, that is where the power of Power Platform comes in. Today, I'm going to show you how to use that with the Power Automate, and potentially just connect that to a Power App and you've built a complete dashboard where you can control your IoT devices from anywhere you are in the world. Currently, I have my Raspberry Pi as my only device when I connect that. As you can see, everything looks good. Let's go to the direct method invocation. To do this, let's just bring [inaudible] over here. We have togglefun, we have this open for us. This is the method we want to invoke. Now, so we put it in the method name here. Now, what happens is that, I have designed this to take two states. Either I'm on state or an off state. Let's go ahead. Currently, to do this I'm going to flip, so you can see the two things happening. When I send an on here, and this is going through the IoT explorer. When I send this on here, this to this, there we go, and then we call the invoke. If you look to your right, you should see that the fan is running. Isn't that cool? The whole idea is that the DHT detects the changes in the temperature and the humidity in the room, and then automatically sends this command for my device to turn on and off. Ideally, we can also use this to invoke it. Now, to turn this off, quite simple. I'm just going to send a payload of off. We invoke this and as you can see, the fan goes off. Yeah, this is all pro stuff. Where does the Citizen Developer come in here? This is where we're going to have some fun. We're still going to leave the code running on the Pi just so we can have some fun. I've gone ahead to actually create an Azure function. I created this locally, and I'm also going to test this locally just to be sure that we're hitting the correct endpoint, and doing the right things. I'm going to go ahead and if you love Azure functions like I do, you know that you can run and test this locally, and have lots of fun. I'm going to test this locally. Now, FYI, I have already deployed this into Azure functions in Azure. We are going to use that in connecting to our Power Automate and our Power Apps. I just want to show you that this works, and as a pro Developer, the next thing would be, "Hey, Sam, we built the IoT thing, it's working fine. Now, what we want to do is, we want the ability for you to create a UI, to interface so we can remotely turn on and off the fan." Well, with this done, this is running locally. Let's open this up. Let's copy this, bring this here and here go ahead and send. Let's send a state of on and look at that. Now, let's zoom this in, so you can have a good look at it. Right now, as you can see, this is just a simple thing. Let's run, zoom it so we can give you guys a much interesting look here. There we go. If you look closely, all I did was to call this endpoint, and pass the state of on and then the fan was triggered. Now, the same thing, I can go back here, and then change the state to off. Let me also bring this back in. When we hit this, look at this the state of off. Now, we have this working. What is the next step? Now, you're just giving me endpoint as a Pro Dev. You're like, "Okay Sam." You've been given this endpoint, we want you to build something that allows you to trigger this. That is where our Power Automate comes in. We're just going to jump right into my portal, where I have this actually deployed. There're couple of things we're going to do just to make sure this works. Let's go here. Let's bring in our portal real quick. Let's change this. Let's change this quickly so we can get this going. This is exciting because it gives you an opportunity to combine my powers as a Pro Developer and then also a Citizen Developer to create these things and do them rapidly. Here we go. This is what I deployed earlier on called the PowerFan. Let's open this app and let's have some fun with this. Then if we go all the way, if we open our functions app, just to show you that it's just the same thing, nothing different from it, so let's go back. Let's see. Let me open our resources. I deployed one specifically for our show, POWERful DEVs. Yep, there you go. Actually, let's use POWERfulDEVsgh. We have it here and there you go powerfangh. Let's open this app. Here we are. We have our function here and let's copy this because this is how we're going to test it. If we go here, just to make sure that we have our functions all nice and easy here. Yes, we have the ONfan here. Yeah, it's a read more. That's fine. Let's go ahead and test this. This is the local one which is running. Now, I'm going to go ahead and test this. Let's copy this here, the state, and add that to it. Let's try turning this on. Now, this isn't run because now if you want to connect your IoT Hub and other devices to the Cloud, you need to ensure that you have a good access token to do that. I deliberately didn't do this so I can show you how to set this up. Let's go back to our functions right here. I'm going to go to configurations. For the sake of just showing how this is, I had my setup here to have the configuration file that I'll need to run this in an environmental variable. I need to add that so that the function knows, so I need to create these two pieces of information because that is what it would need to able to call the function. Let's do this quickly. Let's go ahead here and let's add a new application setting. I'll put this here. Let's go back here. I'm going to copy this. Yeah. I'll make sure I'm changing this right after the show. We paste this here. That's okay. We need to add a second one. We need to add a second one, which is the device name. Add Application Settings, device name, and let's put this here. Now, bear in mind, this is just for demo purposes. When you're doing this in production, there are a couple of things we need to take into consideration. Yeah, we have our two settings in there. Let's save this and continue. Now, let's go to our function and check this out. Let's go here, and we go in and let's look at our function, just to be sure everything in there is okay. Yeah, let's check the code and tests to ensure that our function has everything it needs to run. I'm just going to go ahead and get the function URL. Yeah, just the default key. Copy this to the clipboard. Let's bring this here. Then I'll just put a state equals on, fingers crossed, and check that out. We have our fan running. Isn't that awesome. But there's someone who'll still say, Same, but what you've just done, there's nothing interesting about this, but at least what I have done now is expose this API or this service that controls this fan through Azure IoT Hub on Azure functions. Now, if I send the off, this goes off. Now, this takes us to the next level. Now, I can copy this URL and I have pre-prepared this. First, let me actually start with just a very basic Power Automate. We can use this, where if you call this, if you call this function, it's actually going to trigger that for you. But let's show you how easy it is to integrate this into different workflows. I'm going to start with automate, and then I'm going to create a flow. Yes, it's very basic. Something very basic and I'll show you how to trigger this. Again, keeping screens intact so we can do this. Let's do an instant flow. Click on this and yeah, I will just say, the power fan flow. Yeah, let's keep it this way, and then I'll manually trigger this, and let's go ahead and create. Very simple. As a Citizen Developer, given access to all these Pro Dev stuff, it's easy for you to coming here and then create all the information you want. All I'm going to do here is the next step. When this happens, I just want to make an HTTP. I just want to make an HTTP request. Quite simple. Let's just do an HTTP request here. I think we can do a get, that's fine. Then I put this here. Now, the code that I created allows for either a header parameter, or a query string, or something in the body. That's just fine. What I can do here is let's copy this. I can [inaudible] this because this is actually a URL. In the body, I'll just go ahead and do this. First of all, let's just try this. Let's just try it straight with a URL, and then we'll come back and make this look a bit pretty. Let's go ahead and then do on in this case. This is just a test. I'm not going by any best practices here. We're just trying to show you how this works. I have this saved. I'm just going to go ahead and hit "Test." I'll perform this task and then hit "Test." Then now I'll make sure everything is okay, and then just run the flow. If everything went well, this should go ahead and then trigger this. We have a problem. Let's see what happened here. It should have locked in my inputs. Not found. This is interesting. Let's go back here and check, goals of demo day. Well, let's try the on and be sure we have our stuff going. We have it going. Awesome. Let's turn it off and come back to our Automate. I keep calling it Flow because it was Flow before. Let's go ahead and edit this. We have our HTTP. Let's do this, let's go ahead and let me check this. Is just a basic Git, so that's fine. We have a Git. This is where we have the problem. I was supposed to have done this, put the question mark here, save this again and let's try this one more time. Keeping it closed. If the goals of the demo day will be favorable to us. There you go. We have been able to run very, very easily and simply using Power Automate, calling a ProDev IoT setup from Automate. Now, the next thing we can do is take this to the next level where we actually implement this in an actual Power Apps. Let's do this. Let's go back in here and then I can change this to off. I cannot put it in the body because I had this designed in a way that I could do that, so let's put this here. Then I'm going to save this. Let's test the Flow again. Run the Flow. Look at that. Our fan just stopped. If we want to take this to the next level, how do we do this? I'm going to go ahead. Then I've just made provision for this. This is going to be called from a Power App. Let's do this, let's call this PowerFanOn. Then this is going to be a Git. We can decide to pass the URL in there if we want to, not pass it. Depending on how you want to do with it, different ways you want to do, you can either pass in the state coming in from your Power Apps. This is what I would do. Actually, we don't need the body here. Then I'm just going to change this. You know what? Let's do this from Power App. It's quite easy and simple for us to do for people to appreciate it. At least, we've seen the Flow working. I'm going to leave that running. Let's come into PowerApps. Then make sure I'm in the right tenant. Just going to create a very basic model Canvas app. I'll just call it PowerFan. We'll use a phone for now. Asking me to authenticate. Hopefully, I would just get this done in time. As you can see, it's quite very easy to do that, we've moved from an IoT RAK, from IoT Hub, exported the API into functions. We've been able to use it in Power Automate. I'm just trying to bring it here. Skip this. I want to bring it into a Power App to see how that is done. You can follow me on any of my YouTube and social media channels. I have detailed tutorials on how to do this. I could even export this into a Power Virtual Agent that you can interact with to turn my fan on and off anywhere you want in the world, think about it, the possibilities are endless. Let's see if we can quickly do this. Let's go ahead and let's put a button here. Very, very simple button. Then let's go back here to the action and we can do a Power Automate. I'm just going to create a very simple Flow to do that. Hopefully, I can get this done in time. But if I'm not able to do this in time don't worry you've seen it has connected to Power Automate. That's how it's easy for you to bring your Power Platform stuff into a Pro Dev situation. Power Apps button, this is what I want. Let's click this. It's an instant one. Yes, manual with the customer action. No additional information here. The next step here, we're going to do the HTTP. There we go. I'm just going to do a Git. Then the method we're going to do a Git and the URL. Remember the URL here. But then I'm going to do the state equals. I'm going to try to pass this from power. Let's just leave it this way, so we can just call it directly. We're not passing any variable because of time, else I would have just created the parameters for you to pass from Power Apps into this, so let's just keep it this way. State on and just save this. Let's call this Power App. Then save this again. Awesome. Now, if we came back to, we should see it's changed that again, so there we go. Let's bring this in first. We're not passing anything. Let's quickly test this. Quickly test before its time. Just a few minutes left. Let's run this and I can see the marching ant. Yeah, and there we go. So that is as simple as it gets. Think about this. Forget about how the UI looks. You can get very fancy, you can get extremely, you can blow it out anyhow you want, but just think about it. Look at the power that this gives you. That is what we talk about when we're dealing with Pro Dev meeting Citizen Dev. With this, I'll throw it back to you Donna and [inaudible] . 