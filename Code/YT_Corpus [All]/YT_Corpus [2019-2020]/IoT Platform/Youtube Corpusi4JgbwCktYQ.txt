 Hello Everyone, Adam here. Today another episode of DIY Electronics the DIY Electronics and I will show you today how to build your own "Internet of Things" device from the scratch.. actually we'll be using only ATTINY chip or ATMEGA (Arduino chip) whatever you want... and SIM800L module So this is the chip and This is the SIM800Lmodule and a Humidity & Temperature sensor the DHT22 And the idea is that this device here will upload the data from the sensor from this one.. using .. SIM800L with the SIM card here.. over GPRS to the Thingspeak platform (but it can be any other) so this is the platform that will do some analytics and present the data I have one channel created here but you will have to create your own. So let's start with creating the channel first So you have to be registered here first, the registration is free and then you go to the "My Channels" then you can do ... "New Channel" Name it here like - I don't know ... "My IoT 1" Description - we will be showing some temperature... .. measurements and the Label, so the DHT22 (sensor) is capable to do two kind of measurements - first one is the temperature measurement so put "Temperature" name here then click second field... "Humidity" then we make it "Public" we have to make it "Public" (so anyone could see sensors data) But let's save it first... What is important that you need to go to "API Keys" And you need to copy this one ("Write API key") This is the API key that the device and the chip (MCU) will be using to upload the data from the sensor (towards Thingspeak servers) No let's go to my github page And the project is named "smartmetering" The URL is here , you have to download the project first So "clone or download", "Download ZIP file" It's downloading... You have to pick some directory , whatever... Ok, it's probaly here, let's list files Then you do the unzip (command) As you can see here there is plenty of files But I'm using ATTINY2313 chip So I will pick the file named "main3b.c" So first before we do anything first we have to we have to add Read and Execute rights to the file (batch script) that will be used for compilation This is in my case "compileattinyb", but if you are using ATMEGA328P (ARDUINO UNO) you will have to select this one ("compileatmegab") Oh yea Ihave to go inside directory that was created by unzip Ok, now this command chmod.... And now we have to edit the C source file "main3b.c" (for ATTINY) or "mainb.c" (for ATMEGA) depending on the chip you're using I am using this one... And if you look into the code... There is an information that you have to put correct APN name / username / password / PIN value and Thingspeak API key... into the code So now beginning from the APN definition you have to put APN - Access Point Name that will be used for the GPRS connection In my case it is named "internet" and you have to put password and username (if there is any for your mobile network provider) in my case it is empty because my network operator does not require any of this kind of credentials here and then... scroll down, you have to go this part... and you have to Paste here your Thingspeak channel Write API key You have to copy the API key that you have created for your own channel So you copy it from here - "API keys" then "Write API key" Let's put it here now.... And save the source file so Ctrl+S as you can see it will be uploading the data to the thingspeak.com server with Field1 and Field2 http parameters these names are corresponding to the names in thingspeak channel settings so you have Field1 here, Field2 here if you have more sensors attached you'll probably need to enable more of them (fields) and then the same approach is taken to upload another fields... so let's save it ... and close the text editor now Let me check if all is fine so I have my APN name here and use "user"and "password" and I don;t have PIN code for my SIM but if you have one on your SIMcard you need to modify also this field... lets minimize this window.... and yeah, we have our downloaded data here we can now attach the USBASP programmer (flasher) So I will first put the chip here to my board so where I have connected all the wires necessary for "in-circuit programming" now I will connect this to the USB port so you'll see how it is being done Now I have to launch the "compileattinyb" script the respective "compileXXXXX" script for the chip maybe I will display it first (the content of the file) One more thing... If you are using exernal XTAL quartz crystal and Ihave one if you can see it here it is an XTAL 8MHz crystal so I need to modify the "compileattinyb" file edit this... let's put this value here.... it should be "7F" Now I will do the C code compilation and we'll see if it is uploading HEX file it has to be done as an admin as a root user let's do it once again it is saying that it puts this 7F value to AVR fuse so the chip will select external XTAL as its clock now we have to detach the programmer and the chip move the chip to prototype board so remove it from here and put it in correct place and orientation now I will attach the SIM800L module please notice that Ihave my SIM card placed here with the APN allowed which name we have put into the source code I have connected here as a power source 3 x AA batteries... so it is about 4.5V voltage I believe it is now turned off... and for the need of this presentation I will also use USB to Serial Port adapter just to show you whot this chip inside is telling the SIM800L module to do so you'll have a full knowledge how it is working and I will now connect it to the USB port OK on the PC I will now launch the serial port terminal just to show you what it is doing so "sudo putty &" let's run it in background (on my Ubuntu PC) Ok I have serial console settings here so you can see USB0 speed 9600 bits per second, no parity, one stop bit let's open the connection and now we can see my device here I will now switch this one on Ok it starts to blink... If the frequency of blinking lowers that means the device has registered to the GSM network but before it does... first the chip configures the speed of the serial port and saves configuration into SIM800L flash memory it checks the PIN code status of SIM then it enables the Radio interface and now it takes 60 seconds for the device to register to GSM network it takes 60 seconds because it is written here in the code... if you scroll down to the "MAIN" function you will see that right here we have initializing, writing down the SIM800L config and then first command is enable radio and wait 60 seconds... then we check the registration.... and then we configure the Acces Point Name username and password and write the config of the APN into SIM800L so we have to wait a while these commands will be send in I believe 30 seconds... so on my GitHub channel you will find the diagram of this device, you will have to scroll down here and you can see 2 diagrams, first one is for for ATMEGA328P.... OK so it is now configuring the APN settings and it starts to connect to the GPRS as you can see it is blinking fast so it is now connecting to the GPRS... and then it will be uploading the data from this sensor... it is probably now reading the sensor data then it is initializing the HTTP protocol and now it's uploading the data... to thingspeak.com so this is how it is done... and now it finishes the connection so within 10 seconds it will disconnect from GPRS and then it will switch off the radio and put this SIM800L device into Standby Mode to conserve the battery power OK it's now switching off the radio and it's putting the SIM800L into SLEEPMODE OK, these data should be already visible on the Thingspeak platform... so if you go here... to your "Channels" "My Channels" we have this second channel here (that we have created) and then "Private View" Ok we have our first measurement here So this is my room indoor temperature 24.2 Celsius degrees and Humidity is 49% OK so let's get back to the design ... In my project directory You can see 4 diagrams , so I do recommend you to use the one with quartz XTAL clock Because otherwise it will desynchronize with the SIM800L modue And you will not be getting any data Because the MCU not be able to speak to this SIM800L because the speed of the serial port will not match If we're looking exatly on this device I have here... I am not using this Solar Cell and Lithium Ion battery I am using this pack of 3xAA batteries so the real schematic for this is here.. in this part. I have some capacitors I also have here some old parts here from other project but I am not using this parts here as you can see the power is connected right here so this part of design is not used anymore it is simple this big capacitor the XTAL8MHz beneath the SIM800L and the chip (ATTINY/ATMEGA) if you intend to use ATMEGA 328P you have to go here... and select this file so the diagram is almost the same only the pin numbers differ as that it's really the only difference... and when we look into code when we go back to the program code you can see that now the device has been put into the sleep mode and it waits actually it waits 120 times 60 seconds... so it waits 2 hours before next measurement If you want this measurement to be more frequent you have to modify this value and when this loop is finished it will go out of the sleep mode and go to the beginning of this long long loop it will turn the radio back ON and then go through the same procedure as decribed once again so now it is sleeping it uploaded the data before and it will reupload next measurement within next 2 hours OK guys I believe that's all for today I don't want to get you bored look at this page... On this project, create your own account here on Thingspeak platform and you can upload as many sensors data as you wish Thank you very much I hope you enjoyed the video Bye Bye ! Don't forget to subscribe and leave Thumbs Up ! 