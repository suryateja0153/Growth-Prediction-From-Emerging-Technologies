 Hi, everyone! Welcome to  This is My Architecture. I'm Neo, architect from AWS. Today, we have Steven with us, he's the architect from eCloudValley. Hi, Steven! Hi, Neo. Steven, please start your sharing on your architecture. Okay. ECloudValley IoT  Management Platform is built on AWS IoT Code, it's a SaaS IoT management platform. In our design, from our Portal the IoT service available  in customer's account can be connected through IAM. So, is this whole thing one SaaS solution? Yes. So, first and foremost, SaaS needs to serve the renters. I would like to know, if a customer connects  to your platform, how quickly can they open an account or can they provision resources? Okay. As long as customer has an Amazon account, may it be Amazon Beijing account or overseas Amazon account, with this account, they are allowed  to download a CloudFormation from our IoT management platform. This CloudFormation will be uploaded to their account within one minute, all IoT relevant services  will be deployed quickly, including services that will be applied, like DynamoDB and Lambda. In addition, it also includes  IAM account access, which can be set up at the same time. My understanding is, all components here are deployed through  your auto-deployment, the configurations  for IAM authentication are also completed automatically together, right? Yes. Okay. So next question. Since we are  a device access platform, how would such a SaaS platform handle mass device accessing? All right. The handling of mass device accessing was indeed a key consideration during architecture design stage. We couldn't support  a huge amount of devices with just half of a virtual machine.  That is not reliable. Therefore, as one can tell  from this architecture, we use AWS IoT Code service  to support mass devices. It can support billions or trillions of data. In the meantime, for data processing and the storage of information DB, we use DynamoDB and Lambda as well as other serverless services to provide the entire  IoT service framework and to support  mass device accessing. I heard a keyword. The entire architecture here is is a serverless structure, right? Yes. Okay, great. Can you introduce the flow briefly? How does  the whole architecture work? Sure. No problem. Let me explain from a customer's application scenario. Assume the customer is  in smart lamp business. When a user  goes home with his lamp, the first thing the user will do is to register on the App. Registration, login and relevant access and authentication are all implemented  with Amazon Cognito service. Amazon Cognito SDK is also available on our App. When the smart lamp connects to the internet, it will connect to Lambda IoT service through the gateway at home. The connection is supported by standard MQTT protocol. After connected to  Lambda IoT service, data can be connected to  DynamoDB for storage through this Rule Engine. Other services like notifications and monitoring and other services are also accessible through Lambda. Okay. As an IoT platform, huge amount of data will generate on your platform. What are the design considerations with regard to protecting  customers data privacy? This is a very good question. Because among  so many IoT platforms, data is mostly stored on IoT platform itself. From our perspective,  our design principle is to comply with  Amazon's high security level. Therefore, we don't store any customer information  on our platform. We deploy the services through IAM on our platform directly and fast, under the circumstance that the customer authorises us to do so. All information are stored at customer's own  DynamoDB and its S3. Okay. They are all stored in customer's account, not on our IoT management platform. So, this part is a portal of  your management platform, Yes. and customers have all of their information. Yes. In the account, right? Right. An awesome architecture design, I'd say. Overall, I see that you not only meet a practical IoT requirement but also have a really different design for data safety. Yes. And you also achieved minutes-level fast resource provisioning, Right. You also take into account the mass accessing  of millions of devices. Yes. Okay. Thank you for your sharing with us. It's a great architecture. Thank you, Neo! This is My Architecture. Thank you for watching. 