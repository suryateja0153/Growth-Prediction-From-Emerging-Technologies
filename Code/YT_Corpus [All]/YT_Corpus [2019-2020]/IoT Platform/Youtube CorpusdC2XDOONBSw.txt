 In this video, I'm going to show you how to configure and program an Azure Sphere microcontroller device. And as part of  this demo we're going to blink an LED that is connected to one of its pins. So, what is Azure Sphere? in a nutshell, it is an end-to-end IOT platform with built-in security. Starting from the actual microcontroller hardware followed by a Linux operating system on top of the silicon, and a cloud-based security service. So, during manufacturing, Azure Shere randomly generates and protects private keys inside the chip, and uses that to authenticate information. And the Azure Sphere OS secure your device connection to the cloud and provides access to Azure Sphere security services in the cloud. And finally, Azure Sphere security services guarantees your device's authenticity to other components in the IoT ecosystem, detects emerging threats across the internet, and uses that information to deploy security updates to your device. All of this happens automatically without a developer having to install a bunch of certificates and stuff. Ok, now let's check out the actual development point. So this is the Azure Sphere MT3620 development kit that I'll be using for this demo. This here is the actual Azure Sphere microcontroller chipset. And then here, we've got our pin out with all the functionality that you can expect from a microcontroller based system, including serial communication and general purpose input-output pins. And here we've got LEDs connected, so I'll be blinking one of those in our demo. So this board supports Wi-Fi connectivity and these two here are the antennas. And we'll be using this micro USB for power and programming our device. Ok, so the first thing that I'm going to do is to connect my development kit to my PC. Okay, so my development kit is ON. Ok, so once the device is connected to the PC, it should install device drivers and expose COM ports. So let's go to our device manager and check to see if our installation was successful. Okay, so you see we've got some COM ports here. Okay, now we need an Azure Sphere command-line utility to manage this device, so to get that, we install the Azure Sphere SDK for Visual Studio which will also provide us with libraries and extensions for application development. As you will see later in this video. Okay, so if our Azure Sphere SDK is successfully installed, you should get a command-line utility. And then, if we try to login to our Azure Sphere device, it will ask for the login credentials. So, we'll begin by setting up an account for Azure Sphere. And to do that, I'll log into my Azure Portal and create a user in the Azure Active Directory, as Azure Sphere uses this to enforce enterprise access control. Now, I'll come back to my IAzure Sphere command line, and login to my device. And if I'm logging in for the first time, it will ask me to update my password. Ok, we're logged in, but as you can see we're getting a warning that there is no Azure Sphere tenant found in my Azure Active Directory. So basically, if you need to use Azure Sphere you must become a tenant within the Azure Sphere system and if you have an Azure account, Microsoft automatically provides a subdomain to use as a tenant. So let's go ahead and create a tenant. and we'll call it industry40tv. Okay, so we've successfully created the tenant. Now that I'm a tenant in the Azure Sphere system, I need to claim this device as mine so that it is associated with the industry40tv tenant. So I'll go ahead and claim this device. Now, this operation cannot be undone. Once I claim the device it becomes permanently associated with industry40tv even when I sell it or give it to another person. Okay, so I've successfully claimed this device. Okay, now let's check what version of Azure Sphere OS our device is currently running, and see if there is any updates. . So as you can see, we are currently running version 18.11 and the latest version is 19.06. So we need to enable our device to update the operating system over-the-air. And to do that I must configure its networking and connect to my Wi-Fi. Okay, so first let's check the device Wi-Fi status. And then I'll connect it to my Wi-Fi network. And then I will check the Wi-Fi status again to confirm the connection. Okay now that we're connected we can give it a few minutes for the device's Azure Sphere OS to update over-the-air. And then when we check the Azure Sphere OS version we see that it has been updated to the latest one. Okay, so now we want to build and deploy our blinking LED application. But before we can do that, we need to unlock the device. Because by default, it is locked to prevent applications from being loaded from the PC. And to do that we use this command. Ok, our device is now ready for debugging. Let's head over to Visual Studio and deploy our application. So we create a new project, and under visual c++, cross-platform we select Azure Sphere. So, here we're going to use a pre-built sample for blinking the LED. Okay, so here we're setting the GPIO pin number 9 as output pin, and then here we've got a super loop that performs the blinking. Okay, so I'll click remote debugger to deploy the application. And as soon as the deployment is complete, you should see the LED blinking. I'll love to hear what you think about Azure Sphere technology, or IoT security in general. So, please let me know in the comments section below. Thanks for watching. 