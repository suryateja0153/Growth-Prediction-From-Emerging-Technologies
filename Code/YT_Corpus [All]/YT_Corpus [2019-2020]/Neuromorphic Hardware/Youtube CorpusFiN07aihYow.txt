 Hi! Welcome to the OpenNAS tutorial. OpenNAS is a completely free and open desktop application that lets you customize and generate a neuromorphic auditory sensor VHDL project. This architecture is based on the paper published by Jimenez-Fernandez in 2016 called "A Binaural Neuromorphic Auditory Sensor for FPGA: a Spike Signal Processing Approach". The OpenNAS wizard will guide you through five different steps in order to configure a NAS architecture in detail. More information can be found in the readme on the GitHub page and also on the OpenNAS wiki. Each of the following steps have a Help button associated that will help you understanding the corresponding parameters that you will find on them. Now that we have introduced the software let's move on to the first step. In this first step, the main NAS settings are chosen. The NAS chip, which is the platform in which you are going to program the NAS, it's just used to automatically configure the constraints file for the VHDL project. OpenNAS fully supports the AER-Node board, the ZTEX platform and the SOC-DOCK but you could also select other and configure the constraints file on your own depending on the platform that you're going to use. Then, the clock frequency, which is the fourth parameter in this screen, depends on the platform, so be careful when setting this value. NAS type is the second parameter with which you can select either if you want a monaural NAS or a binaural NAS. Then, the number of channels are the number of frequency bands in which you would like the audio to be decomposed. The second step in the OpenNAS wizard is related to the audio input source. First, you need to select the audio input interface that you would like to use. At the time that we're making this video, four different input sources are supported in OpenNAS: AC'97 codec, I2S audio ADC, PDM microphones, and a combination of both I2S audio ADC and PDM microphones. As you can see, depending on the input source selected, different parameters need to be set, like the spikes generator settings and the PDM settings, among others. Each of these parameters and settings are detail and explained in the wiki, which can be accessed through the Help button at the bottom left side of the window. Step 3 is audio processing architecture. Here you first need to select which architecture you would like to use: cascade spike low-pass filter, parallel spike low pass filter or parallel spike bandpass filter. For each of these architectures you can set the start and stop frequency to select the frequency range of the sensor and also the output attenuation. This left column shows the target center frequencies for each of the bands. In the next column, you can see the cutoff frequencies for the filters that will be implemented in the NAS model. The last column shows the attenuation for each of the bands. Now we will move on to the next step, which is the fourth out of five, and it's related to how the output spikes from the filters that were configured in the previous step will be propagated to the next layers. Different options can be selected: a spikes distributed monitor, if you want to monitor the spikes information on a different platform using a parallel AER asynchronous bus; a SpiNNaker-AER interface, which will be used to communicate the spikes to a SpiNNaker board using the format and protocol that SpiNNaker needs; or an AER monitor and SpiNNaker interface if you want to both monitor the spikes information and also send them to a SpiNNaker board. More information of each of these options can be found in the wiki, so feel free to check it out if you have any doubts. The last step is only about selecting the destination folder in which the output files will be generated. After selecting it, click on "Finish" and your new NAS will be generated at the folder that you specified. The output folder contains three subfolders: Constraints, Project, and Sources and it also has an XML file that it's generated by OpenNAS with a summary of the NAS configuration that you selected. Remember that now you will need to create a project in either Xilinx ISE or Vivado in order to synthesize the NAS and program your FPGA. We have now explained how to use the OpenNAS app and how to create a custom NAS sensor for FPGA. Please, don't forget to visit the OpenNAS GitHub page and its wiki for further information of every of the parameters and steps described and, if you want, you can also contribute to the project and give us some feedback for future updates. We hope that you find this tool useful for the research and projects. Thanks for watching! 