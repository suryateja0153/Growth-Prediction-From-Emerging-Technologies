 [Music] so hi everyone now we'll be talking about a new tool for quantum education and it also happens to be a fun game so quantum computing can be very complicated and very intimidating to first get involved with now more than ever it's really critical that we figure out how to make this field and the opportunities that it can offer more accessible to everyone and that's where quantum chess comes in it's like regular chess but with the ability to also make quantum moves last year google partnered with chris and spiroz michalakis the quantum outreach lead at caltech to build this out further we had two goals in mind first we wanted to provide a fun and approachable way for anyone to learn the fundamental concepts of quantum mechanics and second we wanted to create a case study to teach aspiring developers how to build a project like this on circ google's open source python framework for creating and executing quantum circuits so today we're going to cover how quantum chess works on a classical computer show some examples of quantum moves you can make and also show how we've adapted it to run on circ so now i'll hand it over to chris to explain in more detail thanks megan um hi everyone i'm chris cantwell i was the original creator of quantum chess i'm going to talk to you a little bit about the motivation behind the game and some of the gameplay aspects of quantum chess so if you were here earlier you heard hart mention the desire to teach interference patterns to third graders but as he aptly pointed out as humans we aren't really built to easily grasp these concepts i think that's because we don't really interact with quantum physics on a daily basis as far as we can observe right i like to use the analogy of gravity a lot in this case i'll be talking about classical gravity not quantum gravity um i think we all have sort of an intuitive understanding of how gravity works i mean we know if you drop a ball it's going to fall and hit the floor you can make pretty good guesses about if you throw something how far it's going to go before it touches down and you don't need to know all the complex math behind gravity to be able to make these intuitive guesses about how it's going to work or what's going to happen in certain situations so i thought that if we could give people a way to interact with quantum mechanics in a more tangible way some of these intuitive understandings might develop and i thought a game would be a good way to do that and so i set out to build a board game on top of a quantum simulation i decided that the rules would enforce all of movement needed to be implemented through unitary evolution and that the player would be able to create superposition in the game and i thought if you had those two requirements then you might get other quantum effects like entanglement and interference for free and players might be able to come up with gameplay strategies that actually used quantum mechanics so one way to think about movement in a board game is through swapping the occupancy state of the the squares on the board so if a piece is in a square you can think of it as a one and if a piece isn't any square you can think of it as a zero so if you want to move a piece from point a to point b you swap the one and zero and you've effectively moved where that piece is this leads to a natural unitary for implementing movement on top of a quantum state it's the swap unitary or the i-swap in the game i chose the i-swap for a number of reasons including possible future hardware implementations once you have that unitary you also have a natural way for players to create superposition through the square root of an eye swap which effectively puts a piece in a superposition of having moved and not moved at the same time so with those two unitaries i was able to build up the rules of quantum chess or of chess on top of a quantum simulation of 64 cubits the main difference is pieces now have access to a split move so here on the left you see a board i can try and split this knight to occupy both a3 and c3 and what you're presented with is a probability distribution of finding the knight on a3 or finding it on c3 what's actually going on in the back end is you have a superposition of possible boards one where the knight moved to a3 seen here on the right and the other where the knight moved to c3 seen on the left here so that's the the primary way players can create superposition in the game another effect that you can get pretty easily out of the game is entanglement so one of the moves you can do in chess is this pawn here on c2 could normally move forward two squares if it's its first move now on one board there's a knight there blocking the way so if you try to do this move you actually end up with a entangled state where the knight if the knight was there blocking the pawn didn't complete the move and if the knight wasn't there blocking the pawn did complete the move this is done with a controlled eye swap on the qubits that represent those squares so you can see here on the right that if the knight is there the pawn did nothing if the knight wasn't there the pawn did move forward and you also gain a phase of eye because recall that the movement is accomplished with an eye swap the final effect that is important in the game at least for our discussion is measurement so there are times when two pieces that are different might interact so if i wanted to try and move this queen from d1 to c2 there's a board in the superposition where the pawn is there and that wouldn't normally be a legal move and there's another board where the pawn isn't there so that is a legal move the game enforces the rule that you always have to be able to say what type of piece is on a square and so what it will do is actually measure the c2 square and you can see that here and it finds that the pawn is there which notice collapses the superposition such that the knight was here blocking its move and then the queen wasn't able to complete that move uh measurements are non-deterministic so you can get the opposite outcome if we try this a few more times we might see that opposite outcome might get lucky on like the third try or maybe we'll have to try it five times i've gotten lucky in the past and it's always been on like the second or third try we'll try it one or two more times and then i'll just move on you go so you see the other outcome as well where the knight was over in c3 or is found to be in i mean a3 the knight is bound to be an a3 and so this pawn did move forward the state collapses to that state where this queen can then successfully move to c2 so this was a quick overview of the rules of the game and how it works this project with google has been to try and get the game to a point where it could export some of this quantum behavior to an external resource that could maybe then run stuff using circ um and so now it supports an api that we can implement and we have implemented with circ and we'll be able to see some of that in effect now i'm going to pass it over to doug thank you so we know that there are significant challenges from bringing an algorithm from theory into practice and we've seen these challenges already in the earlier presentations and we're going to continue to see them again and again as more experiments move from theory to using this hardware and since quantum chess doesn't require a lot of specific domain knowledge we think this is going to be a great proof of concept to illustrate these challenges and really boil down the essentials of what it's going to take to get an algorithm ready for the nisk era so to that end we're going to be introducing a new tutorial in circ that's going to educate users through all of these steps from constructing circuits from quantum chess moves all the way to preparing their experiments for noisy hardware so among the challenges we're going to look at are qubit mappings so each algorithm is going to need to map logical qubits in this case squares on a quantum chess board into physical qubits that match the topology and the type connectivity of the underlying hardware device and it really has to do this dynamically so your day isn't ruined when you find out one of the qubits you were using has dropped out or is performing badly so sir can help with this and the tutorial is going to show you how you also need every algorithm is going to need gate compiling and decomposition so hardware doesn't support every gate so for instance this entanglement needs a controlled eye swap so that's a three cubic gate that no hardware is going to support so we need to translate that into gates hardware can support so cirque can help with this too and lastly and most importantly if you want to run in a quantum computer in the next decade you have to deal with noise and being able to run with a noisy sampler is one step from taking your algorithm from perfect simulation to actually running it on hardware and that's what we're going to show next so we're going to run through these same moves that chris showed but now we're going to run it through a noisy sampler on circ so the view changed a little bit so let me explain what you're looking at and on the left side you can see the quantum board ui as before and on the right side you can see a console output of what's kind of going on behind the scenes and a few things that it's doing are constructing the circuit from the moves so you can see a text version of that circuit there and that's something that comes with circ is then dynamically compiling this into hardware gates and based on the moves you've done mapping the squares on the chessboard into physical qubits lastly it's running it on a noisy sampler that's going to add noise to each gate and then it's going to perform some basic error mitigation to kind of cancel out some of that noise and take get rid of outcomes that don't make any sense like if pieces appear or disappear for no reason so as this is running the last thing i'm going to mention is that while circ does have support for adding noisy models to simulation this noisy sampler is in fact a little bit special because it's in fact a noisy intermediate scale quantum device and is actually running live on our quantum processor in the new data center inside santa barbara and is using this the google's quantum computing service with circ to call the quantum engine api right now so what you're really seeing right now is quantum chess moves occurring in real time using a real quantum computer so in order to generate all these probability statistics that are generating these nice fiery animations is requesting a thousand samples more if post selection is required sending it to the actual quantum computer and getting results back and interpreting this and all this is happening uh in within about three to five seconds per move so you can kind of see this happening as you're watching so as well as seeing a live demonstration of our quantum computing service you're also probably witnessing what is probably one of the most expensive board games uh ever run as well and with that i'm going to hand it back to megan to to give some closing remarks amazing thank you doug so i hope you all enjoyed this brief introduction to quantum chess now i'll quickly discuss some of our next steps so first we want to apply quantum chess to education we've been working on improving the user experience like creating puzzles where you need to make quantum moves in order to win and making the game as easy as possible for everyone to understand including middle and high school students as doug mentioned we created a quantum chess circ tutorial so anyone can see start to finish how to run this kind of project on quantum hardware we want to spread the word about the game and get it integrated into some courses and lesson plans so if you may be interested in trying this out please let us know second we're really excited about the future applications to quantum ai games like chess have historically been very important for providing a basis for development of classical ai quantum chess could play a very similar role in powering the development of quantum ai and for quantum machine learning there's a better chance of finding quantum advantage on quantum data quantum chess moves provide a natural way for us to generate this quantum data and third with the ability to make quantum moves the game of chess can now become a lot more interesting so tomorrow we're hosting an optional activity where you can see quantum chess in action first you can watch a chess game between chris the creator of quantum chess and conrad a chess grandmaster and then we'll work in teams to solve a series of puzzles so that's it for our presentation thank you so much for your time today 