 the classical computer that you have right now can do this in six tries but what's even more impressive is that a quantum computer can do this in one try [Music] hi welcome back to coding with kiss kit this is eight let's see there's a secret number hidden inside a box and that number is described by six bits so six strings of zeros and ones how many attempts do you think you need in order to guess that number correctly if you had a classical computer you could find that secret six bit number in six tries and in fact if that six bit number was instead sixty bits that would take you sixty tries and in general if it had n bits you'd need n tries in order to find that secret number so this thing can quickly add up right but if you had a quantum computer then you can use what's known as the Bernstein buzzer on algorithm to determine that secret number in one shop independent of the size of that number so what I hope to do in this video is show you how to implement this algorithm in kiss kit so the Bernstein buzzer an algorithm is an example of many quantum algorithms where a quantum computer outperforms a classical computer so let's ask our computer to guess a secret number and in particular this is going to be a binary number so it's going to be described by bits strings of ones and zeros and let's say we write down the secret number in this case I'm going to pick a specific one it's going to be one zero one zero zero one and I put that secret number in a box now the point of this box is to give us one function and that function is if you feed it a guess it will tell you yes or no so how would you determine the secret number given this box where you don't know what's inside it one way to do it would be to ask this box hey is the number inside zero zero zero zero zero zero and the box would say no that's not the number in here so then you change the number and ask is the box having the number zero zero zero zero zero one inside and the box would tell you no that's not the number and you do this until you stumbled upon the right answer which is the secret number inside the box here's how your computer would do it so your computer would write down the number is zero zero zero zero zero one next to the box and it would apply what's called an end operation and when it does this the end operation is effectively going to tell it one wherever the two numbers are 1 and 0 when they're not one together so this gives you 0 this gives you 0 this gives you 0 this gives you 0 and this gives you 0 so by doing this what your computer has done is figured out that this digit is 1 in the box and then your computer would continue by doing the same operation using 0 1 0 here and as you can see what it's doing is trying to figure out if that second number is also 1 and by doing this with a third and operation a 4th and operation and doing effectively six end operations it would figure out how many of the digits in the secret number are 1 and by doing so the computer would be able to find out what the secret number is inside the box in six tries instead of the 64 that it took by just guessing randomly so where did we start off 64 tries to find that secret number seems like a lot of work the classical computer that you have right now can do this in six tries but what's even more impressive is that a quantum computer can do this in one try and what I'd like to do is show you how this algorithm works on Kiska so as always I'm going to first import kiss kit so I'm going to save from kiss kit import everything and I'm going to prepare to visualize my results by saying mat plot live in line and from kiss kit tools visualization import plot histogram so now we're ready to start working with kids kid and I'm now going to say the secret number is 1 0 1 0 0 1 so this is the secret number that we've been talking about so far so let's start by building a circuit made from 6 which is the number of bits that we have in the secret number plus 1 qubits and 6 classical bits on which will store results and what I'll do is start off by applying a Hadamard gate to the first 6 cubits out of the seven qubits that I'm using so I'll say Hadamard on 0 1 2 3 4 and 5 so these are the first 6 cubits alright so let's apply that and as always let's do circuit draw output equals my plot line and that's how our circuit looks right now for the last qubit I'm going to do one more thing which is to ask for an ex-gay to before applying a head of art on it so I'm going to say circuit X on qubit 6 and circuit H on cubed 6 alright let's see how that looks so now this is our circuit looks we have had a March on all the qubits with this additional X gate on the last qubit I'll put a barrier here so that things are a bit clearer for us a barrier simply adds this vertical line that you're seeing here and now what I'm going to do is build the box that contains the secret number so remember that the secret number is written in here and what I'm going to do is for every one that I seen the secret number I'm going to put a CX gate and in particular the way I'm going to apply the CX gates is as follows so I'm going to say circuit CX you see this one on this first bit so I'm going to go from the last qubit that we didn't have the X on up to that qubit that is the last qubit in the lines so I'm going to say CX from 5 to 6 and see how that works yep so that's the first one in our secret number so let's keep doing this so the secret number is 1 0 1 0 0 1 so the fifth bit is going to have a controlled X the third bit is going to have a controlled X so I'll do 3 and finally the zeroth bit is going to have a controlled X so this is how our circuit looks let's draw it so now the easiest way to see that the secret number is encoded in this box is by reading off 1 when you see a controlled X and 0 when you don't so 1 0 1 0 0 1 here and that's the box that encodes the secret number so I'll make it clear by applying a barrier here again and this is how our circuit looks and finally what I'm going to do is apply another set of Hadamard gates so I'm going to apply that operation again and that's how a circuit looks and that's it we've now built the Bernstein buzzer on an algorithm so in order to understand how the circuit works I'm going to add measurements at the end so I'll put another barrier and I'll say circuit measure and in particular put the results from bits 0 1 2 3 4 5 into the classical bits 0 1 2 3 4 5 and that's how the circuit looks now we're done and we're ready to simulate the circuit so let's run the circuit to see that it's working so what I'm going to do is say the simulator is err get back-end kasim simulator and I'm going to execute the circuit that we've built so far I'm going to choose the backend to be the simulator and I'm going to say I want one shot because I promised you that this would all be done in one shot I'm going to take the result of this execution and store it into a variable called result and then I'm going to say counts is result get counts and then what I'll do is print out the counts so that we see what the output is and as you can see here in that one shot that we did the result was one zero one zero zero one so the circuit was able to guess our secret number in that one shop now let's try a little bit of an advanced example so what I'm going to try to do here is to generalize the code so that it works on any secret number so to make this a bit more general here the changes that I'm going to do so instead of saying apply the Hadamard gate to qubits 0 through 5 what I'm going to say is apply the circuit dot H going through range length of secret number so in Python what this does is return exactly the array 0 through 5 for this particular secret number and again what I'm going to do is comment this line out and say apply this to the last qubit and then apply this Hadamard also to the last qubit ok so again let's rerun our piece of code let's see how the circuit looks nothing has changed so what we've done is changed this part to be a bit more general now let's change the box so how was the Box encoded we simply applied control X's wherever we saw a 1 in the secret number so how would I write to have this logic in Python so I would say for I I yes/no in enumerate the secret number and in particular remember that we built the circuit from top to bottom meaning when we saw one the controlled X was applied to the bottom most qubit and so what we're going to do is not take the secret number but reverse it so I'm going to say reversed secret number I'm going to say if that string contains one then I'm going to apply controlled X going from the index of that cubit to the last cubit okay that should do it so that replaces these lines of code so I'll comment these out and finally so let's check again our circuit looks again we have one zero one zero zero one here we're going to say all these Hadamard gates again can get replaced with this line of code I'll comment this out look at the drawing again see that nothing has changed and the measurements of course going from this range again to this range and that's it so we've now rebuilt the circuit in a more general piece of code the last change I'm going to make is change this number so the quantum circuit that we're building is not just composed of six cubits anymore but the length of the secret number plus one and it's going to have as many classical bits as there are bits in the secret number so that's it this builds our circuit in a more general form and in particular if I were to go and change the secret number from one zero one zero zero one to something like one one one zero zero zero the circuit would be updated and I can use this circuit to find that secret number in one shop and again it's not just that I can change the secret number in these two forms but I can also change the length of the secret number and the quantum circuit should update to accommodate that change in the length of the secret number so hey Paul do you want to give me a hand here so what I'd like you to do is change the secret number up top to something that you'd like and I'll cover my eyes as you do this and remember to hit shift enter after you're done and scroll it so that I don't see that secret number okay any number and you know Brownton numbers yep so that I don't see it okay okay so I'm claiming here that I can find your secret number Paul by running the quantum circuit and it looks like your secret number was 1 1 0 0 1 0 1 0 0 0 1 1 1 0 1 0 1 0 was that was that your secret number again instead of talking to Paul I have a better way here which is that trying to go up and look at the secret number and doing comparison side-by-side by pasting it here so I'm confidence now looking at this that I did find the right number so this is cool right so for the classical computer we needed six tries to find the secret number but as it turns out for the quantum computer we only needed one try if you'd like to learn more about the mathematics behind the algorithm we suggest that you take a look at the link below to the online Kiska textbook and in fact now that you're equipped with the knowledge to understand these quantum circuits and write them and execute them what you can do is take a look at the other quantum algorithms in the Kiska textbook and see if you can run those as well so one thing that you could do is also to try to run this quantum circuit on real Hardware tell us in the comments down below what results you find when you do this as always thanks for watching and we'll see you next [Applause] [Music] [Applause] [Music] 