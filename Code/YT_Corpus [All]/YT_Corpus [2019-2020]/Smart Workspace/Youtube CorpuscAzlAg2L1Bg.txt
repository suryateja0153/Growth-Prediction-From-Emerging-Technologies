 This is Brian Wren with the Azure Monitor team at Microsoft. In this video I'm going to teach you how to write a log query in Azure Monitor. I'll use the Log Analytics tool in the Azure Portal, but focus on the query itself as opposed to the features of Log Analytics which are covered in a separate tutorial. Feel free to follow along in your own environment or use our demo environment, which is what I have here. Data is stored in Azure Monitor Logs in multiple tables and each table holds a particular type of data. Different tables will have different sets of properties. Azure Monitor log queries are written using Kusto query language or KQL. A query starts with the table name and this is the simplest query you can write. This query returns all records in the security event table which holds security events from agent computers. Add commands to a query with the pipe character. The output from each command serves as the input for the next, and a query can include any number of pipes and commands, giving you the ability to create complex queries combining different sets of data. For now I'm going to add a take command which limits the output to a certain number of records. This is basically a random set because I'm not sorting the records, but if I put a sort command before the take then I can show the most recent 10 records. Now let's look at how we can filter data using the where command and you'll use this command in most queries that you right. Let's return just the records where the level equals 8. We can combine multiple criteria with an and so maybe I want to exclude records with a certain event ID. Instead of using and, you could just choose to use multiple where commands, just a matter of how you choose to build your query. For these queries, I've used the default time range, which are records created in the last 24 hours and those are identified by the time generated property that's included in every table. I can specify a different time rage in Log Analytics, or I can include it in the query itself. Notice when I use any criteria with time generated, it overrides the timepicker I'll use the ago function to specify records within the last three days. Now let's add some functions that will let us control our output. With project you can specify a list of columns to include in the results. And notice our results are now limited to these properties. Extend keeps the original set of columns and defines additional ones. This can be particularly interesting when you use a function to calculate the value for a new property. For example, I'll create a property that uses substring to pull the first 4 characters from the activity property. Now, instead of just returning records, let's do some aggregation. For this, you're typically going to use the summarize command building on this example, I'm going to do a count of error records for each computer. I can make that a little more granular by including the event code in the summarization as well. Now that I have a numeric column, it can be interesting to do a visualization of this data. I can do that with the render command, and in this case I'll do a pie chart. Log Analytics is smart enough to choose which breakdown we want to view in our chart. As one last example of summarize, here's another query that uses performance data instead of just counting. The summarized records we're taking the average of the counter value over one hour increments. This is ideal for visualizing in a line chart, which might be something that I would then pin to an Azure dashboard. You should be able to see by now that once you know the basics of writing a log query in Azure monitor, it's just a matter of knowing what commands are available and how you use them. You can get that information from the KQL reference which has all the detail you need to build whatever query you require. Now that you've been through this tutorial, I'd invite you to have a look at the documentation where you'll find a variety examples for all kinds of scenarios. Thanks for watching. 