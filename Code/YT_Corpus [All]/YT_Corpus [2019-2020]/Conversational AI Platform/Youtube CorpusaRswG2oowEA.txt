 [Music] hi i'm priyanka vergaria and thanks for tuning in to deconstructing chatbots today's episode is a special one because i have invited anu shivastov from our cloud ml team hey anu how are you i'm doing great i'm really excited to be here and share some things about integrating google chat with dialogflow well awesome let's dive in we know that dialogflow is a natural language understanding platform that helps us design and integrate conversational experiences for mobile web phone and lots of other things and google chat is an intelligent messaging app within g suite built for teams to make it easy to have one or more threaded communications in a virtual room right so it also has a third-party platform an sdk for bot integrations and that's what i'm excited to to be talking to you about today well cool what are some of the benefits of bots in google chat so if i'm a user um i don't really want to have to install an app for every task that i have to do so that's you know installing apps for mobile or desktop you can just do some of your workflows and automations in a chat room by direct messaging a bot with an at mention to get started right so if i wanted to chat with you normally when i chat right i would just say add anu and your name would pop up and then i would start typing whatever i want to ask you um so it seems like that's exactly what you do with with bots you just type add the name of the bot and if you don't remember the name it'll just populate a list of names and then you can select from it which is awesome yeah so to make it easy with bots you can kind of treat bots as you would humans in the chat room and then now you have this uh team memory in the chat awesome well yeah so as a developer how do i get started in setting up bots in google chat so let's take an example today we'll use a use case that comes from our sales team our story actually starts in a sheet google is a large company and it's hard to know who the right person is to contact our sales accounts are grouped into clusters and each cluster has accounts and then within those accounts we have account managers and engineers that specialize in skills like security and networking so it gets really complicated to figure out who the right person is to ping when you get a question even within your department so we have lots of spreadsheets like this used by the sales team i have a copy of one of these sheets from one of the european teams i have scrubbed out their names and test accounts uh these are this is test data and instead of actual customers listed we have uh we're using some google products but the setup of the sheet is the exact same currently say if i'm a sales rep and i have a question about who is responsible for this particular piece of information i would come to this sheet and look for my answers right right so for example let's say i get a question like who can advise on security best practices for the youtube account first i would want to find the engineer in that cluster and then figure out who is on security or maybe i actually need to connect to someone who knows the account info so i would connect to the account manager let's say you know i need networking for analytics then i would check here well this works fine but if you're on the go um and you're just looking for this information you really don't want to look for a street sheet url and then and then try and find that information within it because that can be too hard right and it would be great if i could just get this information in chat most likely what i'm going to do next is open a chat tab to talk to whoever i find in the sheet and that's where this bot comes in i don't want to have to open a new tab and wait for it to load reducing contact switching is a key point in using bots right and then slow chrome tabs when i have a thousand of them open right that would be cool but this sheet looks pretty complicated how are we going to be able to extract all this information um into things that we need i'm glad you asked so we'll actually be using the sheets api and you're right this is pretty complicated it's designed for human consumption it's you know it's not really a database but we can work around that so to answer a query we need to know three pieces of information number one the account name so we can get the cluster number two the specialty and last but not least the role type oh i see that this is going right in in usually when you create uh bots or chat applications you need the pieces of information that act as your input so in this case these three pieces of information become your input to the bot exactly so i could write a basic bot that expects these three inputs in a certain order but it would be unnatural and difficult to use as a user i'd have to remember the exact order and i'd always have to spell everything right which i definitely don't do and we know that with technology if it's too hard to use people aren't going to use it so this is where dialogflow comes in yep and that is what dialogflow is great at doing because it's powered with natural language understanding and it helps understand uh normal human words and it's okay to make mistakes it's okay to ask um you know not in order sometimes and it would still be able to understand what you're saying yes so i'm going to show this to you in reverse let's take a look at the bot and then we'll break it down on how we built it so let's do a couple test queries say i want to know who is on gmail for data management great and now we see the follow-up intent because you need one more piece of information awesome so now let's actually break it down first we need to define the entities then we'll make the intents and then we'll implement fulfillment to make this all work well if you've watched previous episodes of this series these concepts should be familiar but if not then the playlist is linked below go check them out step 1 defining the entities let's look at the specialties that we have in this table which will group together similar words i define the synonyms and enable fuzzy matching to be generous with the input meaning if i make a typo which i definitely will it will still connect to the same entity the synonyms are really key to making the system robust right and say in this case if you're if you look down into g suite uh we can see that they're all grouped together like docs in gmail so now let's define the intent the intent is a category of what the user is asking for their intentions so you always want to have a welcome intent and it's best practice to give the user some instructions on how to interact with your bot so when i first add the bot to this room this is where the response comes from and then now we want to know what happens with those intents or when those intents are triggered so the actions and the parameters for those intents right so we've defined the intent look up googler so this is where all the good stuff goes let's go ahead and put those entities into this intent they are all required for this intent to be fulfilled if the user forgets one of them i define a prompt to get it from the user as we saw earlier so if they forget a piece of information they'll see this prompting question got it so they forget in in our example use case right they forgot the account so um they see the question to it to input the account information yep cool okay so what if they're like different people talk differently so they will ask the question in a different way how do i train the bot so that all these examples are incorporated so that's where step four comes in training phrases in my opinion this is the fun part dialogflow uses a pre-trained model but we can add our own specific questions for the spot so i've added these as training data and you can see that it'll detect the parameters i just told it about so once we put all that information into the training phrases how do we actually know that it's all working how can we test this so in the console you can actually test it out um exactly how it would work on google assistant so i know that we're building ours for g suite but i will touch on how you can support multiple platforms just right out of the box in a bit now let's see how this actually connects to the back end in this case the sheet the sheets api right so um we would have to go and create a web hook how do we do that great yeah let me just go ahead and show you step five the fulfillment code so we can look at this node.js code which is using those libraries we're talking about so like the sheets api the chat api all of these in the the package which has all of these libraries now how can we add the images and buttons and other types of widgets if they are needed for the interaction to work yeah this is how we make it really rich we just construct these with json how we want the chat cards to look and then push it to the dialogflow agent we want to make this work with google chat so how do we make that integration so here in the integration section chat is actually enabled by default but let's say i wanted it to work with multiple platforms i could just select some of the other boxes in this section so it's that simple it was really just a click of the button to actually enable it once we got the bot to work this has been awesome anu thank you so much for showing how it's done for anyone who wants to try this out anu has the code app on github which we have linked below and if you'd like to dive deeper or have any questions leave us a comment or tweet at us bye you 