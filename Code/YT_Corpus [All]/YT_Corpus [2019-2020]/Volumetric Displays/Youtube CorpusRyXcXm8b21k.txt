 Hello and welcome to another Shadergraph tutorial This time we will show you some tricks we recently used in our game BEAM In one of the levels we needed a big lake of mean looking acid or nuclear waste If you would like to see more of beam you can find some links in the description If you like the effect and the kind of look we achieved then please stay and we will tell you how you can build something for yourself with the shadergraph To make it a bit more interesting we will do it completely procedural without any textures! This effect can be broken down into a few simple steps: First, we need some data to be able the depth related effects like the color change where the liquid is not as deep as in other parts and the fading of the objects that are in the liquid or below the surface. Next, we use this data and a few more nodes to create transparency and a nice coloring for the acid. The last step is adding in some surface variations by creating a normal map and using vertex displacement. Before we can start we will need to have a scene in which we can work. We created a fresh hdrp project and removed the example assets from the scene. To make it a bit more nice looking we will use this piece of geometry as a pit where our liquid lives in. Our liquid will be represented by a simple plane that is positioned slightly below the surface. Next, we check the package manager if the shadergraph is already installed and if it is missing we simply click on the install button. The last thing we need to do is to create a new shadergraph. Choose the “Lit Graph” from the “HDRP” sub menu. Now you can create a new material and switch it to the newly created shadergraph. Set the surface type of the material to “Transparent”. Assign the material to the object that is our liquid surface. If you open the shadergraph object you will only see a single node. This is your “Lit Master” node which is the main output node of your graph. Currently it does not do much. But we can already change a few settings. Click on the little settings icon at the top right. Change the “Surface Type” from “Opaque” to “Transparent”. Deselect “Preserve Specular Lighting” this will remove some visual artifacts on the transparent sections of the liquid. To hide the menu, click the icon a second time. The first thing we need to know is the distance between. the surface of the liquid and the geometry that lies below it. To get this we need two values. The first one is the distance from the geometry that Is already in the scene to the camera. This is fetched by a “Scene Depth” node with the sampling set to “Eye”. This means that the values are measured from the eye, in this case this means the camera, into the scene. It is important to know that this shows the scene without the object we are currently rendering! Next we need the distance to the surface of our liquid. We can get this from a “Screen Position” node in “Raw” mode. We feed it into a “Split” node and only use the alpha value which is the distance from the camera to the surface, exactly the value we wanted. Now we add a “Subtract” node and feed the output of the “Scene Depth” in the upper input and the alpha channel of the “Screen Position” in the lower input. To prevent an overly bright surface we feed the result into a “Clamp” node that clamps the value to a range between 0 and 1. The result can be connected to the “Base color” of the “Lit Master” node to get a preview. Taking a look at the editor window we can now see that the surface is black where it touches the ground object and fades to white the deeper it gets. If you do not see any changes, keep in mind that you need to press “Save Asset" in the shadergraph editor every time you made changes and want to check them! Next we add a property with the little plus sign up here and call it “Depth”. This depth will be added to alpha channel of the “Screen Position” and defines the depth to which we want the falloff to reach. If we set this to 1 we want the color to be black at surface level and fade to white where the geometry is exactly one unit below the surface. But if we change the value the result looks a little bit weird. This is because at the moment we only offset the depth value of the surface. If we set our depth value to 0.5 it has the same effect as if the geometry would be 0.5 units lowered. And beginning from this position the difference covers 1 unit. Basically at the moment we have the color black for everything that is at surface level and up to 0.5 units below it. From there it fades over the distance of 1 unit until it reaches white at a depth of 1.5 units. To counteract this we need to add a few more nodes. First, we add 1 to the “Scene Depth”. This offsets the falloff so that it is already white where surface and ground geometry are at the same depth. If we take a look at the editor again, we can now see that the depth value controls where the falloff ends. But if we stay below one, it is not black at the edges, and if we go above one, it produces a lot of black. This means we need to remap our values so that it is always at 0 at the edges and 1 at the depth we set. We start by feeding the “Depth” into a “One Minus” node because we always start at a value of one and go below it depending on the value of “Depth”. We then use this as the X value in a “Vector 2” node. Set “Y” to 1. Next, add a “Remap” node and connect the result of the “Subtract” node to the first input. The “In Min Max” will be the “Vector2” we just created. The “Out Min Max” will be set to 0 and 1. The result feeds into the clamp node and from there to the “Base Color” of the “Lit Master” As we can see, we are now able to control the falloff from the edge to the deeper sections with our depth value. To make the scene more interesting, add some objects into the liquid. To make everything a bit more neat and tidy we will group the nodes together and name them “Depth Calculation”. This already was the hardest part and we can move on to the more artistic things. The next step is to add some transparency to the coast line. It is not always desired to have such a hard edge between the liquid and the ground. We start by adding a new property of the type “Vector1” with the name “DepthToAlpha” and set it to “Slider” mode. The “Min” value should be 0 and the “Max” value should be 1. This will control how much of the depth falloff will be converted to a transparency falloff. Add a “Divide” node and feed the result of our “Depth Calculation” into the first input. “DepthToAlpha” will be the second input. This, again, needs to be clamped to 0 to 1. Feed the result into the “Alpha” input of the “Lit Master” node. If you do not see the transparency in the editor window, make sure you have set your material to “Surface Type” “Transparent”. If you see a shimmer on the transparent parts, make sure you unchecked “Preserve Specular Lighting”! Also, disable shadow casting on the surface object. Now that we can define how far the transparency reaches we can add another value to limit how transparent the edges can be. Add a property of the type “Vector 1” and name it “EdgeMaxAlpha”. Set it up to be a slider between 0 and 1. Create a “Vector2” node and use the “EdgeMaxAlpha” as the “X” input. “Y” needs to be 1. Create a “Remap” node and feed the output of the last “Clamp” node into the “In” input. The “In Min Max” needs to be 0 and 1. The “Out Min Max” will be the “Vector 2” we just created. The output goes into the “Alpha” of the “Lit Master”. As we can see we can now additionally control how transparent the edges can get. Group the nodes and name them “Edge Transparency”. Now we can finally switch over to the more fun parts. Adding color! We start by adding two properties. “BaseColor” and “DepthColor”. For the “BaseColor” we choose a nice slimy bright green. The “DepthColor” will be a darker more mossy tone. Add a “Lerp” node and feed the “DepthColor” to the first input, “BaseColor” to the second and the result of the “Depth Calculation” into the “T” input. This will fade between the “BaseColor” where the result of the “Depth Calculation” is one and “DepthColor” where it is zero. Connect the output to the “Base Color” of the “Lit Master”. Our puddle already looks really poisonous! Let us add some more color variations. We want our surface to be moving so we need to involve some change over time. Start by adding a “Time” node. Next we need another property. Create a new “Vector1” and name it “RippleSpeed”. Multiply the “Time(1)” output by this new property and feed it into the “Angle Offset” input of a “Voronoi” node. Set the “Cell Density” to something like 15. Adjust this to your own liking! Feed the first output into a “Power” node where “B” is set to something like 2 or higher, again, adjust this to your liking. The result should resemble something like a wavy liquid surface. It will get more obvious soon! Connect the output of the “Depth Calculation” . to a “One Minus” node Create another Blend node, set it to “Subtract” and use the output of the “Power” node as the “Base” input. The “One Minus” goes into the “Blend” input. Leave the “Opacity” at 1. Next add another “Vector1” property set to slider from 0 to 1. Name it “RippleIntensity”. A good default value is 0.75. The output of the “Blend” node goes into a “Clamp” node which has “Min” set to 0 and Max connected to the “RippleIntensity”. Now we add another “Blend” node in “Dodge” mode. The “Base” will be the output from our “Lerp” node and the “Blend” will be the result from the last “Clamp”. Connect the output to the “BaseColor” of the “Lit Master”. We can now control the speed and intensity of our surface ripples in the editor. To add even more variation, we will now add some more details to the surface. Since we will add some color cloudiness we will name our new “Vector1” property “CloudSpeed”. Set its default value really low like 0.02. Like we did it before we will multiply the “Time” by our property. This time we feed it into two “Vector2” nodes. Connect it to the “X” input on one and to the “Y” input on the other. Add two “Tiling and Offset” nodes and use the “Vector 2” nodes as inputs for the “Offset”. Now we quickly add another “Vector1” property and name it “CloudScale”. Set the default Value to something like 10. Each of the two “Tiling and Offset” nodes go into the “UV” input of a “Gradient Noise” node. Connect the “CloudScale” to the “Scale” inputs. We should now have two noise textures. One moving horizontally, the other one moving vertically. With another “Blend” node set to “Multiply” we can now combine the two “Gradient Noise” nodes to a nice organicly moving texture. Create a new property “CloudIntensity”. Set it to be a slider from 0 to 1. Use 0.7 as the default value. Add another “Blend” node after the one which adds the Ripples. Use the output from the previous “Blend” node as the “Base”, the clouds as the “Blend” and the “CloudIntensity” as the “Opacity”. Set the “Mode” to darken. This looks more like the radioactive acid spill we were looking for. But we can still add something to enhance the look even more. Group our new nodes together and name them “Surface Colors”. To make it look less flat we will now add a normal map. Start with a “Normal Map from Height” and feed the result of the “Blend” node that mixes the two “Gradient Noise” together into it. Follow it up by a “Normal Strength” node. Add another property with the same name and connect it to the “Strength” input. 1 is a good default value here. With this property we can adjust the intensity of the normal map. Feed this into the “Normal” input of the “Lit Master”. To make it more visible we will add yet another property slider and call it “Smoothness”. Set the default to 0.5. This one will simply feed into the “Smoothness” input of the “Lit Master” node. Set it to a higher value and you should be able to see the effect of the “Normal Strength” property. Pack the nodes together and name the group “Normal Creation”. The last step adds some movement to the surface. Create a “Vector 3” node. Make sure that “X” and “Z” are both set to 0. Connect the same “Blend” node to the “Y” input that you used to create the normal map. Add a “Multiply” node and feed the “Vector3” into the first input. Create another property “Vector1” and call it “DisplacementStrength”. A good starting value is 0.2. Connect it to the “B” input of the “Multiply” node. We have just created a vector that points up and varies its length according to the value it gets from the two blended “Gradient Noise” nodes. We can now add this to the vertex positions of our surface to get a wavy motion and make it look more organic. To do this we need a “Position” node in “Object” space and simply use and “Add” node to add the “Vector3” we just created to the position. After connecting this to the “Vertex Position” input of the “Lit Master” node we should see movement in the surface. We can control the strength of the movement with the “DisplacementStrength” property. After grouping those nodes as “Displacement” we are done. At this point you should have something that looks similar to this. Of course you can play around with the values and sliders to create your own unique look or completely alter the graph to include textures and other stuff. We would be very interested to see what you can do with it! You might also have noticed that a lot of the techniques we used are similar to those used in creating water shaders. And I think we can let you in on a little secret: With just a few changes, this can also look like water! But it is not limited to liquids, with some more extreme values, it can be a gas cloud! As you can see, there is a lot of potential in a procedural graph like this. Feel free to tinker around and show us your results! As always: Thank you for watching! If you found this tutorial helpful or interesting, leave us a thumbs up! And if you want to see more of our videos consider subscribing to our channel. We also post unity tips on our twitter account on a regular base! If you have questions or remarks, leave them in the comments below or send us a message. See you next time! 