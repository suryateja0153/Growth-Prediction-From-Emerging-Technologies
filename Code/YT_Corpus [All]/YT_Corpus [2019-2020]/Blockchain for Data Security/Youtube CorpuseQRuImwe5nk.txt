 Hi everyone and welcome to another episode of Learn with Dr. G. Today, I have a very special guest on the show, Meaghan Lewis, who's one of my teammates, is here to introduce us to a new topic that I have never explored before, Blockchain. [MUSIC]  I'm so excited for this video because Meaghan has built some new Microsoft Learn content all around Blockchain, and I'd been so curious about it, so I'll let her tell you a little bit about it.  Thank you, Dr. G. I'm so excited to be here on your show today. Thank you for having me. I want to take a few minutes to talk about some new content that I created for Microsoft Learn. This would be a little different than some topics that you've previously covered, but my hope is that you'll all learn something new and inspiring about Blockchain technology and what you can do with it. First, I'll start with an introduction about myself. I'm a Technical Program Manager on the same team as Dr. G, and I focus on creating learning experiences for our Microsoft reactors worldwide community. My focus has to do with emerging technologies, which is a broad term to describe tech that is popular or trending or has the capacity to positively impact our society in some way. One of the topics that I've been focused on is Blockchain. If you're like me, Blockchain technology might have been one of those topics that you've heard a lot about, especially, with the emergence of Bitcoin and Ethereum over the past decade, I was really drawn into the cryptocurrency and wanted to understand more about this mysterious Blockchain technology and understand how it works, and what are some problems that it could possibly help solve. I had been fortunate to explore and learn not only on my own, but with the help of many other Blockchain experts, both internally at Microsoft and externally as well. Once I felt I had a good grasp on this technology and use cases, I wanted to share what I've learned with others. I was inspired to create a set of complimentary learning experiences to teach about Blockchain development for the Ethereum platform. My hope is that through Microsoft Learn Content, video series and corresponding live streams, I would have the opportunity to share information with others, but how they can learn all about the technology and explore the skills needed to become a blockchain developer. What I'd like to take a deeper look at today is the content that I've created for Microsoft Learn. Lets hop over to there now at aka.MS/blockchain-development-11. This takes you directly to the Get Started with Blockchain development learning path. You can also find this on Microsoft Learn by searching for Blockchain. To complete this learning path, all you'll need to do is have a Microsoft account, and sign into the platform to get going. You can see that I'm already signed in here in the top-right corner. This content is geared towards complete beginners, whether you're a student or professional, you don't need to know a single thing about blockchain to get started. The goal of this learning path is to learn about the foundations of blockchain and how blockchain technology works. Gain an understanding of tools and skills needed to develop on the Ethereum Blockchain, create smart contracts and Decentralized Applications and deployed to Ethereum networks. Additionally, you don't need much to get started. It will definitely help if you've had exposure to your programming language like, C, Python or JavaScript. It will also be beneficial if you have familiarity with the command line to how creating directories and install programs. You'll also need to have Visual Studio Code installed, and some other programs like Node.js to be able to complete the coding exercises. Next, we explore the first module in this learning path. The first module in this learning path is the introduction to blockchain on Azure. This module was created by my colleague, Pat Altimore, and provides a wonderful and very visual introduction to Blockchain. Pat clearly explains what Blockchain is, how the technology works, and how to decide if Blockchain is great for your solution. The second module goes into detail about how to use the Solidity, the primary language used to program for the Ethereum Blockchain platform. Solidity is a high level object oriented programming language. In this module, you will explore the language basics, on how to use value and reference types in your first ever smart contract, which is a program that lives on the blockchain network and describes how individuals can conduct business with one another. This virtual will allow you to get some hands-on experience working through Solidity examples in Visual Studio Code. The third module builds up the previous two by focusing on smart contracts. Here, I provide some more exposure to a suite of tools that you can use to make Ethereum Blockchain development easier and more efficient. You'll get familiar with the Azure Blockchain development for Ethereum, the truffle Tool Suite and more. I provide an introduction to how to use these tools to write and test smart contract. My hope is that you will then feel confident with what you've learned to go out and explore on your own using these tools to write smart contracts and applications for your own Blockchain solution. I also have more modules plan that will be released over the fall in winter of 2020. These modules will include topics on working with blockchain tokens, building decentralized applications, and deploying to Ethereum networks. You can jump around and pick and choose which modules you'd like to take and when. This content is completely self paced and provides all the resources you might need to continue your learning journey. By completing this path, you'll have acquired new skills and knowledge to go develop your own blockchain smart contracts and applications. There's a bit of an overview of what to expect from this Blockchain development learning path. I would love for you-all watching this to go and check out the content and let me know how you enjoyed it. Now, Dr. G, I'll hand it back over to you. Thank you-all for watching and thank you, Dr. G, again, for having me as a guest on your show today.  This is so exciting, if you want to check out all of the content that she's built, you can head over to aka.ms/LearnWithDrG/Blockchain, and you'll be taken to the Microsoft Learn learning path, here, you'll find the three new modules that Meaghan just went over. I just wanted to do a quick little experimentation with this. So far all I've done is gone through this first module and just started to understand what Blockchain is. Then I started going through the second module here, and there's this one exercise in this unit, that's right, your first contract, and I'm so excited to just try this out because I've never done this before. I've never written Solidity code, I've never done anything related to blockchain and I'm just really excited, so I figured we can try and experiment together. I'm going to go ahead and first of all, I want to copy this code, but I need somewhere to put it. I know in the third unit, Meaghan shows us how to set up Visual Studio Code in our local environment, and I normally do that, but for me, personally, since there is this in-browser experience, I think I want to try it out their first and then later I'll go through the third unit and try to set up VS Code. I noticed down here there is this remixed IDE, and I think this takes us, literally straight into in browser IDE. This is awesome, that seemed fast. Featured plugins, Solidity. I think these over here are the Solidity plugins, so looks like this. In browser experience is similar to VS code where it's got these plugins or extensions on the side, this looks like files, this is cool. Debugging, unit testing, contract fetcher, other plugins, okay cool. I think we just basically need to create a file, so I'm going to create a new file. We're just going to call this LearnWithDrG. Now, I need that code from the module. Up here, we've got this copy and I can just head over here and paste it. I'm just going to go through this first. The module did explain a little bit about it, but I want to just test to see if I understand this code before I go back and check the module, like flashcards. I've read through the first two modules, and I have the code here in front of me, so I'm going to test to see if this is right and if it makes sense to me. Let me zoom in, this is just kind of small. That's better. First, we needed this pragma solidity and then the version number so that's to make sure that this code works with the version of the blockchain that we're going to be using. This is just going to be like a local test, so I'm not too worried about that. Then we're going to create a contract and this one's called Marketplace. It would seem that we've got a seller and a buyer and then we've got this mapping that maps people or addresses so either a seller or buyer to an unsigned integer, meaning how much money they have. Remember, this is my first time, so if I don't get all of the words exactly right, you should check out Meaghan's blockchain video series that's coming out soon because she'll have more real words to say. But let's try this. Then we're going to create two events. One is a list item event. A seller can list an item for a particular price. Then the other one is a purchased item event where a seller can sell an item to a buyer for a particular price. Then the state is either the item is available or the item is purchased. That makes sense. That state is there. This is an eNum. That was one of the user-defined types, eNum which we've seen in other programming languages also. But I'm just excited for remembering these things. Then we're creating a variable called State that will be updated. Then the constructor for this contract will assign our seller variable to the sender and then we'll update the state to say that the item is available. Then the buy function that'll take in a seller and a buyer and a price is public and payable, meaning that we can exchange money between them in this function. We want to require that the price, which is this parameter here, is less than or equal to the balance of that buyer from that balances mapping. That makes sense, make sure that the buyer has enough money to afford this. If not, it'll say insufficient balance. If that's true, then we will update the state to purchased. We will subtract the amount from the buyer and add the amount to the seller, and then we will emit, so that's actually calling the event, that the item was purchased with seller or buyer and the value. Cool. I think that makes sense. Now, we need to compile this. This looks like that makes sense. I'll leave warnings hidden. I'm just testing this out for fun, so I'm not too worried about warnings right now. Oh, sweet. Okay. That's done. What are these other things? Oh, deploy and run. Oh, this is neat. So we can choose an environment. I'm just going to leave it the default. Then it looks like we've got some accounts that we can use to pretend those are sellers and buyers. Gas limit. I think, if I remember right, that's how many transactions can happen. I can't remember exactly. I'm not going to say what it is. I'm going to leave all these just default. It looks like creation of Marketplace is pending, transaction recorded one. Then we've got this nice little interactive thing. Oh cool, and it was done. It looks like that worked. I've got the addresses up here and this one used some Ether. Let me copy that address and see what the balance is for this person. Oops, I didn't actually paste it. Balance zero, so it got this like unsigned int zero. Then it looks like it's also showing us some info down here. Output is zero. That makes sense. This is basically an example of being able to buy and sell items. But we did have this require here. By the way, this is just how I would explore code for the first time when I'm just experimenting with it. Especially, when it's not a follow-along tutorial and it's just like, "Here are some sample codes, see what it does." This is how I do that. We have this require here that is checking to see if the price is less than or equal to the balance of the buyer. But I just realized we didn't initialize that ever. What if after this contract was deployed, each person could say this is how much money I have, this is what I'm bringing to the table? Do you think we could write that function? Oh, I'm nervous. Let's try it. We need a function. We'll call this initial balance or something. I like my function names to be kind of long. I like my function names to be accurately representing what it is and if it's a longer function name, I'm okay with that if it makes sense to, and have it be public. I don't think this needs to be payable because we're not transferring money between addresses or seller and buyer, we're just updating the mapping. But we do need to have, let's see, address. It's not really the buyer, it's just anyone so maybe participant. I don't know. Then amount. Because we need to say I want this person to have this amount. Then we basically just need to say this same kind of thing, but it's participant. But not literally all we need to do. I think this makes sense, but the only thing I'm worried about is, what if someone tries to assign money to someone else? This is just sample code. Disclaimer, this should not be deployed in a place where you need to be legit. I think, there's a lot of checks missing here. For example, we're not even talking about the items yet, where it seems the seller could have the address of the buyer and just say, "Hey, you bought this for $10,000. Now, you owe me that." There's a lot of checks missing here. But still I want to see if I can add in my own required check to make sure that it's this person who is saying that that's the amount that they have. So I'm going to try this. Sorry, I don't know why I'm so excited to write code in a brand new language I've never written code in. Does anyone else get that way? I don't know. Maybe it's just me. Participant. Well, I mean, yeah, that's fine. Remember that when we are making a call on this contract, I don't know if that's the right words, up here, on online 19, the person who is sending the message, to the message sender, we were saying that that's the seller. The seller is instantiating this contract. In this case, though I think, I want to say that I want the person who is viewing this to be the participant. If it's not, then maybe I should spell, balance. Cool. Well, let's just try this, then we just add the amount. Sure. Why not? So let me save this and recompile. We've got recompiled. What happens if I come back over here and I redeploy. Cool. It's here now, because this was the first one. Cool. Look, there's initial balance. Awesome. I'm going to come up here and I want this first person to be the seller. So I'm going to say this person, what is their balance right now? Zero. I want their balance to be 10. Is that going to work? Oh, I'm nervous. It says it's pending. Is that working? Did that work? I don't know. Oh, look it did. Update 10. Oh, okay, it finished. Call to marketplace balance. So it did. Look, it updated it to 10. It's so exciting. So now, the original person, can sell to the second person something for five dollars. Sure. Why not? So seller, buyer and amount. So now this person's balance should now be five. Then the seller, did the seller work? I'm going to copy that one. Oh my god, that's so cool. Basically, something should be one and I think that's item purchased, which is the one not zero. So it's been purchased. That is so cool. How long was that? I felt like that was like 30 seconds. Basically, what we did was we went over here, we got the code from this unit, from the learn how to use solidity module, and then we pasted it in here, compiled it, but then we realize that no one had a balance, and so this require will always insufficient balance. So then we added in this function. This person could totally just give themselves $100. Then that one still has five. You cannot update it. So oops, I was on the other person. Sorry. Am I on the next person? The second person, and then balance. Now, it's 100, which actually took away their five. So maybe this should actually be plus equals. We want people to be able to add extra money, so plus equals. If you want to bring more money to the table, just go ahead and add it. So let's go ahead and compile that. Compile, let's redeploy. Here's our new deploy. So let's go checkout this second person. What is your current balance? It's zero. Now, I'm going to set your balance to five. Perfect. Now, I'm going to switch back to that first person. What is your balance? Zero. I want you to sell to my second person for five. Balance is now five and of the first person is also five. Then now, if I were on the second person and I wanted to update their balance to add 100, and then I pick their balance, it's 100. Here's all the stuff I just did. Did that not work? Oh, 200. So it is adding it now. I just realized that we named this initial balance. Do we only want them to be able to add the first time. Do we want to add another, require that balances, participant equals zero and then add more funds. I mean, I don't know if that's a choice that you want to make, but I feel like then we can go through the equals. You only add funds the first time. It's like you come and you say this is how much I'm willing to engage with this transaction, then everything else has to be bought or sold. I don't know. That's a decision that someone could make. Let's try that. Let's compile and let's redeploy and bring this one out. Let's just double-check. So we've got this first person should not have no money, the second person also no money. I'm going to say the second person is going to add, let's do 30, just because we're not going to be able update anymore. So the second person now has 30. Then now the first person is going to sell something for this second person for, let's say, 10. Actually, before I do that, I want to give that first-person Internet of 10. So now, my first person has 10, my second person has 30, Now, I want to sell from my first person to my second person for 10, which means they will both have 20 afterwards. Then now, if I run this 20, and if we get the second person, copy 20, and if we tried to update this, it's like, "No way. You cannot do that." Oh, my gosh. That is so cool. Oh, that's so neat. I don't know about you, but that was my very first time ever doing anything related to Blockchain, and I am so excited to understand a little bit more about how this works. How there's just this shared states and shared understanding and this contracts and the codes makes sense. That was really fun. I want to know when you try it. This is a very basic outline of a contract basically. It's not functional in this first one. So I want to know what you do. Make sure that you go over to aka.ms/LearnWithDrG/Blockchain, and try this one out, specifically in Module II, unit 6. Also, if you like this type of content, remember that we've got a lot of other videos. We just did some recently on data science and space exploration. We have some exciting stuff coming up next. aka.ms/LearnWithDrG, will take you to all of those videos. I also do live streams every other Tuesday. So you can go to aka.ms/LearnWith DrG/UpcomingStream, to find my next stream that's coming up. You can register on Meetup and it'll just make sure that you don't forget where to go watch it. In fact, Meaghan and I both work with the Microsoft reactors, which not only have myself and her streaming and YouTube videos and Workshops and things like that, but also, our teammate, Christopher Harrison, who is a web guru. So if you love web development, you should check him out, and a number of other workshops and live streams and videos, a lot of which are in various time zones. So you can find something live for you, wherever you live. You can check out all of the reactor links here, and at the very bottom here, there is an e-mail sign up where we send just a monthly newsletter that highlights some of the recent live streams or upcoming ones and learn modules that you might be interested in. Be sure to check out the Microsoft Reactor too. With that, we've concluded, at least, my first dive into Blockchain. Maybe it was not a dive but like a toe-tip. But that was really exciting, and I can't wait to do that third module now. If you're trying it out, tag me on Twitter. Otherwise, I'll see you-all next time. Bye. [MUSIC] 