 (upbeat music) - Why don't I get started. So, I'm gonna talk about Blockchain, obviously, and how Blockchain can be used in documents in the future for security. So, I'm gonna start first with, what is Blockchain? So, first with traditional databases, you have data stored in a structure way, tables, relational databases, and it's all stored kind of in one location. You can create copies of it, but it's still just copies of the same data with a master and so on. You can eliminate redundancy by linking the data, through IDs and relations, but there's still data kinda getting spread out. Again, some of the problems with that data is stored in one place. You can have failover mechanisms, but they're all just copies. They have to sync back, and if you write to a copy, you can't really write to a copy 'cause then you've gotta link them back to the master, and could end up with conflicts. Another problem is data integrity. You can't keep track of these changes because the data is more dynamic. As you can update it, overwrite, and it is possible to have an audit log and keep track of the history, but it's not inherently part of the system. Other part, like I mentioned, is with race conditions. If you have multiple users editing the same value in different threads, they can theoretically write back the same value, even though they're... Or write back the same value when they're not supposed to. Where you look at something here, where you're just incrementing in a number, thread one increments it to 18, thread two, or thread B, does the same thing. Now, in the database, you've written back 18 twice, when that second one really should be 19. There's no validation there. So, what is a blockchain? It's a distributed database that maintains a continuous growing list of records, called blocks, that are secured from tampering and revisions. A block is a collection of transactions added to the chain. This makes it so you can create a type of history from the data, and they build off of one another. Because of this, you also have data security. Users can have copies of the database, because it's an open system. The users can check for security, and the majority of users decide what data is correct. So, how that is implemented, is each block contains a time stamp and a link to the previous block. This is important for PDFs because now you know when things happened, and it's not stored outside of it, it's part of the system. You also can guarantee authorship and integrity by uses hashes, and digital signatures, and cryptographic concept. Because blockchains are built off of previous records, they're inherently resistant to changes, which solves the problem with standard databases. Why is this important? It allows you for three main concepts, that are kind of also integral to signing in documents. You have integrity, the document has the exact content, and this is done by using hashes. Authentication, by using keys you can prove that if I created this document, and I can prove it. And non-repudiation, where he created the document, and I can prove it. So, this is why, if you created this hash on October 10th, here's a transaction, a blockchain which contains the hash. I created according to this formula from the file. This works because it's easy to compute this information, it's easy to compute the hash. The hash doesn't change because, when you change the document a little bit, the hash changes very dramatically. And... (phone ringtone) Like I mentioned previously, blockchains have a history. They chain by having the timestamp and the link to the previous record. They create a type of history, where when you have blocks that try to join in and link from something previously they kind of inherently get erased or overwritten by the majority trend. So, going back to hashing. Hashing is turning arbitrary blocks of data into a fixed size bitstring. It's used for verification of data integrity because any small change drastically changes the hash, and it's also important that... It's a fingerprint for the document, but it's a one-way. You can't go from a hash to the document. You go from document to the hash. And using this in blockchain is important because the hash is there to identify the document, but the actual data, any personal information, isn't stored in the blockchain. So, going into encryption, when you have public and private keys, you can prove who encrypted or who has signed that data because, if you have a private key that was signed, or encrypted, it was encrypted with a private key, when you decrypt it with a public key, you know that it could only have been created with a private key. And this works both ways. And this is used for signing and PDFs but also with blockchain. So, how does this relate to PDFs? Currently, with PDFs and digital signing you have certificate authorities. You have to have a timestamp server, and the big one is they can't be signed in parallel. If you send a PDF out to be signed by three different people first person signs a document, saves it, sends it to the next. This creates a new hash and new document, and the first one, obviously, doesn't have that signature. What can end up happening is you can end up with three to four different documents, have partial signatures, have full signatures, where it's all signing the same document, but now you have four or five different hashes. Blockchain can remove that need by removing signatures from the document. Because data's in the blockchain, it's a known infrastructure outside. It's automatically validated and timestamped because of the use of private and public keys, and it can be viewed by anyone even if the document itself, or the content of it can't be. The hash is still viewable by anyone, so anyone with the document can verify this is what was signed. And, again, because Blockchain's separate, and the data lives separately, it references that data, and that document can be shared and looked up. Again, it doesn't change. Looking at kind of a high-level workflow of how this would work. A document is created, its ID or hash gets registered on the blockchain, and then Bob decides Bob needs to sign the document. So, he signs it, he puts his key and ID, and adds the hash to the blockchain. Now, Alice can look up whether or not Bob has signed it without actually receiving a document back or any type of confirmation. As soon as it's signed, instantly Alice can know whether or not that was signed. Alice can look, check the record on Blockchain with the ID to be able to see that. Using Bob's public key and hash, Alice can then confirm that Bob is actually the one who signed it and it's not someone else. At a high level, what's being stored is, you have the ID of the document. The ID, hash, put the algorithm, the signature, and then fields that can be chosen by the end user. So, in this case, there's a couple examples, waiting for feedback as it's been checked by customs, awaiting signature, paid, whatever needs to be used in terms of the use case for it. One of the key concepts of the blockchain as well is the web of trust. In cryptography, a web of trust is a concept to establish the authenticity finding between the public key and its owner. Because if you send a document out to Bob to be signed, how do you know it's actually Bob's key? How does Alice know that Bob is the one who signed it? You do this by looking up the public key. So, Bob can look up the public key of Alice. This is all assuming that these public keys are truly available, and you can just look them up Or, obviously, Alice can give the key, and say, "This is my key." But, again, to create this web of trust, Bob can say, "Okay, I confirmed this public key "belongs to Alice. "Let me sign it with my private key "to say I trust Alice." Now, anyone who was Bob's public key, can confirm Alice's identity without actually talking to Alice, and this is what creates the web of trust. It builds a graph where the nodes are connected by a trusting relationship. So, this is the application built on top of this framework can decide how to handle trusted users. In this case, you can look where Tony trusts Mike who trusts Eve. Well, now Tony can trust Eve by that nature. And this allows you to have a wide web of authenticity and trust between everyone. An example of this, where this kinda it looks like in a current PDF where Blockchain would remove this out. So, in the web of trust, extensions are possible. Add a status to field, acknowledge, not acknowledge, et cetera. So Bob can revoke his trust, and only the most recent one is taken into account. It can also be used for interim trust, where if you wanna trust a certificate for a certain amount of time. Kind of how certificates work now with revocation. Couple of use cases of this that we've seen, Blockchain for documents. You can create, put a document. So, in this case like in the previous slide looked at like a birth certificate or something like that, passport, you can sign it, put on the blockchain, and be able to say, "This belongs to me, this is my document." Shared around and used it for... And use it for, like, authenticity, proof that it's actually yours. When you look at the blockchain, the records are distributed as they're added. The majority is in control. So, if it gets added to 51% then it gets added to the rest, and that is accepted on the blockchain. Another example of this is certificate of authenticity. Let's say there is a Picasso painting up for sale, or you have one. Alice has it in the gallery, and the owner is John Doe. If Chuck comes up and pretends to be John Doe and submits a fake Picasso, you can verify whether or not that's real by using the hash. In this case, it's using a fake certificate because the certificate can't be found on the chain. This is done because the private and public keys don't match doesn't encrypt the correct data. The second hack attempt by Chuck fails because the hashes don't correspond. The paintings aren't the same. The paintings aren't the same then it doesn't work, and it won't sell because it's different document. Here, John Doe was actually selling it. He offers the real one for sale, the key and the hashes match, so now the owner becomes Richard Row. And history shows that John Doe owned the art from January 1st until February 1st. And this is used to create a history of the document, be able to track where files have gone and where they can go. Carol can jump in and say, as the insurance services, and say, "Hold on, let me verify this." Carol has the same information, the hash, the certificate, and it verifies it as well. In this case, alerts John and Bob about the pending sale. If it's a forgery, if it's not correct, Carol is gonna monitor for that to make sure the certificate and all the information is correct. So, Carol doesn't lose out on the money. Another case where we see this for us is in supply chain. When you have files that need to go between companies, invoicing and such. So, in this case Alice can send a quote request into Bob, a vendor, who can then use that, and create a quote out of that. Change the status to quote. Creates a PO that gets signed by Alice. Carol gets this PO, and creates a shipment. Alice accepts it, and sends the payment to Dave. This is all done kinda with the same document You can see with the signatures, and you can keep track of how everything changes and how it goes through the flow. Another big use of this is long-term validation. Currently, when you have validation, you have to go up to a server, and obviously there's PDF support long-term validation to include that inside the PDF. One of the challenge there is obviously with certificates that revoked or expired or et cetera. It's possible with Blockchain to renew a signature, to say, "Okay, maybe this is bad. "There's an error in the hashing algorithm. "There's an error in something. "Let's resign it, "and now anything previously is dead." The file never changes because the signature's all in the blockchain, so you don't have to worry about a file with an incorrect signature or something that can be exploited because it looks to the blockchain for that information. In summarize, one of the big concepts here is that one blockchain is needed. The information, and people can use it differently, but the strength is in the numbers. If separate work, if separate chains, blockchains happen, nothing can be tracked. If everything's together, then it's very easy to look up that information. But all data to the blockchain is obviously public, which is why the hashing comes into play, and is huge part of this, where you can verify the documents are correct without actually including the information. Thank you. Is there questions? - Yeah, going back to your example of the invoice going to PO, when you're sort of revalidating, adding in the new end of blockchain, is that able to handle adding in new information into the document as well? - So, yeah, you can... You can add in information. So, in this case you can see the document does change a little bit when it switches. As long as it links together, and, in this case, yes, you can change it. - All right, so it's gonna be like if I add a new page on top of it, it's got some new information, everything below that new page has already been previously validated with the blockchain associated with that? And now the new page has a new signature on it, and it validates that? - Yeah. So the signature in this case for signing of it, the signing happens in the blockchain. The document can change a little bit as long as the information, it's all linked together. So, usually when you're talking about signing, it's signing the same document you're sending out to four people to be signed. in the supply chain example, obviously there is things that change where you go from a PO or quote to an actual order to an invoice - Right. - So, the important thing is it's linked together, and it's part of the same chain. - Okay, I was just wondering if your schema handles that situation. - Yeah. - Yeah, okay. - Is there any other questions? Okay. Thank you. (audience clapping) (upbeat music) 