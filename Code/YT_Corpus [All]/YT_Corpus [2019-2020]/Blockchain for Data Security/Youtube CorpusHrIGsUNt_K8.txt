 It's my pleasure to be invited by the Bitcoin Association to attend this Chinese-language Bitcoin SV DevCon. Firstly, let me introduce myself. Some of you might know me. My name is Chen Mingjie, the founder of Maxthon Browser. People also call me Jeff. Maxthon is a browser with a history of over ten years. As an influential product developed by Chinese innovators, it has already entered the global market and gained a user base of over 10 million worldwide. Maxthon has faced difficulties and frustrations in its operations over the past decade but also has seen some positive developments in Internet policies. We have also found many problems in the field of the Internet. I'm not here to talk about Maxthon, despite the many developments it has made, and we welcome you to follow us. I'd like to share a totally new project I've been participating in recently. It's called NBdomain, or NB domain name. NBdomain is a decentralized domain name system, based on the Bitcoin network. In today's world full of gaps and inconsistencies, we all know centralized domains are typically controlled by several root servers in European and American countries. So the core concept of decentralization is to facilitate scattering of control and power. In other words, it is not to have a handful of privileged institutions or individuals controlling the domain name system throughout the Internet, but to let users really take control of their own domain names. Our vision with respect to this system is to hopefully enable it to become a passport in the blockchain Internet. Since this conference focuses on technology, we can also explain it from that perspective. So what is NBdomain from a technical perspective? It is a key-value database on the blockchain. Let me discuss the traditional domain name. We are all quite familiar with the traditional domain, where a domain name is parsed into an IP address, pretty much like this. For example, kkk.com is parsed into an IPv4 or IPv6 address. But what about NBdomain? NBdomain offers a vast expansion, on this basis, of the traditional domain. NBdomain can not only be parsed into an IP address, but can also be parsed into any content on the blockchain. Therefore, a domain name like kkk.test can be parsed into an IP address. Meanwhile, I can also create a sub-domain, e.g. txt.kkk.test, and it could possibly be parsed into a phrase or sentence, e.g. Hello word, or be parsed into a paragraph of text, such as a diary or a user's blog post. All these are possible. I can also create another sub-domain, e.g. www.kkk.test. What could it be parsed into? It could be parsed into HTML code. Yes, it could be parsed into code. In this way, all this data can be accessed via NBdomain. For NBdomain, it can have an unlimited number of sub-domains. It is therefore possible for one NBdomain address to correspond to an infinite number of different types of contents. That's similar to a kv database. Such a database has great advantages compared with ordinary databases, because all of its data is stored through the blockchain, i.e., stored on the blockchain. On the one hand, you don't need to maintain it, as miners all over the world will help you maintain the database. On the other hand, it has very high security levels, equal to those of Bitcoin. It would be impossible for anyone to damage the database without your private key or the user's private key. Therefore, NBdomain offers some very significant advantages that I'd like to share here. First, the contents of NBdomain are super safe and tamper-proof, as all the content on the blockchain can only be generated with corresponding private keys. Without a private key, even the most experienced hacker cannot tamper with the blockchain content. Therefore, it's super safe. The second one is the multi-backup and anti-loss property, as all the content on the blockchain is stored by miners all over the world synchronously. Data loss is impossible, as no transactions on Bitcoin have been reported to have been lost over the last 10 years, that is since Bitcoin was created. Therefore, if your data is stored in the Bitcoin system on the blockchain, there's never a need to worry about data loss. The third one is its super flexibility. Because like I said, NB domain name can be parsed into all sorts of content on the blockchain, and we can create various applications by parsing domain names like this. Therefore, it's super flexible. Number four is a function that can be regarded as a bonus. Each NBdomain is bound to the applicant's public key, so the NBdomain itself can be used as a payment address. Anyone can make payment via an NBdomain. Having an NBdomain means having a Bitcoin wallet. If a friend of yours or anyone else makes a payment to your NBdomain, you can receive Bitcoins in your corresponding wallet. It also solves a problem with Bitcoin payment: the Bitcoin wallet address is hard to remember for many people. But a domain name can be remembered very easily. Now, I will explain general network structure of NBdomain, that is blockchain nodes. We look at them as a whole. And there’s also the user. When the user is going to establish a certain relationship with these blockchain nodes via NBdomain, they achieve this through a parsing node. The parsing node is similar to the DNS server in traditional Internet. In our blockchain Internet, however, it's quite different from the traditional DNS server. There can be multiple parsing nodes or even an unlimited number of parsing nodes. Besides, with protocols, the parsing nodes can be created without approval. For example, for the user, the parsing node 1 may be on the same computer as the user, so all the NBdomain data can be directly parsed on one of the user's computers. So the user can obtain this content as soon as possible from the blockchain via the parsing node. When the parsing node completes parsing, the user can obtain the corresponding content. The parsing node itself is a bit similar to the mining node in the blockchain. There is also a competitive relationship between these parsing nodes. The user would choose the one that offers better service. Within such a mechanism that's full of competition, each node is pushed to offer the highest quality service to the user in the fastest possible manner. There might be worries that the parsing node itself may possibly cheat or that there could be problems such as a parsing error. These factors were taken into account when we formulated our protocol. All the parsing nodes are in a status without the need for trust. I'd like to share a figure here. Firstly, these parsing nodes are trustless, i.e., trustless resolver. For example, I want to resolve the sub-domain best.1020.test. The result returned by the parsing node is as shown here. What I highlighted here indicates the result returned, an ID that contains a transaction on the blockchain. We usually call it TxID, through which it can be verified easily, from an App or a Client, whether or not the contents returned by the parsing node actually exist on the blockchain, and whether or not they are consistent with those on the blockchain. In this way, we can easily verify whether or not the information returned by a parsing node is correct and valid, and can therefore achieve a purpose, which is to use the parsing node without the need for trust. Speaking of which, some of you might wonder where NBdomain can be applied if it's so flexible and powerful. I'm going to discuss it now. We've already thought of some scenarios, in which NBdomain can be used. Of course, what we've thought of could be quite limited. If there are more people participating in this, I believe there could be more creative, more interesting and more innovative applications. Next, we will discuss the application directions of NBdomain. First of all, as a domain name, NBdomain is unique throughout the world. When registering a domain, it is impossible to register exactly same domain as someone else’s. Therefore, it can be inherently used as an identity (ID). In today's Internet world, corporate identities and accounts cause a great deal of trouble for us. We keep registering new accounts on numerous websites as well as using old passwords, thereby posing a threat to security. But the Internet presents also some solutions that aim to solve this problem. A quite popular one is OAuth, which tries to break down barriers between different apps by using a single account system. So next I'd like to compare the OAuth solution with the NBdomain solution to see what the difference is. Let's look at OAuth first. As everyone knows, we usually use it via a large company that will offer some interfaces as per OAuth, such as Google or Tencent. They have interfaces as per OAuth. There are some problems, though. The first one being that OAuth is a relatively centralized system. It usually relies on a company that serves as the supplier, to a great extent. If there is a problem with the company, e.g. if something goes wrong with the system or if the company cuts off this piece of business, the corresponding OAuth interfaces would become invalid. OAuth solution is also a relatively complicated process. Because generally, when using OAuth, after clicking the OAuth button, it will usually take you to another website or app to perform authentication. After that, it will jump back to your original app. Besides, since the OAuth solution relies on another company's services, its security depends entirely on that company's security. Therefore, it's difficult to ensure a high level of security for OAuth. Third, it is not a very user-friendly experience. Users have to jump between different websites, which is inconvenient. So what's the advantage of using NBdomain as a user ID? The first important advantage is that it's a decentralized system that doesn't rely on a third party. That is to say, NBdomain will always exist, even if original domain registration institutions do not exist in the future, your NBdomain will still exist because it's stored on the blockchain. NBdomain will not become invalid due to third party's failure. Therefore, this decentralized system can solve this very serious dependency issue. The second advantage is its simplicity. If we utilize NBdomain for ID authentication, we don't have to jump from one page to another. Perhaps we could demonstrate this later. It also has a high level of security. Since it's based on the blockchain, and on the Bitcoin system, its security is as high as that of Bitcoin. This is a great thing that many companies, especially those that lack reliable security assurance, cannot achieve. The security level of the Bitcoin system is very high. Like I said, its interaction is, in fact, very simple. The user may only need to give authorization before logging in, not even having to provide a password, thereby eliminating the need to keep many passwords. In such an ID system based on NBdomain, the user can log into any system via authorization only once. Therefore, it has very simple and user-friendly interaction. Later, I will make time to do a coding demo for you, so that you can log into the system using NBdomain from scratch. Let's discuss the next application. Blockchain domain names can be naturally used to build blockchain websites. A blockchain domain can be used as an index for blockchain websites. We can find the following differences when comparing a blockchain website with a traditional one. An ordinary website, as we just mentioned, is a centralized system. When building an ordinary website, we have to base it on a company's service to launch it. You have to pay domain and space charges every year, which is a considerable cost. Its security, however, is not very high, unless you are extremely good at this type of operation. Most people, including regular developers, cannot ensure a very high security level for a website. In contrast, a blockchain website based on NBdomain is a decentralized system. As I mentioned, all the data is on the blockchain and doesn't rely on a third party. NBdomain is valid for a lifetime with a one-off purchase. This is also a great distinction between NBdomain and all the other domains, because our vision is to let users have genuine possession of their domains. If a user still has to pay a fee every year, you cannot say they genuinely own the domain. We have decided NBdomain should be valid for a lifetime following a one-off purchase. Similarly, a website can be accessed continuously after uploading once. At least in the present Bitcoin system, you don't have to pay an annual fee to access the data you've stored on the blockchain. And so a website can also be accessed continuously after uploading once. In terms of security, like I mentioned before, it's equivalent to that of the blockchain and Bitcoin. Nobody can tamper with your website. So building blockchain websites based on NBdomain is an area where great value can realistically be generated. The next development trend is the blockchain storage system, which uses the whole blockchain as a cloud storage system. Compared with ordinary cloud storage systems, it also has some great advantages. Ordinary cloud storage is also a centralized system and must be based on a service from a company. When using ordinary cloud storage, you'll have to register an account and verify different identities. There is another very important point: it's impossible to use ordinary cloud storage in microscale. If I want to store some data today but the size is only 10K, no cloud storage company can offer a service with this storage size. Even if the storage size is only 10K, you'll need to purchase a basic package at least. That means you have to pay for storage space you don't need. Its cost is also considerable and you need to keep paying to use it. There is also no way to verify the data after you get it. It's difficult for us to know if the data has been hacked or tampered with. By contrast, storage systems based on NBdomain exhibit the following advantages. First of all, it's a decentralized system. That needs no further explanation. Secondly, it requires no registration. You can use it anytime and store very small-size data on it. For example, I may need to store just a version number or a sentence. It can be stored anytime and at a very low fee, no more than 1 cent at present. You can store a sentence or some key data, which can be accessed anytime. It also allows you to store in microscale and use small-size data. Thirdly, all the data can be verified. Like I said before, all the data has corresponding blockchain transaction IDs. Therefore, all the data can be verified for correctness. It has a very high security level and is tamper-resistant. Finally, it's very secure in terms of updating. All the data can be updated only with the owner's private key and the wallet. It's impossible for anyone else to update it. Moreover, it could become valid immediately after updating and can be well implemented. We believe such a storage system based on the blockchain will be able to satisfy some major demands in the present market. I've talked about many conceptual things. I guess they may sound a little bit abstract to you. So let's enter the coding time. In the coding time, I will give two short examples to show how to use NBdomain to easily enable some very interesting functions based on the blockchain. In the following explanation, we will need two tool libraries. One is nblib, a JS library of NBdomain. It can be used both at the front end and back end. The other is opay, a JS library that uses an open payment protocol. We can solve many payment issues via opay. Nblib supports both H5 at the front end and nodeJS at the back end. It supports NBdomain's complete read and write functions. Another tool library, opay, supports different types of wallets, as well as nearly all the payment models of Bitcoin, and the models of initiating transactions. It also supports customized UI, allowing users to customize interactive interfaces. The first system we would like to implement for users is an authentication system. It contains very simple code with no more than 20 lines of core code. Meanwhile, it's very easy to use and requires no password for users. The third feature is a very high security level, which is based on the Bitcoin system. The fourth feature allows to do it all by the front end without adding a server to verify something. So next, let's take a look at a demo. We will try to create a simple login page with opay and nblib. In order to save time, I've already prepared a simple template. I will try to write code manually, but in order to avoid errors, I have pasted some codes in advance. Let's get this started. First, we add a reference within &lt;i head&lt;/i  to these two JS libraries. I've already written one. Then, we write a simple title, and then... the Domain name, put an &lt;i input&lt;/i here, provide an ID and line feed. Put a &lt;i button&lt;/i . We probably set up a simple screen. We also need to put a &lt;i div&lt;/i . The main purpose of this &lt;i div&lt;/i  is to put a payment widget. Then, we provide a width and a height. This div can be adjusted freely, based on your own needs. Here I write a number at random. Then, in &lt;i script&lt;/i , we perform initialization of these two function libraries. I will copy the code here... to initialize them. During the initialization of opay, we set div as a container of opay. And in NBdomain and nblib initialization, opay will be passed to nblib as one of its parameters, because nblib itself can generate transactions in two ways: by using private key and by using opay. Here, we generate transactions by using opay. Then we will write the function used for login and provide data requiring signature. This signature data can be any information. Let's just write ‘hello’ here. But if you want to build a more comprehensive login function from the background, it can be dynamic signature data. Then, take the domain out. Domain's info will... getdomain via nblib. Here we need to get the domain's name. This name is the one within &lt;i input&lt;/i . If this domain turns out to be successful, we can then let the user sign the domain. Wait a second. Since we have got the domain, we can obtain the corresponding information bound to it. For example, its public key, owner and address. This is the information about its owner. We can then go on to build the request, the sign's request. Put in simple data. We designate that... the signer should be... the identity corresponding to the address. Then, data_hash. Here we also need to add a ... We need to hash the data. Now opay has already provided a built-in function to perform data_hash, which offers great convenience. The hash we get is still put here. We can then directly call opay's function to sign this data. For request, we pass... a JS object into it. I need... to sign the request. And the data... is what we have just written. Here we use a callback function and return a value. And what this callback function returns is a character type value, so we have to convert it. If we succeed, if it turns out to be successful, we can now obtain this wallet's signature data. The data is ... With this data, we can carry out the verification with the function. Now we have... Opay itself also provides such a function. This is data, the signature, and then public key. Then we can see whether or not the verification can be successful. Now let's see whether or not the work we have just done can pass the verification. I have chosen a NBdomain name. This name is registered via the Volt wallet on my phone. If I want to verify this domain name, I need to use Volt wallet for signing. Then, click Login. Now we can see opay's wallet selection page. It supports different wallets and more wallets will be available here. We also support QR code. Since Volt wallet is based on a mobile device, we sign it via QR code. Now let's scan this QR code, and click OK. We can see the signature has already passed verification. So far, we have successfully verified our ID via the wallet. The user can login easily without the need to input its username and password. We believe this is a more secure and more user-friendly way. Let's now get back to the demo. We have just demonstrated how to build a simple authentication system using the front end code. This demo, of course, is very simple. We can easily add background authentication, as well as more codes, on the basis of this process, creating a more complete and sophisticated system. But, in general, it's a whole new method of user authentication. Let's go to the next demo. It's about another system. The function to be demonstrated is storing data onto a sub-domain. It has several features. The first is the ability to store any data in the sub-domain. And the data can be accessed anytime and anywhere. It also has very high security levels, because it's based on Bitcoin's security. You can write data in the domain only when you have a corresponding private key for the domain. Now let's do the demo using the background code. We need to make a switch. We have just written a NBdomain program using the front end code. Next, we will write it with the back end code, i.e., node JS. Regarding library, we will still use nblib. Here I've already prepared a simple template. We use requery nblib and make an initialization. Then our goal is to store a config file into a sub-domain. Let's see how to write it. Firstly, we need to get the domain object. We still use 1020.test. This is a domain, which I have a private key. Type if domain here. After we have the domain, we configure a private key for it, because this time our background program is to enable read and write using a private key, instead of using opay and enabling user access. Put domain.setPrivateKey here. We store the private key in a config. Okay, this is our private key. It is already configured. Let's then configure the content to be stored, a kv value. As for the key for this kv value, we call it config. It's prefixed by an underline because this sub-domain is not to be read by users, but to be used for the app. Therefore, by convention, we add an underline as a prefix, so that it can be easily distinguished. Then, the key is followed by a JSON object, i.e., the content we are going to store, e.g. config.price. We store a price, 100, and then we store a commodity name, GoodDay. Okay, that's all. After finishing, we write the kv value into the domain, which is domain.updateKey(kv). We can get the result and then print it out. Let's take a look at code execution. Let's name it... test. We have obtained the output result. The result is successful. In this result, current information on transactions is also printed out. And since we've obtained the result successfully, we know the kv value is already stored in the sub-domain. We can also perform verification. Here I have a simple page, where we can read the values in the domain. For example, what we wrote just now was config.1020.test. We've just written config data into the sub-domain. Let's read it. As we can see, we've already read this value successfully. This format is similar to the format just now. This obj represents the value we just wrote in it. And it also returns a TxID. Thus, as the reader, it can easily verify whether the content it reads is correct or not. We have successfully brought this function to fruition, one that stores partial data onto the blockchain, with very simple codes of just several lines. In addition, we can read it conveniently. We don't need a TxID or other methods that are hard to remember. Instead, we can read our data without any difficulty by using domain and sub-domain directly. We have just demonstrated how to store data into a sub-domain. This is accomplished by using background code. We can also accomplish the same function by using foreground code. If we don't want to reveal private keys, we can utilize wallet to authorize and write data by using opay. If we consider this more carefully, there can be an infinite number of sub-domains in the NBdomain system. In this demo we performed operations on a database on the blockchain. This way, we can build a diverse range of interesting apps like that. The data stored in this way exhibits two advantages over traditional database method. One is simplicity and the other one is a very high level of security. There's no need to worry the data you stored on it will be tampered with by unauthorized people. The data can also be easily accessed anytime and anywhere. So this is the end of these two simple demos. We have more applications and can also build more complex applications. You can visit our NBdomain registration website for a more complete application. The entire NBdomain registration website is successfully achieved by using corresponding technologies. For example, we can add identity information to a transaction. It also supports p2p transaction form, refund and multiwallet, as well as the auction mode. Overall, there are many novel forms of application available by using the NBdomain and the opay payment method. That brings me to the end of my presentation today. Anyone interested in NBdomain is welcome to join our Wechat group. You can also participate in our forum. There's one more thing. Although the formal version of NBdomain is yet to be launched officially, our domain for testing is, in fact, fully available and operational now. All the functions I shared just now can presently be tested via NBdomain's testing domain. We invite you all to join us in developing new blockchain Internet applications and making development work simpler and more efficient with NBdomain. There will be more great programs to follow. Please continue to follow CSDN and the first Chinese-language Bitcoin SV DevCon. Thank you! 