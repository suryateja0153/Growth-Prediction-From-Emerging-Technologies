 Hello and welcome to an FPGA vision video. We want to implement a neural network on an FPGA. And in this video we will define the parameters for the neural network. We are doing supervised learning, so we need data and we need labels for that. And as an application example we will look at road signs. So you have road signs, telling you where to drive on a road and in Germany they have different colors. You have the primary roads, the motorways, the Autobahn, and they have road signs in blue. And you have secondary roads, federal roads, Bundesstrasse and they have road signs in yellow. And this is a good example Of course the color alone is not sufficient to detect such a road sign, but it's a very good example to design a neural network. With machine learning we are not programming certain colors, but the system learns from an example. So we give examples of scenes with this road signs and then the system learns how to detect the colors. And I have provided a video from a road in Germany, you can download it from our server. Or you can make your photos. If you are on a road, please take care. But you can also use other examples from scenes where you want to detect certain colors. We start by only detecting yellow. And in a later video we will use also yellow and blue. We have to determine labels and for this we can use a snapshot of the video, and then use a drawing programme. I'm using IrfanView here, to manually mark the positions that are yellow with white, and the positions that are not yellow with black. And this is what the result can look like. We wanted to detect these colors with a neural network, and we are using a network with one hidden layer that has three nodes, and the output layer has one node. and this output node tells us whether we have detected the color or not. You can change the number of nodes, but this is the structure that we use in the example. And we use an Octave program to determine the parameters for this neural network. So here's the Octave script. It's written by Thomas Florkowski, a master student at our university And the script performs determination of the network parameters by backpropagation. We do not go into the details of that algorithm, you have literature to check that. Here you define the parameters of this training. So we have 400 iterations. And the learning rate, the step size that you have is set to this value. Our images are 1280 x 720 pixel. And we give an output image to see the result of learning with these two colors. We have random numbers. We use always the same number to have reproducible values. You can change that to have different optimization starting points. Then we read the input data and you determine the image names here. What we use here is the name: B42_snap_1 This is the name of the road: B42 "Bundesstrasse 42" And the labels we have: B42_label_1 They are in png format. Then we check the labels, And here you have the definition of the labels. So if the label is 0, then you have the background color. Everything that is greater than 0 Is the color you want to detect. Then we have preparation of the data. And here now we define the network structure. So we have three input values: red, green and blue We have three nodes in the hidden layer. And we have one output node. You can change that, we are working at the moment with these parameters. And then we start training the network. The code is also provided, you see it here. As I said we can't go into the details, but of course you can have a look. trainNetwork uses backpropagation. And then you get the output of this training. And we determine an image and we print out the parameters from the optimisation. Now we start Octave and we invoke the program. First we see some statistics, so the category of our color, the yellow color is 16%. This matches our expectation so reading of the data is OK. And now training of the network starts. And this needs 400 iterations, which takes some time, so we accelerate a bit here. Now the training is finished, we see the training error, which gets smaller and smaller with iterations so everything has worked fine. This is the test prediction of our network. And we see here the sign has been detected, there are some patches here so the training is not perfect. And you can use another training image to improve the network. And here is the matrix for the neural network that has been determined by the Octave program. So now we have the parameters in floating-point. And in the next video I will show you how to convert them to fixed-point and use them for an FPGA hardware implementation. 