 Okay, so my clocks all say four o'clock. So go ahead and get started. So, as I just mentioned, there's a sign-up sheet going around. If you've already put your e-mail on, I don't need your e-mail a second time. But just to have a good count for what's going on. So today is our second in the scientific visualization series. And today's going to be a little bit more hands-on than last week to as best we can do. We're not going to, oops. We're not going to, we want to make sure that, you know, we get through all the slides, I guess. But we'll do our best. We have a couple people who are also experts in using ParaView who will handle things for us. So I think everybody will be able to follow along. If you have it on your laptop or if you're following along on RED Desktop, so. There we go. So today's lecture is on ParaView. And mostly on the IU Research Desktop system otherwise known as RED. And so that's where we're going to start. We talked last week about this notion of visualization process. Starting with the phenomenon. Scientist tries to figure out the mathematics of that phenomenon. Then somebody tries to code that into a discrete stepped algorithm. And then we end up with numbers; right? Numbers and then graphics. And the last two steps then are kind of what the scientific visualization process is about. And what we're going to use ParaView to accomplish. So before we get there, though, for those of you who have an account on RED. This is what the desktop looks like. It's basically, it's a super computer that's housed over at, near 10th and the bypass. And it has these windows that let you access it as if it were kind of a desktop to you. This slide is a repeat from last week. So if anyone's following along later, you can get a Carbonite account. Which is what hosts the Research Desktop. And by going to access.iu.edu/Accounts with a capital "A." And then on the IU knowledge base, there's a page for how to download Thinglink. Which is, if you're familiar with VNC, it's a way of having a remote desktop. And it compresses the data and makes things a lot more efficient. So Thinglink is a commercial version essentially using the VNC protocol that works pretty efficiently. All right, so for those of you who want to follow along who have access. This is what the, if you, when you start Thinglink, you'll get this little pop-up box. The server, you want to say is red.uits.iu.edu. So University Information Technology Services is the "uits." Put your IU user name in there. And then your password. And then click connect. And when you do that, you'll get another box. So your second box will have this second line authentication for, IU's gone to this duo second line authentication. So that if somebody steals your password, they also have to steal your phone in order to get online. So if, you'll probably notice if your phone is missing. Whereas, you might not notice if someone somehow got your password. So you'll sign on here. You'll get a phone call or a text from Duo. And then you'll be connected. And you'll get the Research Desktop screen. So if anybody's following along. Anybody, who is trying to follow along? All right. Three or four of you, okay. That's fine. So Eric and Dave can help if you have any trouble. You guys good then? Were you, did you say you were, Enrico? No, okay. You already know all this anyway. All right, so once you have Research Desktop running, there's basically two choices for starting ParaView. One is in the upper left corner. There's an applications menu. There's a visualization submenu. And then many of, or a handful of the visualization software that's installed on this particular system is here. So you can just go down and click on ParaView. And you'll get a window. And I'll do that in a moment. The other way is if you're comfortable with the command line and you like moving files around using your command line. You can use the ParaView module. So there's a system for loading and unloading different software suites when you're on the server computers in case there's conflicts between things. So you can, you type the commands. They're in bold here. Load. Module. I should use my mouse pointer here for the sake of the Zoom people. Load module ParaView. And that will start or get the software ready to go. And then you actually have to type the command ParaView. And then it will start. And here's a little shell window where that happened. So it tells you, when you load it, which version you're loading. You can have, we can have multiple versions of ParaView on the system. So you can actually say module load ParaView/5.5.2 or something like that if you want a different version. Or an older version, if you have some scripts and stuff that were specifically written for an older version. And a major version change breaks those things for you. You can still go and keep continue to use a version that you know works. So I'm not showing that here. But if you just add a slash after the ParaView, you can give a version number, and it will continue to load that one for you. So that's one of the nice things about going to the command line. That if you go to the menu, you're going to get the latest version. So I'll go ahead and break out of the slides here real quick. And close that. And here's my Research Desktop. So if I go applications, visualization, ParaView it will start-up. It takes a couple minutes. Or not a couple minutes, but a few moments, I should say. And it will start-up. You can see there's, while we're waiting, there's a terminal button here. Or I have it up on my icon here. You can get a web browser. Just as an aside, well, there's ParaView. As an aside, though, the fact that there's a web browser on here means, if you connect from home, you can actually, you're on the IU system when you're on this thing. So if you, I use it a lot for like getting, downloading papers and stuff. It's kind of like a virtual private network built right in. All right, so right here's ParaView 5.5.0. And this is kind of the standard layout for ParaView. I'm going to go to the slides though. Because I have more thorough documentation on the slides. So let's return to the slides. And we'll go, we'll be going back and forth to show things interactively. All right, so here's that ParaView window. This one has a little bit more. This one has a little animation box down here. Which we won't really cover in today's lecture. But we'll talk about it maybe, well, probably in a lecture maybe next semester. I want to briefly give like a quick overview of ParaView though. So ParaView's open-source. So it's free. You can download it. You can compile it. It also has pre-built binaries for Linux. Mac. And Windows. So you don't have to compile it, which is handy. And there is a company that supports it. So it's open-source. But it, if you want to buy maintenance for it. Or you want to hire somebody to extend it for you. There's a company called Kitware, which will be on a future slide, who does commercial maintenance and support. It's basically their software. But they make it available totally open-source. And if you make modifications or fix bugs, you can send those to them. And they'll evaluate that. And if it's a good fix, they'll integrate that. So ParaView came about really through work with several national, US national labs like Sandia. And Idaho National Lab. And Berkeley National Lab. So this is kind of an overview of what ParaView looks like. Later in the semester we'll talk a little bit about VTK. Which is the visualization toolkit. It's another open-source software package for visualization. It, however, doesn't have a user interface. It's, well, it has a user interface. The user interface is code. So you can type commands or scripting. You can type commands and have it do things, but it's not really a friendly user interface. But it preexisted ParaView and was a good way for people to build visualizations quickly. And with confidence that they knew what, that the algorithms had been thoroughly tested; right? And then that's built on some other things like graphics libraries. Data sharing libraries. Data splitting libraries and other things. And so on top of that is this green layer, which is ParaView. ParaView's actually a client server system. How we're going to use it today, though, is the client and server all built into one. But in future lectures, we can talk about, again, this will be next semester. We can talk about how to run a client on, say the big super computer and the server on the big super computer and the client on your desktop. And then have data flow back and forth. And so you can keep all the main data up on the super computer and then transfer it back down. Working with Research Desktop [inaudible], kind of does a lot of that for you as well. Because you're only seeing the graphics come down. It's built on QT. And it has Python as its main scripting language. And you can write other custom apps on top of it. Including, it has some Java script capabilities for doing web apps. Here's kind of an overview of both VTK and ParaView. And so these are both from Kitware. VTK can be scripted in multiple languages. Python. Tickle. And Java. You can also code it with C plus plus. You can integrate it into web notebooks. You can do Java script web pages. Which is something we'll cover in, I think, November through, in this lecture series. And then ParaView takes VTK and adds that to, you know, kind of common desktop interface to it. The name ParaView, part of that is from paralyzable. So if you have stuff running on the super computer, you can do some parallel work. Makes it a lot faster. As I said, I use VTK. It always scripts in Python. If you want to extend it more seriously than that, you can use C plus plus. And then it also has Kudo [phonetic], which is using the graphics cards for doing processing. And MPI, which is data passing interface across computers. And so at least on Research Desktop, we're mostly not going to take advantage of a GPU. [ Inaudible Comment ] I'm going to say. So someone is, needs to maybe mute their microphone. I think that, Monsarule [assumed spelling], do you have a microphone you can mute? Let me see who else. And, let's see, looks like everybody else has their microphone muted. Okay. All right. Okay, yes. And so, and here's ParaView with some data in it. And we'll see that in a moment anyway. All right, so some of the things ParaView can do, like I said, we're not going to cover all of this today. But it can do parallel computation. You can run it on high-performance computing systems in batch mode. You have the interactive interface, which is what we'll talk about today. You can bring up fixed screens like we have here. It will run on head-mounted displays. So virtuality displays. It will also run on kind of big screen virtual reality displays. And then you can customize it with scripting or C plus plus. Or generate web interfaces to it. All right, so one, I think maybe one more slide on ParaView, and then we'll get, dig down into it. So just kind of a brief history. I'm not going to read all this data. But basically it was originated around the turn of the millennium. And it was funded quite a bit by Los Alamos. And some by Sandia National Lab. And Jim Ahrens, who actually worked at Sandia, did a lot of that initial work. And then passed it along as an open-source thing back to Kitware. I just have these dates and version numbers just to show you that it has been fairly continuously updated. So the last major release or semi-major release, 5.5, came out in April. That's 5.5.0. There is actually now a 5.5.2. They come out every really month or two, they come out with a smaller release. So it's really under active development. So if there's bugs and things, like I said, you can contribute. And they're fixing things. So it's a good tool to use and have some confidence in. All right, so I talk about the basic usage. Again, here's that window that we just brought up. Here it is with some data, which is just this cylinder. I want it break down, there's three layers of tools at the top. The top, the very top one we're calling the menu bar. The next two we're calling tool bars. And if you're familiar with QT, you can see these dotted lines. I should use the mouse. These dotted lines. And so you can pull these apart and move things around, these vertical dotted lines, segment things. So you know kind of what belongs together. Then there's a pipeline viewer. Which in this case is very simple. It's just the cylinder. And then there's data about or there's information rather about the data that you have. So here's information about our cylinder. And we'll see this online in a moment. So you can inspect that data. And then this part over here with the blue background is our 3D view. There's several other things you can add. I mention earlier there was an animation view. You can see it's turned off. There's no check box by it this time. But you can turn on animation view. You can look at memory, inspector. You can do some collaboration and things like that. We won't cover any of those today. But a lot of other stuff built in. So it's really more than what I'm going to show you today. All right, so if you want to follow along, the first thing we're going to do is create something super simple. And that's just a cylinder. So this just let's us familiarize ourselves with the mouse movements. So at the top of ParaView, I should say, some of my menus you'll see are from the Mac interface. And some are from the Linux interface. Depends on what I was working with at the moment. And then there's always this apply button when you want to take an action. So I'm going to do that, but first I'm going to look at the next slide. So part of that top or the middle tool bar with all these camera controls. So if you want to look down the positive x-axis or the negative x-axis or y- or z-axes, this one on the far left over here with the arrows basically says, let's reset the camera view. There's another button that's not showing up here. Which, once you have data loaded, it let's you, it basically finds the extent of your data and tries to find all of your data. Then there's, you can turn on and off this axes. And you can undo camera moves and things like that. Here's the axes down here at the x, y, z in the red, green and yellow. All right, so let me go ahead, or actually let me go one more slide. All right, so we're going to create a cylinder. And once we select it from the source menu, we have to apply it to make it happen. ParaView does have the ability to have auto apply. So any time do you any action it happens. But you probably only want to do that when you're ready for it. You can control the resolution of the cylinder. So by default it only have six polygons around. So it would really be a hexagon more than, an extruded hexagon more than a cylinder. And then, again, if you want to change that resolution, you have to apply. All right, so let's go ahead and do that real quick. And, again, this is really just to familiarize yourself with the mouse movements. So here's sources. And it's, everything's in alphabetical order. So cylinder's around 1/3 of the way down the list. Nothing showed up because I haven't hit apply yet. I hit apply, and, again, you can see it's really a hexagon more than a cylinder. If I want to make it look more of a hexagon, I can increase the resolution and hit apply. So there's now a lot more polygons than we were seeing before. And this is, again, going over the network in order to interact with that. So pretty fairly responsive for that even though it's probably just a couple hundred polygons. You can change how tall it is; right? So things like that; right? But that's not too interesting for us. This is, again, some mouse movements. So I'm using the left mouse button to click. If I use the scroll wheel, I can do, scroll in and out. If I click on the middle button, I can translate it. And if I click on the right button, I can scale it. Which also works with the scroll wheel. And then the right, or the left button rather rotates it. You can see the axes down here in the lower left corner mirrors the movement. So you know which direction your data is oriented. All right, so let's go back to slides. So that's basically a quick overview of the mousing. And if I can find my mouse. All right, good. So quick word. I mentioned earlier that some of my slides come from Linux and some come from OSX. The lower one is OSX, so it has more the blue colors and the rounded, more rounded corners for buttons. The top one I think is both Linux and Windows. And so you'll see more of the green buttons around. So just so that you know that, if you see one, it's the same if yours looks a little bit different. Again, there's undo buttons. There's separate undo buttons for making changes to the data or the parameters of the data. And then specific undo buttons if you move the camera and you didn't want to move the camera. But those are separate orthogonal things. All right, so we're going to load some data in a moment, some actual data. Here's data for that cylinder, though. So in that lower right, lower left, rather, box it says, has this information properties. It has another tab, information. So I was manipulating things in the properties here. This is a scroll bar over here. So there's a lot more data down here. Mostly a lot of this stuff we're going to leave as the default. Oh, and there's an advance settings button here. So if you want even more choices. And there's also the ability to save properties and then restore them. So if you have a cylinder that's perfect and you want to have, when you load another cylinder, you can load in those same values. So here's that notion for saving properties and restoring properties. And you can copy and paste them. So if you, again, if you have a data set and you've tweaked things just how you want it. But you have another data set that's pretty similar. You can copy and paste those without having to fill in all the details again. This is the iconography for the Macintosh, the save button in particular. Looks a little different on the other systems. All right, under the properties tab, there's also a notion of display. Which, well, it's called display. I think a better word, and they use that word in parentheses here, is "representation." Really we're talking about representation. And this pull-down menu that says surface at the moment, gives us a lot of quick ability to see a lot of different, see your data in a lot of different ways without having to go through a lot of effort. And we're going to try that ourselves in a moment. But before we do, the other tab then is information. Which talks about the data. So gives the name of variables. It gives the types of variables. And the ranges. How many cells are in the data set. How much memory it occupies. And the location. So if you want to kind of inspect your data really quickly, we have that. All right, so let's see. All right, so let's do some pseudo, we're going to do some pseudo real data in a moment. But first I wanted to kind of just show a list of data types that ParaView has kind of natively built in. Or sometimes through plug ins. So molecular data. Image files that you can stack. I don't know, LAMMPS is kind of an old system. So, but a lot of old, or so ANSYS, if you use ANSYS. A lot of different software products that produce, you know, just a lot of different things. Like OpenFOAM, which I think is a finite element tool. So just a lot of different data that you can load. And then one of these on this list is, see if I can find, if it's on here. Well, they're not necessarily in alphabetical order. So I was going to say comma separated values is one of them. I don't see it on the list. But if you just have stuff that you export as ASCII numbers, you can have them comma separated or even a white space separated. There's also, ParaView has its own data type. And VTK, upon which it's built, has its own data type. And so a lot of times those are kind of more the native data file formats. And so, if you want to load things maybe faster and more reliably, you can use that. But there's just a ton of different data types, data formats you can load. Different data types that you can load. Especially for gridded stuff. You can have regular grids. Grids that are parallel, but different spacings. And grids that are not parallel, but have regular topology. Like the VTK structure grid. You can also have data that's just polygonal. So you have a shape that you want to put in your data set to match the data, you can do that. Both points. Lines. Polygons. Polygon strips. And then you can just have data that's totally unstructured. And so a lot of times we have just like point clouds. A lot of data that's just, here's where all my objects are. Or here's where several objects are. As a point cloud, you can integrate that as well. So except for the points, though, a lot of times, if you break things down into unstructured grids, it's going to slow things down. Because it has to do a lot more processing. Things are a lot more efficient if they're on a regular pattern. And, of course, I'm showing 2D there. Those regular patterns, especially, break out into three dimensions as well. And so if you have a volume of data, that works pretty well. All right. And then before we jump into some real data, there's another, in addition to the cylinder, there's another data type called wavelet. Which is really just kind of some made up data. And it's a nice thing just to find out how things work quickly without having to find some data that you like. And so, if you create a wavelet, so this is the pipeline browser, which I mentioned before. But it starts with this built-in which basically mean this is the client server. So we're, our client, our server is built into us. So that's what the built-in means. And then on that server we're going to have some data called wavelet. And here it's got a closed eyelid. So it's not being displayed. But as soon as you click apply, it will open the eyelid, and we'll see the data. There's some parameters. How large of a data set you want to create. And then how you want it centered. I'm just going to leave these as the default so you'll have a symmetric data set. And then, when we do that, and I'll do this live in a moment. We have a choice then of representations of, I'm only showing eight. But there's actually nine options. We'll look at 3D glyphs later. So there's nine default options. So we have the data. Well, the first one is just the scope, the range of our data. Which is nice if we have a lot of data and it slows our machine down. It's nice to start out with the outline just so we know that our data is there. And it has kind of the generally right shape. It has something called point Gaussian. Which kind of creates a little three, is kind of a merger between points and the glyphs. So it just adds glyphs to each point. So the point tells us the density of our data. And where each data point is at. It's kind of handy for doing that. And it's also quickly, we can also do a two-dimensional slice through the data. And so this shows us this wavelet pattern. Just a two-dimensional slice right through the middle. And then, if we want to just see the outer bounds, we have surface and surface with edges. Both show us the outer bounds. The one with edges shows us the density of the data; right? So if we had an irregular grid with a lot more information down at the bottom, we'd see that by putting the edges on there. And we can see just the edges too with wire frame. And since we don't have the surface, we can see through it. And then volume rendering is kind of a nice thing that let's you look into the data. And if you have, especially have things that you're focused on, particular ranges of data. You can make the stuff you're not interested in transparent and see into your data. We'll see some of that today. So this is what it looks like. And I'm going to go back to live running it here. So here's my mouse. So here's the cylinder. I'm going to delete that cylinder. So there's a delete button here. And, again, built in means I'm running on client server. So there's a source. So there's sources and filters. We'll go with filters in a minute. But sources, these are basically things that we can just create from scratch. And so the very bottom one, again, it's in alphabetical order, is wavelet. It's got these default parameters. And I apply it. And, again, it starts off with the outline. And then over here is my display grid. And, again, as I mentioned before, really what this display information is more about the representation. And so there's a pull-down menu that has, sets it to outline. And I can choose any of these other things. So I can choose this point Gaussian. Which gives me some crazy mar [phonetic] patterns. They're a little bit bigger. The points, actually it's just showing me the points on the edges. So we're not seeing into the data with this point. So that's one of the difference between the Gaussian. Here's the slice that we saw earlier. The surface. So these are all, I already showed you pictures of these. One other thing, though, to notice is that, whenever I click down here, it's changing this value up here as well. These are connected together. And so this is just on the menu bar. It's just a quick way to get to it where you don't have to go down. So these are all the things we've seen. I'll do wire frame next. And then I'll stop with volume. All right, so here's, whoops. So here's the volume. And you can see there's a little bit of transparency to it. We can see in a little bit. In a later lecture we'll talk about how to make things, how to tweak things. But I'll just do a quick thing here that's not in the slide. So I can edit the colors that I'm looking at by clicking on the edit with the little color bar legend there. And if you look here, the colors go from blue on the left to red on the right. So this is, blue is low numbers. Red is high numbers. If I click on this little legend button here, it actually tells me what the values are. And then this angled line here is transparency. So I can put a point on here, and I can fade away different parts of the data set. So if I don't want it see any data except for what's above 200, I can just put this point here. And now I'm only seeing that range of this data. Or if it's the other way around, I can bring that number up and lower it down this way. And now I'm going to see more of the blue data, the shell kind of of this data set. So this, just a preview. We're going to talk more about color mapping and transfer functions in a later lecture. But, anyway. So we can adjust things. There's also different, if we like different colors versus the red/blue there. We can choose different colors. All right, so that's a little aside on that. All right, we're going to get to some real data in, shortly here. All right, so next is one of the menus at the top has these common filters. And so there's basically 11 that it list in its sort of main repertoire. We're just going to use a couple of these today. Probably the contour and the clip. But these all have their own little icons. Most of the other filters don't get their own icons. And so you have to go through the menu to find them. So the one we're going to start with, though, is this contour filter. Which if you're familiar, you might be more familiar with the term isosurface. So if you have data and you want to find where a specific value is and what kind of shape that specific value takes. Maybe the temperature at 400 degrees or something like that. And you want to know all the areas that are exactly 400 degrees. And then you know that on one side it's hot or one side it's cooler. Then we use the isosurfacing, which ParaView calls contouring. And you can have multiple contours. You don't just have to have a single value. And so we're going to take our wavelet, and we're going to add a contour to it. And then we're going to give it these particular values. I should point out, so over here there's a thing called RT data. So that's just the name of the data produced by wavelets. So this might be temperature or pressure or something like that. If we want to access scalers, we have to checkmark this compute scalers box. Otherwise ParaView will be efficient and not compute those for us. And then the value we want isosurface on is down here. This has this really long number 1.57 or 157.0909 whatever. And so that value is basically the center of the range; right? So it calculates the range, and it figures out exactly half point. So by default, it will create an isosurface right in the center. That's annoying noise. So let's go ahead and do that really quickly. Actually, let me see, one more slide's here. Oh, yes. Okay, so let's go back to our Research Desktop system. I'm going to get rid of this color map editor. So I'm going to leave it at this strange color map that I made it at. Although, maybe not. Let me at least tweak this back kind of how it was. All right. Okay, so we have our wavelet. So here's this onion looking thing sliced in half, is our contour filter. So by, I have to have a wavelet selected if that's what I want to apply it to. I click on contour. It creates it here. But, again, nothing happens. The eye is closed, so it's not displaying it. If I scroll down, here's that 157.09 number. So, again, these match what the slide says. And it will apply it when I click apply. And now I'm looking at two different things on this screen. I'm looking at both my isosurface and the volume rendering. So if I want to not watch the volume rendering, I can turn that off by turning off the wavelet. Or I could change my wavelet to just show me the outline. So now I know where the bounds of my box are by changing that. So different choices of how we want to go. Here's the contour. Now, we know that the data had different colors in it. But everything is just white here; right? And so why is that? Well, actually, I don't know why that is in this case. In this case it's because it says solid normal. Or, no. Oh, I didn't compute scalers for one. So let's go back to. Compute scalers and apply that. So now I have this RT data. So now I have this solid color here. So this doesn't match my slides because I was, went off track a little bit. Anyway, my slides, the thing still shows up as whitish gray. And let's go back to the slides. We'll talk about that. So the reason it's whitish gray and the reason it's a solid color here is because it's an isovalue; right? All the values are the same, so it matches our legend. And so that's what we're seeing. Now, if I hadn't messed with the color map, what we would have seen is. Here it is. Is this; right? And it's like, well, that didn't really show me anything. It's all the same color. Well, that's because in our color map we're looking at exactly half; right? And half in this color map that I started with is white. So that's why the thing looks white. I could color it by something different. Which we saw a moment ago when I said normals; right? So why no color? Well, because white is our center of our graph. All right. If I want to do some additional work and see something with the isosurface, I can set the clipping plane. And so let me do that real quick. And then after we do that, we'll jump into some real data. So let's go back to online. All right, so I want to select wavelet again. Because I want to clip the wavelet, not the contour. I could choose the contour, but I'm not going to. So here's wavelet. And now I applied it. Again, my color map doesn't match because I was messing around. But now you can see wherever I can see through the isosurface, we can see the color inside there. I just moved the plane. And I can reapply that. And so we can adjust that. If I want to not have that contour in my way, I can turn it off. And, again, I can move the plane with this little control panel here. Oops, slide it around. And then I have to hit apply to make that take effect. If I want to go down a different orthogonal axis, there's a quick way to do that with the, either command or control. So there's the z-axis. I just hit command z on the Mac or control z on another machine. Or if I want to make it the y-axis, it will just pop to that axis really quickly. So it makes it so I can change the orthogonal. There's another tool that let's you reorient it non-orthogonally. Oh, here we go. So if I grab the arrow, I can not orthogonally orient the data if I want to slice it in different ways as well. All right. All right, oh, and to do that, I have to have this clip one highlighted; right? If I have the contour highlighted, then my clip is fixed. So if you don't want it to be messed around, just turn, select something else. Whoops. And I can turn my isosurface back on as well. All right, let's go back to the slides. Oops, there we go. Oh, slides, no. [ Inaudible Question ] Right, right. And so it has, the RT data's basically the data. I could color it by normals just to get something that looks different; right? So I'll show this in a minute when we load up some more data. But this chooser box over here tells me all the different data or ways I can represent it. So I can choose a solid color; right? And now I actually do have a solid color. It's a solid not based on the color map. Or I can color based on normals. And so normals has its own color map. Which is back to my default red blue one. And so normal is, you know, the direction orthogonal to the tangent at any place; right? So you can see it's kind of based on wherever there's curvature. So that's normal too. Not normal to the isosurface though. So don't be confused by that. It's normal to the data itself. And then the data that we generated is this RT data. And I can isosurface a contour by whichever, well, any of the scaler values. So that's why I had to produce the scaler values. All right, let me go back. All right, so I did this one. All right, and just highlight, if you control x, control y, control z, you can kind of jump around from angle to angle. All right, so I'm going to press this button here that has two computers with an x. And I, my slide says reset ParaView. But, in fact, what this does is it breaks the connection between a client and server. Which has the side effect of resetting ParaView, of cleaning out your data set. So this is just kind of like a shortcut. It doesn't really have a delete everything button because this accomplishes that. All right, so we're going to do a couple of real-world examples. And first I'm going to. And so we've been given permission to use some data from a researcher that we've worked with. The first one we're going to look at is from Chuck Horowitz. Who has this nuclear pasta data. And so the goal of our, the advanced visualization labs working with Chuck in this, at least this one particular instance, was basically to create some videos for him to explain his science to other people. So here's a still from that video. I'm guessing we'll have time at the end, and I can show a couple of videos that were produced purely in, well, in ParaView along with like some slides that, with explanative text. So his data set is another 3D volume. Well, it's actually not a 3D volume when it starts. It starts as a point cloud of, what is it, Dave? Neutrons? Neutrons in an atom? [ Inaudible Comment ] Nuclei. All right. Nuclei. And so we have point data. But what we really want, what he really wants to know is where are those point, where are those nuclei concentrated; right? So what we do is we take the point cloud data and do an operation called Gaussian splat. Which basically means, wherever there's a point, we're going to say there's material in a decreasingly spread range around that point. And we're going to block, we're going to chop up the data volume into regular grids. And so wherever there's a point, we'll put a little bit of data. We'll put, you know, a lot of data in whatever cell it's in. And then some of it will spread into neighboring cells. And then we'll have a density, three-dimensional density that we can use. So one of the things we did, and we're not going to do it today. Is we pre-modified the data. We took the point cloud data, and we actually, we can create a Python script that would do this for us; right? Python script loads the data. Does, loads the Gaussian splat. Says this is the grid dimensions we want. And then we'll output the data into say a VTK or ParaView format. And once we've done that, we can just use that data set. Which is what we're going to do. So a couple of features of this simulation is that, one, it's time varying. The time changes. So there's different, several different time step files. So each one of those is processed separately with this Gaussian splat. With all the same parameters though. So they all match up. ParaView has a couple of ways of loading time varying data. One is you can have a single file that has all the information with like a time stamp for each bit of information. Or you can have multiple files. And if those files all have a number in it, let's say the same number of digits long. ParaView assumes that those are all going to be a sequence of data. So if you happen to be, have several steps, which I did this early. I probably should have used A, B and C for a step. Where A, B and C were like discrete steps, not time steps. Because if you put files in like, you know, test one. And were you experimenting. Test 2. And you were experimenting. Test 3. It will think, oh, those are just three different time steps of tests. So any time you have matching numeric file names, ParaView makes that assumption. You don't have to, you can kind of avoid that, but anyway. Generally, that's pretty handy. So we're going to go ahead and load this data. So I've put this data on the Research Desktop in our ParaView folder in a data directory. So we have, if you go to the high-performance computing file system, everything starts with "N." There was software. There's software for Red Hat Enterprise 7. And then under Red Hat Enterprise 7 is all the packages that are on that particular operating system. So everything on our Research Desktop is under there. Including ParaView. And then I created a data directory under that. And then a subdirectory of that for Professor Horowitz's data. So in order to load it, you have to kind of file navigate to there. There's this data set that starts with 51200. And keeps going. Under that directory is something called O time underscore. And these two dots here are the digits. So ParaView will hide those for you. There's actually a five-digit number there. And so ParaView shows you this. And said these two dots basically tell you that's a time sequence. Or at least ParaView assumes it's a time sequence. And so that's what it's going to load. So, oh, here it is here. So this, we're kind of going clockwise here. So here's my file browser. It starts in my home directory for Carbonite. But I want to go to N [inaudible] Red Hat ParaView data Horowitz. And so if I navigate to there, it will then bring me to that window. And then it will show me there's another directory. Which is this one that starts with 51,200. So I click on that. And then I'll get O time dot dot VTK. But if I look in the files, this isn't one file. This is actually 400 or 500 files with different numbers on it. And so it just assumes those are all different times. And when I do that, which I'll do in a moment. I'll be able to do those same operations we saw with the wavelet. Here's that pseudo point Gaussian thing. Here's the slice. Here's the grid, I think. Here's the volume rendering. Here's the surface. So we're going to stick mostly with the volume rendering. And, again, so this is the same stuff we just saw with different things. And here I think we're choosing a value called charge in this data set. And let's go ahead, actually, now I'm going to show you the next slide. And so the next thing I'm going to do, when I'm over there on Research Desktop, is I'm going to animate the data. So it's time varying. And it will start with a time where everything has this kind of most, more uniform data. This is probably time step 50 or something like that. And then, as time goes, the material starts clumping into these little balls. And so this is kind of what will happen. Up on the top of ParaView, one of the tool bars was this animation bar. So if I just press the green triangle, all the standard play button, it will start sequencing through the time. And it tells me so, there's actually 597 data steps. Or probably 598; right? So zero is going to be the first one. So the 598 data steps. And it will step one by one through that data. If I want to change, you know, jump faster, there's ways to do that. But that's for another lecture. So this is what I'm going to do. We're going to jump over then to the Research Desktop and do all those things, if I can remember them. So, again, we will, if I can, oh, here it is. The reset button, pseudo reset button. All right, and I'll do file open. I can also go to recent files since I've already opened it at one point. I'll just do it the long way. So file open. You can see it goes to my home directory. I can type that path. And then click on navigate. I guess I do the Horowitz one. Well, I'll just click on navigate now. That will shoe me the different data sets we have. I can double click on Horowitz. Double click on this one. And now I have my O time dot, now, VTK. If I click on the arrow, now it actually shows me the names of all the files. Actually, they're quite, it's not just five digits. It's about ten digits or so. But there's, you can see all the different files there that it's treating as one file with time. And if I say, okay, it's loading it. Well, I have to hit apply to load it. Again, it starts with the outline. I can do points. Right now everything is white because I have it set to solid color. So charge is our data. And so once I click charge, I can see the data. And, again, we'll jump to volume rendering. And so here's that volume rendering. You can see on the edges. You can actually see through the edges a little bit wherever it's very minimally dense. I can zoom in, zoom out. Okay, and what did I say? The next thing I was going to do was just press play. So here's our animation controls. I can just press play. And, again, you can see it started off with this kind of more or less uniform density. And it's stepping through that somewhat slowly. Volume rendering takes a little bit more time to render. Here's the time step advancing. And, again, here's the max 597. I can jump ahead; right? So I can stop this. Pause it. And if I want to just jump to, say 200. I can hit 200 and hit enter. And now it's expanded a little bit. And now we see these little spaghetti sort of noodles. And so we can do that. We can jump around in time. I can advance it one or two at a time and stop. I can go to the beginning. I can go to the end. Which expands it a little bit. And I can single step here as well. All right, so those are our really simple animation controls. Yeah. [ Inaudible Question ] Right. This is all live. Yes. [ Inaudible Question ] I don't think you're limited in CPU time. So Carbonite is a shared system. So if I bring up one of my windows here, I can see who else is logged in. So there's several people logged in. Many of them have several windows. There's actually, I don't know, I don't remember how many nodes there are. Do you remember how many nodes there are for Carbonite? [ Inaudible Response ] Okay, so. [ Inaudible Comment ] There's. [ Inaudible Comment ] I don't know if I want to say that necessarily. There is a limit. So Carbonite has 256 gigabytes of RAM that you're sharing with these other people. Now, you're capped at 75 gigabytes. So, but that means still, if four of you all want 75 gigabytes at the same time, you're going to use up all the memory in the system. And so there is a monitor that makes sure that you're semi-nice. But it might not catch you right away; right? So you can get away with some stuff. If you notice on the desktop, if I move this out of the way. There's this interactive job shell. Which will basically put you into a queue where you can have another node all to yourself. And so you can run stuff off of there. Now, I don't know how, I haven't tried that to see how that deteriorates. Because now you're going another hop. And so I don't know how that deteriorates interactivity, you know, graphic interactivity; right? I mean, you can do terminal interactivity and start batch jobs with that. But, you know, it takes, it can take 30 seconds to, you know, I don't know, five minutes to get a node. Because, again, now you have to wait for a node to be free. [ Inaudible Question ] Right, right. I'm just doing it. Yeah. And I'm not doing it on the login node. I'm doing it on an actual big node, yeah. [ Inaudible Question ] Yes. If you have, if people are, if there are multiple bad neighbors on the same machine, there could be a problem. If there's just one bad neighbor, the you might get away with it. [ Inaudible Question ] Well, so. [ Inaudible Question ] Right. But actually, Ed said some things where he's done photogrammetry stuff where it's killed him after a while of processing I think. If you don't do the, maybe it wasn't Ed. But somebody was doing some photogrammetry, not using inter, Ed was using interactive [inaudible]. So it wasn't Ed, but. There was something where somebody was doing, right on the terminal. And it was saying, you've had, you've, you know, that's your limit. [ Inaudible Question ] Right, yeah. Yes, and we'll actually, we'll talk about saving work later, in a little bit. Yes, okay, very good. So let's go, I think I did everything that my, I'm caught up to where we covered the slides. So let's go back to the slides. Oh, we're, I'm talking slow apparently because we only have 25 minutes left. Or too much detail. Okay, so I want to do one more thing with this data set. Something, you know, slightly advanced. You'll notice nothing here is really super advanced. Really a lot of the work that goes into some of these things is figuring out what one or two things you need. And then choosing the right colors. And then you have something you can use to get some insight out of your information. So for this data set we're going to do one more thing. And that is figure out what, once we contour it, so actually, so we've been looking at the volume data. Now we're going to go to contour and do that onion slice thing to [inaudible]. It's about half of this data set. So we're going to, here's both contour and volume. We're going to turn off the volume and just have the contour. Then what we want to do is say, what data is linked? So in the early parts, a lot of the date is linked together. So there's just a handful of different things. And you can see how some of the threads go through the data. Later on it's a lot of independent data. The problem, of course, is that our eyes really only do a good job of distinguishing between a handful of colors. So even though, use the mouse. Even though, you know, this blob over here is green. And this blob over here looks green. They're not connected; right? But we don't have enough colors to distinguish it. Is there a way to randomize, Dave? The ID, so the colors would be like not next to each other?  There is.  All right. So I think in the past we figured that out. But, yes, right. So one of the problems is we've isosurfaced it. And we're isosurfacing will, when we throw it through this connectivity filter, it will produce an ID for every different chunk. You can see, though, that it does this in a nonrandom order by default, at least. And so all the purple stuff, all the zero through, you know, 100 or 50 IDs are this violet. And the next then, it kind of step through. And the next 50 or so are kind of a purplish color. So, anyway, with a little bit more work, we could probably randomize it. And then you get a better idea of what's connected. So, again, so now we're going to do these steps that I have in my slide. We're going to turn off just the regular view, that's the volume rendering, after we do the contour filter. So we'll just have the contour filtering. Then we're going to color it. And we'll colorize it by discrete steps. So I'm going to take that color map that we had before and chop it into 12 chunks. And we'll choose a color map that has more colors in it than the red through blue one. And I'm going to set my range of values for the color map to zero to 400. And I'll explain that, why I do that live to see what that, actually, we'll use the information tab to see that. So actually down here tells me. So this data rise box. This is part of the information thing. Tells me what time step I was on. It tells me the ID range once it's gone through the connectivity filter from zero to 365. So I just round it up to 400. So there'll be 400 different blocks. If I were earlier on in the data set, there might only be like three or four chunks together. Like this upper right picture here. You can see there's only a handful of colors. And so the range would only show me zero to ten or something like that. And if I made that my range for the color map, then everything's going to be capped at that value. Anything that's above ten would always be whatever color is on the top. In this case orange. And so that's not going to be too helpful. So what I did was I went to the end of the data or near the end of the data, step 591, and figured out what is the range there? And then I used that to set my color range. And then I'll press play to see what happens. So let's go back to our desktop. All right. Oh, so, okay, find my mouse. There we go. So I have O time selected. So we're going to filter on that. So there's this filters button, which we haven't used too much. The common ones are the ones that we already looked at. This list with all the icons. So those are already on the menu. There's a whole bunch more. Including, if I go to this alphabetical list, you can see it doesn't even fit on the screen. And some are gray and some are black. So all the black ones, of course, are the ones that I could potentially apply to this type of data set. Although that doesn't mean it makes sense. It's just the ones that computationally something would happen. And then the gray ones, it's the wrong kind of data. But in order to not find it, so I could actually, whoops. Filters alphabetical. I could find connectivity in here. But that can take a while. So the very top option is search. And so if I just start typing c-o-n-n, it will find all the ones that kind of match that. It even finds ones that don't quite match it. Like contingency statistics doesn't have two N's. But the top one matches perfectly. So if I hit enter, I'll get the connectivity filter. And I don't think I made any changes. Oh, my. I've been doing this like all, a few days. [ Inaudible Comment ] Oh, yes. That is correct. Thank you. So I made a mistake. That was not, so ParaView probably shouldn't have crashed though. But now here's, I think I may have saved the state. We'll see. I mean, before here. So I'm going to take an aside and talk about saving your work. So one of the things ParaView does is, under file, there's this load state, save state. And so I've saved some already. But I may not have saved it right at the right spot. But let's find out. So I have load state. This is that data set. Don't see it there. Let's go up to Horowitz. There we go. Oh, yes. So here's the contour. I already saved the contour state. So I can actually, I saved my work at this point earlier when I was preparing for this lecture. Oh, I was going to talk about that. Well, I have a slide on that. We'll talk more about that in a minute. All right, so here I am back to where I was supposed to be. And that is I was supposed to contour first as Eric pointed out. I wasn't supposed to do connectivity on this. Because it's just a volume at that point. Now, it's geometry with connectivity possibilities. And so that's what I want to figure out the connectivity mesh on. And so let's search for that. All right, and now we'll click apply. And it won't crash. Excellent. All right, and so there's our data set. It looks like it already divided the data. I don't remember doing, oh, yes. That's because I saved my state; right? So earlier today when I was, and yesterday when I as working on the slides, part of saving the state was to mess with the color map. Which I was going to show you by hand. But let's take a look at it anyway. So down here in the coloring section, I'm coloring by region ID; right? So that's what connectivity produces is the ID of each connected object. So that's good. I want to color by that. And I want to adjust what I'm coloring by. So here's, I chose this color map that's kind a rainbow-ish, not perfect rainbow. But has some discrete jumps. And then I said down here in the lower right, let me make, raise this up a little bit. In the lower right of my ParaView window, I checked discretize. And I set the number of discrete colors to 12. So I can make that, you know, something else, 21 here. And then I have to, I don't have to apply the color wrap, all right. And so that happened. And so, if I want to have these discrete colors, that's how I can do it. And actually, you know, it's always discrete. If I just make it a really big number, then it doesn't look so discrete; right? But, in fact, it's always slightly discrete. All right, I'll leave it at 30. All right, and then I'm going to close this window here. All right, and so, again, it's not really a random order. Because the thing that was figuring out connectivity started in one location and moved through the data, figuring out. But you can see that, you know, this region here, this purple one, it extends fairly far into the data set. And you can see some that kind of go beyond where they started. So we get some information out of that. But, again, if we had random colors, it would probably be a little easier to tell. All right, oh, and so I can, say jump back in time. Oh, and let me show you then that I set the color range with this one. So this button here. So next to the coloring, I set it to start with zero and go to 400. And the reason I chose that is from what I showed you earlier in the information tab. So right now it tells me there's 52 regions. Zero through 51. But if I were to go to the end of the data, it tells me there's 358 or 359 regions. And so that's why I chose that bigger number; right? So let's go back to the beginning. And I'll press play. So there was one region at the beginning, and now it's already dividing up. And so it's chunking into these different sections. And so, again, we can animate this. It's a little bit slow because it's doing a bit of processing. And this is where later in another lecture we can could have it write those out as image files. And later we could turn that into a movie so that we don't actually have to wait for the processing every time. Here it's not too bad. But if you're doing kind a little bit more computation or you have a bigger data set, then you might want do that. All right, so I'm not going to wait till that finishes. But let's jump ahead though. So let's jump ahead to, say 300 here. All right, so, again, we're still, the information is changing here; right? So there's still only 100 different values or so, connectivity sections. So we're not all the way through our color map. So it's limiting in what it's showing us. And I'll do one more jump. Let's jump to 450. There we go. So now we have a little bit more of the full extent of the color map. And because everything's kind of broken down into lots of little different, you know, balls. Okay, so that's what we're going to look at for that data set. And we have 15 minutes left. The next one is from Professor Vesperini. So let me go back to slides. All right. And we'll do this. When I get back there, I'll reset it. So Professor Vesperini is sharing his data with us as well. Oh, oh, so here's the slide on saving state; right? So I already showed you the safe state, load state. So I just showed you loading it. You can also, of course, saving it. And it will save all the parameters exactly how you had it. And then, so I saved it earlier. If you wanted to jump right in, you could jump right to the last one where I have the connectivity state and PVSM is ParaView state machine or state model. And so it has this format. It's actually Python code. So it's a Python script that will reload everything back to the way it was. And then when you load it, I clicked past it really fast when I was showing it earlier. But it actually gives you three choices for how the file names should match; right? So in this case I was right in the same spot where I had saved it. I was on the same machine. And so the data was right where I had left it. But if I, say take that state file and move it to a different machine and the data's maybe slightly different. I can either have it search for the data for me under a directory. Or I could just find the data. Say this is where the data is. Change the path to that data. And then it will pick up from there. So you have those three options when you load it. If you're on the same computer, the option where you don't have to do anything is there. All right, so we'll reset ParaView. And then this is Professor Vesperini's data set. So an animation we did for him and his post-docs. And, again, this was done mostly for public display or display to other scientists to look at the data. This one has, so this one also has point data. But in this case, instead of density of points, these are moving points. Because they're stars orbiting through gravitational fields. Here they are kind of clustered together. Here's that cluster spinning off stars; right? You can ask Professor Vesperini if you want more information about that. So we're going to show a data set though. One of the sub-data sets that he and Jongsuk Hong had was how binary star systems interact with other random stars that come through. So we're going to look at that so we can kind of trace the path. So let me go back to that previous slide. So you can see in here, we had the points. But we also have these little trailers to see how things are moving. So we get an information about time even from the still image. Not so much in this one. Although we can see everything's moving around rather fast. And it looks like kind of randomly. So you can see things are moving. It's hard to tell exactly what's going on though. Move my microphone. Okay. So, again, this time we preprocessed data, but only to get it into a format that VTK or ParaView knows about. So we were provided the data from, that came, was the output of Star Lab and Body Simulation. You can correct me if I make any mistakes here [inaudible]. We converted that to a VTK format so that it would all be preprocessed. You could write a script that loads it from here and then process it every time. But, since we were going to be dealing with it several times, it was just easier to process at once. So if we look on Carbonite on RED, under that data directory there will one called D collision underscore 05. So there were several binary star collisions runs. So 05 is the one we're, I have loaded up. And Jongsuk Hong's data is what that is. So each star in this case, in the case for the Horowitz data, we created IDs for clumps. But each particle, we didn't really care which particle was from time step to time step. Now we care; right? So the star lab simulation for every star that's moving through the space, it uniquely identifies it with a number. So some of the stars go out of the simulation. And we don't hear from them again. And so that ID number just goes away. But if we want to go from step to step and know that we're seeing the same star. We, it has to be identified. And so that's done for us with Star Lab. And so each star has an ID, which is just an integer that says which one it is. Again, we're looking at multi-time step data. And it's the star collisions. So what we're going to do, oh, and so the data that comes with it, actually there's several things. So there's the ID. But each star has a mass that has a type, which I don't remember what those are. It has a velocity. And it has this other V [inaudible], which Professor Vesperini can explain if he chooses. But we only care about the ID right now. They also have locations. Although you won't see that in the lists of data sets. So I put that italic. So that's just kind of there. It's part of the 3D representation. We're going to color them by ID so that we can distinguish them. If we colored them by mass, they all pretty much have the same mass. So they'd all look the same color, and we wouldn't be able to tell them apart so much. We're going to represent them as 3D glyphs. Which starts by fault as an arrow. Which you might think, well, it has velocity, so that's good. We could have like this arrow represent the velocity. The problem is, even though the stars are relatively moving to each other, they're also all moving in the same direction. So really the velocity of their bigger movement overpowers which direction they are moving relative to each other. So arrows actually doesn't work. So we're going to set up the spheres because they're stars anyway. You can set the resolution to be more spherical. We're going to leave it at low resolution. One of the things we did when we were making the animation was, when we were processing things, we did low resolution. But when we were making the final animation, we set it to much higher resolution spheres. Which meant it took longer on the super computer. But we got a better looking image. I wanted to point out, so here's those data sets that I have listed over there. Except for location. Location is kind of reported down here in bounds, at least the range of it. And, again, there's, this one only has three stars. So the IDs are one, two and three. And that's what we're going to color by. They all have the same mass. So that's why if we colored by mass, it wouldn't work for us. And in this case they all have the same type. So we're going to color by ID. And so we're going to choose glyph, which I didn't show it there. We're going to color by ID. And then in the glyph parameters, which we'll have to scroll down for, we want to set it to be the sphere. And then here's where we can set the resolution of that sphere. So it's 8 by 8. So I think that means about 32 polygons. Because you really only go halfway around in the phi direction. And so, again, so the key thing that is we're going to set our glyph type to sphere. And so, when I go and run it, we'll see something like this. So I'll load the data. I'll press this button here. Which tells me, which kind of puts the data in the center. Then I'll animate. And so there's two stars in binary. The blue and the white. And then a red one that comes along and interacts with them. And then at the end, there'll will be a red one. The red and the white are in a binary situation. So let's go ahead and do that. How we doing for time? Seven minutes left, all right. So, again, I'll find my mouse. There it is. Reset. Yes. All right. I'll load the data. So I already, I'm going to look over here. See, I've looked at this data already once. So it's handy for me. There's Jongsuk's data. Say okay. And open it up. All right, so the data's in here. We can't see it because I'm doing surface. So what I need to do is glyphs. And now you'll see that there's three blue arrows. So let me turn off this color map because we don't care about that so much. Oh, I see, I wasn't on properties, that's why. So turn off the color map. There's three blue arrows. So I want to color by not mass, but ID. So now I want to turn back on my color map thing. All right, now we have a white, a blue and a red. I want them to be spheres. I have my representations, 3D glyphs. I have to scroll way down to get what those glyphs are going to be represented as. So here's glyph parameters. And, again, I'm going to do my glyph type as sphere. And I'll just leave the rest of the parameters. I can change the size of it here. Because, obviously, the stars aren't probably that close. But, and then we'll just press play. All right, so there's only three data points. So it renders pretty quickly. The simulation concentrates more when they get closer. So it looks like they slow down, but they don't actually. It's just there's more temporal resolution at that point. And then we're at the end. So I'll jump back to the beginning. So that was interesting; right? You could see that happening. You could see the interaction happening. One of the things, though, we want to do is be able to see, kind of get, retain some context of the movement; right? And so we go back to my slides. All right so here's what we just saw, whoops. Here's what we just saw. And here's what we might want to do, then, is retain some information. So this picture has this little, you can see this little tail here, if you're in the front couple rows. There's a little white tail, and there's a little blue tail which you can barely see. And then a red tail. And so we want to, we're going to use that to track this information. And so to do that, there's a new filter called, or new one for us, temporal particles to path lines. So we have temporal particles; right? We have particles that are moving. And we can convert their movement to path lines. And when we do that, it's going to create, over here is our pipeline browser. It's going to create two subparts of that. The path and the particles. So the particles is just really kind of a repeat of the data we already had. Now we can manipulate it. And the path is then going to give us this little tail that we can do. So something though that the temporal particles path line does is it produces this other box that says. How many of the particles do you want to see? All right, so if I have a million particles, I'm probably not going to be able to see all of them. It's going to take a lot of processing. And so I want to, if I can like filter that down, it'd be good. So they have this mask points. So typically the mask points, I think, defaulted to 100. So it would show you every 100th particle. So if I have a million points, it will show me 10,000 particles. And so that might work pretty well. If I have three points, and show I see every 100th point, that doesn't work so well. So I'm going to mask basically none of the points. I'm going to show every single particle. So I set the number to one. I think the default max track length was 25. So I set that to 100. And I can do the step distance. I just left those as the default. And, again, I have to make my sphere, my glyph a sphere. I have to redo that because the particles, use the mouse. The particles here is a different data set than the particles here. So I have to reset the glyph and stuff for that. And then we'll get something that, oh, I'm skipping ahead. We'll do that next then. I'll do this right now. We got three minutes. So we're pretty close to the end. So other than not getting to watch the movies I had hoped, we're good timing. All right, so I'm going to search for that thing called temporal particles to path line. Oh, I clicked on the wrong thing. All right, cancel that. Escape. Escape. Oh, I wasn't, oh, I have to apply. All right. So I apply that. And now let's go back and do that. And you have to enter for that to work. All right, so now, as I showed on the slide, widen this up a bit. I have this particles and path line. So the particles one, again, I'm going to have to go back when we apply. I'm going to have to go back and set it to ID. And glyph. And sphere glyph. Because it's a different thing in the pipeline. There we go. And I have to turn off, if I don't want to care about these legends, which I don't. I have to turn those off again. And I have to do it both for path lines and for particles. So path lines turn it off. And so, again, path lines, oh, particles rather has, somewhere in here. Here it is, right at the top. Here's the mask point. So I want that to be one. I'm going to make the track length 100. And I'll leave the rest as defaults. I'll center my data. Oops, I forgot to apply those. Now I'll center the data. All right, and now, if I press play. Now you can see those little lines being traced behind the particles. Those are hard to see, so I'm going to jump right ahead. Path lines, we can make these lines turn into something we can see a little bit better called tubes. So we can turn lines into tubes. And now I'll apply that. And now, when we run it, we can see those a little bitter. I can make those tubes fatter. So here's the radius of the tube. So it's 0.06. So we'll make it 0.15. And apply that. And now I can press play. All right, and now we can see the animation. We can see the trails happening all along here. So one thing I wanted to point out, though, is, if I'm at the beginning and I want to know, oh, what's going to happen at time step 300? Oop. Let me hit my data view. There they are. Jumped out. I don't have those trails as long as they were. Because the trails are actually calculated on the fly; right? So if it didn't process that time step, it doesn't know that there was a tail there or a trail there. And so you can't really jump around in time. Or least you have to go back a little bit and then process forward to see it. All right, so we're right at time. So let me just go back to the slides, and we'll wrap up. Okay, it's already stopped. Okay, so I already did this next slide where we turned things into tubes. Here I linked from the path so that we can see more of the interaction; right? So I [inaudible] into 1,000. You can see a lot of the binary interaction. I also mentioned the jumping in time thing, which I just showed you. The last thing I was going to show you, which I won't show you interactively, is there's a lot more data on Carbonite. If you're on the Carbonite. Or if you download ParaView yourself, you can down, ParaView has a really wide variety of different data types. So one of them, and I have a picture of here is the blunt fin. So it's things that are happening with air flow around this fin. In this case it has data for density, momentum and stagnation energy. I forget which this one is. I think this is density. So one of the things I wanted to show, and I won't show live since we've run out of time. Is that one of the things ParaView had in the upper right corner of the view is this render, these little buttons to, next to render view. And you can split that view vertically or horizontally. Or move things around. So I split it horizontally. And that produces this picture over here on the right. And so now I have two views into the same exact data set. But over in the pipeline browser, I actually can control things differently. So I can turn something on and off in one. And vice versa in the other. I can set each one to different data. So I can, so in this case I'm viewing density here. And momentum on the right. And so I can see those. You can also see I can rotate them separately. However, I can also link them together. If I right click, I can link them. So once I do that, I get a view that looks like this. And whenever I rotate one window, the other one follows. And so I can compare my data. I did find, though, that on my Mac I couldn't get the link to work without a mouse. So you have to right click to get that linking to work. And right clicking by pushing the command button did not get through Thinglink. So I actually had to get a mouse to do that. And then that's basically it. So, oh, there was one other slide. Here it is. So other things that you can do with ParaView that we didn't obviously have time to cover today is that there's enhanced animating. So we did animating through time. You can also animate the camera. So if you want do like a little nice little video. You want to move the camera from one viewpoint to another. You can animate that. You can animate the parameters. So if you want to make the coloring different or scaling different at some point, you can animate all those parameters. And you can also do batch rendering. Which is what we do once we've decided on some parameters. We can make a little ParaView movie by doing batch rendering by say taking it up to the big red two. And getting into the batch queue. There's also Python scripting. So you can use Python to like create objects or manipulate things. Here's a really simple Python script over here on the right. That just takes one data, one piece of data. In this case a sphere. And changes all the z values by 0.3. And so it squishes, in this case it just squishes that sphere. But this is, just shows you, you can take input data. Here's input data. Output data. Get the points. Change the z value of all those points. And then save it out again. So it obviously can do something a little more complicated. But we can just write these little Python scripts to manipulate our data. You can actually animate values inside the Python scripts. And then there's some parameters or there's some functionality built into Python for doing queries. Selecting data. Plotting out different data and so on. But obviously we can't cover everything about ParaView in an hour and 15 minutes. So any other, any questions about what we covered today? Yes.  Is there a Canvas page?  Yeah. So there's a Canvas page for this class. I didn't upload things yet. But that's one of the things I'm doing this week. [ Inaudible Question ] Probably not. I probably haven't pressed the published button yet. Yeah, but since I'm not talking next week, I can focus more on the Canvas page. I have, someone else is lecturing next week. And so, yes, I'll take care of that before next, in the next couple days here. Good. Thank you for reminding me. Yes. [ Inaudible Question ] Right. So that's on the other slide that I skipped over. Yeah, so ParaView has pretty good help. They used to have a little question mark that you could press on. But now there's a help menu. And so there's all these kinds of sample things here. It will take you right to their wiki or right to their tutorials. Whatever you want to do. So they have a really good wiki and a table of contents on that. They also have a mailing list. Which is super responsive. So they have people on staff that being paid to respond to the mailing lists. So you're not just waiting for someone who wants to, you know, be nice out of the goodness of their hearts. Although, those people are on there too. But some people are actually being paid to follow the mailing list and answer questions. And there's a debugging reporting mechanism. Which you can also use the mailing list, but they have a separate one. The web page is pretty thorough, I think. And like I said earlier, they're doing a pretty good job of updating it on a regular basis. They actually take contracts from national labs who say, I want this feature added. And so, okay, pay us $50,000, and we'll add that feature or whatever. So it's a pretty good tool, you know. They've been working to expand its repertoire a little bit. It does a little bit of like showing molecules and things like that. But it really doesn't have a lot of molecular filters built into it. But as people request those kinds of things, they add it. They also, Professor Pavlis on campus in the geology department, he as a bunch of, actually, filters he's written that do geographic, geologically based. And kind of polar spherical coordinate-based visualizations. And so it works pretty well for that too. Yeah. [ Inaudible Question ] Yes. And locally, you can mail us. And that's vishelp@iu.edu. Is that right? Do I have a slide? I don't seem to have that on my slide. Yes. [ Inaudible Question ] Well, I, yeah. [ Inaudible Comment ] Right. [ Inaudible Comment ] Yeah. [ Inaudible Question ] Oh, yeah, sure. I'll show some videos here. So Let me get out of that. So, yeah, thanks for coming. [ Inaudible Question ] Yeah.  Be sure to sign the sign-in sheet if you haven't done so.  All right, so here's an animation which is, I don't know which screen it's going to come up on. So I'll have to watch for it. There we go. All right, so here's one that we did with Professor Horowitz's data. And, again, we, the rendering all happened, the data rendering all happened in ParaView. And we just took it and put it into Adobe Premiere. Added some data for it. This was done for the Big Red Two dedication. And so it has explanation text on the left side there. OSC, sorry, okay. And you can see this nuclear pasta thing, it talks about the different stages that the density goes through. Which is where it gets its nickname. [ Inaudible Comment ] Right. So, yes, exactly. Yeah, camera's orbiting the data. And the data actually expands, right, as the density goes down. So I think we're probably pulling away too. Is that right, Dave? [ Inaudible Response ] No, okay. [ Inaudible Comment ] Oh, I see. Okay, right.  Meatballs.  Meatballs, yeah. I think meatballs is the end of the animation. And then what's that? [ Inaudible Comment ] And then, let me stop this. And I'll show some of Professor Vesperini's work. Although, I think this one might be, well, this is, I don't think this is the 3D one that we did with the binary star collisions. Yeah, this is the one for supercomputing as well. To where there's some data. There we go. All right. So you can ask Enrico if you want. So we have a fancier one too that maybe I'll show in a future week. So these are globular clusters too; right? Yeah. It probably says somewhere; right? So in this case, time is paused or was paused. When we were zooming in and out, time was paused. And now time is going again. So that's why the two shadings for the play button and the pause button. All right. I can find the one with narration though too, let's. All right, let me quit this. It's looping, oops. And I'll show one more of that, of similar data from the same kind of simulation here, so. All right, one last one. [ Inaudible Narration ] So for this I, oop. [ Inaudible Narration ] Oh, there we go. [ Inaudible Narration ] Switch the audio, there we go. [ Inaudible Narration ]  This simulation of the globular cluster of [inaudible] illustrates some of the physical processing. Having [inaudible] your cluster, individual stars.  Sorry that you missed me earlier.  As we pull away, the trails are added to help visualize the path of individual stars. These green line demarcate [inaudible]. The arrows indicate the direction of the clusters orbit around the galactic center. Two title tails begin to emerge from the top and bottom of the clusters. [ Music ]  So all this, these arrows and this text is all actually animated in ParaView. So this, the title's at the beginning and the end. And some of the graphs were added in Premiere. And this picture here was added in Premiere. But everything else was actually rendered in ParaView.  Currently 18,000 [inaudible] center of the Milky Way. As a cluster evolves, it slowly evaporates. This is a result of the gravitational interaction with other stars in the system. Some stars gain enough energy to escape the cluster and populate the [inaudible] fields above and below the cluster. [ Music ] Potential density graph in the upper left corner reveals how the energy released by binary stars [inaudible] collapse. As a cluster continues to evolve, its internal structural [inaudible] properties change. In particular, during part of a cluster evolution.  We rendered this in 3D too. So when it rotates like this [inaudible]. So if you have a 3D, actually, this is a 3D display.  In this visualization, the internal structure of the cluster and its radiodensity variation are hidden by the outer stars. The outer stars are visually removed [inaudible] structure. And the central high density regions where close. [ Multiple speakers ] Close interactions between binary stars and [inaudible] stars become more and more frequent. Compact binary stars will become even more compact as a result of these interactions. And release energy, increasingly kinetic energy associated with the motion of the single star and that of the binary [inaudible]. Similar to the nuclear reactions in the center of stars, binary stars act as an energy source in the central region of a globular cluster and help the collapse of the cluster [inaudible]. These sequences show the details of some of these binary single star interactions. Occasionally during an interaction a binary star system may exchange one of its initial components with the interacting single star. The simulation also shows more complex interactions between triple system and a binary system that can occur in the cluster's central region. Globular clusters play a key role in many areas of research in astronomy. Including stellar evolution. Stellar dynamics. Galaxy formation. And evolution. [ Music ] These simulations were run on Indiana University's Big Red Two [inaudible] supercomputers. [ Music ]  All right. So there we go. Thanks for sticking around. That was a lot, a lot of team work went into [inaudible]. We were members. Yep, thanks for coming. 