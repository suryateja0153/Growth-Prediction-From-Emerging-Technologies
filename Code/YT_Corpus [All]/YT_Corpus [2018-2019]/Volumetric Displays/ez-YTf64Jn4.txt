 Hello guys, what's up? Kryzarel here. In this Items & Inventory video we'll set up the Stats Panel and integrate CharacterStats into this project. With this we will actually see stats and have them update when items are equipped and removed. Let's start by building the UI for the stats panel. I'm gonna try to go fairly in-depth into building this UI, giving out all the details and building it piece by piece in a way where you could probably use each piece separately and they would still work and look good. Make a new empty game object with the correct size for this left hand section. We'll call it "Stats Panel" and then add a vertical layout group. We need to uncheck both of the "Force Expand" checkboxes, we don't wan't child objects to be forced to stretch, and we want to check the "Child Controls Size" checkboxes, because we do want child objects to control their own size via their "Layout Element" components. Change the anchors while holding down alt+shift, and then set the size. Since we're here let's also set the padding for the vertical layout component. Now, we know each stat needs a name and value, so we'll make a new empty game object that we'll call "Stat Display", and create two text objects as children. The first one is the "Stat Name" and the second is the "Stat Value". Let's take this chance to increase both their heights to 50, because we'll need to change their font sizes in a moment. But now we have to fix our parent object, because it has a size of 0. We need to add a "Layout Element" component... and usually we'd probably figure out the width and height by experimenting, but I already know it needs a preferred height of 45 and a width of 300. Ok, now we can position the texts properly. Open the anchors window, hold down alt+shift. And "Name" goes in the top left, while "Value" goes to the top right. Let's also add a new Image, and set its sprite to "Text Line". Hit the "Set Native Size" button. And now we can change its anchors to bottom stretch, once again holding down alt+shift. Let's configure the "Stat Name" text: we'll change the font to "OLDTYPE". And by the way, I've updated the UI download to include this font, so if you downloaded an older version that didn't have the font, just download it again. Link is in the description as usual. The font size will be 35. And I'll copy and paste the color from my notes, pause here if you want to copy it too. For the "Stat Value": since the "OLDTYPE" font doesn't have numbers, we'll leave the "Arial" font. Size 30, aligned to the right and color is going to be full white. We can see that the alignment between the two texts looks pretty awful. For some reason the "OLDTYPE" font leaves a ton of empty space above the text. So change the Name's position to 8 and 7, on the X and Y axis, respectively. And the Value's position to -7 and -3. Another thing I like to do, is change these texts to "Overflow", both horizontally and vertically. The reason for that is simple: let's say our textbox was a slightly smaller. If something went wrong and we're getting a bigger number than we were expecting, I would much rather see this and instantly realize that something went wrong. Than seeing something like this, which would probably make me think everything is fine. This looks pretty good already, but there's a small detail here that's not 100% yet. If we were to reduce the size of our "Stat Display" object, every object mantains its relative position because of how we set our anchors, which is perfect, however, you might notice that the separator line starts to deform and moves away from its intended position. Even if we were to try "Preserve Aspect Ratio", it turns out even worse. Fortunately for us, the fix for this is fairly easy, although it might not be very obvious. We'll change the image type from "Simple" to "Sliced", but now Unity is going to complain because we haven't defined how this image is supposed to be sliced. So we need to come down to our project folders and select our "Text Line" image. And hit the "Sprite Editor" button in the inspector window. And now we can adjust the borders by dragging these green lines. For this case we want our borders to be just 1 pixel inside the image on each side. Essentially this is telling Unity to keep the edges of the image, and repeat the middle section as much as needed based on the image's size. We can go back to our scene and verify that we can now resize our object as much as we want, and it will still look good...most of the time. Let's finish up our UI by adding the 2 missing elements. By the way, I'm using the "Stats with Text" image as a reference, it's also included in the UI download. I'll skip most of this part since there's not much to it, but I'll show all the values at the end. We should also uncheck the "Raycast Target" checkbox from all of our UI components. We don't need to detect input on them, so there's no need to spend processing power waiting for mouse clicks. Ok, after all this work for a simple UI piece, let's get to the coding side of things. Make a class for the stat display. And add it as a component to all of our "Stat Display" objects. We need access to two text objects, Name and Value. Once more we can take advantage of the OnValidate method to get these components for us. When doing "GetComponentsInChildren", the order of each component in the returned array is always the same order as they appear in the hierarchy. In our case the name text will be the first and the value will be the second. And now, for the part that we've all been waiting for (or not), integration with CharacterStats. CharacterStats was the last tutorial series, check it out if you haven't already. Anyway, you can download the source code at the bottom of the Unity forum thread linked in the description. First of all let's rename the "InventoryManager" script to "Character". The name didn't make sense in the first place, and we probably don't need yet another script. The "Character" can handle all of this logic. We need to include the "CharacterStats" namespace. And let's add a "CharacterStat" variable for all the stats. Let's make a "StatPanel" script now. This will contain all the stat displays and update their texts according to the real stat values from our character. We'll declare an array of stat displays and, as usual, get them in the OnValidate method. We'll also need an array of CharacterStats. And an array of strings, which will just serve as a convenient way to change the stat names in the UI. Ok, our array of CharacterStats clearly has to come from the Character script, so let's just make a function that recieves the stats. We can declare a method that has a variable number of input parameters, by using the "params" keyword. And, conveniently, this gives us an array of CharacterStats, that we can just assign directly to our "stats" variable. However, there's no guarantee that this array will be the same size as our "statDisplays" array. So let's handle that case properly: If we have more stats than statDisplays, that's a big problem, we can't show all our stats! Let's call "Debug.LogError". If we have more statDisplays than stats, that's not so bad, let's just disable the extra statDisplays. We go through the "statDisplays" array, if "i" is less than the size of the "stats" array, enable the object, otherwise disable it. Let's make a method that we can call to update our values in the UI. Name it "UpdateStatValues". This just iterates through our stats and sets the corresponding stat display value text to the current stat value. This method will be called from the "Character" class whenever we need to update our stat values. Let's make a similar method that updates our stat names. This will be named "UpdateStatNames". It will iterate through the "statNames" array and set the "Name" text component on the corresponding "statDisplay" to the correct name. This will be called in the OnValidate method, since the only place where we can edit stat names is in the editor, at least for now. Now we can easily edit all our stat names conveniently from this single script, instead of having to change 4 different text components. Ideally, we would make an editor script for this, to avoid having two different arrays that can easily become out of sync. But since this is still such a simple case right now, that would be way too much work for little benefit. Back in the "Character" script, add a reference to the "StatPanel" and set it up in the "Awake" function, by passing in our stats. Now, open up the EquippableItem class, and add two public methods, one called "Equip" and another called "Unequip". They both return void and receive a Character as their only input parameter. For the "Equip" method, we need to check if the "StrengthBonus" variable is something other than 0, because if it's zero there's no point doing anything. And if that's the case, add a new modifier to the "Strength" stat, giving it the value of "StrengthBonus", "Flat" as the type, and source will be "this" item. Now just repeat this for every single other bonus and don't forget that for the percent bonuses, the "StatModType" should be "PercentMult". When unequipping, we just need to "RemoveAllModifiersFromSource" from every stat, passing in "this" item as the input parameter. Jumping back to the character script, let's call the "Equip" and "Unequip" methods at the appropriate times, followed by updating the values in the stats panel. We should equip the item here. And unequip it here. And here. Alrighty then, all of our items are working, I hope you've found this video useful, and I can't wait to see you in the next episode. 