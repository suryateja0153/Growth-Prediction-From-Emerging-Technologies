 good morning everybody thanks very much for joining this webinar I hope you find something of value in it so this is kind of the introduction to near PJ so that you'll find that we're running a series of webinars of increasing depth and covering more specialized subjects and including some demonstrations and I hope you can join for all of those but today we're just going to look at the that the entry stage if you like to your journey into near PJ by describing what the product is how people use it and how it's put together so who we are what it is so near PJ is the company behind the neo PJ graph platform and so the new FJ graph platform is what we're going to talk about this morning but in essence it's a database and some surrounding facilities and as a database you'll be thinking of other types of database that you've worked with and this is a particular one that's designed as it says here to store reveal and query relationships so it is about data obviously it's about data but the real emphasis is on relationships data in context data connected to other contexts so we're going to talk a lot about that but essentially as it says here what we're going to use it for is to traverse an analyze connected data to any level of depth so these can be unbounded queries going as deep as you need to into the connections between the data one other point it's a real-time asset database you can read and write in real-time and as you as you read and write the answers that you get to queries and will naturally change so just a few small points from the bottom on the Left it's designed as it says right at the bottom of the graph adoption it's easy to use and if you're not already using it we do recommend that you go to our website and do the download it with lots of helpful guides and and and and and should be very easy use if you're in an environment where you're with a lockdown computer and you can't download software there is a set of sandbox in our website as well so I hope right after this presentation you'll go and start playing with the FPGA yourselves it's designed to be easy to use it's designed to make you productive and to make your your developers productive so I won't talk through the rest of those points at the moment because we'll cover those in the rest of the presentation and we'll also look at the diagram on the right but these are the main elements that come with me APJ in what we call the graph platform so neo4j is the innovator in the in graph databases so we developed a model called the labelled property graph we introduced that as a an open-source product in 2010 and when we did that we were absolutely alone in this market and since then well our success and changes in the world have led to other players entering the market but we've now got 200 developers working on the FPGA which is by far and away the largest number of people working on it on a graph database anywhere and I went to talk through all these points but if you look at the end of the graph you can see that the rate of innovation is it's not just being maintained it's actually increasing and some of the significant things that we're doing now which keep us well ahead of the competition are listed in some of those points on the right and so you'll see right at the bottom the neo4j cloud we're just about to launch a database as a service offering if you're interested in that you can contact us and we can we can give you an endpoint that you can use the databases to use in the APJ without having to install anything ourselves Morpheus you'll see there is our big data integrator allowing you to use she sparked with nearby Jane if you look above that you'll see the gql manifesto Sonia PJ is leading the effort to get Graff thinking included into ANSI standards in the same way that SQL is an ANSI standard so that makes a whole industry better for everybody and protects the investment of people who invested in neo4j I won't talk through rush these points but hopefully you'll see that there is a lot of innovation going on in the echo J so I said I'd look at the graph platform in a bit more detail and so first thing to say is it's a database right in the center you can see the blue database to the left you'll see it's a transactional database so it's acid it understands rollback it's a guarantee place to store your data looking to the right you'll see is also an analytic database so it's designed to tell you things that are true of to help you understand things that are true of a large population so the most famous graph algorithm and is probably PageRank which was the algorithm that propelled Google to enormous fame and wealth that's the graph algorithm you can use in the FHA for running PageRank in fact it's probably the fastest tool fastest environment for running that PageRank algorithm but that's just one of a class of algorithms that you can use to characterize the subpopulations the important players the other big things that are characteristic of any population so near PJ is both a transactional database and an analytical database now looking around the circle or at around the square at the top you can see drive as an API so near PJ is designed to be a back-end to it to an online service typical transact and typical transaction response times are in the milliseconds and very high volumes so that's the the you can do that through from your own development environment Java or.net or whatever and calling into a into an API on top of near PJ looking over to the right it's not just about online transactions the data that's in there is is interesting and you may want to explore it and to visualize it so we have lots of users who are using the FPGA for discovering for examining fraud situations or for exploring data lineage in their database and those are visual use cases so we have visualization tools to support them over to the right you'll see the analytical tooling so as well as the algorithms that you can run within neo4j such as PageRank and so on we recognize there's a big world out there so you can use you can talk to neo4j through our through our and python and we can interact very closely with spark another big data platforms at the bottom near PJ obviously has to exist in in in in your data environment so we need to be able to get data and push data to other applications and the a PJ has a rich ETL suite and then finally you'll need to to run it in production so it's designed to be operated but in secure production environments with with with all the monitoring and security features that you'll need if you're an enterprise type of user ok so looking at the main components of it the first one is probably the most important that the thing that makes neeraj a special index free adjacency do I like that term I'm not sure but what it means is that as opposed to a relational database where you need to use indexes and key lookups to traverse from one table to another you don't need to do that with neo PJ because you have direct connections and that's a really important thing about Nearpod a so if you think about a relational database you you your your your sequel statements will often include joint statement so joins the way you traverse from one entity type to another entity type or from one table to another table and and and what that doing is at the time that you read the data you're doing a calculation you're learning what's the data into memory you're doing a calculation and finding out how to join one table to another to get a result set with neo4j you don't have to do that because the connection is stored at the time the data is written so we store that data on the we store that relationship on the disk if you like as a pointer so that you don't have to calculate it every time you want to read it so there's a there's a marginal write cost if you like on a graph database it you have to write a relationship as well as writing the row but the benefit comes at read time and and with most applications you read far more frequently you're right so we get a payback I mean in almost every use case I've met much much much faster performance and one thing more further thing on this point the the what one of the unique one of the key things about neo4j is that it is what we call a native graph database which means that that way of connecting data is is right through the stack right the two storage on disk or SSD or whatever so you're not being asked to have a graph view on some other model it's a graph from from top to bottom and that gives us this great advantage of index really sincere ok the acid foundation so it's a it's a massive database so it's designed for transactional operations it's a full stack tool what does that mean it needs it's resilient high availability if you drill into it you would not only do we have higher availability we understand data centers so you can have a replicated core of guarantee correct machines in distributed datacenters we also support what we call read replicas for running long long-running analytical jobs and things like that which don't interfere with the transactional load moving down to the bottom on there on the Left it's designed to make life very very easy for developers developers inherently understand once they've started they certainly find the grass or a very easy and convenient way of looking at things finally it's it's it's a it's a declarative lactic erotic language so as with other advanced databases that the database uses the knowledge about the way in which today is organized on this to optimize your queries and saving you the effort of needing to understand the details and finally it's got an this analytics engine which means it's very powerful for the emerging class of AI and machine learning and natural language type of language of applications okay let's just drill back and look at what a graph database is so a graph databases a graph is a database that implements the graph model and the graph model it's nothing to do with with with graphics and with with with pie charts and histograms poke the graph model is to do with nodes and relationships or vertices and edges some people call them and a node is a just the data very item it's what we call schema optional so you can store as many properties as you like with any item and they don't have to have the same data stored with each one and that you can have that so we're also looking here at the relationships between between the nodes so there can be multiple relationships the relationships have got directions which you can use if you want to if you rent to you then you can just ignore them and each relationship can also have properties which is an immense convenience compared to other other other types of data storage so looking at other data bases near PJ is kind of its in it's in the no sequel class in the sense that you don't use the sequel language to access it but that's a just there's a confusing way of looking at it because actually near PJ is is far more normalized than a relational database you don't need to denormalization stage due to get high-performance neeraj a is the most clearly logically expressed possible way of expressing your data on in a database and everything oh there's no duplication there's no redundancy everything is it is stored on disk exactly as you have it in your conceptual model so it's even more normalized it's it's more likely you know one lies on the disk than with any relational database and that gives you great advantages I'll just draw attention to one of them which is that within the FPGA you can say okay I've got a node a and a node B please find me a path between them so you think about that with a relational database you might have ten different key fields which give you access to different join tables which might provide the links between them and you'd have to program your way through using all of those with neo4j and you don't do that you just ask the database simple question how is they connected to B and the database will tell you so it's a very very declarative clean and simple interface so that's enough about that for the moment what sort of things are people using it for well I'll use this picture which is kind of a typical enterprise picture to draw attention to some of the ways in which people are using it so what we're looking at here in the center is it's some sort of data Lake where you've got different users accessing that sort of central repository or the central store of all the data and you can see some of the ways in which neo PJ is is works in this sort of context and so over the extreme left everything from cybersecurity so that's often using the FJ as some sort of configuration management database and keeping track of all sorts of aspects of assets but also of imported information about threats looking also within the CMDB at different levels of of service so not just looking at the physical level but also the business layer layers on top of it user layers and service layers so that's a typical very physical use case and towards the bottom immediately below the data rate we've got metadata so neo4j because of its incredibly flexible data structure is really great for data lineage or for joining together data that's come from numerous data sources and an enabling use cases like customer 360 or total customer view and looking at the top on on the right you can use it for data analysts we've already talked about the the population at analytics things that we could be doing such as page rank but it's also used for people who are doing who are looking for fraud looking for crime and so on using the APA to analyze interactions between people so I've mentioned that we invented this ten years ago seven years ago what went public with it seven years ago and since then there's been a massive amount of interest generated in in graph databases and you will see graph databases coming from most of the established players but as Forrester said last year we absolutely dominate the market and the market is very big and is growing so they say nearly 70% of enterprises will be using Nia will be using graph databases by both by the end of this year Gartner did a bit more detailed analysis and when they asked people they were using the APJ for they say they're using it for innovation so people who are trying to move to digital the Ebru are trying to do new things and using the FPGA and you in for those new projects and Frost & Sullivan had this insight and I think it's quite good that actually the data analyzing connected data is really a new way of looking at the world and you need specialist tools for doing that so let's just look at that in a bit more detail so everybody's familiar with these sort of figures saying that the data is exploding and you know we don't need to look very far you know you may have a heart monitor on your sleeve you've certainly got a phone somewhere on your desk or in your pocket all of these things you weren't conceived of at the time that people were designing relational databases and the thing about them is they're all connected they're connected to tt-to in a myriad ways the number of connections that the number of logical connections between the applications on your phone and Internet bodies would frighten you if you realize how connected it is so to make this concrete it's a bit too painful to look at all on the right which you just have some footballers on it so let's look at the the one on the left so when we're talking about connectedness we're not just interested in looking at people in their position in all of our organizational hierarchies we're interested in their social interactions their twitter accounts their LinkedIn you know the number of ways in which he I communicate with my colleagues and my family has just exploded you know everything from what's happened an SMS and slack and email it just goes on and on and on more and more different connections between me and the people I'm interacting with and it's the same for everybody and it's not just me connected in lots of ways you know my home is now connected my TV's connected to my router and all the rest of it all of these things are just proliferating networks and there's value in understanding the connections between things and some of the value that comes out of that is it has you can see you can characterize it as some really big changes in the economy and in the social infrastructure so being able to look at things in terms of connection is driving for example drug discovery so we've got lots of people who are using the FDA for analyzing medicines and human genome and discovering new medicines that are going to be effective product personalization so recommendations and things like that these concepts really didn't exist ten years ago and now they're incredibly valuable and the secret in fact is true with medicine as well but the secret with successful marketing is personalization making sure you're delivering the right message or the right drug to the appropriate person so these are big big trends and over on the right a eye on machine learning so we'll talk about a little bit of warnings are within the FPGA in that context in a minute the main use case is veneer PJ recommendations fraud detection mighty network operations we've got a lot of users in telco master data management customer 360 type of things and knowledge graph and analyzing information to answer questions better and to drive AI and also identity access management so there are some pretty good company names or examples of each of these and I won't talk through them but let's just focus on on three very big customers so what we're talking about here for example this retailer on the Left used neo PJ because they had the previous year failed to be able to cope with demand on Cyber Monday so it had cost them an enormous amount of lost business Neera Jake is under enormous load but as you can see it's executing queries very very fast and we actually looked the customer there was previously using IBM ecommerce server and replaced it with neo4j for doing product recommendations the the second example is a is a hotel pricings as it's working out real-time room prices and the thing to draw your attention to there is that this company is doing ten times the volume on half the hardware so that's a twenty fold improvement in performance and if you're renting capacity from Amazon or renting capacity from Azure that matter this is a direct bottom-line saving in being able to do things more efficiently the example on the right is a is a German postal parcel delivery service and the tagline for that is that neo4j saves Christmas we implemented this system just before Christmas for doing parcel routing and Minori that allowed them to do real-time routing as as Road got congested or flights got delayed to deliver thousands of parcels a minute okay another example probably the thing the everyday is best known for is the Panama and Paradise papers stories so this is using a database that the journalists who receive this leaked data used neo4j for making sense of it but for looking at the different connections between the government players and the and the investments that people had and the private individuals I won't talk through this in detail but the Prime Minister of Pakistan is on trial at this moment as a result of information that was exposed by the analysis that the I CIJ did using the Oakridge a the prime minister of Iceland that as you probably remember resigned in issue almost immediately after the initial leak I said I talked about an AI example so if you use from Facebook message you can you can order things on eBay using the eBay shop bot that's got neo4j behind it near BJ is being used to store the catalog of products on that so I'm not going to talk about that in too much detail but there's a there's a lovely video of it on our website or you can just go direct to to ebay shop bot Thomson Reuters have a a babe a stool sorry her neo4j base tool for portfolio and managers so what these people are doing is looking at interconnections between companies and news stories so a good example is when the the Volkswagen scandal was exposed that was was bad news for Volkswagen obviously but it was bad news for any other company that sourced their exhaust control from from from the same company as well so again did and and if you know who that if you know who those companies are and you're an investment analyst you can you can short their products or their shares rather and you can buy into the ones that have got a distinct supply chain that's not connected to thee to the potential taint so this is this is the sort of thing that that Thomson Reuters are doing all the time using the APJ for helping to drive these decisions and finally this is an Internet of Things example so the Comcast use neo4j to monitor all the things that are connected to a customer's Reuter so that they can understand better what the what the usage is and who's coming into and out of a house because their phones get connected and so on so it's an extremely powerful tool that allows you as a householder to really understand how the people in your house are using your your your your their equipment in your house and it's just possible it has some marketing benefits as well that Comcast uses to to help it marketers to know it's marketing customers to understand better so sorry it's been a bit of a Rob but I'll just end with a slide of a few of the major companies that you is using near PJ and and I hope we've got just a couple of minutes or questions Angelica yeah absolutely and okay so to start us off do you typically see people using new 4G on its own or does it work well with other databases as well so yes we startups often we often use Nearpod a on its own enterprise customers never use Nearpod on its own so it's got very good import and export interaction capabilities with other database very common scene of Jay being kept in sync with other databases and so that you can you can use your traditional Oracle or sequel server database but for doing whatever they do but then do rapid analysis within the FJ so yeah both those use cases occur and both of them are very well supported okay and on that point how easy is it to transition data relationships etc from a sequel server database over to neo4j and what's kind of like the best migration paths import of a large volume of data it's neo4j so there are a couple of tools that we've got for doing that and so you can do it completely automatically you can just point in the AJ at your secret Server database and create a schema in AJ and import the data obviously you won't be taking advantage of the graph model if you do that so you may want to make some model change and that's what our ETL tooling helps you to do and actually we're going to there's a lot of initiative happening on that and we're working with some of the biggest and ETL and data virtualization vendors to get even more power out of that ok great and sorry so can you elaborate a little bit on using u4j to detect cyber attacks in a network perhaps around fraud detection is that a use case that you see often it is a use case we see quite often and there's a really interesting set of videos that have been put together by one of the American national security government agencies about using the APJ and what they do is they look at the real-time updates to threat databases and the threat database gives you information about new bits of malware and which systems they apply to which which version which software versions which are web versions and so on and and what they do is use new APJ as a CMDB so they can immediately see what the vulnerabilities are and there are actually a few other ways in which you can use neo4j in a in a cyber context and we're going to send now an email with a copy of this video so if you're interested reply to that and we can maybe have a more in-depth conversation yes definitely I'll provide you all with a bit of contact information as well if you do have some more specific questions and want to get in contact please do that we only eat the follow-up email so I think we're just about out of time I'll add in one more question just have a few around the types of nodes that you can do essentially so a one of the examples are showing text data is it possible to manage media data like images videos or audio files so the typical data types we support are the Java data types including arrays we've also got date types and location data types and you can store blobs but we wouldn't recommend it neo K tends to be used for kind of useful structural information rather than for bulk storage so I guess typically you saw a URI or something to help you to access it very common actually to store orange keys for other databases in neo4j so you can think of a few neo4j to work out which record you want from another database but then actually retrieve the data from from somewhere else so yeah probably wouldn't be storing big audio files or big videos okay make sense all right so I think we're just about out of time so thank you so much and enjoy the rest of your day 