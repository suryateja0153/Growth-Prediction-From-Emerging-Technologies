 hello everybody today I'm going to be giving a high-level overview of how near 4j is a great fit for Identity and Access Management this will be looking specifically at authorization rather than authentication so an overview of the agenda we'll first start by providing a high-level definition of what identity and access management is and introduce a simple scenario to guide through this session as a reminder we'll also have a quick look at what we mean by graph database and provide the anatomy of neo4j which is a label property graph of database following on from this we will explore one new for J is a great fit for Identity and Access Management and introduce a couple of customer stories who've used in the foj as part of the Identity and Access Management story and last but not least we'll show you a few links where you can learn more about the identity and access management applications even from briefly as Kraft connect videos from our clients or get your hands on the sample in the form of a graph jest so what is identity and access management so using they're very much agreed upon definition it is ensuring that the right individuals have access to the right resources at the right time and for the right reasons and for us to be able to do this to start thinking about what our implementation is going to look like we need to determine at least identity so what do you mean by identity defining it and start to think about the structure of the organization we're looking to identity and access management so firstly let's have a look at identity and here I'm going to start to introduce a high-level use case that we're going to describe during this session and I'm going to introduce Jane Smith and Jane Smith holds a number of identities within the organization ABC Thor Inc ad sync she is business analyst for the business function customer support at ABC Inc she is the interim head of business intelligence and reporting at seeing she's also the line manager of Joe Brown and Joe Brown is currently working on a strictly confidential portfolio at ABC Inc she is the employee of a B sync and so forth and some of these identities that we've covered here we traditionally fit within a hierarchy view some of these may be a bit harder but let's have a look at what ABC looks like so indeed it looks very much like a hierarchy ABC Inc has a number of divisions and within those divisions there are number of business functions so what we're going to do is we're going to take this view of what the business looks like and we're going to try and map Jane and Joe to this hierarchy so we can start to think about how we're going to approach this Identity and Access Management challenge so here we go and where Jane is identified as an employee for example she comfortably sits in training so he wants to make training materials available to employees or we as we talked about Jane being a business analyst for customer support lands here you know these fit and look relatively straightforward where he starts to get a bit more complicated and we need to start thinking about how we're going to fit this in when we think about what groups and assets we're going to grant access to for Joe and Jane is how do we treat the different identities that they have as well for example the interim role of head of business intelligence reporting or the fact that Joe is working on a strictly confidential portfolio which has been assigned to him specifically as an employee rather than Joe Brown the business analyst and he starts to get quite complicated and then we take it out even further what about when we're looking at multi region data concerns so for example how do we ensure that Jane and Joe only have access to training materials specific to their region and this really simple example starts to highlight some of the modern challenges facing identity and access management for example distributed access for on-premise and in the cloud applications and these applications can be things that have been developed in-house from scratch these could be custom off the soft shelf applications that have been brought in then configured these could be software-as-a-service applications so you have this big range of different applications and solutions placed in different places the other challenges well is this decentralization of resources so we looked at a similar example with Joe Brown and the strictly confidential portfolio where we have situations where we will assign resources and resource groups to specific roles but what happens when we're assigning these to specific individuals and also the rise of the Internet of Things and different identities that people and services assume in different contexts so as an example there kind of context and identity I'll have when I use my Android phone will be very different to the context I'll have around say my in-home device for managing heating say a nest which would be quite different to say my fitbit and so forth so yeah you start to have these different contexts and these identities and they won't necessarily fit into traditional approaches for identity access management which sends a feature and hierarchies and again this is not an exhaustive list so how about a slightly different approach of this scenario and what I've done here using the information about Jane and Joe's identity along with the organizational structure that we've laid out at the start I've taken the subsets of the data that have been mentioned and I've taken and I've created these entities so we've got the entities here top entity or baby stink and then in blue we've got the entities that represent the different business functions with the navy sync and then here in yellow we have the roles so for example here we've got all employees and head of BI reporting inherits into all employees as those business analysts as those line manager so we've got these traditional roles we've also got the employees here in pink and we've got the portfolio and projects here in purple and green and what we're doing here is we're taking these entities or nodes and I'm now starting to build a relationship a connection between these nodes to other nodes and describing what that relationship is like so for example here we're talking about the business hierarchy to here we're talking about what the roles look like and this is now given us the flexibility where we can say Jane and Joe have the role of business analyst and as they are members of business analysts they have access to this portfolio here they have access to all of things that all employees have access to so all employees have access to training we can see they've got access to multi-channel portfolio here and so forth so we're granting them access we're showing the description of what's going on here through the relationships of what they've got access to and also here we can show that I'm also taking Joe as an individual and chain that here's got access he has this relationship with the strictly confidential portfolio and also here with Jane Jane has direct access to the portfolio here under the customer section and this is something specific to Jane as an employee not Jane a business analyst and what I want to call into focus here is I've provided a couple of relationship types now this is just a conceptual view of how you may go about doing this and I've talked about asset groups and this would conceptually apply to specific documents as well but the the story stands the same what I've done here is I've created relationship type for example of inherit so for example here Jane Smith inherits access to this portfolio and everything that comes off that portfolio but I've also got here and now inherit and what I'm modeling or describing here is this idea but Joe Brown in this scenario has been given access has rights to look at the strictly confidential portfolio but what I'm saying by doing this is that anybody who goes through Joe so for example Jane cannot view the things that Joe has got permissions for so in the example here it could be the policy of ABC Inc that line managers have access to all of the assets and resources of their direct reports for the purposes of abscess absence or illness but there'll be certain contacts we're under no circumstances so for example for this strictly confidential portfolio but we want to let no managers have access by their employees so we're gonna quick demo exploring what's going on here so I'm going to pop in to near forge a browser and what we're going to do here for example is have a look as an example what can all employees see so as per our diagram we saw that all employees should have access to training and effectively what we're doing here is saying for this role all employees go down the inherits relationship type as far as you can go to the ends we got em and then return these assets and as we can see they've all got access to training so that's pretty straightforward so how about the specific role of business analyst so again we've named the business analyst we're looking at what they can inherit and then we're going to return back the assets they can sack and also the asset group so because some were portfolios some what projects so you run this and again we can see they've got access to multi-channel customer communications and you onboarding so let's start having a look at Jane and Joe so they're both business architects business analysts they're both got access to the business analyst roles but also about the other stuff because we know that they were also looking at other nothing so let's look specifically at Jane and have a look at what portfolios does she have access to so again we're doing so much we've got Janne and what we're doing here is we're specifying all relationships because remember Jane may have some not inherit relationships assets but what we're doing is we're putting this second part of the query here this filter which is basically saying she does not have access to anything that she doesn't have a no inherit relationship to so if you run this again we can see and there we go these are the these are the asset groups that she has got access to these are the portfolio's that she's allowed to see so let's have a look at Jo and again it's the same pattern and you can see it's exactly the same query but we've just changed the name of the person we're looking to now who run this we can see immediately he's got access to the strictly confidential portfolio where Jane does not even though she's lying managing him and that's what we expect so let's say we're going through this journey and Jos finished what he needed to do on the strictly confidential project and because it's strictly confidential as soon as he's finished what he needs to do he now needs to be removed from that and again what this looks like is very straightforward so again what we're doing we're matching the employee we're matching the portfolio but he's got access to and we're asking for the relationship and then we're just going to delete that relationship so when we rerun the query of what there's what is Jo allowed to see with regards to portfolios we can see he's been now removed from the strictly confidential portfolio so why have I just shown you I've just demonstrated how I've modeled a very simple Identity and Access Management approach for ABC Inc in near 4j where I've had the flexibility to not only associate asset and asset groups to organizational roles but also directly link employees to specific areas - likewise when Joe for example came to the end of what he needed to do for the strictly confidential portfolio I've removed that relationship and it was straightforward to do that and this is the power of near forge a a property graph database so let's just quickly look at what is the anatomy of a label property graph database so we have this concept of node so these are the entities that we were looking at and we have this concepts of the relationships between them and as you can see here we've got a subsets of the model but we drew up and on these nodes have labels and here we've got the label of employee on these two nodes and here got local of role so again very much looking at the model that we're seeing and you can have more than one label so when we spoke about earlier how might we handle training materials for different regions and making sure employees we're going to the right region potentially what modeling approach we may use is as well as employee maybe we'll put down the region as well so for Jane maybe we'll do employee and then say the other label is Amir and maybe for Joe it'll be employee and then the US region for him so we can do that and this is a really powerful concept because we can start to more do multi-dimensional hierarchies domains and so forth and that gives us a huge amount of power in looking to model our Identity and Access Management view so we've talked about relationships and relationships have a direction so you'll always specify direction near for Jay when you create them and one thing I want to touch on relationships is in neo4j we treat these as first-class citizens and what we mean by this is that we treat the relationships as same as the same amount of importance as the nodes that they connect to and we do this by creating these joins at the time of right so when you're putting your data into neo4j and you create the nodes and you create the relationships those are physically manifested and that is across the stack and this is really powerful because it means because we have these connections in place we can start to think about rather than trying to figure out how in this example here Joe and Jane are related so what connected are they connected we can start to ask how are they connected and immediately we can see in this diagram that they're directly connected because Jane manages Joe but they're also indirectly connected because they're both business analysts and this is a really powerful concept especially when we're thinking about Identity and Access Management and we're trying to see if we have been adversely granted access to resources that people shouldn't have because we weren't aware of the inheritance style of complicated route and the s with direction so you always put in direction when you create the relationship but you don't need to use it for querying so in some scenarios where relationships are not important that's ok we don't we don't worry about the director and relationship but in some examples like the example of provided here when we looked at the authorization tree for ABC Inc we do use the directions because we use this to determine inheritance of resources through staff and through roles within the organization and last but not least we've got properties and you can put properties both for notes and on relationships so for example here we've got two two properties for both this node and this node here so we've got name an employee ID and these are key value pairs and one thing to note as well is you don't have to have the same properties on all of the nodes at the same label so for example if Jane has a Twitter handle when we wanted to add this on here but Joe didn't that's okay you can do that here and you don't have to have Twitter kernel null for this not at all you're only added if you have it in it's relevant and one thing to note as well is we can also put constraints in so for example if it was absolutely mandatory that the minimum properties you were allowed to have the employee label will name an employee ID that we can constraint on that and prevent notes have been created without those two minimum properties and like I said as well we can have properties on relationships and we can use the properties and relationships for a number of things so for example here I've put down when this relationship came to be but maybe for from the viewpoint of identity and access management we may want to put something like a time to live or wearing to that relationship expire and so forth so there's that there's a whole number of ways we can enrich this information that we have so I think we can start to see and understand why neo4j is a great fit for identity and access management from a design perspective we can create something but closely relates the business logic we need to implement as a result it will be easier to align the processes around granting modifying and retracting authorization it also makes maintenance easier as it's more intuitive to Korean explore the data and updating the underlying model and structure is straightforward and touching on performance this is a big differentiator when we think about using near 4j for Identity and Access Management over a traditional relational database say if you think about traditionally you would have a normalized view and if we think about how we'd really about asking what the relationship is between Jane and Joel seeing who this Jane managed where potentially having to iterate through and if we have to do a number of traversals to find out all of the accesses that available provided with correctly managed to think what query we need to do this this is potentially a huge number of joins which is computationally very expensive where I live near 4j as I mentioned before because we treat the relationship as a first-class citizen and we put it in at the time of right it's a very simple traversal and not only is the performance very quick it's also very predictable traversal speeds so this means you get a very fast performance with this which means you have the opportunity to provide real time authorization capable so there are a number of ways that neo4j can fit into identity and accidents management approaches for example you may create a graph based repository to store their identity and access information metadata so effectively we take the information we have from each of the various systems that we have on our estate the types of groups that we have and so forth and build the metadata view of how they're all interconnected together and this gives us a view to check and compare what we're doing with our data another approach we may choose to actually keep off physical and current access and identity information inside near 4j so very similar to the example we've just explored with ABC Inc and we may use that to be the heart of our identity and access management implementation or another approach we may choose to do is take our identity and access data into near 4j and we use it to perform audits so we keep our system as it is and we're using near 4je to check to see what kind of connections we've got in and have we accidentally been granting access to systems to people who shouldn't be having that access because of complicated hire rockets so we're going to have a brief look at a couple of customer examples where they've used near 4j for their identity and access management implementations so firstly we've got to the London investment bank and they use neo4j to not only significantly speed up how long it took to grant relevant resource access to new hires but also most critically as well being able to remove access for employees who had left they found it was easy to fit into the organizational domain in all of those elements that came with neo4j made it easier to maintain the Identity and Access Management implementation another example is Telenor which is one of the top ten telco companies in europe and they use neo4j to implement their subscription services to business customers their original relational database solution required nightly batch processing and could take many minutes to query determine subscription rights of their customers and because it was nova lights batching process they were potentially korean-style date so moving their subscription identity and access management implementation over to near forge a meant not only could they now query against live data because we're talking about the connections with the data that these maintainability the fast querying ability but because of this in terms of structured in the foj their career is that could take minutes now we're taking milliseconds enabling real-time service subscription opportunities to their customers which was a real game-changer so if you want to find out more about the Telenor implementation they have spoken at graph connect before and as a fantastic youtube video when they talk about the challenges they had with their existing solution and how they implemented near 4j and the successes they had with it so i would heartily recommend you have a look at that video and another near forge a client lou have also implemented an identity and access management solution which their clients use and again they talk about the approaches of use and how they've found in your project so those are two fantastic videos to have a look at if you'd like to have a go at playing with neo4j and specifically within the identity and access management space there's a graph guest you can go and have a look at so the link is there please do check it out and that will give you the data and walkthrough of how you can implement it and start to query so again it's a great opportunity to have a look at that and last but not least graph connects our annual conference talking about new features coming out of neo4j and customer stories and as well as training is coming back and it's in New York this year and it's taking place in xx which is the main conference and the 21st which is the training day of September and it would be brilliant if you can make it and again the link is there so please do check it out thank you very much for joining us on this talk about Identity and Access Management I hope you have found it helpful 