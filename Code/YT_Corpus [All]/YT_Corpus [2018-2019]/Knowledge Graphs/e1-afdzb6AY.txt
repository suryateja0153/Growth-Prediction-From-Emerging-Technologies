 good morning everyone thank you for coming to my talk and thank you to the organizers for this opportunity my name is Tatiana Hart Engler I'm a mathematician and during my PhD studies I specialized in graph theory I currently work as a cognitive solutions expert in the technical area at cognitive ax in when Osiris Argentina where we implement solutions related to artificial intelligence and one of the solutions that we implement is that of virtual assistants for different type of companies whether it is a telecommunications company financial services ones related to health or also with banks so the title of my talk is a conversation with graphs and it's based on joint work with Federico Kauffmann cavea partition and this solution that I'm going to tell you about came up when our team leader Fernando had the idea of enhancing our Virtual Assistants with the use of graphs so that that's when we started with Ferry and how we investigating on ways to do this and we came up with this solution that I'm going to present so let me first start with an outline of the talk I'm going to give an introduction so I'm going to briefly describe what we we did in with this solution then I'm going to tell you exactly what was the problem that we were trying to solve when we started working on this I will tell you about what's an assistant tool which is the tool that we used in order to create our virtual assistants and it's one of the key ingredients of our solution after that I'm going to comment on the design of our graph on neo4j which is the other main part of our solution then I'm going to tell you a little bit about how we combine these two aspects to create the final solution we are going to have a look at an example of a movie recommendation with a really small graph so that we can see how the solution works and after that I'm going to conclude with a summary and then by mentioning the benefits and the potential that we think the solution has so let's just begin with the introduction so what did we do we combined the technology of IBM AI Watson assistant with the use of a graph database supported by neo4j and to what we wanted to achieve is to be able to make a recommendation to a customer which is based on their preferences or desires and we wanted to make this in the shortest time possible this type of solution that we created we are going to see a specific example with a movie recommendation but of course it can be applied to all different types of recommendations or search the graph database will contain all the information that we need in order to be able to make a recommendation and what's important is that our graph will be provided with weights on certain ages that we will calculate using a metric of our choice these edge weights are the key ingredient that will make it possible for us to do this process of recommendation in the fastest way possible and we will see this Tinley in detail later so now let me tell you about the problem we would like to solve we were interested in solving this problem so our goal was to in the context of a virtual assistant to give a fast recommendation to a customer based on the request and our interests so we may assume for this problem that this is the first time that we're interacting with the customer so we have no previous knowledge about their preferences or the likes so we would like to gather that information and that's where our virtual assistant comes into action we will allow it like our assistant to ask the questions in order to get to know the users preferences but otherwise we would like these to be a good user experience so besides the part of having a chat in a natural language which happens because of what's an assistant we would like the process to take the minimum amount of time possible and that's where our graphing u4j comes by so first as I said before I'm going to talk a little bit about what's an assistant tool which is where we developed our virtual assistant so with IBM what's an assistant you can build a solution that understands an input in natural language and use this machine learning in order to responds to to respond to the customers questions in a way that simulates a conversation between humans these type of solutions is implemented with the technology of IBM Watson assistant and is capable of providing answers to the queries that user is may have in a specific domain what what's an assistant does is to analyze an unstructured data it processes natural language and in in order to understand grammar and context and we train the solution to be able to understand complex questions and evaluate all possible meanings finding out what the user is asking in each case it applies learning technology techniques to make predictions about the best classes predefined for sentences or phrases this service interprets an intention behind a text and returns our classifications classification which is correct corresponds to certain confidence levels now this value can be used to trigger and a corresponding action this be maybe redirecting an application or answering a question our body is trained in a specific domain in each case according to both the specific knowledge of the AI trainers which would be a Sat cognate Eva and the domain specialist which would be the companies that hire us to do this virtual assistant what's an assistant works with interns and entities so let me define these two what is an intent it represents the purpose of an users input such as for example the request for a movie recommendation or for the best product for their needs and it could be anything and an entity represents a term or an object that it's relevant to your interns these are pieces of information that we can obtain from the user in our case what we do is we define all possible answers to the different questions that may arise with value as values of an entity for example if we consider the entity in general in the case of a movie recommendation we would have values drama sci-fi comedy romance etc so there on the right you can see an image of how a dialogue in what's an assistant looks like you can see it has a tree like a tree like structure it always starts with a welcome note and it ends with anything else note which to which everything that doesn't correspond to the condition of all the other notes goes to so whenever a user enters an input what what's an assistant does is to verify whether this input corresponds to one of the conditions of the notes whether this condition in the note is satisfied or not if it is it will continue with whatever we establish in said note we will give an answer and maybe jump to another specific note or or anything else that we will likely to do so now let me tell you about the design of our graft using neo4j so there you can see a picture of how it looks in general this graph will contain different types of vertices we define these vertices of type question which are the ones that you can see there in blue the second layer for example if we consider the movie recommendation this would be general favorite actor or favorite direct or maybe the release date of the film these are all the things that we can ask the user about then we have below those we have the vertices of type value this these are all the possible answers to the questions of course of 30 C's of type question so there you can see for example in pink we have all the possible directors which are adjacent to the vertex of type question director then we have in red all the possible generals of the movie we have in green the values the different types of dates that a movie can have in our case we just separated into modern and classic and then we have in gray all the vertices of type actor these are adjacent of course to the vertex actor now then we have as it was you can see in yellow on the bottom this would be our recommendation vertices which in our case are all the movies from our database there is also on the top you can see dummy vertex which you name start and this vertex will be adjacent to all the vertices of type question now as I mentioned before each vertex of type question will be adjacent to all the vertices corresponding to the possible answers to set question and finally we have the recommendation vertices on the bottom and the adjacency for this type of vertices will correspond to the characteristics of the the so if in this case for example we consider the movie Sleepless in Seattle which is marked there in red then it will have birth edges coming from Tom Hanks because he's the actor in the movie it would have an edge coming from classic because it's before the year 2000 then it has an edge coming from Romans because that's the general of the movie and we have finally an edge coming from Nora Ephron who is the director of the film of course for this example we are just showing a really really small graph and we just decided to keep it simple and and only have movies adjacent to one actor one director one general but of course this could have many adjacencies in real life now the edges between the vertex start and the vertices of type question are the ones that will have the the edge weights this way it's correspond to the minimum number of potential recommendations that would be ruled out if we were to ask the user for that question so our aim is to ask the question whose corresponding edge has the maximum weight this will guarantee that even in the worst case scenario we will get to our recommendation vertex faster so let me just explain this in more detail what we do is first for each possible answer B to a question Q we call we calculate the number of movies that would be route ruled out if we were to ask question Q to the user and the response to that would be B then we take the minimum amongst those answers B to question Q as the weight of the edge between start our dummy note start and the question type node Q and finally we take the maximum the the question whose edge the maximum weight and this is the one that we will choose as the best question to ask now once we ask the question to the user and we obtain an answer from from the user the graph will be updating it we will delete all the vertices and edges that will no longer be relevant to us and we will recalculate the edge weights so now let me tell you how we combine the two aspects of our solution 1 our virtual assistant in what's on a system and our graph in neo4j so in order to do this we wrote a Python script that will go back and forth between what's an assistant and neo4j the we use the following open source libraries JSON Watson developer cloud and PI to Neal and the code consists on three main parts so the first one is for the creation of the graph in u4j as we described it before and we use some functions to create the vertices and edges then we have some functions that will be required in order to calculate the weights for the edges that I mentioned between starts and the questions we define this metric that we we have seen before and we create a function that determines the best question to ask in each step of the solution and we will also have some functions that will be able to modify the graph by a side for queries in u4j and finally we have the part of the code that makes it possible for us to connect it between dialogue a dialogue in Watson assistant while making queries in new 4j so as I said we created this dialogue in what's an assistant which contains all the intense entities and context variables that we will need for this task once the intern is detected Watson will proceed to ask the necessary questions in order to obtain a recommendation for the user in the shortest time possible after each question the users response will be stored in a context variable and will be used to modify the graph and what's important to notice is that we also consider the case when the user does not have a clear answer for one of the questions for one or more of the questions in that case we will modify the graph accordingly and we will see it in the example so just to see a small diagram of our solution on the one hand we have Watson assistant we have the conversation with the user then we have our code connecting the two parts and on the other side we have our graph database in your for jiaying which contains all the information that we need in order to be able to make a recommendation for a user so whenever we detect an intent we start the conversation the the user writes down something then Watson detects an intent this will tell us at which graph we need to look at and then we will proceed with calculating the best question to ask in this step this information will travel back to what's an assistant the assistant of course will ask the user does that question obtain the answer and use that answer in order to modify the graph and we will continue with the same procedure so now let me show you the example of a movie recommendation of how this solution could work so as I mentioned first we have these start vertex at the top then we have those four vertices of type question the questions that we consider for this example are the director the general the date and the actor of the movie we then have the vertices of type value in pink or the directors in red all the generals for the movies in green we have the release dates separated by the year 2000 between classic and modern and then we have two in gray all the possible actors and finally at the bottom we have our recommendation vertices which are the movies from our data and we are trying to get to one of these movies as a recommendation for a user so let us check what the current status of the graph is in this part of the solution at the beginning we have 14 vertices of type actor 2 vertices of type date 26 try rector's 5 generals we we are starting with 36 movies on our database and we have 4 possible questions to ask the user and of course we have our dummy vertex name start since we have these four possible questions to ask we will have the weights on the edges between our dummy node start and those question vertices so we will calculate them using the metric that I mentioned so we will calculate the number of possible movie recommendations that would be ruled out if we were to ask about the actor of the movie to our user and there we obtain that the edge weight between start and actor is 27 we do the same for the other three questions and obtain that the weight of the edge between start and date is 9 the weight of the edge between start and director is 32 and the weight of the edge between start and January is 23 so since we are looking for the maximum as we mentioned the best question to choose in this first step would be the director we should keep this in mind this is what Watson will ask the user here we can see how the graph looks in the first step and we have all the corresponding edge weights between start and the question type vertices so this is how the conversation may happen first of all the assistant says hello there what can I do for you the user may reply something like can you recommend a good movie for this weekend in that case what an assistant will detect the intention which is movie recommendation this will trigger a response which is sure I'm here to help in that step is when we will have a look at the graph that we had before and we go to the graph and obtain the best question to ask in this case as you can remember we determined that this question is about the director of the movie so this is what the assistant does do you have any favorite director to which the user may reply not really it's possible not to have a preference that's fine in that case what's an assistant will detect the entity director and the value will be I don't know this will trigger our response okay no problem I'll choose for you then and we will save this information that we obtain from the user in the way in a context variable which is director and we will use this context variable in order to modify our graph so now let's have a look at how the graph is looking in this step now in if we look at the current status of the graph we have 14 vertices of type director to up type date five generous the number of movies is still 36 in this case we couldn't ruled out any of those because we didn't obtain any information from the user but the number of questions has reduced to three so now we have these three possible questions we need to calculate the edge weights between start and the three remaining questions so we do this and we obtain a weight of 27 for the edge between start and actor we obtain a weight of nine between start and date and a weight of twenty three between start and gender since we are looking for the maximum one we will choose as the best question in this step to ask about the actor of the film here we can see how the graph looks in this step the vertices of type director have disappeared because this will no longer be relevant information for us we already asked the user about it so we will not ask again and we have three possible question vertices so the dialogue continues we know what we need to ask about the actor so the assistant will ask who's your favorite actor to which the user may response I'm a big fan of Tom Hanks so we get this information we detect the entity actor and this time the value will be Tom Hanks again we store this information into a context parable that we will use in order to modify the graph so let's have a look at how the graph looks like now we will have two vertices of type date five of type tundra notice that in this step we have the number of possible recommendations have reduced significantly we have nine films remaining and the number of questions that remain is two so in this step we need to calculate the edge weights for the two edges between start and these two possible questions we calculate the edge the edge weight between start and date which is free and the edge weight between start and January which is four again we are interested in the maximum so we will take as the best question to ask in this step the gender of the movie so let's look at the graph now it's much smaller in this step we have no longer the vertices of type actor and the question vertex actor has disappeared as well this is no longer relevant to us we had these two questions remaining gender and date of the movie and we establish that the best question to ask is about the genre of the movie so that's how the conversation will proceed the assistant will ask what type of general would you prefer the user may say I feel like watching a romantic movie so in that step we will detect the entity gender with value romance once more we will save this information into a context variable genre which we will use to modify the graph again in this step if we look at the current status of the graph we have two vertices of type date one vertex of type movie so as you can see we are now in the position of making a recommendation for a user and we still have one question remaining so there is a question that we didn't need to ask if we will have done this in the traditional way we would have asked all the questions but in this step in this with this solution we saved one question and of course these are really really small example we wanted to keep it simple so that the solution can be seen easily but this is where we gain the most if we have a huge amount of data we can rule out a lot of possible recommendations so this is our graph now we have one remaining vertex of type recommendation that's the movie that we will recommend and of course it's also possible to want more than one recommendation we could have a list of 3/5 of any type and any number of recommendations that we can give to the user and they can be ordered according to some ranking that we decide so the assistant will recommend this movie which is Sleepless in Seattle and now he can provide all the information that we had in our original database so we know it's a classic it's a romance movie for from the Year 1993 and features Tom Hanks and Meg Ryan and is directed by Nora Ephron so we got to our recommendation in the end now I will mention a brief summary of everything we've seen so our goal our main goal was to use a virtual assistant in order to give a fast recommendation to a customer which is based on their interest or requests we model all the information that we need for to solve this problem in the form of a graph database neo4j on the other hand we create an instance of what's an assistant that will make our conversation possible we combine these two aspects of the solution whenever the assistant detects a certain intent it will start making questions to the user to find out about their preferences in a way in an order which is determined by our graph by ADIZ edge weights that I mentioned before and once it obtains an answer from the user it will store this information in order to modify the graph and continue with the conversation in the same way until we have all the necessary information in order to make our recommendation so as a conclusion to send up this solution whether your thing is a recommendation for a process that simulates a conversation between humans and using a model in here for J that allows us to get to a solution in the shortest time possible now before I finish let me mention some of the benefits and what we think is the potential of this type of solution so usual virtual assistants have the limitation of being trained uniquely for answering a user's questions in general they are they are reactive the dialogue tends to be unidirectional and they're intelligent consists only on interpreting a user's request and giving an answer to it so what we think is that the next step for this type of technologies is to establish an interactive and bi-directional dialogue where here the virtual assistant is the expert in a specific domain and will be able to provide you useful guidance to the user by making the most relevant questions proactively in order to help to make a decision so what we did is we added another layer of intelligence to the virtual assistant through one or more graphs containing all the information that an expert in the field might have now what we think are some possible applications for this type of solutions could be perhaps a sales advice or an expert salesman on a specific product here we could have graphs corresponding to different type of type of products so we could have a graph for refrigerator a recommendation one for microwave ovens one for TVs etc and we of course the recommendation vertices in that case would be all the products that we have available and then the questions could correspond to the size the price or any type of characteristics from these products then we think it could also be applied to preliminary medical diagnosis or assistant for assistance for patients here we have our yellow notes would be all the possible diseases and then we could ask about the different symptoms that the patient has and finally for problem resolution for technical support here we we would like the assistant to ask questions to the user in order to guide him in the best direction to get to the specific malfunction of the device that were interested in helping with now I will also like to mention that this same solution might have graphs on different themes or subjects so the assistant could be able to give guidance to the user in more than one topic at once and it will detect all these different types of interns from it so to sum up this is what we did at committee we enhanced our virtual assistants assistant with the use of graph database neo4j by making them reactive and making them able to ask the question for as the best question is in each step to the user in order to get to know their preferences and do this in the fastest way possible so that we can provide a good advice for the user that's all from my part thank you very much for listening [Applause] 