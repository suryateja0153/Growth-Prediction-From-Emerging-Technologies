 I tried to build a mini Tesla coil from parts I already had. Unfortunately, it didn't work. So, I figured I would create a video about how to try to make it work. I feel that anyone who has tried to build a tesla coil and failed as well as anyone interested in electronics will find this video interesting and very informative. I can't guarantee a happy ending for my tesla coil or anyone else's, but I'll certainly cover many of the things that can go wrong. I'll also cover many similar topics and show some electronic kits and other nostalgia. There seems to be many more people who didn't get their tesla coil to work than ones who did, causing some to feel it's a hoax. I didn't think it was a hoax partly because of the many people who did get it to work but also because I know this configuration of primary and secondary coils essentially creates a step-up transformer. A transformer output voltage is directly proportional to the ratio of the number of turns of the secondary coil to the number of turns of the primary coil. Therefore, if the secondary has more turns, the output voltage will be higher than the input. But, let's still try to find out if this circuit really does work. This is an LTSpice model of the first tesla coil I created using directions in a YouTube video. It doesn't seem to oscillate but there's a reason for that which I'll get to in a minute. This is an alternate version of the tesla coil circuit based on other YouTube videos that use a different resistor. Too small a resistor, and your transistor might burn up, too big and the circuit won't oscillate. This performs better but still no real oscillation and no high voltage. By the way, when modeling this circuit in LTSpice, you should have the phase dots opposite. I'll rotate and mirror it back to show how to do it with the phase dots together. You need to use a negative coupling coefficient in the K statement SPICE directive. By the way, you can add a K statement by selecting "SPICE Directive" from the "Edit" menu. A K statement is also known as a mutual inductance statement. Now for the reason it wasn't oscillating. There is a hidden capacitance between the top of the coil and ground. This parasitic or stray capacitance means that the coil and ground are capacitively coupled. The value of the capacitor is guessed since I don't know what the real value would be. The inductance values of the coils are also guessed, though selected to follow the turns ratio. You can't specify the turns ratio in LTSpice, you specify the inductances instead. The inductance ratio is proportional to the square of the turns ratio. Now it oscillates and produces high voltage. Based on this plot, the period is about 2.05 microseconds which means it has a frequency of about 487.8KHz. The higher the capacitor value, the lower the frequency. The higher the inductances on the coils (while maintaining the same ratio), the lower the frequency. This change in inductance values also changes the peak voltage, but it doesn't seem to be a direct relationship. By changing these values a few times, I got a range of 125KHz to 1.67MHz. If you did the math (and remember you would need to take the square root of the inductance ratio to get the turns ratio), you'll notice the resulting voltage is much higher than the turns ratio would dictate. This is because when the coils are resonating, a much higher voltage spike occurs in the secondary. This slayer exciter circuit makes sure the coils are in resonance. If you removed the transistor and used a function generator to power the primary, you would have to find the resonant frequency, which could be difficult. You might think that this could solve the world's energy problems - using a step-up transformer to generate huge amounts of energy. However this won't work because it doesn't increase current. Some tesla coil circuits on the internet add a diode here or even an LED. The biasing is different than you might expect. It's perhaps counter-intuitive especially in the case of an LED where, in this circuit, you would need to hook the positive LED lead up to the negative lead of the power source. The diode prevents the base voltage from falling more than 0.7v below ground. And if it's an LED supposedly the LED will glow if your circuit is working. The plot is a little different now having a period of about 2.4 microseconds resulting in a frequency of 416.67KHz, and a higher peak voltage. Since we now know the circuit should work, let's consider the transistor. When I first built and tested this circuit, I didn't have a 9 volt battery, so I used a power supply instead. And remember, I first used a 2.2K resistor like the youtube video said. But the transistor repeatedly got very hot. I probably should have used a higher value resistor, because I think I probably blew the transistor. A hot transistor isn't necessary a blown transistor in this case. Some people who built working tesla coils noted that after a bit, the transistor did get hot. Another cause of a hot transistor and of a non-working tesla coil is the primary coil going in the wrong direction. Various videos have said to try reversing the leads of the primary. But, if you don't know what way they should be connected, the possible combinations of resistor values, primary coil orientation, and other things get a little ridiculous. So, here's one way to know: Arbitrarily starting at the bottom, if the windings of your primary coil go around the secondary coil in the same direction (whether it be clockwise or counter-clockwise), then the bottom end of the primary connects to the positive terminal of the battery. If the windings go against each other, then the top end connects to the positive terminal of the battery. The other end of the primary goes to the collector of the transistor. Alternatively, you could just wind your primary in the opposite direction to the secondary and follow the circuit wiring in the SPICE simulation. By the way, I've created and tested 3 different secondary coils. These are the others. I like this one the most, it has about 190 turns. I think the first one had about 156 or 170, I forget. I think the current one has about 300 turns. Ideally, there would be somewhere between 250 and 350 turns with the primary having between 2 and 4 turns. However, a secondary as low as 150 turns should still work, but probably with less primary turns. The problem I often encountered with the secondary was running out of room - I needed longer cylinders. On the first one I ran out of room and wire. At this point, if the coils are correct, maybe the transistor is blown. If you have a multimeter that can test diodes or transistors, using your multimeter would be the easiest way. If it doesn't have that capability, you can still use it by measuring the resistances across the transistor pins. You should have your multimeter or ohmmeter set to a high resistance range, since you need to be sure the multimeter is putting out enough voltage to overcome the depletion region of the transistor. To test an NPN transistor, put the negative lead of the multimeter to the emitter and the other lead to the base, it should read low resistance meaning it conducts. Then put the negative lead to the collector with the other lead still at the base, it should conduct. Do the same tests but reversing the leads, meaning the negative lead is now at the base, and the transistor now should not conduct. Also try resistance between emitter and collector, it should not conduct. Some websites reverse the polarity of the multimeter leads for these tests. This is because for resistance measuring, some multimeters connect the negative probe of the multimeter to the positive end of the battery inside the multimeter. So, if in doubt of what your multimeter does, try both orientations to be sure. You might have to do the PNP test procedure for an NPN transistor. At any rate, this method isn't very fun, so... Let's use a different method to test the transistor. We'll use it to switch a component on and off (in this case an LED). There are a few ways of arranging the components to achieve this. This is the way I would normally do it. By the way, all resistor values are guessed, I didn't perform any analysis to find the perfect values. The transistor in this arrangement connects and disconnects the LED to ground. Except for very brief spikes, the LED only is on when the control voltage at the base is high. I'm pulsing the supply voltage to prove it's actually doing something. This configuration won't work in my electronic trainer kit because the kit permanently attaches the LEDs to ground (probably through a resistor). I could use my own LEDs, but I'll choose to use the ones in the kit. I used this configuration in the robot arm I created in high school. A capacitor is put in parallel with the motor to smooth out the current spikes that can occur if the motor shaft gets stuck or even just when the motor is first started. In my robot arm, I didn't use diodes across the relays but I should have. A diode across an inductor (in this case a relay) is referred to as a flyback, or freewheeling, or kickback diode. It eliminates flyback which is the voltage spikes that can occur when the supply current to an inductor is suddenly reduced or interrupted. This diode will protect the switching transistor. This circuit doesn't include the polarity reversing circuitry I used to change the direction of the motors. This was done with a double-pole, double-throw relay. In LTSpice, you can create subcircuits (much like you can in Logisim). You can draw the circuit symbol including contacts. Here's the relay subcircuit. I used a voltage controlled switch, and to make it somewhat similar to a relay, I put in an inductor. I modeled a motor with just a resistor though I guess an inductor really should be in there as well. As you can see, the motor turns on when it should. Here's an LTSpice simulation of the robot arm circuit with reversing capability using the LTSpiceIV Plus expansion libraries. Their relays look better than mine. This is the second transistor switching configuration. This one connects and disconnects the LED to the supply voltage. This would work in my electronic kit. And it works as expected. This is the third transistor switching configuration. This one shorts out the LED when the control voltage at the base is high. Therefore, this acts as an inverter. As you can see, the LED follows the supply voltage only when the control voltage is low. This configuration will also work in my electronic kit, so let's create this one. Here's the circuit built on this old Heathkit electronics trainer. The clock set to 1Hz supplies the power to the LED. And the switch turns on and off the control voltage to the base of the transistor. The LED should blink when the switch is off, and not be lit at all when the switch is on. This is the first transistor I used. Seems bad. This is another 2222 transistor. It's bad too. This one works. By the way, if you want to use this circuit but with non-inverting switching, you might want to use one of these 7404 hex inverter chips to invert the control voltage. It's now non-inverting. Since there are 6 inverters on this chip, let's invert the source clock voltage too. I don't need to because there's already an inverted clock signal in this kit, but let's do it anyway. And I'll also show the kit's inverted clock. Let's try another method of testing the transistor that might be even more fun. The very last experiment in this old Radio Shack electronics kit is a transistor checker. Here's it testing a 3904 transistor in the kit. There is a tone, that means it's good. Here's it testing the 2222 transistor we already believe to be good. It is. Let's model this transistor checker. I used "jumpers" to connect the transistor to be tested. The inductance values of the output transformer are guessed. Analyzing the circuit shows that when the control knob is at it's highest setting, the two resistances are in parallel. The control knob ranges from both resistances in series to both resistances in parallel. So, I model it at the highest control knob setting. The speaker is modeled using a resistor, but once again, probably should be an inductor (but it doesn't really matter). Counting the spikes shows the resulting sound is about 115 cycles per second, which is a B flat musical note. To check PNP transistors, reverse the polarity of the power source. Since this is an NPN transistor, there is now no oscillation. A PNP transistor would oscillate in this configuration. Therefore, this circuit can be used to determine if a transistor is NPN or PNP. Now, I'll switch the transistor to the one in the electronic kit. This results in a sound frequency of 98Hz, which is a G musical note. Someone with perfect pitch recognition could play a game of identifying the transistor by the sound. By the way, I compared these simulated sound frequencies to the audio recording of the actual tester and they match. If you wanted to model the circuit more accurately, you could add this voltage controlled switch with a pulse voltage to mimic someone turning on a switch after say 2 seconds. You might think the results aren't any different, but that's because I chose to only start recording data after 2 seconds. I'll change it to 0 seconds. Now you can see the results are as expected. Another aspect of SPICE, is that all paths have to be connected to ground in some way. In the actual circuit, the speaker is not grounded. To satisfy SPICE's requirement and model it in a more accurate way, you can attach the speaker to ground through a very high resistor. And this can be easily done with a Common net COM label. Now every point attached to this net label is connected to ground through a very high resistor. Even though I now have found a working transistor, it still doesn't work. So, at this point, I might have to conclude that I live in the one place on Earth where the laws of physics don't apply. But there's one more thing to consider. Maybe the problem is the breadboard. There are a few situations where you wouldn't want to use a breadboard. The first situation is high frequency. This circuit is high frequency, but the generally accepted limit of frequency for a breadboard is about 10MHz and this circuit shouldn't reach that. The second situation is high voltage, but in this circuit, the high voltage is at the top of the secondary coil not on the breadboard. If the high voltage was on the breadboard, you can bet the transistor would be fried. The third situation is oscillating circuits. Well, that one might be the problem. This circuit oscillates because of the inductances and stray capacitances working together. But there may be other stray capacitances affecting it. You see, inside the breadboard is essentially a bunch of metal plates that can act like capacitors. And loose connections that can occur in a breadboard is another thing that can mess things up. However, by searching the internet, I have found a few people who have working tesla coils on breadboards, so I think for now, I'll assume soldering it instead won't solve it. So, let's try something. I'll try measuring the voltage coming out of the secondary. Since in this video I'm featuring nostalgia, I'll use this "vintage" multimeter. It has seen better days, and I think these aren't the original leads. I added these alligator clips for more heavy duty needs. Oh, and it even fits the theme for this video, because there's a coil in that meter. I took off the other leads so you won't think I'm faking the results by hooking up the other leads to a voltage source. You shouldn't hook up this type of meter directly to the secondary since the meter has a relatively low internal resistance which will then reduce the output voltage of this circuit considerably. In fact, written on the meter face, is 9K per volt range for AC. If you have a more modern multimeter, you probably have an internal resistance of about 10Meg which won't affect it as much (though probably will drop the voltage almost a 1000 volts). It is producing an AC voltage much higher than 9 volts. I previously got a reading of over 1000 volts, but the battery is probably getting drained. I don't know what the exact amount was since the meter only goes up to 1000 volts. These results seem to indicate it is oscillating and producing a voltage higher than the input and higher than the turns ratio would dictate. So, even though the bulb still doesn't light up, I think it is working, but maybe just not getting a good enough 9 volt input. Maybe I'll later try a power supply again, though probably a different one or with a higher resistor, but I'm hesitant because I don't want to blow more transistors. Maybe once I'm done working with this transistor I'll give it a try in another video. Now for other uses of coils. I'll show how a transformer is used to create a DC power supply. This configuration of diodes is called a bridge rectifier. It converts the AC signal to DC - flipping the negative part of the sine wave to positive. The capacitor then smoothes out the wave curves resulting in a mostly constant DC voltage. The R1 resistor in this circuit represents the load that would be connected to this power supply. As you can see, once the power supply has fully started up, it provides 5 volts. If you did the math on the turns ratio, you might be wondering why it's not the same. It's not the same because all the extra conversion circuitry and the load reduces the voltage. If you measure what's coming right out of the secondary winding, you'll get just about the same amount as calculated. Here's a program I wrote to calculate the resulting voltage peak at the secondary. The other calculation will be useful later. Here's what the output would look like if you used a smaller value capacitor. And here's what it's like if there's no capacitor. Here's a circuit with two secondary windings, one that will provide 12 volts to the load and another that will provide 5 volts. By the way, Sometimes, the bridge rectifier comes self-contained in a cylindrical package like this, or usually in a square package. You can eliminate two of the diodes if you use a center tap transformer with the center tap connected to ground. By using another capacitor in this arrangement, you can create a voltage doubler. The voltage across the load is a little higher than the expected 10 volts, but this would be because the turns ratio creates more than 5 volts at the secondary. By the way, with all these power supplies, you might want to use a voltage regulator before the load. Remember the transformer transforms using a fixed ratio. So if the input AC voltage varies, so will the output. The power coming to your house can fluctuate. Plus, different loads on the supply can change the provided voltage. A voltage regulator can insure (within reason) a truly constant voltage. Also, these are pretty much the simplest designs. Power supplies in most desktop computers, for example, are much more complicated. Now, for some more nostalgia. Here are more of the Heathkit electronic trainers. My high school was getting rid of the kits because they were switching to more modular kits. So, I got these for free. If the frequency was greater I could have used this generator to power the primary, but the frequency generator doesn't seem to work anyway. This one just gives you a lot of breadboard space. And this one you saw earlier. It has a 3 settings clock, voltage sources, switches, and LEDs. I also got a microprocessor trainer kit, but it didn't work. It used the Motorola 6800 which is an 8-bit predecessor of the 68000. The 68000, by the way, was used in the original Sun workstations, the original Amigas, the original Macs, the Atari STs, the Silicon Graphics Inc graphics terminals, and the Apollo workstations. There are a few simulators for the et3400 trainer kit you can use. One can't be used natively in a 64-bit machine since it is a 16-bit program - you would have to run it in a virtual machine or emulator. And it has problems anyway. Another program just doesn't seem to work at all. I repurposed the keypad for a manual control of my robot arm, in case you wanted to leave the computer out of it. These kits came with excellent instructional manuals which teach the various electronics principles. Some of these chips came out of the Heathkit microprocessor trainer. There's the 6800, the RAM, etc. Some of these didn't come from the kit. Here's a 6581 SID Synthesizer chip that was in a Commodore 64. There's also NANDs, ANDs, NORs, decoders, op amps, inverters, clock generators, 555 timers, audio amps, and even an SP0256-AL2 Voice Synthesizer which I think doesn't work. These are reed switches, that switch on and off by any nearby magnetic field. And speaking of RAM, here's some more nostalgia - It's magnetic core memory. There's a bunch of little magnetic toroids whose magnetic flux can be changed to either clockwise or counter-clockwise to represent a 1 or a 0. Unfortunately, this camera doesn't have a macro lens, so I can't show it better. But, here's a much bigger magnetic toroid that probably is similar. This was made in 1977 and came out of a PDP-11 minicomputer. UNIX and C were originally developed on PDP minicomputers. In the case of C, it was a PDP-11. This board is 16K by 18 bits. There are 18 of these sections, meaning each one of these sections has 16,384 toroids. This same board sells on eBay for up to $490 - I certainly didn't pay anywhere near that for it. Here's my first Radio Shack electronics kit - it's a 150 experiments in 1 kit. You connect components together by putting the wires into the springs. I don't know what happened to that capacitor. Here's the 200-in-1 kit you saw earlier. This was my second kit. It also has digital electronics - NAND gates and J-K Flip Flops. Here's another kit with just power and lots of breadboard space. I'll use it to show more coil related components. This is one of the motors I used for my robot arm. It's hard to turn by hand, which is good for a robot arm. It obviously has a set of gears in there. Here's what's inside some other motor. And here's some electromechanical solenoids. This one doesn't have a spring, so I'll hold it up to show it's working. This one needs the whole 15 volts to overcome that heavy duty spring. I know, I should be using protection diodes and capacitors but this minimal usage should be ok. Here's some transformers in various sizes. This one is a little different - it has 4 primary wires. It came out of the Heathkit microprocessor trainer. There are 4 wires because it has two primary coils. This is so the kit can be used in pretty much any country. You put the two primaries in parallel for US and other countries that use 120VAC. You put the two primaries in series for the many countries that use 240VAC. Two primaries in series does affect the turns ratio, two in parallel doesn't. Two in parallel just behave as if it's thicker wire. And here's a transformer core. This is made up of a bunch of steel plates put together. And here's the leftover transformer winding I used to make my current secondary coil. And, of course, these types of speakers have movable coils in them that move the cone to make sounds. Here's another bit of nostalgia. I didn't actually have any of these "Hobby-Blox", but before I got any of the breadboard type kits, I did want them. You can slide in the various breadboard strips, holders, trays, and panels you need. One last note on circuit theory. If you want to get into how capacitors and inductors behave in circuits, there's one mnemonic to keep in mind. One of the Tesla coil videos on YouTube mentions "ELI ICE". I was taught a slightly better version - "ELI the ICE man". This means, the voltage E leads the current I in an inductor L and the current leads the voltage in a capacitor C. Another one is CIVIL. In that one, the voltage is V. There's many other circuits that use coils - Joule Thief, Boost converter, Buck converter, etc. They're all rather interesting. Give them a try. Well, this is my longest video yet, and the first one to use a camera. So be kind, and feel free to subscribe, like, etc. And if you click subscribe, you might want to ring the bell to receive notifications of future videos. 