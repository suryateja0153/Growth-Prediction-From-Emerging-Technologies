 hello world it's Suraj and today we're gonna build a blockchain in five minutes using Python ready let's get started a block is a data structure that contains data and some attributes blocks can be linked together to form a chain of blocks this is called a block chain the Bitcoin protocol uses a block chain data structure to store transaction data but we can store any kind of data in a block chain to understand how it works let's code our own in the browser together using Google's collab environment we'll also periodically view a blockchain demo in the browser as well while we code for better comprehension this will be a four step process import our dependencies create a block create a block chain then print out the block chain first we'll want to import date/time so that we can generate timestamps for each block we'll also import hash live since it contains an important algorithm we'll use to define our block we can define our block as a Python class then define its attributes each block has seven attributes and we can list each as a distinct variable first the number of the block so we can index each of them next the data will store in this block bitcoins blockchain stores transactions in here but we'll just store text strings in here for simplicity we'll define a pointer to the next block as well as the hash of this block a hash is a function that converts data into a number within a certain range the hash serves as both a unique identifier for a block and verifies its integrity more on that in a second we'll define a nonce or number only used once will later use it to help compute a unique hash for our block then we'll define a previous hash which will store the hash of the previous block in the blockchain when we actually build a blockchain and lastly we'll define a timestamp for a block using the date/time library now that we've defined our attributes we can write the init function for our class it defines how we initialize a block using some provided data as the only parameter we'll also need to define a hash function for a block the hash live library contains the popular sha-256 Algar rhythm which generates a unique 256-bit signature that represents some piece of text the input to our algorithm will be a concatenated string that consists of five of our block attributes see how a hash is created using the unique attributes of a block this means that if someone tries to change the hash of a block in a chain of blocks every block after it is changed since each blocks hash is generated in part using the hash of the previous block and before we finish our block class let's write a small print function that will print out the value of a block now that we've defined our block class we can define our block chain class we'll define two key attributes of our chain of blocks or block chain first the Genesis block and the head the Genesis block is what we call the first block in a block chain and will store the string Genesis inside of it the head will be the newest addition to our block as we add more blocks to our chain this head will be updated speaking of adding blocks let's write our add function this will add a given block to the chain of blocks the block to be added is the only parameter we'll need block chains are just glorified linked lists we can set the hash of a given block as our new blocks previous hash and set the block number of our new block as a given blocks number plus one since it's next in the chain then we'll set the next block equal to itself this is the new head of the block chain we now have one more function to write the mining function this is what lets nodes in a network that don't necessarily know each other come to consensus on what the one true chain of blocks looks like a chain that is immutable it requires computing power to mine a block this is a defense mechanism in bitcoins blockchain an attacker would need the majority of the computing power in the network to modify a block and give themselves money they don't rightfully have in the Bitcoin network 51 percent of the computing power is more computing power than the 500 fastest supercomputers in the world combined and since no one has anything close to that much computing power the network has survived for almost a decade now we'll need to define three additional attributes in our blockchain class the max nonce which is 2 to the 32nd it's the biggest number we can store in a 32-bit number then a mining difficulty we use the mining difficulty value to compute our target hash it's going to be 2 to the 256 - our difficulty in our mining function will determine if a given block which will input as a parameter can be added to the blockchain for a range of numbers from 0 to 2 to the 32nd or max nonce value we'll check to see if the value of the given blocks hash is less than our target value this is exactly what bitcoins mining function does as well if it's less we'll add that block to the blockchain and break out of the loop else we'll increment the nonce and repeat the process until we reach the end of the loop the mining difficulty sets how computationally expensive it is to mine a block the higher the number the longer it will take to mine and the value of the nonce after mining reflects that now that we've defined both classes we can initialize a blockchain then we'll write a loop to mine ten blocks each of them will be initialized by a unique string finally we'll print out each block in the blockchain if we compile this code we'll see each block in our blockchain with its associated attributes including the unique hash the data and the timestamp I hope you found this tutorial useful please subscribe for more programming videos and for now I've got to break the Great Firewall so thanks for watching 