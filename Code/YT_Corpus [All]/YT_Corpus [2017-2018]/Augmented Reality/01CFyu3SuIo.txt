 [Music] hello hi my name is Dave you can find me on Twitter at Dave Tapley so firstly thank you for coming to my talk it's going to be fairly broad and I'm going to be showing you how I've been engineering a solution to a problem in a board game so if you are here because it says board games in the title just to clarify there is actually only one board game but there's still one more board games and at any other talk this year and if you are here because it says augmented reality in the title then yeah I've been working on an augmented reality app for the web using rails so to that point almost nothing I'm going to show you is probably the right way to solve these problems it's definitely not the right tool for the job but I've had a lot of fun with this little project I've got to use some older new technologies in weird and wonderful ways but before we get to all that engineering fun we need to talk about board game fun so introducing pitch car that you can see on the screen and I thought the best would show you pitch car which is speed to show you how it works introducing me RetailMeNot phoenix pitch car demo team Hey so um it's about the simple of games get you're just going to take it in turns to put a piece on the start everyone has one of these little cars it's just a little wooden disk and then you take it in terms to flick the cars around the track and then the first person to complete two laps is the winner the track is made up of these little pieces they kind of jigsaw together it's just straights and corners and then there's actually a smaller track then you can bill but trivia with the full game 630 possible combinations of track so you have plenty of replay opportunities there I'm something to notice of the track is these little red this walls just missed your cue so the walls are really what makes the game fun you can slide around them and bounce off them as you just saw a side effect is that there are places where there are no walls and so yeah there we go right on cue so coming off the track is just part of the game that happens all the time the good news is you're not you're not out of the game you just go back to where you were that's a bit of a problem because firstly remembering is hard and so sometimes you can knock yourself and take other people off the track at the same time and even if you can remember where you have to go back to it's a game that's all about being in the right place at the right time and it's very easy to remember you were maybe half an inch to the left or the other person was for example behind you so um you know we're all human no harm no foul but I'm engineer so I thought we can do better so let's have computer through it so buy it broadly I mean capturing images I want to see on the screen and then we want some way to identify where the cars are and then if someone leaves the track we want to show where they were so they can be put back accurately that's cool Thanks kitsch yeah all right so before we get to like how I engineered the solution I was going to do a bit of a text preview to try to justify some of the decisions I made so I figured there's broadly three things that I had to do one is actually capture the images from the webcam so never really played with this before turns out there's this web real time communications API here's what Mozilla has to say about it if you scroll down a bit on this page no surprise involves JavaScript and I'm kind of like most people I cautiously say you know JavaScript the language of the web I guess it's okay but I haven't got to play with any new frameworks in a while so I thought you know what everyone's talking about it so I thought I'd give you jf to try to increase of UJS I won't say too much other than I'm kind of back into JavaScript now which is I never thought I'd say so once you've got the damages we're going to need some way to process them do some computer vision that sounds terrifying in Ruby so I'm just cheated basically and I'm using this old like 18 year old super stable open seat open computer vision library but there's a ruby wrapper so we don't have to actually look any C code and then I wanted it to be real time like I don't want to have to submit the form every time someone took a shot because that would be tedious and so I home got to play with action cable too much so this project was a good entry to that so I'm in just in summary this is my this is how broad the talk is going to be slide we're going to see this web RPG protocol I'm going to be saying how much I like PJs probably more than I should OpenCV on the back end that's going to be a bunch of math but you'll be okay and then actually cable for sending it all back and forth so the plan and there's going to be the bulk of the talk is getting these images actually cabling them over to the server processing them and OpenCV to figure out where the cars are so when they come off the track we can show you how to put them back and then if we get through this I might just see a demo that may or may not work slow part-1 I needed to get the image this seemed like the logical place to start because this is what developers do I've never really seen view components or anything so I found this new webcam component she goes to the github page they have to settle snippet and this is how off like their hello world for view webcam the top element that view webcam once that's what view is going to take over and it's going to put that video tag in the implements web RTC and then below that you've got this button element the only interesting thing about that is that apt click and that's view jf is way of saying give me an on click Handler so we're going to see that function in a minute and then the image tag you can see there's a column before the source attribute this is you get another view jf ISM and this is saying set the source for this image tag to be whatever is in the view jet components photo on its view model and we'll see how that works later and then as the corresponding JavaScript snippet which implements that take photo button happens when you click the button and so it looks fairly simple but immediately started thinking well what what is what is this dot photo like how do you even represent a file or image data in JavaScript so spoiler it's a string this dot photo is a massive string specifically it's a data URI I'd never met these before Mozilla says a URL prefix of the data scheme allowing content creators to embed smaller files small files inline in documents so small files vague 20:17 ice under a gig it's probably small I think such a reasonable so I wanted to play around with these daily your eyes so here's a file for small file let's see if we can get a data URI version of it turns out there's this little handy website you put in a URL you hit generate data URI and you get out at the bottom that little input it's a bit misleading because if you copy out the text in that thing at the bottom input actually is this so um big strings I wasn't kidding what's amazing to me and I've never seen this is if you stick that monster string in the soft attribute of an image tag and load it in a browser you just see the image like it that just worked so I learned that source attributes don't always have our files you can just be like here's the data so I'm going to call a success one step down albeit as a day DRI we do have the image so the next challenge was to action cable it over to our server so no surprise is to get a view Jeff component working with action cable we go in google PJs action cable it turns out Richard lafrankie has been doing the same with me albeit with pong but you know it's still a video game for that same ballpark I had a look at Richards code it turns out there's broadly three things you have to do kind of make the action cable javascript the JavaScript ships with rails kind of be available in huge air then you want to subscribe to an action cable channel and then once you've got your channel you can start sending messages over it let's look at those three nothing too complicated just import action cable at this create consumer call that's as part of the rails action cable API and then what Richard did is just stuck it on the view prototype so it's globally available I'm okay with huh oh and this just goes in view gives you like a set up code which I run when the page loads and then the next step was to actually create the subscription so you've got something over which to send of the messages you Jeff gives you this created callback and it calls this right before it's going to put a new view component into the Dom or app around then so Richard just uses that opportunity to create his subscription to the actual cable server so it's quite nice you know element goes in the page and it sets up its own channel to talk to the cable server and then the final third piece of the puzzle is just using that video channel and so the video channel sits on the view Jay comply and so inside the component I can just say this me video channel send stuff over and if you haven't seen action cable you just pops up in Ruby land we just have a class with a corresponding name to the channel and you just get this receive method invoked of the data so the quick side and you'll see this pattern over and over again it's really cool it's about as far from the rails kind of classic request response cycle as I've gone still using rails and you essentially have these completely encapsulated dole elements that are maintaining their own you can have communication with the server just like an isolation so just to close the loop here's I'll take photo function and so I guess we can just now we've got a vo channel we can just send that giant string data URI back over it seems too good to be true right it did work it does work but perhaps tellingly it turns out that in development mode action cable will log the entire message payload to the development log for every message so it's not pretty but I am calling that a success it turns out that you do actually get your data URI so we've got our data URI in in Ruby land now on on our server so next up we're going to see if we can get it loaded into this OpenCV library so if you have a look at the opencv docks you find this class this is the closest thing to an image class and OpenCV IPL because I think intel image processing library if you scan down it does have a can read that it's a load function on IP L image but it takes a file name so now we've got the problem of how do we fit our string shapes data URI into our file shaped load method so got to thinking it's pretty obvious in this data at your eyes that everything after the comma is is the data again so I thought maybe I can just read X on the comma and that's the data and put the data in a file that seemed a bit ugly so you know like for google it turns out that Dee balls written this data URI Jan so that's awesome I thought wow okay how how should I be handling these are these daily your eyes more reg X is the answer just regular expressions all the way down but liters in a jam Hey so that's good more gems so I mean it is basically the splitting on a comma gem for my purposes but why not and then I've got this data portion and it's still in a string what I couldn't believe what is that you can just open a file in binary mode right the string to it and then just give that the IPL image load and it works there just actually what this seems like something to me that a do like an undergrad you it would do and then we'd be like no you can't just write binary strings to files in Ruby because encoding and things but no I guess it really works first time local we've got our image loaded I need to do a quick segue now to talk about matrixes so if I don't ask you've probably I think probably most people had a matrix but if you haven't are it's a table I think it's impressive that Google manages to pull a definition that contains the word rectangular and rows and columns and doesn't at any point say it's just a table for sure so what images are just matrixes and where each you know each cell in the table is just the color of the pixel at that point OpenCV makes this clear in a nice satisfying object-oriented way by just having their image class inherit like subclass from their matrix class so as far as OpenCV is concerned an image is just the table of pixels they are one on the same if you need more convincing that an image is just a table and why not this spectacular website when he can upload an image and download it as a spreadsheet where they've set the background colors of the cells to that it's fabulous I'm glad it exists so cool now we've got our image making good progress we've got it in OpenCV and i feel like we have some intuition that an image is just a table of pixels maybe we can start making headway into finding the cards so if we look at this image again what we probably want to know is which of the car pixels and the car like pixels are probably the blue pixels in this case seems like a reasonable assumption so we need some way to say to OpenCV can you just tell me which pixels are blue so we're all web programmers so let's just pick a web color definition of blue maybe this blue and then OpenCV gives us this EQ method on an image on a matrix which is an image I'll pick one or the other eventually so we can just define blue and all this TV scalar thing is it's another fancy word for just a value that has multiple values so we're just saying blue it's and that's really just the web hex code going in and then we can use this EQ function and what we get back is what I'm calling mask and it's another matrix but this time instead of the matrix cell containing colors it's just truth and falses so for every pixel is that pixel blue reasonably sensible it would be nice to visualize masks so um in in what leaky abstractions abound now the matrix class suddenly has a save image so some oo badness for you so that's good of course like the load method it needs a filename so we're already in love with data uris let's just try and do it the other way this didn't work close spectacularly easily as the first time but basically the same principle you just write to a temporary file in binary mode read it back as a string and then you do have to base64 encode the string you get back for reasons I understand output the good news is then you just put it back after the comma and now you have a data URI again so that's cool as a side note this seems like it would be terribly unperformed but I think in reality the file system is doesn't even bother to write these files to the disk so it really didn't affect the performance too much at all in fact so when we've got our math URI we know that we can just stick it in a source attribute and what you get is this appointment quite frankly I don't think there's any chance you can see it on the screen but somewhere in that sea of false blackness there are a few glimmers of true pixels which show off as completely white I promise somewhere but that's the start and you might be ahead of me here you probably figured like the probability of a pixel being exactly the color of blue in the huge RGB color space is basically zero and what we probably want is something more like bluish like a range of colors good news OpenCV has our back so this is kind of a very much identical to the EQ function except now we're going to give it two colors and we're going to say anything any cut pixel that's within this min max range of colors it can be true in the resultant matrix so what we probably want is some way to be able to visualize these masks coming back from the range function and tune our min and Max colors because what we want is to find the colored car blue pixels but we don't want to get true for just random bits of dust that happen to be blue and floating through the image and so the first thing was rather than copy and pasting my mask URI like a chump we're going to use action cable and this time we're going to send our data back from the cable server to our browser and all I'm doing is using that open CV in range function building another data URI like we saw and then I'm just going to broadcast it back over action cable let's call it color channel why not and then on the JavaScript side of it this first snippet this is what we saw back at the beginning where you create the subscription in a few Jettas component created callback what we're doing now if you haven't seen action cable JavaScript before when you create a subscription you can also provide this received function and action cables going to call that whenever it gets the message in so what we do when we get our message of data is we're going to take which is going to units got the mask URI in it and then we're going to assign that to this mask URI and this in this context is the view components self and this is where in the temple at the HTML below that colon for bind to the data model thing I showed earlier becomes incredibly powerful because now whenever you receive a actually capable message we're going to take out the data URI we're going to update the view model and then the image just magically update because JavaScript works nowadays so that was I was really impressive again I was kind of blown away how simple it was so now we've we'd have to copy and paste our mask data URI every time that's what's promising we still don't really have any way to update the range of colors the min and Max that were passing in so let's have a look at that getting used to it now more vjf the only thing really new on this snippet of HTML is that V - model and that's UGS is way of saying hey whatever's inside this input just put it in the view model in a range object and then I that range object has a red object and that has a mean and a max value on the same for the other colors and then there's an apt change attribute on the input and that's kind of just like we saw with the button so it's basically this is an on click on change Handler and you can see in the snippet below in the component it has this methods where you define all these methods and I just say hey whenever the HSV is triggered send a message over action cable and so this pattern is getting established now of things happening sending messages and in this case we're just going to send that whole range so that's going to be full red green and blue what are the min and Max is and that message we can pick up back in Ruby promise this is the last bit of the exchange and we're going to extract out the range and then we're going to make our CV scalars and we can put it in the mask and then make our new mask based on any value what you end up with is a nice little component like this and I was really pleased with just how how I thought this is quite elegant so basically every time you change an input it's lying a message of action cable with a new range it's building the new mask on the cable server turning into a data URI about data euros going back down over action cable and just becoming the source for the image tag so this is nice we now have our mask eventually and you can tune pretty accurately I found you can get pretty ballpark good colors so you just see the pixels where the car is and nothing else of course we don't really still know where the car is we just have this mask and what we really want to be able to say is you know what's the XY lie like exactly where in the image is of the car I don't just need a mask of it this which was seems like it was going to be the biggest part of the talk is one slide and it kind of justified all of OpenCV and you can see it this is a ridiculous thing I'd ever heard of it it's called the how transform or our how transform and it's just this amazing bit of math where you just give it a matrix of trues and falses or Gretel you know ranges and it tells you where the circles are and it's cool Oh like hey I guess there's a bunch of parameters to it I in a 5 like 5 or 10 parameters the internet told me here's some that probably work and they did yeah I can't believe how simple it is so you just give it the mask with all your truthy car pixels in a fear of false not car pixels and as long as the car is the circle which it should be and then you get back this circle object and it has the X Y position of the center of the circle in the image and if we assume that if we can't see it it's missing I mean why not that's just broadcast over action cable that's what we do now so yeh making progress again as surprisingly reliable it took a lot of tweaking but the general premise is pretty robust are we going 15 okay so the last piece is trying to figure out who actually fell off so here's a nice picture this is a simplified state of the game it's pretty obvious the blue cars on the track the pink car got knocked off that's uh not great what you can't see is the orange car which is over the other side of the room under someone's chair because people get very excited playing pitch car and that's fine so looking at this kind of thing I then thought okay maybe there's actually like three states we can be on the track in the image but we might be in the image in off the track or we might have just been flicked out of the cameras view altogether and then I realized that actually this is you could be slightly lazier and in reality you're just on the track or you're anywhere else in the universe and you're not on the track and this sounds kind of common sense but I went down a rabbit hole and when I realized this it allowed me to do something which i think is quite nice optimization and it starts with another mask and so this is going to be like the mask we saw before it's just a matrix of truths and falses with the same dimensions as the image but this time instead of asking OpenCV hey where's the truth and falses we're just going to define where the truths are in the image and we're going to do it in such a way that all the pixels that are tracked pixels are true and everything else is false and when we've done that we can do matrix math and just to delete out everything that isn't on the track and so this was nice because now the orange and the pink car are just gone they're just not even in the image anymore so now all I need to care about is hey if the cars in the image is by definition on the track so that was I felt good about that it did mean that I actually now have to try and build this mask which not too bad quite a bit of geometry that there with me here so one of the nice things is every track has one of the starts it's the this guy the checkerboard and we know we know the dimensions of the track of the start piece it's always the same so knowing that we really just need to know that it's here in the image and that really comprises three things it's kind of the position X Y rotation which is probably going to be either that all that and then the scale MyCal close and far away it is and the scale I can just define as how many pixels long is that going to be and so I made a tool with UJS and action cable and so this is almost copy-paste of the masks tuning tool I made so again we've just got these little inputs there's unchanged they run they change then the callback in the vgs component just sends a message over action cable action cables going to make the mask you see in the middle apply it to our frame so our latest image and then just send that back down and one thing I realized when I was doing this is it's like puts it's like debugging with cuts but in 2017 because all you do is you just action cable publish and I feel like it's a real it's a really interesting pattern and I wonder if those scopes are some kind of like interactive debugger but anyway so I've just my code is littered with just publishing images of data your eyes so if you thought that log from earlier was bad you should see it when I'm developing it so that's good we position to start peace one step down at this point I'm going to introduce this highly sophisticated code for describing tracks it does match the one on screen yep good so we've got the staffing which is always a straight and then we've got a right turn and another right turn and a left turn maybe I could have done some clever machine learning but it's really not that hard to just type in the specific code for the track so we know the next things going to be the next piece after the straight of the right turn so where does that go well we know that after a straight it's always going to be one straights width across and then the rotation while kind of by definition that the straight doesn't turn so it's just the same direction and the scale is just always the same like nothing ever gets closer or further away so that's good now we just have to draw the corner onto this corner of truth on to the mask I skipped the straight and just said draw a rectangle because I'll show you there's a method in OpenCV there isn't a method in OpenCV for draw the corner piece of a pitch car tile unfortunately they've an oversight in my opinion so I did it I did just did more drawing so I do a big circle and then you draw a small circle inside of false and then you just take out a corner voila just like that so that all these primitives are in OpenCV you can do draw a circle true draw a circle or false and then just crop the image down and because I know where the corner goes from the previous slide I can just draw on the corner so making progress that's reassuring the next next piece well we know it's going to be now one trucks width across the right and because we turned the next straight what you don't want to do is this and then that so we have to know that the next relative piece is rotated around to the right and I actually implemented this quite nicely it what it was reassuring 400 I just have a straight class and a left and a right class and then when you draw a piece for the next piece I just asked the previous piece where the next piece goes and it's kind of defined recursively which is made it a lot easier and you just keep doing that so pull off the next letter in the track description and ask the previous piece where to put it and where it's rotated and then if your maths right which if mine wasn't so very long you'll end up back at the start and so now we've got this mask of truth and we can delete that everything else and then this image on the end we can just take that and do our where's the car detection and so either the car is going to be on the track because it's in the image or it won't be on the track and I'm going to skip over this bit because it's a bit boring quite frankly them our code but um this is just the logic then is you know if we see the car remember it's there and then if it's still there just show it's there but if a car ever goes off the track like we can't find it anymore then just leave leave a marker where it was and then the person can put it back that's basically it we've done it all should we see if it worked okay now bear with me a second all along this was just of this if I scroll down I should probably do that so here's what it looks like when it's running so the first thing we're going to do is because the track got bumped a bit because of these guys getting excited so this is why we're dialing in the position to make sure it lines up on the scale next I have to be closer this null image thing I didn't talk about it in the talk but if you want to know the secrets you can come and find me it's basically a way of deleting out the glare by capturing what's going on at the start all right let me do a reset do you want to try it guys I'll come back to the pitch car team so I'll show you the Mac first you want to put one on Hey so that's what it looks like I don't click read it and then yeah so blue pink almost I'll go reset so it's having difficulty on account of people hands being the wrong color there you go want to give it a flick we so this is it running goo there it is so um it's just going to sit here and try and find them and show where they are and then if someone that would be so good as to flick like off the track what you'll be able to do now hey so you see that orange now has a little question mark so this is the logic of it just saying where did the orange go I don't see any image more and if Matt puts it back and not where it was for example there oh you managed to get it right on we've trained in my up into obsolescence brilliant there you go it's lost it again so yeah the crosshair won't reactivate unless it's convinced that Matt's trying to not tryna cheek so hopefully when you get to somewhere nearby [Music] hey there we go and so now when the orange car moves again huh we go pitch cam thank you okay so the question was how long how long did it take me to solve the problems and then do I knowing what I've learned do you think it will help reimplemented similar thing I think probably the biggest takeaway was definitely the power of this huge is with action cable talking to elements in the Dom and what I skipped over is I was using webpack to kind of reveal the jf on the fly and I guess this is all coming in some new version of rails it's just going to be for free I was just using docker to run them in isolation but I think in a year I wouldn't be surprised if everyone's just using a lot more JavaScript and everything's a lot more asynchronous and to your second point much faster now like it really is just once you've got gone through the pain of setting up web pack and getting it built the development turnaround as you jest as it's hot reloading so and annoying we have to restart action cable but it boots a few seconds so really it is like oh I need a component that's really reactive I just copy another component make a new action cable channel and I'm going yeah so the question was have I thought about building the track mask automatically by just inferring the darkness absolutely yes there's endless machine learning possibilities here one thing I was trying to do so I didn't really make much Pro got an open issue on there's a gem for its really punny name it's for genetic algorithm in Ruby what we called our winning but as a few bugs in the gem but what I wanted one thing that's quite annoying for example is orienting the mask so I think of the first thing I'll still pipe in the 10 character code but then it'd probably be easy to quite quickly use a genetic algorithm for machine learn the orientation and latter over and then when and another thing that happens all the time is someone will lean in and they might not go the track and if it goes off a little bit you'd be surprised over a 10 minute game how much the track can drift from where the camera thinks it is yes much to do yes so the question was why so it is yeah because it's cool although also yeah when you're playing the game it is it's surprising how often disagreements will occur just exactly where someone was no I wish yet I did have a slide just to clarify that but now I have no Kinect I should have made a affiliate link for the game though you can get it on Amazon so the question was would I use UJS for a consumer web application absolutely yes yeah like I lead it to I've been quite stagnant on JavaScript frameworks and I kind of jumped from angular 1 point something old to few and I played with react a little bit but it really blew me away how far far along Jas frameworks had come so yeah I'm 100% in on view so the question was is huge is better than react at this point I'm just going to come over to here and do this so I'm a vim user vim is the best thing ever Emacs sucks I don't know yeah maybe no I played with reacts of it it was okay I felt like everything I did in react was okay and I used it for a few little MVP projects and then I went to view Jaya for this project and I was like Oh everything's way simpler like everything when the react that was a bit like okay I get it eventually in vgs is like DLF obvious so I think as a much easier learning curve as a Vinnie user I think about that alright thank you very much [Applause] 