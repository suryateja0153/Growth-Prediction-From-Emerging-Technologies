 let's say you're building a machine learning system and you're trying to decide whether or not to use an end-to-end approach let's take a look at some of the pros and cons of entering deep learning so that you can come away with some guidelines or whether or not and enter an approach it seems promising for your application here are some of the benefits of applying end-to-end learning first is that intend learning really just lets the data speak so if you have enough X comma Y data then whatever is the most appropriate function mapping from X to Y if you train a big enough neural network hopefully then your network will figure it out and by having a pure machine learning approach your neural network learning an input from X or Y may be more able to capture what other statistics are in the data rather than being forced to reflect human preconceptions so for example in the case of speech recognition earlier speech systems had this notion of a phoneme which was a basic unit of sound like our inter for the word camp and I think that phonemes are an artifact created by human linguist I actually think they're phonemes are a fantasy of language that are a reasonable description of language but it's not obvious that you want to force your learning algorithm to think in phonemes and if you let your learning algorithm learn whatever representation they want to learn rather than forcing your learning algorithm to use phonemes as a representation then there's overall performance might end up being better the second benefit that entering deep learning is that there's less hand designing of components needed and so this could also simplify your design workflow that you just don't need to spend a long time hand designing features and designing these intermediate representations how about the disadvantages here some the cons first it may need a large amount of data so to learn this x2y mapping directly you might need a lot of data of X comma Y and we've seen in a previous video some examples of where you could obtain a lot of data for sub toss um for face recognition we could find the raw data for finding a face in the image as well as identifying the face once you found the face but there was just less data available for the entire end-to-end task so you know x2 Suspiria input end of the end and learning and Y is the output and and so you need a lot of data X Y with both the input and any output and in order to train some of these systems and this is why the content and learning part as well because you're learning a direct mapping from one end of the system you know all the way to the other end of the system the other disadvantage is that it excludes potentially useful and design components so machine learning researchers tend to speak disparagingly of hand designing things but if you don't have a lot of data then your learning algorithm doesn't have damage insight you can gain from your data if your training set too small and so hand designing component can really be a way for you to inject nan your knowledge into the algorithm and that's not always a bad thing I think of a learning algorithm as having two main sources of knowledge one is the data and the other is whatever your hand design being components or features or other things and so when you have a ton of data it's less important to hand design things but when you don't have much data then having a carefully hand design system can actually allow humans to inject a lot of knowledge about the problem into a into an algorithm and that can I should be very helpful so one of the downsides of entering deep learning is that it excludes potentially useful hand design components and handles on components could be very helpful of well-designed they could also be harmful in a really limited performance such as if you force an algorithm to think in volumes when maybe it could have discovered a better representation by yourself so it's kind of a double-edged sword that could hurt or help but it does since home or hand design components tend to home or when you're training on a small training set so if you're building a new machine learning system and shuns inside whether or not to use end to end deep learning I think the key question is do you have sufficient data to learn a function of the complexity needed to map from x to y I don't have a formal definition of this trace complexity meaning but intuitively if you try to learn a function from X to Y that is looking at an image like this and recognizing the position of the bones in this image then maybe this seems like a relatively simple problem to identify the bones in the image and maybe don't need that much data collect asked or given a picture of a person may be finding the face of that person in the image doesn't seem like that harder problem so maybe they don't need too much data to find the face of a person or at least maybe you can find an updated to solve that task whereas in contrast the function needed to look at the hand and map that directly to the Asia reach out that seems like a much more complex problem that intuitively maybe you mean more data to learn if you were to apply a pure end-to-end deep learning approach so let me finish this video with a more complex example you only know that I've been spending time hopping out an autonomous driving company drive down AI so I'm actually very excited about autonomous driving so how do you build a car that drives itself well here's one thing you could do and this is not an end-to-end deep learning approach you can take as input an image of what's in front of your car maybe radar lidar other sensor readings as well but you know to simplify the description let's just say you take a picture of what's in front of what's around your car and then to drive your car safety you need to detect other cause and you also need to detect pedestrians you need to detect other things of course our pet will just present a simplified example here having figured out where are the other cars and pedestrians you then need to plan your own route so in other words if you see where the other calls where the pedestrians you need to decide how to steer your own car what path to steer your own car for the next several seconds and then having decided that you're going to drive a certain path maybe if this is a top-down view of the road you know that's your car maybe you've decided to drive that path that's what the powerful motor mount is then you need to execute this by generating the appropriate steering as well as deceleration and braking commands so in going from your image or your sensor importance to detecting cars and pedestrians that can be done pretty well using deep learning but then having figured out where the other cars and pedestrians are going to you know select this route exactly how you want to move your car usually that's not done with deep learning instead des done with a piece of software called motion planning and if you ever take a course in robotics you learn about motion planning and then having decided what the prop you want to see your car through there'll be some other algorithm I'm going to say as a control algorithm that then generates the exact decision that then decides exactly how much to turn the steering wheel and how much to step on the accelerator or seven a break so I think what this example illustrates is that you want to use machine learning or use deep learning to learn some individual components and supervised learning you should carefully choose what types of XY mappings you want to learn depending on what tasks you can get data for and in contrast is exciting to talk about a pure end-to-end deep learning approach when you input an image and directly output a steering but given data availability and the types of things we can learn with neural networks today this is actually not the most promising approach or this is not an approach that I think teams have gotten to work best and I think this is actually this pure end-to-end deep learning approach is actually less promising then um more sophisticated approaches like this given the availability of data and our ability to train your networks today so that's it for end to end deep learning it can sometimes work really well but you also have to be mindful of where you apply and end deep learning finally thank you and Congrats on making it this far with me if you finished last week's videos in this week's videos then I think you already be much smarter and much more strategic and much more able to make good proposition decisions in terms of how to move forward on your machine learning project even compared to a lot of machine learning engineers and researchers I see here in Silicon Valley so congrats on all you've learned so far and I hope you now also take a look at this week's homework problems which should give you another opportunity to practice these ideas and make sure that you're mastering them 