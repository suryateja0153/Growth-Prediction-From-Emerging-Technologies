 [Music] hello everybody it's the top of the hour so I'm going to assume everyone's logged in and we're ready to go here I'm Ronald McCallum I'm a solution architect at resin do and I'm going to talk to you today about DevOps for the IOT devices so I OT at internet speed so it's a little odd to be doing this sort of conversation or this presentation in my own living room just to my webcam so I'm used to having a bigger audience of people that I can see so I'm hoping everybody's out there and I'm looking forward to getting some great questions as I'm going through this if you have questions please hi Lucy I've got one couple of people coming in if you have questions please do put them into the chat box I won't be able to see them as I'm presenting but I will definitely make sure I leave some time at the end to go back and check on those and answer any questions that you have so a little bit about me I am like I said I'm a solution architect at resin do which is I really kind of think of it as a plumbing company for the internet of things so we we help people get IOT devices managed and updated remotely myself I am a computer scientist by trey and i'm a linux geek from way way back from when linux was still in the 1x days of the colonel and so I kind of come up Edna satay from a software perspective I really didn't learn a whole lot about hardware until the past few years when we really started to see a switch from microcontroller based devices to microprocessor devices so we sort of went from those sort of 8-bit microcontrollers into things like the raspberry pi or the ship or the onion Omega or evil phone all of the explosion of Linux devices that are no programmable and useful by people like me who don't always know which end of a soldering iron to pick up it's been a really really exciting time and I've learned a lot and experienced quite a bit of where the industry is going both from a software perspective and from a hardware and embedded perspective and it's really that that I want to talk about so I think this is probably a good time as any for me too my screen that's the wrong button let's try this one there we go so what I really want to talk about okay is is exactly that is applying the lessons that we've learned in the tools that we've developed in the software industry especially the web and software as a service industry in the past 20 25 years and bringing that to the in competitive world and that's really what we mean by i Ont development at internet speed and so I really want to set the scene will get into the tech I tore down the middle ER or into my talk but I want to really set out the problem and make sure everybody's on the same age as to where we are in the industry today here we go on and this is really what every IOT project looks like and I think even if you've never built an IOT project even if you're just a consumer of Internet of Things technologies you'll really be familiar with this pattern it's kind of a very simple process to build out an IOT project and it really starts with devices so I either build something or I go out and I buy something off of the shelf I figure out what that hardware is going to be and I put some software on that hardware and so now I really got my device I've got a physical object that I can start using and doing something in the world and so I push those devices out into the world whether that's you know in one location maybe I've got a smart building where I've got a bunch of devices that I'm using to control that building or maybe I'm pushing these things out by the thousands or tens of thousands so into the world as sensors or even into people's homes as a set-top boxes or smart thermostats but I've got all of these devices and I've got code and running on so now those things are out in the world and then the next step is that I want to connect those two the internet and this makes sense right you don't have an Internet of Things without some sort of Internet connectivity so I find a way to connect those devices up to probably a cloud platform if not something that I'm hosting myself and I'm going to gather data from those devices so if I've got sensors out of the world I'm pulling back sensor data if I've got things like set boxes or smart thermostats I'm still gathering data from those I'm learning a lot about what people are doing with those devices and what those devices are doing out in the field then i'm using that to analyze and improve my devices and really if you think about it at this point you're basically done right you've got devices out in the field doing something you've got analytics crunching away on those you've got connectivity you don't really think you need anything else although anybody who has ever used an IOT or bought an IOT project will tell you there's at least one more step and that is everything just blows up and goes horribly horribly wrong we know even last week there was an example of a botnet of IOT devices of things like internet-enabled security cameras attacking major major platforms that the internet runs on taking down DNS and as a result taking down a number of sites so this is a massive problem this happens over and over there's something always goes wrong as soon as you put a device out in the field now if you're really really lucky there's another step after this blowing up which is that you get to fix these devices and this is really expensive and time-consuming and difficult because you now have to send people out into the field to touch those devices and actually get physically in contact with them and update them or maybe you push an update out and you publish that out on your website and you say hey everybody can go download this thing and put it on your device and get them all up to date but that's it's a really error-prone and difficult process to do this nobody really wants to be in charge of managing a bunch of devices that they don't really know what's going on on the inside and similarly manufacturers don't want to be in charge of man of managing a bunch of people to go out into the field and update these things and incidentally I say you're lucky if you get to that step because sometimes you just don't if anybody remembers the revolve it was a smart home hub platform the idea was this was going to be the sort of thing you can put in your home and you can use this to connect to and control a lot of other devices a lot of other IOT devices in a smart home sort of environment anybody knows what happened to this thing it's that you know google bought them with nest and they kept it going for a little while and then decided it was too much work to keep it updated so they pushed out one final update and just turned it into a big expensive brick so this is you know the sort of worst case scenario of where this IOT disaster platform ends up is that you have bought some piece of hardware wanting to use that wanting to integrate it into your life and instead it gets disabled because it's just too much of a hassle to keep updated and keep fixed so if we go back to this idea of having connectivity and having devices out in the field we really need something else to complete the picture there needs to be some way to easily manage and update these devices keep them running and keep them operational so that as new security vulnerabilities are found or even as bugs that in the product need to be fixed we can push out updates to those devices and keep them going honestly I don't feel like I can overstate this enough I think this is absolutely critical to IOT gaining mainstream adoption and being something that does become the next game changer in technology without the ability to fix errors in the wild without the ability to patch security holds this is just going to continue to be a disaster we have to address this issue but you might think well I've really already got this connectivity I've got some some internet service that is talking to these devices I can just do this myself it's very easy to use existing tools that we might use in a data center or maybe even just through devices that you've kind of home-brewed to do this of just SCP or our sinks some some software down to the device and I'll run a shell script to do an update and frankly yeah that works that is an approach that you can take and that is basically the approach that people took from the microcontroller world will do an over-the-air update will push everything out and we'll just run a script that blows everything on the device away and puts the new code on there the problem with this becomes that if you do a bad push to one of these devices there's no real way to get back to it remember these are not in your physical control if you push something onto a device and you can't and you take down the connectivity of that device your update crashes you're now stuck you don't have a way to get those devices and you're back to having a team of people go out in the field physically touch the things and nurse them back to health it's an expensive and error-prone process that nobody wants to deal with and this becomes even more true when you start to think about mission-critical devices it's it's sort of one thing when you have a home hub that's going to control maybe your heating system or your your radio or your lights from your phone but when you start talking about IOT devices being pushed into more mission critical areas and they are they are going everywhere if you do a bad push and you can't fix that device you're in a real disaster now I personally don't want to be on a plane that somebody pushes an update to and can't roll that thing back if it goes wrong hopefully they won't actually be doing that two planes in flight anytime soon or at least not while I'm on the plane but the idea still holds for things like medical devices even smart buildings if you push an update that crashes your elevator controllers and I'm on the hundredth floor I've got a long walk ahead of me to get to the street and out of that building I don't want that to happen and incidentally we at resin know this space really well because we lived this problem we actually took that approach of using SSH SCP rsync pushing just blasting things out on the devices there was a project in the 2012 olympics in london to do digital signage that the team from that eventually became resin was part of and we thought it would be just that easy just push an update out run a script and overwrite it which is how we had people with computer science degrees computer science phd's walking around in london in the winter with USB keyboards USB thumb drives finding all of these devices and fixing them manually so we knew there had to be a better way to do this and this is a quote from O'Reilly that I absolutely love I think this really sums up where the what the status of the IOT world is today and where it needs to go and that's the web brought about the end of the annual software release cycle the industrial internet will bring about a similar change in the physical world and if you think about this this really rings true what was software like before the days of the web you went to a store you bought a shrink-wrap box off of a shelf you took it home pop the stack of floppy disks or maybe a CD into your computer you installed the thing and you're pretty much done that was really the last interaction that you had with the manufacturer or maybe they'll put out a release in six months or a year to fix some bugs but that was really it was a really slow cycle but very very limited back and forth between the deployed software and the software manufacturer of the software creator sounds familiar right that's where we are with the IOT world today we're doing occasional updates that are very slow and painful with very little communication between the people that have the devices and the people that are making the devices and making the code for those devices but we don't have that today in the web world the software-as-a-service world people are doing updates very very frequently once a month once a week once a day think about facebook facebook actually pushes releases to production twice a day they are updating production code twice per day and Facebook rarely if ever goes down this isn't an error-prone process this is something that they've figured out and gotten down to a science and i'll talk more about that in a sec but I think we can bring that to the IOT world and bring those same models and make this something that we can do multiple deployments a week or even a day in the physical world but I want to talk about why the IOT world is in this position and why that's so important and I the chart may be a little hard to read it may be a little small if you're watching this on the webcast but I think everybody's familiar with this hockey stick sort of graph everybody saw this when telephones and tablets started to take over the internet this is exactly that sort of graph we had a bunch of computers on on the internet and then we added telephones and tablets we had moved devices and we got an order of magnitude more devices added on both in terms of speed and in terms of absolute number to the existing infrastructure of the internet we're actually seeing the exact same pattern happen in the IOT world only even faster by 2018 we're going to have more IOT devices on the internet than pcs phones and tablets combined so we're putting tons and tons of new devices out there and at the same time these devices are getting more complex and then main complex here in really two senses one of which is the devices themselves are actually getting more complex I already mentioned I came into this really after the sort of 8-bit microcontroller era more in the microprocessor era I went to university to get a computer science degree a couple of decades ago will be vague and the machine that I got my degree on the machine i was doing my computer science program on was actually much much less powerful than the very cheap embedded devices that we see out there in the wild today so you know my computer was a single CPU have very limited RAM and storage a raspberry pi can have multiple CPUs so these devices are massively more complex and powerful than anything that came before them but at the same time that complexity has another meaning because we have all this power we're asking these devices to do more and more with a larger and more complex pieces of software running on them again the microcontroller era we we were pushing things that were k kilobytes or maybe tens of K now we're talking about megabytes hundreds of megabytes even gigabytes of application code running on these devices out in the wild and as you know the larger your code is the more complex your code is the more errors that are going to be in it and the larger surface for attack surface for security vulnerabilities is going to exist so we've got many more devices doing much much more powerful things you would think we'd have a lot more people working on this but in fact the opposite is true if we look at the number of developers that are on in the embedded world today versus the web and mobile developers there's 600,000 embedded developers 8 million web and nine million mobile so we have an order of magnitude more devices that are more powerful and complex than they ever have been before then we have orders of magnitude fewer people building these things so what do we do we can really do one of two things one of which is we can go on a crash program to educate a bunch of embedded developers and try to bring this up to 6 million or or 10 million whatever we need to do but frankly we don't have time to do that we don't have the time and we don't have the resources to make that happen so really the only solution is the other one of taking these web and mobile developers taking the tools that have been built to allow these web developers to do multiple deployments to production per day and bringing that tool chain to the embedded world so making it possible for those 600,000 embedded developers to be way more productive and make it possible frankly for the web and mobile developers to play in this embedded space and this is what that tool chain really looks like there's a whole bunch of tools that have been built up over the past couple of decades to enable this multiple deployments per day or per week model and they make one developer really really productive so a single developer can work on code locally they can do their local development elliptical testing and then they can push that code up into a distributed repository and kick off a whole set of tools on the back end that are going to do automated testing automated deployment automated integration sometimes even automated documentation all sorts of automation that makes this developer orders of magnitude more productive than they would have been without and that can be deployed into production in a way that that developer is already familiar with so if something breaks in production the developer who wrote that code can immediately go into production and work on that code without having to learn a totally different environment when they build that code locally the same environment is running in production even if different developers are running different environments so what we really ought to do is take this model and bring it to the dev on the I OT world so bring this to the embedded world take the same set of tools push that on to embedded devices and there's a bunch of these tools like I said we've done this for decades we have built up a huge array of tools to make this possible all of these things are also open source so they're things that we don't need to worry about reinventing or working out compatibility all these things work together today we can just pick them up and start using them but I want to talk about one of these tools in particular and that's docker and if people here haven't heard about docker aren't really familiar with it dr. is a containerization engine and what that means is it's a lot like a virtual machine so in a virtual machine you have an operating system you have all of the libraries and support code and then you have your application code all kind of packed into one single file or one logical group that runs on emulated hardware so you're always getting the same environment every time doctor is exactly the same thing but without the emulated hardware dr. runs natively on a device so it basically runs inside of the Linux kernel that is hosting the machine but everything else is the same so you've got your operating system all of its libraries and support files everything you need to run your application plus your application code packaged up into one single file that can be then dropped onto an environment and run natively the cool thing about this is we can run different environments inside of docker containers and all coexist on the same host so if I'm building a web web service I might have one developer who really likes red hat so they build the database back-end in a red hat environment package that up into a docker container and deploy it whereas maybe I wanted to develop the front end and I've got a web server and I'm doing that in a boon to I package all of that up and i deploy it so i have my environment the database developer has his environment but they all run in this in these containers in the same environment so we get a really portable way of working with the code that we need now doctor was built for exactly those sort of purposes it was built with the idea of doing this on vast server farms with a raise of identical hardware the whole idea here is that if something starts to go wrong with a my web server starts to crash I don't really want to spend a lot of time trying to nurse it back to health I'm just going to delete it or shut that docker image down and bring up another one that is already healthy and already working so the whole idea here is to do things that massive massive scale with identical hardware so you might think why in the world what I want to take something that was designed for massive server farms and put it on a single embedded device right if if a docker image and a server fund it gets bad I don't care I just kill it but if my IOT device that's running a running a power generating wind turbine in the middle of the ocean starts to go bad I really care about that I don't want that thing to die I can't just kill it I want to bring it back to health so why would I use that technology in the embedded world well I'll give an example a few months back late may early june i believe we were at the dr cohn in seattle so this is a docker convention and one of the things we did there is showed off some of the technologies using doctor on embedded devices and I was I took this picture from the audience so it's a little blurry but the yellow dash kind of in the middle of the picture and from the black screen in the background is a drone so this is actually a drone flying on stage and what we did was we updated the drone control software while the drone was in flight using docker and I'll explain how we did that so we had a device on that drone and it had a containerized application so we had our application inside of a container and you can see from that container it's you know it's holding its shape but there's something wrong with it there's something not right with this container we really ought to fix that so what we were able to do is push a second docker container onto that same hardware so remember because it's in a docker container we can run multiple applications at the same time on the same physical hardware so we pushed an updated version of our code in the new container but we have both containers running simultaneously so at this point we really have two versions of our application running at the same time and what that lets us do is hand over all of the state from the old version of the application all of the control of sensors and gyroscopes and everything that's going on on that device we can pass that to the new container and only once for sat spied that the new container has control of everything that everything looks good and we're ready do we shut the old one down so at no time is there really a risk of bricking this device even if the new container were bad the old container can stay running and the host computer the host OS is actually what's maintaining that internet connection so even if I crash both containers I could still push an update to that device it doesn't go offline so using that model we were able to update the drone in flight and this is what the the software on the device looks like see I promised we'd start to get into the technical bits now we're finally getting there we have a Linux based OS on the device which we call resin OS it is open source it is something that we have put together and made available to the community for running containers and that is based on the Yocto project and yocto for anyone who's not familiar with it is sort of a a toolkit for building very lightweight Linux images so the whole idea here is we want something really really thin and small that all it has is the Linux kernel and really enough run time to run the docker engine everything else is happening in one of those doctrine containers so the application just like I talked about on the drone the application is running in a container but even all of the update systems that we built that resin are also running inside of one of these containers what that means is it's sort of like inception we've got containers all the way down we can update the update mechanism using the update mechanism so as we want to push new features or fixed bugs in resin we can actually push an updated version of resin and over control and then shut the old version down so the advantages of using docker in this environment should hopefully start to become clear I I personally went from my reaction of why in the world would you put docker on an embedded device to after learning this saying why in the world would you ever not run docker on an embedded device it just makes so much sense to use this model but I want to show this off I want to show how we can use all of these open source tools this existing tool chain to deploy updates on to IOT devices so that we don't end up spinning our wheels for the next 20 years trying to reinvent the stock so let's take a look that's going to switch to a different desk top gear i'm going to reload this so i know that it's working and what i've got is in the upper left here i've got a webcam pointed at a fleet of raspberry PI's so these are just embedded devices and they have screens attached to them mostly so that you can see over a webcam that things are happening these are actually running in our Seattle office at resin and I personally and sitting in Boston so these devices are 3,000 miles away from me I really truly am managing them remotely you can see it a little Lego Space Needle next to it that that should hopefully prove that it's in Seattle can actually show off that we do some geolocation inside of our platform as well so if i zoom out here a little bit maybe you'll believe me from the map that you know these are these are where those devices are sitting in Seattle but over on the right I've got a view of what resin presents the service that is doing this update prisons out to a user and this is the same devices being managed and monitored from inside of resin and again resin is really just combining that all of those open source tools and that open source tool chain that has been built up over the past 20 25 years into something that works on IOT devices so let's take a look at this what I've got is an application that i wrote and you'll see my application isn't exactly a really complex one it's just this is just to give you an idea of how it works but this is an application that's running on those devices and you can see I've got a bug on those devices I've got a big nasty red bug on those things and I want to fix it so this particular one is is written in the shell script which makes it nice and easy for me to edit so I'm just going to open up the code of that application and fix my Bob it's usually where people laugh at me for running nano instead of something like VI but gosh it has nice syntax highlighting and it's easy so I'm just you can see sample application I'm just going to change the code here so let's change my bug to a fix but this could be anything this could be a sea program this can be Java this can be Python anything that will run in a linux environment can be used here this is just the tool chain that enables device updates to happen I've made a fix and I'm going to just go through the same sort of workflow that I would from a web application so I'm going to check this into my source control system which is get in this case so I say get ad get commit the GOG we'll put a nice commit message in there so that later on people know what I did and now I'm pretty much done from my point of view I i would probably test this in the real world locally but I'm pretty sure this is going to work so I'm just going to push this out into production and the way I do that is using gets pushed functionalities so it is a distributed version control system meaning that i can push this up to a remote server or remote get instant somewhere and have that get instant receive the code and do something in this case I'm going to push the master branch to the resin cervix and what you'll see happen is resin is going to receive that commit we're going to start compiling that in this case there's no compile step because it's a shell script we're going to build a docker container so we're building a docker container that targets the the deployment environment and we're now pushing that docker container into our container registry we see that unicorn that means it's actually already done the image has been pushed into the registry and it should very shortly start to get picked up by the remote devices they should see that there is a new update available and pick that we're going to see if they do that while I'm while I'm waiting for that to happen i'm going to just drill into one of these devices and take a look at a couple of features here so you can see okay we do actually have a download don't know why the status didn't update there that's okay we were actually receiving the image and you can see we actually have console logs from each one of these devices so because we can maintain a connection to these devices from the host operating system we can actually see everything that's going on with a remote device just the same way as if it were sitting on your desk with a serial cable plugged into it and if you look in the upper left you can see that the fix has been applied and these devices are starting to get starting to pick that fix up so what we're doing is again we're pushing a new container to the device and bringing up only that container so what you'll notice is the devices aren't rebooting we don't have any downtime while we switch from the old version of of the software that we had pushed on there to the new version we just get the new version up and running so again for mission-critical you know deployments this is the sort of thing that we can do and deployed multiple times a day without ever taking a device down so you can start to imagine this is a great way of dealing with security fixes dealing with product updates and dealing with a lot of functionality of devices out in the real world so what I'm going to do is I'm going to pause for breath take a take a breath and see if we've got any questions not i can always bore people with more slides but let's let's take a look and see what we got scroll up a bit any software licensing challenges with docker deployment great question so I want to be very very clear everything that I have been showing and everything that we do at resin is open source so docker is part of that and is included docker is an open source technology so you can pick this up and use that you know with no license fees no no concerns about using that with your coat it's also just incidentally not any sort of viral license so there's nothing about your code has to be open source when you are running doctor or using docker to deploy and manage those applications or when you're using resin your code can still be closed source if you want it's just all of the tool dream that you are using to deploy its open source see what the next question was here how would you propose we use microservices with dr. embedded deployments on microcontroller microprocessor great questions so I think there's a couple of answers that we can a couple of ways we can approach that question so one of those is microservices you know typically if you're talking about microservices you mean that you have a bunch of self-contained services or self-contained units of code that do not necessarily interact with one another other than through their API so they're not one monolithic codebase you've just got them split out and you want them to able to talk to each other and do very simple active actions for one another you can do this exactly the way you would do it in a server environment on these embedded controllers so anything that you can run in a Linux environment can run in a docker container and can therefore run on embedded devices to play through resin so you can either put all of your micro services into one docker container and deploy those out onto your embedded devices or you can deploy multiple containers on to a device so if you want to have one container per service and to play each one of those containers on the device you can absolutely do that I will caution you and say I would not recommend that deployment model for something that has a lot of different services because there is a small amount of overhead for each docker container so if you know you do have to remember that you're deploying these things onto something that may have ram measured in only a couple of hundred megabytes so you're not going to have tons and tons of space to run a whole bunch of different instances with what their own or less in their own environment but you absolutely can do that as long as you take that into account the other way that I would talk about that microcontroller microprocessor model is if you're talking about having micro let me make sure I get this right microcontrollers working in concert with your microprocessor so if you do have that sort of 8-bit microprocessor controller sensors that are in your environment and maybe those are connected through something like Bluetooth Bluetooth Low Energy zigbee something along those lines you still want to be able to up to update those devices but they're probably not directly connected to the Internet and that sort of model those microcontrollers tend to be connected to a microprocessor gateway and we can support that model as well so the way that works is there's just one extra step you push an update to let's just say it's a Raspberry Pi for the sake of simplicity you push your update to the Raspberry Pi the Raspberry Pi then runs a set of software that pushes the update to the microcontroller so it does the OTA flash to the microcontrollers that are connected to it and then you would manage the the firmware deployment for the Raspberry Pi through something like resin and resin will report back status on we call them dependent devices so if you have a bunch of microcontrollers connected through zigbee to your Raspberry Pi you can do that update and then you can see which of those sensors have been updated which ones haven't which ones were successful etc and all of the version numbers anything that is supported by your controller that is reported back you can report back through that bottle see you next question how are you monitoring the performance so let's take a look at this so if i'm going to maximize this so that we can actually see a little bit more about the device what we have in this model is devices that are always connected to the internet so if i go back to my webcam and take a look really quickly you can see the ethernet cables coming out of these guys they're just connected to our office network connection so we know that we have a pretty decent connection to these devices we can keep them online all the time so we take advantage of that we actually have a VPN service as part of the resin platform and each one of these devices connects up to resin through the VPN and is passing data back in real time or very close to real time so that's how we get things like console logs if you want to pass back to limit or e data you can absolutely do that you know there are people that are doing things like running top and passing the snapshot back through either the console log or through another logging service you can pull down logs from devices anything that you want to pass out of those devices can be pushed up through that VPN connection now if I've got a model where I don't have a constant connection to these devices I've got something like maybe they're connected intermittently or through something like 2g or 3G where I really don't have the bandwidth to be just really really chatty and passing all these messages back up I don't have to have that VPN connection going what i can do is i can tell the device is the frequency that I want them to check in and they will check in through https at that frequency so it really becomes a very simple model of them doing a poll maybe once a day once an hour however often you configure to say hey is there an update available and maybe pass back whatever data you have to find that is most important to you so you don't have to have that model where you have all of the data being passed on but I do want to say it is really cool if you do have a constant connection to a device so ethernet Wi-Fi 3g 4g something with enough bandwidth to do it because you can get not only this console view we actually pass back things like a remote shell so i can actually connect to one of these devices that is sitting in our office in seattle and i can interact with that device so if i want to do remote debugging or remote work on a device you know i'm sitting in the application container on that device inside of the Seattle office you can see that's the same code that I had deployed or had in my local environment deployed on here should be even including the upgrade because I push the update yep there's my fix there's a lot you can do with this model if you have a constantly connected device let's see that's really cool yeah Thank You Maxim I appreciate that I thought it was really cool to I get really excited about this so I'm glad to hear when other people get excited as well jason says what's your vision on interoperability and compatibility for IOT I'll talk a little bit about that but Jason I may ask you to elaborate on what it is that you you know what you mean or give me some specifics there what I'll say from a very general view point is that you know we a resin like I said kind of view ourselves as plumbing we don't switch back to the webcam maybe you guys can young come watch me talk we don't see this as another platform to lock people in two or something that is you know a we're going to we're going to get everybody on our platform and this is going to be the only place that people you work with IOT devices I frankly I think that model is ridiculous and broken we saw that you know the web was successful by being an open platform and being very interoperable with everything around it we want to do the same thing we want to play really nicely and that's part of why we we do everything in the open where an open source company we use open source tools to build all of this we don't want to be some sort of lockdown proprietary model we do want to be interoperable so one of the ways we are we are pursuing interoperability here is you know again with the open source model we make it really really easy to add new hardware to to the platform so if you have a device you have a custom device that you've built we have instructions on how to build resin to put it on your device you don't even need to work with us to get this running on your device we also are using standard tools where everybody exists so docker is kind of a de facto containerization standard there are other ways to do containers and Linux doctor is really where the momentum is so that's what we work with we use openssh openvpn we use HTTP HTTPS for everything we have an open API so if you want to tie our API and manage your devices without ever seeing the resin the resin platform of the rest of interface more power to you we welcome that so any way that we can be interoperable and work with the wider community is what we want to do so I hope that answered your question if not feel free to just throw another one in there and Jebel says thanks for sharing these yeah you're absolutely welcome very very welcome I guess and I get excited about this so I love to share it and get other people going so uh please feel free to submit more questions I think I've gotten through all the ones that are there so I've got just a couple of more slides I actually don't really like slides you wouldn't guess it from the fact that i'm showing it on but i'm going to just show a couple of more really quickly and then if there are more questions we'll hit because go back to screen sharing though i just wanted to talk really really quickly about more open source stuff like i said we want to be interoperable we want to be open so we're doing a lot of really cool things i want to brag about that i don't think the team at resolute backs up out of enough so one of the things we did one of the problems we encountered as we were building resonance we were putting it on the 20 some-odd devices that we support today is that it's really painful to do SD card flashing or USB stick flashing from a printable image and that's really anywhere you go it's it's painful on linux on OS 10 anybody who has spent a lot of time with d he knows there's a reason that people call it disk destroyer I've personally blown up a couple of laptops myself with TV and the windows tools really aren't that awesome either they're a little clunky and plus having different tools on different platforms meant when you were writing out instructions you have to maintain instructions for linux and windows and mac OS and it's it's just a pain in the butt so we wrote a tool called echar to do this very easily very safely and cross-platform so you can go to a trio download this tool use it to write SD cards or USB sticks and then you really only need to write one set of instructions and you don't have to worry about blowing up your hard drive you won't let you do that by default you can overwrite it there there's a checkbox that basically says I'm I know what I'm doing but by default you can't overwrite your own hard drive so it's a really cool tool does one thing but it doesn't really well and like I mentioned earlier we have put out resin OS as another open source project so even if you don't want to use this whole update and remote management model for embedded devices you still might want to put containers onto an embedded device you know it's it's great to have a starting point to be able to do that something that really is stripped down and lightweight and only has the bits that you need to be able to run containers on an embedded device so yeah we had to build that as part of building the resin platform we sort of looked around and realized this can be really useful even outside of resin so we split it off it's a separate open source project you can go download it and start putting containers on embedded devices we'd love to hear from you if you do it I'd love to hear your feedback and you know being open source of course pull requests are welcome but go out and grab it and have fun and all of this stuff by the way is up on github so if you look for us on github your resin dash I oh there because you can't put a dot in your name on github this is also linked from resin I oh so if you go to our website there are links to all of the github repositories you can go grab this stuff and start playing with it we loved it to see what people can build on top of this so that's pretty much it for me like I said I'll come back and check and see if there are any more questions but anybody has any questions outside of this or you want to get in touch with me and talk about residue or just IOT and enter hopefully you can tell by my voice I get really excited about this stuff I get really enthusiastic about what we can build and yeah there are problems there are things that are wrong today but we can fix those I want to make the Internet of Things the next internet I want to make this a cool platform that everybody can do really amazing things on so please reach out to me and help me do that I'd love be here from let's take off the screen charity and we'll check and see if there's any more questions here so sunny single says microcontrollers that only run firmware such as fermanagh how does reservoir io build the deployment fault tolerance EG rollback changes great question so i want to emphasize that resin really targets linux devices that can run docker so we are not really the resin platform is friendly to heavyweight to run on a device that size so no micro controller device is not going to run docker you're not going to be able to do that what we do is we provide you the platform where you can push your over-the-air update to those devices so you can push your firmware through that and through a gateway device through your your Raspberry Pi push that out onto onto the updatable devices but the Raspberry Pi itself needs to be aware or whatever you're using your your gateway needs to be aware of how to do the rollback on the microcontroller unfortunately there's no industry standard for microcontroller updates everyone has their own way of doing it and there are hundreds and thousands of those things if we try to write a generic way of doing that for the entire io teen with microcontrollers we'd still be doing that 10 years from now so it's the story is frankly not is great on microcontrollers and that's just due to a limitation of the platform of the microcontroller world I mean having said that you know there's a lot of talk about Moore's law being dead I don't think that's true I think even if we start to see fewer and fewer updates in the number of transistors we can pack into a square inch that doesn't mean that the silicon that we have isn't going to keep getting cheaper look at the price of micro processors and how that has come down year-over-year if we stop building new fabs because we reach the end of life for silicon or the end of improvement for silicon that just means that micro processors are going to get orders of magnitude cheaper because we no longer have to recoup the cost of building fats so a raspberry pi or equivalent device that costs you know twenty or thirty dollars today might cost two or three dollars in the future meaning you're going to see that level of power in smaller and smaller applications so you'll be able to continue to use this model and update those devices you're going to be able to update more and more devices using this model so I think it's a bit of forward looking for for resin and for where we see the industry going and so the signal so says also we recently won IOT vc IBM hackathon in new york city and will reach out to me awesome congratulations i'm glad to hear that obviously been boxing for for people who didn't know so are there any other questions and we're bumping right up on the end of time here and i'm sure people want to head to other sessions as well so I I can sit here and talk about this all day like I said if people have questions or you want to talk to me I'm Ronald McCollum app Ronald McCollum on Twitter Ronald at resume oh please reach out to me I'd love to talk to you thank you all very very much cheers 