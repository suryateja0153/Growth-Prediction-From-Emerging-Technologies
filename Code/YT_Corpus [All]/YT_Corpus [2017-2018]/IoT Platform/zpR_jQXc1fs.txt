 [Music] hello everyone my name is Rebecca Franks and today I'm gonna be speaking to you about Android things and why I think it is the IOT platform for everyone so what is Android things Android things is an extension of the Android platform for iOS II and embedded devices we've come to know Android on our phones for many years but Android has also been available for us on our Watchers on our TVs with Android TV and also in our cars with Android auto now with Android things you can have Android on any device that you can imagine so Android things is ideal for powerful intelligent devices that need to be secured some examples of where Android things would really work well is in the retail industry for things such as interactive ads or vending machines powered by Android but also in the business industry with things such as cameras smart access meters anything of that sort in the logistics industry you could think of using Android things in some form of application of asset tracking or predictive service but Android things is also very suitable for home automation so a smart doorbell or an energy energy monitoring system would also do well with Android things so a question that you're probably wondering is how similar is Android development to Android things and the answer is it's very very similar so when you're developing for Android things you're using the Android SDK so all the api's and all the different things you've learned as an Android developer are similar for you to do with Android things you're also using Android studio so you're just building an Android app and using it and putting it on your Android things device you can also use the Play services so something like the nearby API or the vision API you can use on Android things and because it's just Android as well you can use the firebase SDKs and leverage the real time database or most of the other firebase options you can also use the cloud platform so things such as the Google cloud I Oh T call or any of the pub/sub stuff like that you can use with Android things and the best part is because it's just an Android app that you're building you can use any other Android library that you've been used to so if you like developing your apps in Kotlin or you're a big fan of rx Java you can do that with Android things as well so now we've seen how similar Android things is to Android developments but there's a couple of differences that you have to keep in mind when developing for Android things so the first big one is that there's no Play Store that you're shipping your apps onto so your app is the only one that runs on the device and there's no such thing as a Play Store weather where users can go and install other apps from there's also a subset of api's that are available for you so things such as your notifications aren't available anymore because displays are optional with Android things also we need to be nipping for Android things you're using custom hardware so this is probably the biggest difference when you're developing for Android versus Android things so the custom hardware that you build is what you ship to your clients so we're used to shipping our apps building in the Play Store and having people downloaded from the App Store but this is people building their own hardware shipping the hardware and the software together so it's also useful and it's used as a single purpose device and what I mean by that is that your app and your stuff that runs on this device is the only thing that will be there there's nothing else so that users aren't installing anything else on the device and then because there's no Play Store you're deploying OTAs to your clients and not app updates like you used to so this is the typical software stack of a traditional Android mobile device kernels and libraries are primarily focused on enabling hardware driver support application frameworks provide rich set of api's for our apps to use and applications provide user facing generally used for general use cases such as our launchers our phones and our messaging apps now with Android things we remove a couple of these these different api's and applications that have been are typically available for you as an Android developer so the default user facing apps have been removed so you no longer have the launcher or the phone or messaging capabilities on Android things optional displays also mean that some api's have some modified behavior so things such as your notifications or your system you are have been removed with Android things now when you're developing for Android things you get the Android things support library as part of your development so some things such as the peripheral i/o and device management come bundled with Android things SDK we'll go into a little bit more detail around those later so Android things uses a system on module architecture so or as some architecture so the system is designed around a core computing module that is located on a bigger breakout board during prototyping and development and then when you move into production this smaller system on module chip is used and built on a custom breakout board that you would ship to your clients this reduces costs and simplify hardware development because of the complex Hardware design that is encapsulated within the Sun the Google managed boards Support Package creates a stable let software layer for developers to rely on so this means if your hardware design should change you don't need to worry as much because the both support package will support it so some base designs make production specification testing a lot easier to do so all electronics in the market must undergo some kinds of certification and before you ship them to your clients and this process can be very very costly and when you're using the some architecture design it's a lot it simplifies this cost and that Google handles or the complexity for you so we need to be napping with Android things there's a couple of things that are managed work by Google and things that are managed by you so when Google manages the android framework the hardware libraries and the linux kernel so you don't need to worry about that and then you as a developer will need to manage the apps and use the drivers that you'll ship onto your devices no you no longer need to worry about sending security updates or making maintaining an OS Android things maintains there for you so the Android thinks console is what you would use as a developer to ship OTA updates to your devices so you manage your Android ISE product on this Android things console you can download and install the latest version of Android things system images on this I see countless Android things console and you can also build factory images that contain the OEM applications along with the system images on this console itself you can also push OTA updates to your different clients and if you head over to partner Android comm for it slash things that les voiz slash console you can hit and see this console taking a quick look at the console though this is what you would typically see if you're developing your app so this is I've created this a candy dispenser and on this I said that I want to include the Google Play services with it but this is where you would what you would typically see when you're managing your own product if you head to the factory images tab on the Android things console you can see exactly where you would need to upload your applications that you're shipping so it's what we call a bundle and this is what it's just as the file that contains your apk is that you want to ship as well as possibly a boost animation if you want to change that you can then choose the version of Android things that you want to be building your your firmware version for and then you can download this factory image and flash this on the devices that you're using if you've already got devices artem in production you can then ship OTA updates by doing the same process selecting the bundle and the factory image and then doing a push updates cool so we've got a little bit of background on how android things works and what it is so I'm going to take a quick look at how we can develop for Android things so to get started with Android things you would need to purchase or obtain a developer kit so there are two that I particularly like the in XP imx7 D or the Raspberry Pi 3 and these what you would typically do is with the Raspberry Pi you would download the factory image and flash it on the SD card like you would normally do with any other operating system for Raspberry Pi you would then start at the device and you would have Android things running on it from this point on you can connect to it over Wi-Fi or via the USB cable I particularly like for in XP a lot more than the Raspberry Pi because it's a lot easier to debug so when you're developing you can just develop over the USB cable and you don't need to worry about Wi-Fi so because we're developing custom apps we can use custom hardware with our devices and in order to access these different hardware peripherals that we might include on our devices there are different different options for you to do so I like to think of it as two different ways one being the difficult way and one being the easy way and the peripheral i/o extension is what I like to think of as a bit more of a difficult way but basically what this gives you is access to all the different protocols that you might be used to if you have done any kind of IOT development before so things such as your GPIO or your PWM protocol you can get access to those using the peripheral i/o manager but this does sound a little bit tricky so if this is not your thing you can head to the peripheral Java library on github and this gives you access to a whole bunch of pre-built drivers that you can use within your Android things application so things such as a GPS or a button or servo motor are all available for you if you head to that link down below so I like to think of it as if you don't really know what you're doing with Android things you can do the github library versus if you don't know if you more into getting low-level access you can use the standard protocols okay so we're going to try a quickly build an app and this is basically what we have on screen here is a breadboard with a button and an LED so this seems really simple I mean why do we need Android things involved but we're just going to have Android things control the LED when the button is pressed so what we're going to do is we have two two pins that we're using in this case and this is what I like to refer to as the pin our diagram so this might be a little bit confusing but if you have these devices you'll see there's about 40 or so pins on a Raspberry Pi or on other kits and because they look the same doesn't necessarily mean they do the same thing so what you want to do now is we're going to be using BCM six for the button and BCM 21 for the LED okay so what we would do is in Android studio we would head to creating a new application so we can just in Android studio 3.0 we create a new project and we would select the Android things as an option that we want to build for we can then choose to have an empty activity that we're using and then automatically the app adds the compiled only dependency into your app level Bulldog Gradle now at the moment the Glazers version is 0.51 dev preview but this is constantly being updated so make sure to check out the latest version so automatically in your Android manifest file we've added the users library tag which indicates that you need to use the Android things library that the device requires this library to be installed then on that activity that we created we have added a intentful to automatically so this means that when the device reboots it'll automatically boots into this activity that we've created you would need to add the stuff yourself if you haven't gone through the create new Android things project from scratch you would need to do these all yourself now in our example we had a button that we were using in order to get pressed events so what I'm going to do is use the button from the github support library that we saw earlier so I'm just using it within Gradle putting it in my bulldog Gradle file and now I get access to a button so I would create some new buttons by saying new equals new button and I give it the pin that we were talking about earlier in this case BCM 6-pin now you must just remember that this button is not the same as the Android widget up button it is a different one with from the Android things support libraries now what you can do is set an onclicklistener on the button and this will get fired whenever we receive a physical button press and are we gonna do in this case is set the value of our LED GPR open to true or false now this might be a little bit confusing first but we'll get into the LED GPR open next the next thing we need to do is make sure that we close the button access that we have this just frees up any resources that we were using before so to get access to the LED that we have we would just get access to the peripheral manager service API so what this is is it's provided by the Android support library and you can just use it by importing and using that compile dependency so we would just then say service that opened GPIO with the pin number that we used previously and then we would set the direction of the pin to ask initially lo and then we can access that pin and set it to true or false if we need to now in our that's where we would do in the button we were settled to true when the button is pressed and we get the button event false when the user lifts up if their finger we would also need to then just close up this this pin as well so in our on destroying method we would then typically go led GPIO closed and there we have a blinking LED powered by Android things so now that we've seen how to build a simple Android things project there's a couple of examples that I want to go through that you can have a look at if you head to hackster io forward slash Google so the first example is by Dave Smith and this is what we call the Edison candle now you might think it's a bit silly to have a candle powered by Android things but this example is for you to understand how to go from a prototype all the way into production and all the different things you would need in order to get there so be sure to check out that project on hackster the next project that I want to highlight is what they call the piano hero this one is actually on display if you go head up to the Android things stand and this one is basically just using a keyboard powered by Android things and you can sort of play something like Guitar Hero but for a piano and this was built by the team at Nevada and then one other one that I'd like to talk about is my own one and this is what I call an electricity monitoring app now where I'm from in South Africa we suffer quite regularly from power outages and I had this problem where I didn't know when I had power at home versus when I didn't so I built this app using Android things and the firebase SDKs and all the eff does is runs on my on my PI at home with no other peripherals connected and when I don't have power at home I get a notification on my phone to say the power is off or the power has come back on it also keeps track of how long I've had power for at my house which is really useful so how I did that using firebase a quick little code dive basically with firebase you get a really nice called the info connected and this told you if you are connected to the Internet or not so technically my electricity monitoring is actually just a network monitor but my networks a lot more reliable than my power so for me it serves me fine so what we would do here is we just get access to if I'm online or not and then we add a value event listener on us and then for this part we would then check on the data snapshots Emma online or not and if I am set the value on the server to true and add what we call the on disconnect listener so this is where it becomes super powerful because the unders connect listener says when this clients disconnects from the server on the server sees a certain value to true or false and then on my server I'm using the firebase cloud functions to determine if I should send a notification or not I'm monitoring this node and if anything changes a push notification gets sent down to the device another cool project that I actually bought myself is what we call an AI candy dispenser so this one has been built by Alvaro V Bruns and you can find this one on hackster as well but this one what's really cool about it is it's using the tensorflow api or Fline on the device so how it works is when you press the button it asks you you play a game with it so it asks you please show me a photo of a cat or a lion or something like that and you have to quickly go search for one on the internet or maybe you have some of those objects lying around and then show this this image to the device and it uses tensorflow to try and classify the image that it has on the device and then it says yes or no it's the cat it's a lion you got it right and then it dispenses candy and this is all powered using Android things and the tensorflow libraries so I encourage you to add your project to hackster io and you can hear two hacks io four slash Google so if you've bought anything with Android please be sure to add it there as it'll be really valuable for everyone else to see so why are Android things well it's the power of Android in your own hands on these devices Google manages the complexity of automatic and secure updates and it's a lot easier for you as a developer to manage these things so if you're still curious about learning more at one o'clock there's an instructor-led training by renato and hands-on learning with android things and you can actually create your own IOT device there I'll be available in the code in the office hours upstairs on floor 3 if you have any questions and if you on your way out there will be IOT cards that you can get your own IOT device at this conference itself so thank you very much [Music] 