 hey everyone welcome to the Google Intel webinar on the IOT platform we're gonna start the webinar here in a second and while it's running if you have any questions just ask them into the live chat and we'll get to them when it's done in the meantime enjoy the webinar [Music] hey everyone thank you for tuning into our first show in a three-part series I'm Gabe Weiss and I work for Google as a developer advocate for the cloud platform hi and i'm martin Kronberg from intel I'm a Technical Evangelist working with our Internet of Things technologies and integrating them with cloud partners such as Google so you know I've been working on creating proof of concepts as well as a series of workshops that we're going to be teaching in the near future and I'm really excited to share what I've learned with a broader audience through these webinars so today we're going to be discussing how we can use Intel and Google technologies to create a predictive maintenance framework predictive maintenance is a concept of predicting when a component in a factory or an airplane is gonna fail and then replacing it before it does it's based around gathering as much data as possible from the system and then using machine learning to at first find anomalies in the data and then predict the nominees in that data before they happen in this first webinar we're going to look at the basics Intel and Google's place in the IOT ecosystem gathering the sensor data and ingesting the sensor data into Google's cloud platform so in order to build out this framework we're gonna be leveraging Intel IOT hardware Google's cloud IOT platform as well as big data processing and machine learning services in the Google cloud and hopefully we can inspire you guys to start some of your own IOT projects so before we launch into the specifics of the framework let's take a minute for a higher level overview of both Intel and Google's place in the IOT ecosystem so Martin why do you start and give us a rundown rundown of what Intel is doing in IOT space sure well so IOT starts with endpoints so things like sensors actuators the kinds of devices that gather data and then interface with the environment in some way the simplest example might be a thermometer to read temperature and then a relay to turn on an HVAC system now at the other end of the spectrum are the cloud-based analytics big data processing machine learning natural language processing and this is where a lot of the really exciting possibilities are like printer maintenance but the thing about machine learning is that while it has this huge potential across almost all industries it's very compute intensive so much so that doesn't really make sense to run it locally and we have to run it in the cloud but however once we leverage those cloud services that thermostat can all of a sudden do more than just tell you the temperature right now it can begin to tell you the temperature in the future using predictive analytics you know of course all these things need a way to talk to that cloud service right and so there's a few issues I need to be overcome in order to make this happen first of all many endpoints do not have a way to connect to the internet on their own now they might have a serial connection like USB Modbus or maybe a short-range radio like ZigBee ziwei bluetooth and so this is where one of the core aspects of the Intel IOT ecosystem or the Gateway comes into play it acts like a data collection hub it collects all the data from the sensors and then establishes a secure connection to the cloud now having a sexual data collection point like this allows for a few other things to happen first even if we could connect each one of these sensors individually up to the cloud it would be inefficient as well as insecure the more connection points that you have in an IOT system the larger that potential cyber attack surface becomes the Gateway minimizes the number of connections and it also comes with some security software that makes that connection as secure as possible so it makes sense when you talk about these gateways are you thinking of a specific device all right so there's a lot of companies out there that make these gateway type devices and they're gonna range in both performance price size as well as the kinds of i/o that they have however for this webinar we're gonna be focusing on the Gateway that comes with the Grove IOT development kit and it is an atom powered Nook and this developer kit is part of a larger developer program at Intel our developer program is really aimed at getting all the tools that outtie developers might need as well as all the information that they need to use them in one place we have libraries code samples even market studies of different verticals as well as community forums and all kinds of training materials like this very webinar and I would recommend that anyone interested in learning more about IOT development go to software TOCOM slash IOT and check it out so to facilitate these devices talking to the cloud Google has created a new Google cloud platform product cloud IOT core it's aimed at communicating with and managing these fleets of devices it's not to say that it doesn't work for individual tinker's as well but the focus really is at these large installations the planet scale as we like to say cloud IOT core is a fully managed service so no need to spin anything up it just works and scales and balances internally there's two pieces to it first is the device manager which handles registering tracking and configuring these devices themselves second is the communication piece which uses an mqtt or HTTP bridge so DCP provides an MPEG broker to send data to right although it's not a fully feature broker there's no configuration you can do to the broker communication part it just passes the payload on to our messaging system cloud pub/sub that's what we call it a bridge and not a broker so on the device management side IOT core organizes devices into buckets we call registries each registry map's one to a particular pub/sub bucket called a topic so any devices in a given registry will have all their messages published to the Associated pub/sub topic there's not really enough time in this webinar to go into all the things you can do with these devices but to touch on some of it you can pass configuration messages back to the devices from IOT core you can enable or disable a device assign properties to individual devices or control the SSL key expiration for security and more so then does GCP automatically refresh the SSL certificates that are needed for the connection not automatically know so best practice is when the device gets created you install a number of certificates and then in the IOT core interface you can specify timeouts for individual certs to do the rotation it's easier than having to flash new starts to the device after it's already installed somewhere possibly hard to get to so on that communication side messages are handled simply with mqtt being the dominant protocol devices can send messages to the IOT core endpoint which then publishes their payload to the next link in the chain cloud pub/sub well talk in more detail about what you can do with these messages once they hit pub/sub in the next webinar the biggest takeaway here is the pub/sub scales globally each topics available from anywhere in the world and can handle over a million messages per second so you never have to worry about your devices overloading the system wow that's a pretty impressive bandwidth is there a size limit to the individual messages there is 256 K which for devices is a lot of sensor data but depending on the device being used I'd never go that high network usage is one of the biggest drains on power for these small devices that size is more for the use case of like a device that would sleep for a long time gather a bunch of data wake up and deliver it in the big bursts and then go back to sleep for a long time cool well let's take a look at this framework so first we have a few sensors here so we have a light sensor we have a sound sensor and we have a temperature sensor these types of sensors are used typically in industrial environments to monitor machinery or various processes the sensors that we're going to be using are these Grove prototyping sensors which are plugged into an arduino 101 which we're using as a sensor hub these sensors are really great for quickly prototyping or creating a proof-of-concept they each have a socket which gives you power ground and then 2 signal pins so there's no need for bread boarding these sensors in particular came from the IOT developer kit which I mentioned earlier the aruna 101 is connected to our dough gateway via a USB we're gonna be using the Fermata protocol in order to pass data between the arduino 101 and the Gateway essentially for moderate virtualizes the GPIO is on the Arduino allowing full control from the gateway now on the gateway we're going to be using a Python script to gather the sensor data package that data into JSON objects and then connect to Google Cloud to send data back and forth so how do you interface with the sensors on the Gateway are there libraries that you're using yeah so specifically we're going to be using M raw and upm M raw is a low-level sensor library created and maintained by Intel for interfacing with GPIO s I squared C buses and SP is just to give you an idea of how all this works here's a sample of code that we're gonna be using in this project basically we're using M rod to connect to the Arduino using the generic firmata protocol and then we're using upm to create three sensor objects sound light temperature and then using the sensor API reader value to read out the sensor values pretty simple and what's really cool about Emraan upm is that these libraries are a hundred percent open source and they're compatible with almost all developer platforms so you can run Emre on Raspberry Pi Beagle bone all the Intel gateway platforms up squared board middle board it even works with some Altera FPGAs so once again as a developer you're gonna have a lot of flexibility you can start developing on whatever platform you have access to and then if you decide that you need to move over to Intel Architecture you can take your code as is for the most part and deploy it on a different platform to befriend there's going to be some translation needed from platform to platform for instance not all devices are going to deploy a USB to the tty a cm0 node as a gateway has so once the sensor data is clicked in the gateway then we need to get it to the cloud this starts with the devices implementing that MQTT protocol to send messages MQTT stands for message queue telemetry transport and it's a very lightweight publish/subscribe protocol that sits on top of tcp/ip it's ideal for the IOT world because it's so efficient it works with the low level low powered devices without draining power too fast to talk over MQTT to cloud IOT core developers need to use a library in the language they're using on the device there's good ones for Python and nodejs that I've used there's also a C library called PAHO MQTT so there's no need for any kind of special GCP SDK or library is there one even available and not for the transmission of messages no but the whole point was we were aiming it make it as easy as possible for the devices so it's just this Google endpoint for MQTT messages and that's it the managed service then handles the rest once we send the message in the proper protocol that next piece is going to be authentication IOT core authenticates devices using jot JSON web tokens I'm not going to go into a lot of but a lot of detail about it but we can include a link to more information about it the TLDR version is that it's an encoded claim encrypted with the public private key pair using either RSA or ECC that's transmitted as a JSON object once you've got that taken care of it's time to start sending the data the message payloads can be whatever you want most of our examples use JSON blobs of sensor data because it's really easy to pull JSON directly into downstream pipelines without too much extra there's a few limitations around the messages like that 256k size that we mentioned limits are listed clearly in the docs though on the cloud side to get all the set up you need to have an account on GCP with the cloud IOT core enabled and from there you can create your device registry which is tied to the pub subtopic and once that registry is created then you can register all your devices with SSL keys and that's it to get your basics up and running well you know that sounds pretty straightforward is there a place where developers can go to find a step-by-step tutorial for starting their own project totally so if you go to google clouds website cloud google.com click on the documentation and there's a link to everything right there all right well let's take a look at some code and figure out how all the stuff actually works all right so for the code there's the two pieces that I've talked about before the token creation and the MQTT client initialization so for the jaw token I'm highlighting here this is really all of the code it is very tight so for jots there's three properties that we're sending for our tokens there's an initialization time an expiration time and then it's called an audience key and the audience key is how the receiver knows what's being authenticated in our case it's the ID for the project that we created in the Google cloud platform so as Intel webinar is our project name right then we can see here we're grabbing the private key which lives on the device itself that's what was flashed onto the device and that gets encrypted with the jaw and then we encode it and send it with in our case we're using the RSA algorithm so that's it for the jaw chokan the next piece is this MQTT client initialization and that's this hunk down here below and all it is it's initializing the MQTT client with an ID and that ID is this super long URL which is the ID for this individual device in Google cloud platform that we registered and then an mqtt topic which is how the endpoint in Google Cloud knows where to send your individual what what bucket in pub/sub that it's going to end up identifying with so the device is associated with the registry the registry is associated with the pub subtopic and that's how it knows how to where to put that message from there we established our username password and for our password it is that jot token that we created above and a couple of callbacks so we can just track what's going on with the the client as it's doing its thing and then we set the TLS so the TLS is so that the MQTT communication is authenticated on both sides so the device is registered with our ssl key that's how the Google side knows the device is talking to it on the flipside the device needs to be assured that it's actually talking to Google for that we've retrieved a root certificate from Google and that's how then the device knows it's talking to the cloud service appropriately from there this is the mqtt endpoint that Google has created MQTT Google API is calm and that's how it knows where to send the messages to and that's it for the cloud communication all right so then once we establish that cloud communication to GCP we're just going to be creating a JSON object that has as you guys can see a timestamp the temperature the sound and the light values from our sensors and we're getting the temperature the sound and the light values using those upm libraries that i mentioned earlier we're publishing this to our mqtt topic and we're doing this once a second basically continuously until we shut this script down and that's all that you really need in order to create the connection and then start sending data to GCP so that's it for the basics thanks everyone for joining us today and learning about Intel devices and starting to connect to Google's cloud platform with those devices tune in to our next webinar to learn about how the messages from pub/sub can be fed into Google's data pipeline to be analyzed and queried thanks everyone and we'll see you next time you you hey everybody welcome back to the Google Studios we're here live and I am deep in chef I'm at a Google cloud executive and you know Gabe from the webinar gaben and I are here to answer any questions you guys have I really appreciate you adding all those comments in the comments section and we have other ones that we've also gathered from folks so we're gonna go ahead and start with some Q&A sounds good so one of the questions was I built a prototype with an IOT device how can I share my ideas with the GCP developers and I'd love to get their opinions mm-hmm so the best way probably is to reach out there's a contact us so if you are on your console and GCP the hamburger menu up on the top left you drop it down there's a support item there and there's a link directly the community support and that will reach out to not just those of us at Google for the GCP developers but also our extended network the G DG's and just the greater community so there will be a lot of good feedback for your device there great that's a there's a really handy console in there the other question is is the code showing now available on github soon so it's not available on github yet I'm gonna put it up there on mine but there's code that's very similar to it on the IOT core Docs so if you go into cloud Google comm and click on the IOT core there's a section in there about MQTT client samples and the sample this there has essentially the code that we've been showing here amazing amazing work you guys are doing how much does it cost is a question that comes up often so it's actually free to start it's 250 megabytes is free and then from there it's a tiered pricing plan it's available online and you'll be able to see it the tiers online so once you log in we can you can also contact sales where there's a button down there to ask any other questions related to it so the biggie is that because it's serverless you're paying for what you use so you're basically paying for network traffic only yeah you mentioned that IOT core supports both MQTT and HTTP in the video which one should they use so it really depends on your use case broadly speaking what like my gut take on IOT in general use MQTT HTTP sends a lot of extra stuff along with the transmission all your headers and all of that so since you're paying for the amount of data that you transmit HTTP on the long term is going to cost you more it also because you're sending more data it's battery consumption the biggest killer of these devices is going to be network traffic so the more traffic you send the mote with quicker it's gonna drain your battery on these devices so MQTT is becoming basically the de facto standard in the industry so that's what we suggest right right so the other one is what kind of quality of service do you support for the MQTT protocol right so there there's three different levels of service for those that don't know about quality of service there's no guarantee that the message got sent so you just kind of fire it off into the internet and pray that it gets to where it needs to go there's guaranteed at least once and there's guaranteed once and only once so the levels that we support are that fire-and-forget level 0 and level 1 which is at least once we don't support level 2 which is the once and only once the performance hit on it isn't scaleable and it won't work well with IOT devices another question that just popped up thank you for asking the question do you have setup procedures for this as far as getting started with this no because it's a server list setup as long as you've got your GCP project set up you're basically good to go and that hamburger menu drop down all the way down there's IOT core listed and you should have it in the console and you can just get started right away creating your registry registering your devices like we described and away you go you shouldn't have to do anything more it should already be enabled it might be a good plug there's also subsequent webinars coming up to show you different levels of the IOT core platform right so this one in this webinar we covered the Intel hardware devices and how to get them talking to the GCP in that initial IOT core piece and then the next webinar coming up we're going to cover more information about pub/sub our messaging system and into bigquery which is it's going to be very cool and then the third one come after is going to be on machine learning so stay tuned for our next webinars coming up graduates we appreciate the comments and the feedback we're glad it helped I think the last question was very similar to the other one is what do I need to get started and if you just answered that so it's great anything else I think that's it so like we said stay tuned for the next webinars thank you everyone for tuning into this and we'll see you next time appreciate your time Thanks 