 so how do you form these interconnection networks so typically there are two kinds of interconnection networks one is static so in static interconnection networks what happens is that they are essentially formed by links these links connect up different nodes together for instance here is a simple example let's say that you have a four node system when I refer to a node I mean a processor plus memory unit and it's IO interface so now I connect these up and I basically put a link between every pair of the nodes okay this is one possible interconnection network that I've come up with everything is static over here right if X wants to send data to Y then it essentially uses this link this particular network is called a complete network it seems like quite a good network why because anybody can communicate with anybody right let's consider another network so suppose you have another network where this is the way the four nodes are connected so now if processor X wants to talk to processor Y what does it need to do it needs to first send the data to this processor then it is forwarded here and then finally it's forwarded here right so there are multiple hops that it has to traverse so it takes time for it to do that at each node certain processing has to be done to forward the data so in that sense the complete network seems better why because anybody can talk to anybody right so it won't take long it's not going to suffer a lot of latency right if I want to communicate with another processor so how do you measure the latency so what characteristic of this graph will tell you the latency how good or bad the network is with respect to communicating with somebody far away longest fat diameter okay there is nothing but the diameter of the graph so a complete network has a very small diameter a straight path has a long diameter so what is the diameter here it's three what is the diameter here this one right but which one is more scalable if I want to scale this up to thousand processors so the first one will become a pain if you want to build a complete network over 1000 thousand nodes hundred thousand nodes it is a nightmare you can't do it right it's not practical there is in this network of paths it's easy to make it but then it's not a great idea again because just imagine the first node wanting to talk to the last node it's going to take 100,000 steps for that message to hop away right so what are some of the more practical networks one common network that has been used is the mesh 2d mesh so what does the 2d mesh to so this is a good image okay off how many nodes 16 nodes all right so it's quite simple looks like a matrix right four by four four rows four column and every node is attached to its neighbor on the left on the right up and below except for the boundary nodes what is the diameter of this network let's talk in terms of n if I had n nodes in a root n by root n configuration which two nodes should I select to look at the diameter diagonally opposite right so this one and this one so it takes me root n minus 1 hops to reach this bottom node and then how many of root n minus 1 another root n minus 1 hops to blow from here to him like so let's not bother about the minus one so it's roughly about 2 root n that's the number of hops I have critics so simple trick that is used in practice to reduce the diameter so this architecture is called a 2d torus so what you do is you just add another wraparound link so the last node gets connected to the personal both horizontally and vertically boundary yeah there is no bungle now all nodes are treated equal right what is the diameter of this curve [Music] - if the person look at the two nodes which will take the longest time to communicate with each other the two nodes which took the longest time to communicate with each other in the case of 2d mesh are now very close to each other but that does not mean that these are the farthest nodes now who is the farthest I'll I'll fix one of the node because no node is special right because it's totally a symmetric network so let me fix one of the nodes let me fix this node which is the node furthest from this node 3 comma 3 halfway down halfway across and what will be the diameter in terms of n per round root n so you certainly half the diameter just by adding the wraparound that's not a huge cost wait yeah what is the number of links in a 2d mesh so the number of horizontal links I have is root n minus 1 times through 10 there are root n rows and he each row has root n minus 1 links right and the number of vertical links I have is the same so roughly this is about n right roughly about n this is also roughly about n so I had a total of about 2 n links and in the 2d torus what do I have so if I just look at one row how many links do I have in a row instead of root n minus 1 I have root n so it's root n into root n and root n into root n which is again about 2 n right there is just a difference of 2 root n as in protocol is the same number of links but I've got half the diameter let's do some simple tricks that I use to build these networks 2d torus is quite common in practice and in practical networks so there are different parameters that are used to gauge how good a network is right one of them is the diameter which basically tells you in some sense the latency how long is it going to take for a request to be serviced if it's paint from one node to another node right assuming the furgus nodes right so diameter basically tells us the latency another is the number of links right this in some sense determines the cost of the network right cost and also maybe how practical it is number of links as well as the degree of a node so what's the problem in a complete network right so if you have a complete network this is a complete network of five nodes so if you have let's say n nodes a complete network of n nodes what is the total number of Link's you would have NC - that's quite large is in particular n Square and the other problem is the degree what is the degree of every node n minus one just imagine every node if you have a hundred thousand nodes every node has 100 thousand links going out of it if you can't you can't even practically design such a system right so although I mean a complete network would be great in terms of designing algorithm but you don't have that flexibility right we cannot make such networks people have gone beyond 2d mesh 2d torus or 3d mesh 3d to us right that's quite common okay so you can imagine what the three-dimensional 3d tourism is okay same thing make it a cube and by N to the power 1 by 3 cousin the power 1 by 3 percent to the power 1 bit that could be the configuration and then you can put wraparound links also now wraparound links would be in three direction so each node would have 6 enabled okay so as you increase the dimension weight it starts becoming more and more dense there are benefits of that density means that the cost goes up because more links practically starts becoming more and more challenging with the diameter reduces latency reduces another important factor that we consider in a network is which data can I bump through the network so how do you exactly measure that so there is something called bisection bandwidth this is essentially the amount of data that you can pass through two halves of the system like I should say any two halves of the system so the maximum amount of data that you can pass through any two halves of the system so let's consider a network which is a straight path what is the maximum amount of data I can pass through two halves of the system so let me break it up into these two halves for here for here how much you takin a pass from any one half to the other half let's say that for the timing that the capacity of each link is one unit right so how many units can I pass at any given point of time from one half to the other half one unit two units in this case two units there are two edges right one is this edge and the other is this edge next I can pass two units if I didn't have the wraparound link then it would be one unit right okay what about a 2d mesh or let me just take a 2d torus right so what is the cut that divides it into two equal halves so let me just take a vertical cut you can try out other kinds of cuts okay but you will realize that this is the most binding so what do I want I want to find out what is the maximum amount of data that I can pass through any two halves of the system right so I want to find that cut which gives the minimum number of links because that would be the most restrictive let us consider this vertical cut so what is the total amount of data I can pass through this to Guru 10 okay and in a complete network so just consider a cut in the complete network right every node on the left-hand side is connected to every other node on the right-hand side so how many links going out of every node and by to going to the other side rate we are very interested in how many of them acrossing the cut n by two and how many nodes on the left-hand side n by two so there are n by two nodes each of them having n by two links going to the other side so the total number of Link's is n square by four so you can see right here you had two units you improved it to 2 root n by going to a 2d mesh 2d torus and then you improved it to order n square right by going to a complete network so these are the major factors that determine how great a network is rate how good a network is the latency which is the diameter the number of Link's which determines the cost and the degree also which determines how practical it is to build with a network and also the cost and the bisection bandwidth rate which determines how much data you can actually push through the network as I said rate there are two kinds of interconnection Network static and dynamic so what is the dynamic network a dynamic network has links and switches so what is the switch so a switch is essentially your device which has some input ports and some output ports and it has the capability of redirecting data from any of the input ports to output ports so simple to close to switch would look something like this it will have two inputs to outputs and then it would have logic inside of either sending them straight or switching them with the simplest kind of switch you can build the point here is that this is dynamic in nature because the paths are not established up front let us draw a simple Network which is switched right so you have four nodes and you have a switch sitting over here and all these nodes are connected to the switch and now when I send some data let us say X wants to communicate to Y what will happen it will sync data to the switch and there has to be some header in that data that I'm sending which tells the switch that I want to send this data to Y right so the switch will read that address from here that this is meant for y so I am supposed to send it to Y and it will dynamically set up a path and forward this data right so we won't get a whole lot deeper into interconnection networks or distributed memory system because we are going to focus more on shared memory systems and openmp okay so we'll stick to shared memory systems [Music] you [Music] 