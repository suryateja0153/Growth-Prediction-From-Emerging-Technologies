 Hey [Music] okay so we'll talk about randomized BST sort we have seen the BST sort and we have seen the relationship of BST sort and quicksort they have basically the same number of comparison they're doing so the time complexity of BS T's are the same as the time complexity of quicksort so we'll talk we'll see the the idea is to see the randomly built BST sort so so for that let us look at the randomized version of the BST sort randomized DST size so for this what we do so this is we can denote by nine BST so we have given in number they've given the array of n element we have given in numbers so how we can have a sorting algorithm so randomized based Ishod means before doing anything we just randomly permute this a so we will do that random permutation now we apply random permutation on this number and then we call that then we call the gearstick odd okay so basically we have in numbers we are given in numbers and we are just randomly permuted these numbers and then we are performing that we are building the tree DHT and then we are doing the inorder traversal okay so this is the randomized version of the BST sort so just we are doing the random permutation before we start before we form the BST so and that VST called randomly build BST so given n numbers before building the BST we just have a random permutation on this number linear formulation okay so then we form the BST and then we do the inorder traversal and then that will be done that will give us a sorting algorithm so this is referred to a randomized BST sort and this is same as the if we just look at consider the randomized quicksort in the randomized quicksort also what we are doing we are choosing the pivot element randomly and then we are partitioning into two parts okay so that means the time complexity of the BST sort we have seen the BST sort and the quick shot having same time complexity so the time complexity of the BST sort is same as time complexity of the is time complexity of randomized this VHT sorry same as time complexity of randomized quicksort so this pain the sign runtime runtime of randomized VST short MF runtime of randomized quicksort because in randomized quicksort we are choosing a pivot element randomly and then we are performing the partition and that will divide into two parts again we are choosing the Peapod in the search so it will divide into so what is in the randomized each subdivision array so what we are doing we are choosing the Peapod randomly so suppose this is our P to Q so we are choosing a element index K randomly and this is going to be our you want I am here partition this array into two parts X is sitting here like this so again we will call randomized quicksort on this randomized quicksort on this so again it will be choosing an element randomly from here so this is format tree and this tree is same as the randomly build bh3 because randomly will be estimates we have given some numbers we are doing that we have given phone number so this is the number you have given now we are doing a random permutation Ami's so there are how many permutation there are if there are n number there factorial information so among these we are choosing one permutation randomly so equally likely and then we are forming the tree so this is basically same as this randomized version of the quick shot so that is why their time complexity is said so now this is a randomized algorithm so we need to talk about the average case analysis so you take the expected value of this so expected runtime is famous expected runtime of random I squeeze shot now we know this expected runtime of randomized quick sort is order of n log n ok so now what is the runtime for BST sort ran time of BST service basically the time it required to form the tree DST insert so this is basically summation of depth of it right so this is basically oh we can fit Big O or big theta n log n ok so now we take the same so expected so this is basically 1 by n so this is giving us order of log in so this is basically average average depth okay so this is basically average dip so this is the signally average depth expected on it average depth of a randomly build BST is basically order of log actually our our goal is to know the expected height of this randomly build EST and that is going to be thou we have to show that is basically the log in so expected height so expected height of this be randomly build VSD randomly build the esteem is we just perform a random random permutation on these numbers and then we form the BST and magic that it will be expected it will be a balanced tree usually the tree is not balanced depending on the input suppose input is say SWAT it they say three five six nine ten eleven so for this input if we form the tree it is not balanced it is just like this now the magic is if you do a random permutation on this and then after that if you form the BHT that is what is called randomly build BST and that will be expected balance stream so the height expected height of that tree is log in so that we are going to establish so for that we need to bring the this randomized version of this BST sword and the comparison between the quicksort they are same but all these things we are doing to establish that if we have if we have the randomized randomly build BST that is expected that will be the balanced tree okay I mean on average we expected so this is the average case analysis so that we are going to show now so far what we get we get the average depth of a randomly build BHT is login so does it mean the height will be log in is the average depth is log in so let us see if we can have a tree wherever is depth is log in but the height is not long in height what is the height of a tree height above the tree is the maximum depth of the tree that is the height of the tree so this does not mean the height is log in so what is the example let us take an example where an average depth of the tree is log in but the height is not log in okay [Applause] suppose we have a tree like this so almost almost all the parts it is balance okay except some branch okay I am suppose this is the signal if this branch is root over off in and suppose remaining are remaining all the element of balance log in I mean so only we have one branch which is more so now although all our other elements are like this so only one band so what is the average stepped over here average depth is less than equal to 1 by n into n log n so there are n elements which are height log in and there are root over of n element which are a high height root over of N by 2 sort of and this is basically logging so average depth is log in but the height of this tree is root over of the height of the tree is not logging so even the average depth is log n height may not be log in by seeing this example but in in this I mean randomly will be a skew you have to prove that the expected height is log n so that means that little mathematics to prove that so let us try that okay so let us try to prove that randomly build BST expected height is log in so that means we have given some input we just do a random permutation on it you supply random permutation in then we form the tree BST and then expected that base T will be a balanced tree okay so let us try to prove that so this is the height of a randomly built BST and this is expected value of this if login so this analysis will do okay so this is the outline of this analysis we are going to show this expected value of this F analysis what is outline so outline is basically we first two where Johnson inequality gentle or we can use this this is about the convex function what it is telling it is telling expected value of or f of F is a convex in foot that is expected value of this is less than equal to G of f of X okay so this is basically where a fix is a convex function so we'll prove this from the function and we will defend it on next function this is the first first part of the analysis so we have to so for any function f which is a convex function for that function f of G of X expected value of x is basically a and F will be exchanged less than equal to a of f of X and X is a random variable okay okay then so we analyze the exponential height of this exponential height of a randomly build BST so that is basically we denote by Y n yn will be 2 to the power X n where X n is the height of a randomly will be HT expand X n is the height of a randomly will be HT with n elements so xn is the height of a randomly will be a scale with n element when we define we are we are taking the exponential height so we define yn to be 2 to the power X M and that will help us to grade the expression and then in the next step in the final step we prove that we prove that to to the par expectation of xn the stupid the / X is a convex function is basically so we will use this Johnson Jensen inequality is basically expectation of 2 to the per action which is basically why in we prove this yn to be order of n cube if we can show this then this implies expected value of the height is basically order of log in this we have to establish finally to establish this we first prove expected value of yn is order of n cube if we can prove that then by using the Johnson immunity we can say 2 to the power expected value of xn is less than equal to expected value of 2 to the power X n because this 2 to the power X is a convex function and then this is the sigil a our yl and if we can show this yn is bounded by n cube then this is telling us expected value of xn is log in so that means it is a balanced trip ok so this is the outline of the proof outline of the analysis now let us talk about the Johnson inequality so for that it is defined what is the convex function okay so convex function to the paroxysm convex function and for convex function we are using that Johnson inequality the theorem so if function if format to our real number set to real number is convex function this is the definition is convex if for all alpha beta greater than zero such that alpha plus B times 1 then we have F of Alpha X plus beta Y is less than equal to alpha F X plus beta F Y okay where for all X Y belongs to R so this is the definition of convex function a real valid function f is called convex function if for given alpha beta if for all alpha beta greater than zero such that their sum is 1 we have this so like if we have examples so if we have this function this function is convex so if you take two point x and y ok so now this is basically so if we take alpha Alpha X plus beta Y alpha beta is 1 so this is this point is basically here I Phi X plus theta Y so this point if we take the value of this function and and this is the if we take this state line and this is basically alpha FX plus B times 1 so this is basically should be less than and this is basically F of Alpha X plus beta Y so the curve is like this so this must be less than this value so curve will be like this so this type of function is called complex function so if you take any two point and curve so if you take any two point XY and if you take any other point then it is the all the point inside must be inside of that curve so this type of function is convex function and the Johnson inequality is telling and e to the power X can be shown to be convex function and the lemma which is the general inequality this is telling us expected if we have a convex function f then the expected value of so f of expected value of x is less than equal to G of f of X so how to prove that okay so to prove that we have to use this lemma what is this so let F be a convex function if be a convex function and then we have a fit alpha one so this is the generalized fashion alpha on alpha in there we have alpha beta but if you have M elements first back summation of alpha is equal to M okay then if we have the point x1 x2 XM is the generalized version of the which we have seen for two points this is the end points then f of this force can be extended by using the earlier on F of summation of alpha ixi this less than equal to and this can extend for infinity also provided this sum is absolute convergent summation of summation of alpha-i f of X I so this is from 1 to N and this is for 1 to n so this can be proved by so this is basically giving us this now if X is a discrete random variable if X is a discrete random variable with this points then this is nothing but and these are the points and this is the probability then this is basically expectation so this is basically f of expectation of X is less than equal to summation of this is the probability and this is so this is basically expectation of a phobic is the definition so this is basically our Johnson inequality and this is true for discrete random variable okay so this is the proof for Johnson and we are not this this this can prove using the induction so we are not going to the details of this proof now let us go to the height analysis and there will use this james and inequality for 2 to the power x case ok so analysis of DHT hi randomly will be st right okay okay so we have taken xn to this height of the office randomly will be st with n element with ll 1 so we have given an array of n elements so what we are doing with the spar wording these are a randomly and then we are following the BST and xn is the height of that BST after pol mooting and following the based Hagia bad BST and we are taking yn to build two to the FIR extents and our goal is to if you recall the outline of the our goal is to so that expected value of yn is equal to order of n cube ok so now now what is the proof now suppose so xn suppose this is the we are forming the BST is now we do not know that we are doing the random permutation we do not know that which will be the root we have given in number we have given in numbers and we are just permitting it so we do not know the which one will be the root so we do not know the rank of the root suppose drag if the rank of the root is K and that is also a random way will let K be da event of the root that means the position of that element in the sorted array of the root then xn can be written as what xn is basically 1 slash maximum of this X K minus 1 comma X n minus K because root is sitting here so height is basically so we do not know so if the rank of this is K then we know how many elements are there how many there are K minus 1 elements and there are n minus K elements over here because rank is K so that means so the height of this tree will be we do not know which is maximum which is minimum height of this tree will be 1 plus maximum of height of this is K XK minus 1 and height of this X n minus K so this is okay so now we will take the Y so so so yn will be what so from here we can say Y and will be 2 to the power of X n so 2 of max of X n so again it will be 2 to the power of that so max of Y K minus 1 comma Y n minus K okay so this is of the form now we will take the help of indicator random variable so we define J 10 K is 1 if the rank of route is if the root hat Frankie otherwise it is 0 okay then the probability so these are equally likely probability of this is 1 by n so the expected value of J and J is basically 1 by n okay and so yn will be basically any one of this because rank is K so k can take values 1 2 n we do not know which k will occur so yn is basically summation of j 10 CF into this expression to of max of Y K minus one from up Y in minus K so this type of analysis we did ok so this is our y n so this K is false 1 to N now we take the expectation both sides so expectation is a linear function expected value of this and this now again if we take the independent layers of these two so this will give us expectation of J and K into X 2 will come out here so K is 1 to n expectation of max of Y n K comma Y this one ok so let us just give this so these we want to further simplify okay so now this is basically max of this so max of two number is less than equal to sum up their number so this is basically so expectation of Y or n can be written as two off so expectation of this is 1 by n so 2 by n and this is basically expectation of summation summation expectation of Y K Y n minus K because max of a B is less than equal to so this must be less than okay M this wave of 1 to N and this is basically 4 by n summation of expectation of Y K and this K is now having from 0 to n minus 1 because this term is coming twice so this is the expression we got so how we can further simplify this so this is basically we prove this with the help of substitution method so what we are expecting we are showing that we want to show the expected value of yn is order of n cube so this is our goal to achieve so that means expected value of yn is less than equal to C and T this is this way I want to show by the ease of substitution error so for this we are taking the induction hypothesis ckq for all J less than n this is the induction hypothesis this table now we put it here so this will give us less than equal to 4 by n summation of PK cube K is equal to 0 to n minus 1 by that induction hypothesis step now this we can again using the integration for Cyn so this will be less than of this integration 0 to n improper integral X cubed DX now this if you simplify this will give us 4 C by n into n 4 by 4 so this is basically giving us C n cube C empty so that with expected value of yn is less than C and Q so by the substitution method we can say that by the method of induction or substitution method we can say this is true now once this is true then the expected value of so so how do you establish we establish that the expected value of yn is order of n cube this year proved using the substitution method so now we take that 2 to the power expectation of yn which is basically less than equal to expectation of 2 to the power sorry xn and this is the by Jensen inequality so this is basically expectation of yn and this will be Sigma the order of n 2 so from here we can say expected value of xn e order of so order of n cube so expected value of y xn is basically order of a less than equal order of log n okay so listen we can is the less than less than equal to C and Q then we take the log both side then it will give us 3 log n so it will be order of log n so that is the expected height of the randomly built binary search tree is height is log n so it is balanced so expected it is balanced but the worst case is always like this so much case is always like this because it happen that we are doing the random permutation the random permutation will give us the sorted array or even sorted array so once we form the tree it will be the like these shorties so the worst case is always quality height but average case is expected runt the expected height is log n so that is the average case analysis so in the next class we will discuss how we can guarantee that that we have a balanced tree no no randomization so guaranteed balanced tree so they are called balanced tree then like red black tree b3 a real tree so we will talk about it black in the next class thank you 