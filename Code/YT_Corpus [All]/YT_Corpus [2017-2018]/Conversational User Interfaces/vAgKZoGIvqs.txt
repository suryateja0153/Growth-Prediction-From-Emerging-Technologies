 [Music] hello everyone how's it going oh okay so this session is going to be a little bit different right you should have to introduce ourselves I'm Paul he's Jake we work in dev rel yes now we've been doing web stuff for a while and it still manages to surprises so we've written a quiz that explores the weird and wonderful corners of the web but we're also going to dig into the answers and hopefully explain parts of web platform in the way that will help you with your projects and let you build faster more reliable progressive web apps and of course the quiz itself is a PWA so prepare yourselves get your smartphone tablet or laptop to the ready because we're going to play the big web quiz Paul did spend three hours making that one intro in after-effects by the way so more like six will ever worth every minute so if you want to play along and you should because it's basically the whole point of this session get yourself down to big web quiz dot-com and log in with your Google accounts and of course this is the part where we panic about the server falling down it's ok though we did test it at chrome dev summit yes and the server fell down yes it did but I think we fixed that and with a little bit of look it should be ok yeah you should but then your laptop's screwed up on this stage watch last year my laptop broke but that's a new laptop now in fact it's the first time I've ever presented from it probably tested laptop is what your celly going to be fine as everyone being able to get logged in is that sort of thing working yes or rooms up oh we're winning tracker on dev summit that's it so Larry I mean obviously last time we did it people were just shaking their heads to me like what do we do now with atomic the tablet have a climb panic ok anyway we're going to show the top players at the end of the game and at some points throughout but we only want to do that with your permission no if you want to appear on the leaderboard click on your avatar and click up here on leaderboard yeah so if you phoned in sick so you could come here instead an opt-in because your massive space appearing on this screen might give things away a little bit you know oh of course no quiz is complete without a grand prize yeah unfortunately unfortunately the organizers of Google i/o told us we weren't allowed to get have our own giveaway but we came up with a compromise yeah we said what if what if our prize was of such low quality that winning it would kind of feel like losing yes I mean if you play the big web quiz opt-in to the leaderboard and use your esoteric web knowledge to make it into the top three you will become the proud owner of the official big web quiz mousepad oh yeah I think we all know he's enjoying that we've been asked to make it clear you only get the mousepad Paul Irish is sold separately so if you are watching this on the livestream hello but yeah and feel free to play along as well you can't win the mousepad unfortunately and there's a delay right here's the live stream yeah about 30 seconds behind reality so you need to watch that the questions appearing on your device as the question may and before the video makes its way to you yeah so in fact if you're watching this on the live stream now we've probably started the first question already because we're going to be doing that in 30 seconds and you are living in the future right now that polis is having my head ever done saying which to confuse you really so we do a practice question make sure everything's working yes let's see if this works let's give it a go so device is at the ready here comes the first question what does PWA stands for is it progressive Weber produced with angular largely wheeled automobile or perfectly waterproof anorak now there is an iraqis are words as a two-bit account it we make the right answer yeah the question should if Arif he's working to be appearing on your phones now so pick the answer that you think is correct and hit submit very important that you hit submit and while you do now let's see how the results are looking so what we're seeing here is the percentage of you picking each answer however neatly the order is randomized dependent you know compared to your device's it may not be in the same order yes but we can see that you're all converging on one particular answer wonder which one that might be whoever as we close the question we're closing the question in three two one there it is oh okay so so only alas reduce if angular that's interesting perfectly waterproof that erect obviously somebody hasn't really thought about it okay in possession yet the correct answer is of course progressive web apps yes and so we didn't what points for that question since it's just for a bit of a practice but one thing we do want to stress is that you have to hit that submit button once you pick your answer else we don't find out about it it turned out that during the rehearsal some of our colleagues didn't realize that and they scored the zero point yes and in through web fashion like rather than fix the problem properly we thought we just sort of Gaffa tape over it with this slide and just tell you just make sure you press down and read the instructions hmm so everybody knows what they're doing so we're going to let's get serious now I think yes from now on each question will award a maximum of four points yeah that's nice rather than originate power so very happy with that right okay so we're going to kick everything off of a deep dive into loading stuff because if you want to build a successful progressive web app you need to minimize the time from the user clicking a link and then actually having your app on the screen and being able to use it yeah now this is the difference between a fast app and a slow app of course mmm yes so ideally progressive web app should load bit by bit so might say progressively mmm however some loading techniques get in the way of pausing and painting and that can result in the browser's like downloading loads of stuff but being unable to show up in any of it to the user and then once everything's downloaded but ours is this big reveal absolutely and that's bad for the user because their last staring at a white screen wondering stop downloading whether their connection is hung whereas a progressive render improves the perception of performance because things can start appearing much sooner yeah and internally this is good as well because the browser can create these elements as the HTML downloads which is much faster than doing like all of the download as once that's been doing all of the parsing is a completely separate step and that brings us to our next question is so devices at the ready here it comes which of the following script elements blocks the parser while the script downloads and have a normal script tag there we've got a script with defer a script with async and descriptive async equals box now this is a little different to the last one because you can select all answers that you think are true and you're going to get points for the answers that you selected turn out to be true and points for not selecting the ones that are false yeah it's actually simple event sounds on this gig you get four points for getting it fully right you got two points if you get it half right yeah and they might be all of them I mean on of them might be somewhere in the middle also you can submit as many times as you want so you change your mind at the last second you can do that just make sure you hit the submit okay let's look at the voting so where you'll get faster than this let's see how things are going okay so already we're going to kind of spread of answers right to that you're pretty confident on to that you're less confident on you've had enough time to guess so if you haven't guessed already yes but we're going to lock the question fluttery do one more okay so what we've seen here we're thinking a normal script element blocks the parser and we're also thinking that async people's false one is going to do the same interesting the correct answer it's just that one just the normal square some happy people there's some less happy people prefer so yes hello it was just a multi-select it was only only one of them that was actually grain scripts are awful by default they block parsing while they download and execute to certain async scripts on the other hand they do not block the part of while a download the difference between the two is when they execute the third scripts execute once parsing is complete and they always execute in the order that the HTML parser discovers them ating scripts on the other hand they execute as soon as they download and that means they can run in a different order and even though async equals false was in the list of options for that last question now it doesn't do anything the browser ignores the attribute value completely yeah so we'll basically saying is a C equals false is true Jaya absolutely adore geldan web that is true and that's true of most HTML stuff like boolean attributes the writer there or not at the exceptions area where you can actually set things to be false whose true story so let's talk about which one of these that you know when to use the right one which one is best okay so having the scripts execute in any order is probably risky because if you've got say five async scripts you've got a 120 different permutations of execution order and so if your scripts rely on one another you one of them causes failure then you don't know where you're at that's a tricky bug to reproduce in to solve yeah the first scripts are better in this regard because they run at a predictable time and in the predictable order but if you've got this kind of like a really long article and your script is to enhance a button that's at the very top of the page it's a big waste of time to be waiting for the whole page to download just to enhance that little button at the top there absolutely so JavaScript execution is always going to block the plaza and other JavaScript so async script could actually cause join your page load if they're big or complex and they just arrive during the middle of your page load so so the answer really is it it depends yes really it depends test it and do whatever gives the best user experience turns out tools not rules is probably a good guiding principle here tools not rules oh we should have said at the end of this session big web quiz com will show a set of links so resources and documentation for the things that we've been talking about in case you don't believe it or you want to learn more about a particular area okay so we've been discussing these scripts here but they're kind of they're all they've been around for years but there is a new way to load JavaScript and scripts can be loaded as echo script modules and it's this type equals module thing that makes it a bit different module scripts can be external resources using the source attribute like this or they can be in line like normal scripts the exciting thing you can do with modules is use these import statements to dynamically load scripts and this is actually supported in Safari in the stable version right now but it's also behind a flag in Chrome Firefox and edge but once it low and lands in all of that browsers I think it's definitely the best way to load script it seems good really cool so on that note here comes a really cruel question device is already here we go according to the specification which of the following scripts execute first because voice thank you I've been practicing it backstage in my hotel room has been very awkward right here we are type equals module type equals module with something inline defer with something in line and then standard-issue script there but with determine which one executes first let's see what you're saying so far okay so it's kind of is a bit of a debate around two of the answers well it isn't the answer system yeah and it's put it fairly if you haven't guessed already get a guess in there's no harm in guessing because we are going to close the question three long bugs so what I'm saying here some people think script one is going to execute first which will make sense in terms of numbers it's the first number I like that's probably how we actually write our questions some people thinking script C which isn't the first name but now there you go thank you for magic the the answer though it is script 300 yes someone is very happy at the front there okay here's why that is like I said before the way scripts lock execution by default while it downloads that was a bad design a real design mistake so module scripts have a different default they are deferred but the same also goes for inline module script and this is actually pretty new because regular inline scripts cannot be deferred so in this case the attribute is totally ignored making it just a normal script which execute immediately so its first you can also use async as well on module scripts and this causes it to execute as soon as all of its imports have downloaded now fetching stuff from the network quickly is important but not having to search it at all is even better so we're going to take ourselves a dive into some caching stuff and there are two basic types of cache uses that we're interested in here when the page fetch is something it's going to start by looking for a match in the HTTP cache sometimes the thing it finds need validating with the server so it makes a connection and says hey I've got this thing already it's this old and it's this sheet and the server can either say no no no no no don't use that here's a newer version or it sends back a timely message saying yeah you're good to use what you've got now if that happens the cache turns what it has back to the page sometimes however the browser makes the fetch it finds a result in the HTTP cache but this time it doesn't need validation with the server so it just goes ahead and uses it it doesn't even ask the server that's all and that is faster right especially for small assets we're like just making the request making that connection is the majority of the work the primary way to tell the browser how it should use the cache is the cache control response header which takes a variety of value has a variety but do you know what they are and what they do because we didn't know we did not but let's find out if you do device that they're ready here comes the next question so this one what does that what does that header what does that header as a response header tell the browser to do does it say don't put this in the cache does it mean cache it but you can only use it at the server validation what does it mean cache it and you can use it without server validation for 31 million 536,000 seconds which is a year yeah let's look at the loading here we go oh I love it when this happens and it would be 50 on two of the things I think some happy some sad some confused definitely one answer people are thinking it's definitely not so we lock it in yeah three guessing if you haven't already two three three three seven twenty eight forty to lock it lock it in okay okay okay so you're saying catch it where you can mute it after a server validation or you catch it and music without service validation some of you are saying the answer of course it is you can use it without server validation I don't know what may some of you think most revalidate means it must revalidate yeah that would be weird in fact it does mean that the browser must be valet wants the max-age expires if the browser has a copy of the resource that's under that age it can feel free to use it without checking in with the server okay what about this one what does same caching headers long time except that the no cache we use no caches that are must be validate saying that same poem answers same question just must be validated be requested no cash okay let's have a look at the voting easy right that obviously also once again we've got a sort of 50/50 situation we pick two of them over one of them is winning that's good seeing a lot of concentrating faces in the audience which makes me very happy on the inside guessing if you haven't already we are closing the question in three two one right okay for saying no cash would mean do not put this in the cash the answer is cash it you can all use a validation I don't know what made some of you think no cash means no cash yeah yeah no cash is shorthand for most revalidate max-age zero so the additional max-age we have there is just ignored no cash means the browser may use the cash but it must check with the server first we do know do not know why they are named like this it's like they had a lot of features and some good names for them and then they put them in a bag and pick them out at random and then these are the hardest problems in computer science are cache invalidation and naming things and this happens to involve naming things to do with cache invalidation they were destined to fail so let's have a chat about what we should typically do here then yeah well like we said it's best to avoid a request if possible so for sub resources tweet your content is immutable give it a unique URL that never changes like happier cat 4 into 2 whatever and let that cache for as long as you can which is a year so if you wanted to update this resource you would need to change its URL there are lots of build system tools that can help with this one of which is web pack but you know rails in ruined - though jangle they all have their own a Balenciaga but not all your content is going to be immutable for example page like about Azure pretty much anything that the user is going to visit directly in this case it's usually best to use no cache and that means that the browser will always check in with the server first however the page contains like really private data you can tell the browser not to store it at all using no store which is actually known quite well it kind of came out of the bag at the right time who knows at all let's look I get it although if you've given like an untrustworthy person or piece of software the access they need to read your browser cache then you kind of have bigger problems some people will say it's just paranoia doing a no saw but there is another caching pattern that we do see quite a lot around the web and it does lead to some pretty weird behaviors because sometimes want the benefit of avoiding going to the network but they haven't set up their build system to generate unique URLs so they go with regular URLs like script j s and they expect the content to change over time meaning they don't want to cache it for a year but they take a guess and they kinda go oh how does house a couple of hours sound two hours such like a good compromise but it really isn't it's a really pad compromising we see this everywhere like a lot of static services as well don't do this here's why let's say you're serving some HTML CSS and JavaScript and you're telling it to cache for two hours use a visitor site and that means they they download a lot right and they end up with those resources in their cache and on their page so so far so good yeah it's all working but let's say an hour later you update your HTML CSS and JavaScript so they're version 2 now but you don't change the URLs meanwhile users browsing around the web and the browser just decides I've had enough of those two and it's going to remove the HTML and the JavaScript on the cache and maybe you're thinking why would the browser ever do that but the browser can remove whatever it wants from the cache whenever it wants to maybe it just wanted some space back yeah and also because these assets have a max age and that's from the point they're downloaded you can get them out of think they can expire it at different points so now the user returns to the site they'll get the CSS from the cache because it's still within the two hours but the other assets they are going to come from the network yesin a you got version two of your HTML in your JavaScript but you still on version 1 of your CSS you know there is all of that it could be fine you could get away with it maybe or you could end up with a lot of broken and styled stuff up here I think it's a big gamble and it's going to be very very hard to figure out why I should break so don't do that if you can avoid it instead either use no cash or immutable resources with a year of caching so so far we've covered piles of blocking and caching but another part of page load is timing now some results of starts downloading pretty late and the performance can suffer as a result the most common one that we see is web fonts I would say yeah and fonts are defined in your CSS including how to download them and where to use them so what's the browser has downloaded to your CSS it performs a recalc to apply all those styles to the page and at this point it discovers that it needs a web font for one or more of those paragraphs on your page so we began stretching it meanwhile the browser lays out the page and paints it but this paint is going to be missing the text that leaves the web font oh yeah we've all seen this I'm also they're going really really really I just wanted to read it and is pretty frustrating right but once the the font has downloaded the browser performs layer again and prints the page this time with the text using the web font so as you can tell this isn't really optimally on the font starts downloading so late and the result of it is the user is left without content well they actually have the content on their device if the browser's refusing to download it using to paint over here now you can improve things a lot using link rel preload and with this in the head of your document you're telling the browser that you need the resource is part of loading the page so that means the download can happen in parallel with the CSS right so now you can see here the time between the CSS download and the font download is massively reduced and that means the user gets content quicker now when you use link rel preload the response is actually stored in a special preload cache hmm until the browser needs it so yeah we've got the preload cache we've got the HTTP cache but there is another in a TP to the browser can like ask the server for something and the server can say yeah sure here it is but also here's some other stuff that I think you might need it sends this is called HTTP to push the server sends down that an additional response and the information the browser need to know for when it can use those responses thing is this cache they end up it a completely different cache from the other two which brings us to our next question devices at the ready which cache does the browser check first is it the HTTP - push - the preload cache or the HTTP cache it's the chrome it's not one I knew until talking to the networking team archiving I think this is very girls what we're seeing here is it well as one answer people are colored I wrote any of those orders getting legislators confidence is waning Jake's going case definitely take the gated you haven't already make sure you hit that submit button we're going to close in the question three to one all the ATB cash is winning that long popular and so popular among Googlers I think to remember when we did rehearsal and just like the Googlers wrong wrong the correct answer is livre loCash absolutely as you can see some of these questions are deliberately obscure so really do not feel bad if you're getting them wrong like we said late Googler who's in one of our rehearsals in which case you should feel although Google's are fired by the way so they don't work here anymore in fact if you do end up with a top score it probably means you didn't learn a lot from this talk so you kind of wasted your time being here to be honest unless you win the mouse club unless you win the mousepad a desirable prize and glad they didn't applaud that because that would have been good because this is fun so yeah free cash is in play here and it is pretty complicated but knowing this stuff can help prevent a loads of kind of weird HKC bugs so when your page contains a preload element the browser fetches it as normal through the HTTP cache potentially to the server and it ends up in this memory cache that sits alongside the page so the things to note from this is like your preloaded stuff may come from the HTTP cache but also since the preload cache sits with the page other pages will not use it they may have their own preload caches but one page won't use another pages preload cache yeah some is it's pointless to use link rel preload of try and pretty little things for another page maybe the next page because our page is going to have its own preload cache the HTTP to cache on the other hand it sits with the connection and that makes it pretty different to preload because two pages can share an HTTP connection so they can share the same cush cache things you push intended for one page may end up being consumed by another yeah it's pretty complicated in it and also because the server initiates the push you could be pushing something user already has in their cache the spectres say that browsers can send a message to the server saying no stopper I've already got it but no browser does this yet so the answer to the actual question the question that we ask the browser takes the preload cache first then the HTTP cache and then the push cache yes especially that's put it so I said it is good thing to keep in mind it is a bit out there but at the same time if you do find you've got weird behaviors that it's good to know where to start looking mmm yeah I think hsv-2 Bush is dead powerful but it's pretty low level and in many cases link rel preload is a simpler more reliable solution and it definitely seems to catch people out less and dev tools are much more helpful when things are going wrong absolutely so those are now working round if you like complete so you take a look at our leaderboard yes we shall let's see how you're doing oh hey aya one person delayed in the moment and drain first of 20 points that's pretty good but we're only halfway through absolutely half so if you've been playing this quiz and you're competing with colleagues and you're thinking well they know plenty of network stuff and they're gone unfair advantage well hold on because the thing is CSS and rendering that might be your thing and that's your time to shine hmm because indeed let's talk a little bit about rendering ya animations are important in communicating parts of your UI to the user and they also doesn't look really cool we have a lot of fun with animations so far here right but a badly performing animation can be really jarring often worse than no animation at all in our modern browsers have an animation of Trance class known as compositing and this means that the browser takes a particular element and it temporarily isolates it into its own layer if the conditions are correct the browser does it automatically for an animation the cinemas minimizes the impact of the animation as the browser doesn't have to keep repainting the same behind at the element that's actually doing the animation and at the end of the animation it can merge down or flatten that content back with the other content on the page but that's all said the conditions need to be correct for this to happen is so devices out there ready here comes a question we're animating a circle in an SVG which of the following animations will be automatically composited in so the Sensex syntax and transform transform or opacity and you can select I believe all apply I need to get in on though you know I think I like your quiz voice I'll give it a go on an expert on how are you voting now ok cool wrong feelings about kind of three of them less confident with one of them okay getting if you haven't already we're going to close the question in three two one okay so we're sort of saying we've got a transform there so yeah they're actually in transform hmm the correct answer it's not a none of them crew yeah I know I know yeah for implementation and legacy reasons in chrome today and I think it's fair to say we'd love to see this change compositing never happens for elements inside of an SVG element use an out-of-date emoji therefore that's not on-brand or good this means your animations are going to paint as a flat single layer every frame yeah and in case you're wondering Ejim Firefox do currently support composited SVG's but Safari 10.1 like chrome does not but the good news is it is it something that we are looking at and we'll post a link to the chrome bug at the end of the quiz so you'll see in the resources on your devices okay so that's SVG now let's talk about your standard issue Dom you know you're not a 3d know we are animating in div which of the following animations can be automatically composited 3:7 visit margin left within transform transform or a tepee can I commend you on your quiz would I really like that based on a and the guy from the weakest link in doubt in the UK let's take a look at the voting simulator the kind of fields the last time I'd say people are holding on to their previous answers that seems switch will that take off for the piece if the balls plane yes we play it three two one and we're closing really our repeat ratings look at the whip and transform a pasty and transform the margin left less confident on the correct answers of course breviary right as a room that all sounds a good show yeah there any animation that transitions on opacity or transform yeah and if you declare the animation upfront using CSS and transitions or keyframe animations the browser can probably move the whole thing away from the main thread yeah and if that happens the animation can continue jank-free even if the main thread is busy however an element that's composited and declaratively animated may still have a frame-by-frame dependency on the main thread absolutely now that correct answer of with two seconds transform two seconds is one of these now sure the animate the element is going to get sewn layer if you animate transform that is absolutely true but if you animate which even if you make something have its own layer you will trigger recalc style layout and paint per frame and these are all main thread bound pieces of work yeah and that's it's true that things are getting faster in terms of layout and paint or at least phones are getting faster trying to do layout and paint per frame it's not normally 60 frames a second fast on a smartphone in fact layout is scoped to the Dom so the bigger the document you have it the longer it tends to take another two ways that's not the kind of thing you typically want from an animation known it's the most performant solution here is the six of transforms and epatha see and animate only those properties yes so just because an element has its own layer doesn't mean that it's safe to start animating properties like left or margin or something like that okay let's whip this up a little bit let's let's switch to some event based animation of JavaScript in there as well like they're ready your favorite yes I really enjoyed this one here comes the next question you have an element with no transform and the following code according to the HTML specification what happens next all right talk me through the code here what's goin on we've got a click on click there's a transform which translate X 200 pixels which on a transition on transform and then we said the transform so 100 pixels let's slide to the right let's slide to the left they do the Macarena was it snap to 100 pixels see how people are voting you we've got some strong opinions as one answer there are there people what's in something here is this two answers that are unpopular and I for one would have been significantly less popular turns out not okay yeah I guess in if you have already hit submit we are closing the question three on my field in interesting some people do think it just a macron are happening and right i don't really seem to think that's a lot of people who have clearly just given up on the quiz I don't know fairy I don't know what to say folks we put it this way one of the highest scores we got when we did this in rehearsal was our design advocate and he was just like I'm just I'm just picking random guesses again you got one I don't even know anymore very good the correct answer of course when it appears on the screen I sit slide to the right now Paul I did maths at school and I was led to believe that 200 is a bigger number than 100 therefore moving from 200 to 100 would be to the left and while I agree with you you did just say man and I think here probably be math I don't know I don't mat Exodia breviary is math is my strong opinion but you know what America I could live with it I could live with it but then you took that s that you saved and you put it on the end of Lego ooh Lego the toy is Lego Legos is an island off the coast of Spain probably I don't know I'm not a geography shall we be sure let's move on before we trigger an infomercial if the group doesn't like that thing good ok so why does this lie to the right then what's going on because browsers try and reduce their workload and the HTML spec accounts by saying that the task is queue to run event tall backs and the end of the current task the rendering class begins and this is where the browser takes stock of any style changes now about by that point that translate X 200 pixels has been overwritten by the translate X 100 pixels so as far as the browser's concerns the animation should be from no transform at all to 100 pixels and that means when the frame is ship can slide to the right so as other the Dom layer sees a set the transform to 200 pixels we overwrite that value before the style system in the browser that takes any note of it yeah exactly so what we need to do if we wanted to slide from the right to the left is to make sure that 200 pixel transform kinda takes hold before we overwrite it to 100 so with that in mind click on the next question you have an element with no transform and the following up the same question really some questions but the difference is we have that final transform wrapped inside a request animation frame does it fly to the right does it slide to the left does it snaps 100 pixels or does it gain sentience and feel only sadness basically web development let's see how you are voting or less sure this time dividing the room except for one particular answer wonder which one that is you get a guess in if you haven't already we are closing the question three to one what we're seeing here kind of pretty much equal guessing among that that tends to happen with this quiz about this point people just kind of it all just spreads out evenly among the non ridiculous answers okay correct answer though is once again it slides to the right what better what yes why yeah tell me because he's moving okay because we you said the transform to 200 pixels and you maybe talk a we waited a frame and then we set it to 100 pixels surely it took hold you know we got the tuner pixels to tickles and then we animated like that's what you'd expect but no the HTML spec says once again things should be a little bit different to that mean yeah so famous before our event callback runs as part of the task and then we get to the rendering bits of the event loop and that involves running any requested animation callbacks and then the browser thinks about styles and such and doing the actual painting because animation callbacks happened before style recalculation the net result is exactly the same before right we override the value before the style system sees it okay so let's talk about what we could do then if we wanted to solve this now one fix that we could apply here we do not call requestanimationframe one so now but in fact call it twice let's take that in enjoy that now if you request an animation callback while the browser is running an animation callback then those will run in the next turn around the event loop mmm after spell recut which would mean that you've definitely got something at 200 pixels before transforming it to 100 pixel the downside here is that you've got ridiculous looking code and there it would be an extra frame before the animation starts and in fact in Safari you'd actually wait two frames because they don't follow the spec so they do follow what I think was our expectation yeah initially before chrome was buggy in this case we were already to the spec I'd like to see our bug and everything really and then oh no perhaps you don't want to do this kind of ridiculous double wrapping instead you want to force that style recalculation to happen synchronously so the star system sees that 200 pixel transform before you change it to 100 pixels shall we have a question on that yes here we go what could go in here all right here we mean wizard answer to force a synchronous update in chrome 57 get bounding client rekt offset with get computed style in a text like all that apply our multi select one let's see how people are voting okay so a confident army one of them unsure about two of them freezer and one of them isn't seems to be all the rumors say ok so far though it's kind of rising we are going to close the question in a couple of seconds so take a guess if you haven't already make sure you hit the submit button closed in three two one and it's done get computers now they're being the most popular of all the answers interesting it softly rekt answer hmm what is it it is everything but get computed style we knew we didn't all I didn't you did here's why so the professor starts off knowing the styles and layout of every element and you know because they needed to know all of that stuff in order to draw what you saw the frame before but then we said translate X to 200 pixels mean the browser's calculations and no longer valid no longer up to date and that isn't a problem because the browser will just like recompute everything once it needs to update the actual rendering however if we call get founding client rect offset width or inner text the browser has to recalculate the file in the layout synchronously in order to give you the correct answer yeah so if you're asking for say the width of an element the browser has to figure out what you changed what the impact of that changes and then and only then can it give you the answer mm right and you know and all of the correct answers caused that to happen the probably the most surprising one is inner text because they an inner text actually has a layout dependency because it will won't give you the text of the inner elements that are displaying on and it also have some dependencies on online layout as well the problem here is mostly that these are all fairly heavyweight options they trigger both style calculations and layouts synchronously not per frame like in the previous example admittedly yeah and to play our calculations they scale with the Dom size that you risk pushing the start of your animation back which may make you fat feel likely you press a button you have to wait a few milliseconds before it goes back up now what we'd probably like to do is avoid calculating layout if at all possible which we can do is get computed style and you might have noticed that that wasn't one of the correct answers and that's because things are ever so slightly nuanced here because you might think get computed style captures the styles but know when it's called you might think that but not in fact it's not now because if you update the self before checking a property of the computed style object you'll get the second value and not the first and this blew my mind when you first showed me Italy the Styles aren't computed when you call the big get computed style function no they are computed when you access one of the properties of the object it returns so to work around this weirdness you call get computed style but also access one of the properties such as AZ transform and in the question technically we didn't actually access the transform property so all that said we overlooked one option which is using web animations and this is a nice imperative API and quite kind of jQuery like it'll do these kind of animations and it'll make use of compositing and everything the problem is web animations not great support out there it's basically just partial support in Chrome and Firefox and because it's in Chrome it means you get it like opera and Samsung internet etc but not in edge or Safari yeah so while there's an option for compact you're probably going to use get computed style for the time being okay so with both network and rendering people hopefully fairly happy but it isn't over yet oh no let's bring on the quickfire round by which we mean the silly questions that didn't really fit into the narrative of the talk and rematch so so we just want to write back okay so our first one of these ready let's go then we say quickfire we mean quick yeah it happens with zoom in height 300 pixels max height 200 pixels will it be 200 pixels tall will it be 300 pixels tall would it be zero pixels tall it crushed all browsers in a three-mile radius get an answer in quickly agreed well let's see how he was voting so we got one answers particularly popular hit submit take a guess because we're closing the question in three two one it is perfect we are now reason okay 200 pixels tall is the most popular answer that now according to the CSS spec okay here we go 300 the algorithm for height is figure out the tentative height and then if it's bigger than max height reduce it and if it's smaller than min height grow it I listen no idea what you just said yeah I've been fighting means I'm in height always wins okay fair enough amigos move on to another quickfire question oh this is my favorite after running this code which of the following is set to 1 and you've got an in-state array and we're setting a bunch of items metal 1 so suggestion here is that possibly maybe one or more of them is not going to work so select all that apply and get an answer in quickly big banks of the 18 whoo yeah this one we didn't know anything about it they'll do our for judging by the spread of answers there you know nothing about it so it's fine we're all friends here Yeah right we're locking it in and free to one there we go okay so who knows the correct answers though here they come from the server which is getting slow okay there we go correct answer nor point nine and one point not why yeah the reason was pretty weird though when you do this kind of thing when you assign like this with a string JavaScript need to decide if you're assigning to a property of the object or if you're standing to an index of the array now numbers are treated as array index assignments but so are strings if the string is a canonical string representation of a number yeah and when I first heard that I had no idea what Emma meant I still don't but I can follow her example what's this about okay okay point nine is not a canonical representation because the canonical representation is not 0.9 yeah this means the browser's going to treat it is a property assignment and that works fine same goes to 1.0 because the canonical representation is just 1 however 1.1 is the canonical representation of 1.1 so j/s treats it as a number and this means it tries to assign to the 1.1 item of the array but array indexes need to be integers so it's just silently ignored yeah why would it throw an error so the same goes for 1.2 same kind of deal right second last question so we are going to move on if my Clicquot continues to work there we go that makes me happier devices at the ready here we go how many elements are created ah ok so just I need innerhtml then plus equals plus equals plus equals how many elements does it create one for 10 or 16 literally how the building's quick-fire so get your answers in quickly we've got two strong answers and two people are you know pretty dismissive or guess if you haven't guessed already we are closing in three two one and we are closed so we're saying four and one the most popular answers of the room okay the correct answer of course is 10 Hey yay so why is this then okay so when you use plus equals it is equivalent it's just shorthand for reading the value and adding more to it it's a read and a write so if we expand this out further we create one two three four five six seven eight nine ten elements there you go so there you go if you really want to append a string to an element you can use insert adjacent HTML which is ancient and apparently brings I get bounding client rec in connecting Internet Explorer for for that API this will actually create four elements so we're going to do the final question of the whole quiz now suffice might be my favorite this one even this chunk of HTML which resources are requested so what we got here we've got it we've got an image of a source excellent we've got scripted with sauce another link rel stylesheet' link well preload okay so why do collect many select all that you think apply yet one two three or four ah let's see how the answers are coming interesting a real spread here how confident I guess Wow did anyone else see that I think that we there is a large amount of bird mess has just landed right in front of us that isn't the burden are happy with a quiz yeah yes someone didn't take the right answer in the last round fair enough okay we are going to I'm going to start back a little bit yeah and we're going to close the question in three two one there it goes okay so sort of spread spread there of the answers ooh which one's actually a little bit early request oh good it is one just one and this question is really evil and I don't know how many people might have have spotted what was going on here yeah so even though this is an ima GE image the browser does treat it as an IMG image so yes that was going to download this script uses source I saw you are theay rather than SRC so the browser to think North it just ignores it doesn't download don't like that one these use the correct attributes but have you noticed that oh yeah that code highlight has basically all but gone yeah why has it change well in HTML script elements cannot be self closing that doesn't work you have to close scripts with a proper clothes and rip tag Oh so the browser parses those two linked elements of JavaScript and that's going to throw an error they definitely don't download sorry that was horrible sorry not sorry completely not sorry well so this is it the moment we have been waiting almost 45 minutes for yeah who are the winners of the mousepad let's find out oh I wonder if I do bad to Mary excellent but all three of you have one Mouse class a big round of applause to our free where's so after the session couldn't find us I come to the front with your phone and prove that you did actually get that school yes and big what quiz calm now shows a set of Link's describing a detail behind some of the questions that we've asked today and with that it's been a pleasure and a blast thank you so much for playing along thank you Chiz okay [Applause] [Music] [Music] 